; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\Distribute\SpeedTreeWrapper.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA	; CSpeedTreeWrapper::ms_bSelfShadowOn
PUBLIC	?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA	; CSpeedTreeWrapper::ms_dwBranchVertexShader
PUBLIC	?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA	; CSpeedTreeWrapper::ms_dwLeafVertexShader
PUBLIC	__Avx2WmemEnabledWeakValue
_BSS	SEGMENT
?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA DD 01H DUP (?) ; CSpeedTreeWrapper::ms_dwBranchVertexShader
?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA DD 01H DUP (?) ; CSpeedTreeWrapper::ms_dwLeafVertexShader
_BSS	ENDS
;	COMDAT __Avx2WmemEnabledWeakValue
_BSS	SEGMENT
__Avx2WmemEnabledWeakValue DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA DB 01H	; CSpeedTreeWrapper::ms_bSelfShadowOn
_DATA	ENDS
CONST	SEGMENT
?g_achSimpleVertexProgram@@3QBDB DB 'vs.1.1', 0aH, 'mov', 09H, 09H, 'oT0.'
	DB	'xy,', 09H, 09H, 'v7', 0aH, 'mov', 09H, 09H, 'oT1.xy,', 09H, 09H
	DB	'v8', 0aH, 'mov', 09H, 09H, 'a0.x,', 09H, 'v9.x', 0aH, 'm4x4', 09H
	DB	09H, 'r1,', 09H, 09H, 09H, 'v0,', 09H, 09H, 09H, 'c[54+a0.x]', 0aH
	DB	'sub', 09H, 09H, 'r2,', 09H, 09H, 09H, 'r1,', 09H, 09H, 09H, 'v'
	DB	'0', 0aH, 'mov', 09H, 09H, 'r3.x,', 09H, 09H, 'v9.y', 0aH, 'ma'
	DB	'd', 09H, 09H, 'r1,', 09H, 09H, 09H, 'r2,', 09H, 09H, 09H, 'r3'
	DB	'.x,', 09H, 09H, 'v0', 0aH, 'add', 09H, 09H, 'r2,', 09H, 09H, 09H
	DB	'c[52],', 09H, 09H, 'r1', 0aH, 'm4x4', 09H, 09H, 'oPos,', 09H, 09H
	DB	'r2,', 09H, 09H, 09H, 'c[0]', 0aH, 'dp4', 09H, 09H, 'r1,', 09H
	DB	09H, 09H, 'r2,', 09H, 09H, 09H, 'c[2]', 0aH, 'sub', 09H, 09H, 'r'
	DB	'2.x,', 09H, 09H, 'c[85].y,', 09H, 'r1.z', 0aH, 'mul', 09H, 09H
	DB	'oFog,', 09H, 09H, 'r2.x,', 09H, 09H, 'c[85].z', 0aH, 'mov', 09H
	DB	09H, 'oD0,', 09H, 09H, 'v5', 0aH, 00H	; g_achSimpleVertexProgram
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0CSpeedTreeMaterial@@QAE@XZ			; CSpeedTreeMaterial::CSpeedTreeMaterial
PUBLIC	?Set@CSpeedTreeMaterial@@QAEXPBM@Z		; CSpeedTreeMaterial::Set
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?OnClear@CGraphicObjectInstance@@UAEXXZ		; CGraphicObjectInstance::OnClear
PUBLIC	?OnUpdate@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnUpdate
PUBLIC	?OnDeform@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnDeform
PUBLIC	?GetType@CSpeedTreeWrapper@@EBEHXZ		; CSpeedTreeWrapper::GetType
PUBLIC	?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ; CSpeedTreeWrapper::OnUpdateCollisionData
PUBLIC	?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z ; CSpeedTreeWrapper::OnUpdateHeighInstance
PUBLIC	?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z ; CSpeedTreeWrapper::OnGetObjectHeight
PUBLIC	?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z ; CSpeedTreeWrapper::GetBoundingSphere
PUBLIC	?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z	; CSpeedTreeWrapper::SetPosition
PUBLIC	?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::CalculateBBox
PUBLIC	?OnRender@CSpeedTreeWrapper@@UAEXXZ		; CSpeedTreeWrapper::OnRender
PUBLIC	?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnBlendRender
PUBLIC	?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnRenderToShadowMap
PUBLIC	?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnRenderShadow
PUBLIC	?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnRenderPCBlocker
PUBLIC	??0CSpeedTreeWrapper@@QAE@XZ			; CSpeedTreeWrapper::CSpeedTreeWrapper
PUBLIC	??1CSpeedTreeWrapper@@UAE@XZ			; CSpeedTreeWrapper::~CSpeedTreeWrapper
PUBLIC	?GetPosition@CSpeedTreeWrapper@@QAEPBMXZ	; CSpeedTreeWrapper::GetPosition
PUBLIC	?SetVertexShaders@CSpeedTreeWrapper@@SAXKK@Z	; CSpeedTreeWrapper::SetVertexShaders
PUBLIC	?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z	; CSpeedTreeWrapper::LoadTree
PUBLIC	?GetTreeSize@CSpeedTreeWrapper@@QAEXAAM0@Z	; CSpeedTreeWrapper::GetTreeSize
PUBLIC	?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ ; CSpeedTreeWrapper::GetCollisionObjectCount
PUBLIC	?GetCollisionObject@CSpeedTreeWrapper@@QAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z ; CSpeedTreeWrapper::GetCollisionObject
PUBLIC	?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupBranchForTreeType
PUBLIC	?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupFrondForTreeType
PUBLIC	?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ	; CSpeedTreeWrapper::SetupLeafForTreeType
PUBLIC	?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ	; CSpeedTreeWrapper::EndLeafForTreeType
PUBLIC	?RenderBranches@CSpeedTreeWrapper@@QBEXXZ	; CSpeedTreeWrapper::RenderBranches
PUBLIC	?RenderFronds@CSpeedTreeWrapper@@QBEXXZ		; CSpeedTreeWrapper::RenderFronds
PUBLIC	?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ		; CSpeedTreeWrapper::RenderLeaves
PUBLIC	?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ	; CSpeedTreeWrapper::RenderBillboards
PUBLIC	?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ; CSpeedTreeWrapper::GetInstances
PUBLIC	?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ	; CSpeedTreeWrapper::MakeInstance
PUBLIC	?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z	; CSpeedTreeWrapper::DeleteInstance
PUBLIC	?Advance@CSpeedTreeWrapper@@QAEXXZ		; CSpeedTreeWrapper::Advance
PUBLIC	?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ	; CSpeedTreeWrapper::CleanUpMemory
PUBLIC	?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ		; CSpeedTreeWrapper::SetupBuffers
PUBLIC	?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ	; CSpeedTreeWrapper::SetupBranchBuffers
PUBLIC	?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ	; CSpeedTreeWrapper::SetupFrondBuffers
PUBLIC	?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ	; CSpeedTreeWrapper::SetupLeafBuffers
PUBLIC	?PositionTree@CSpeedTreeWrapper@@ABEXXZ		; CSpeedTreeWrapper::PositionTree
PUBLIC	?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
PUBLIC	?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z ; CSpeedTreeWrapper::SetShaderConstants
PUBLIC	??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
PUBLIC	?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
PUBLIC	??_GCSpeedTreeWrapper@@UAEPAXI@Z		; CSpeedTreeWrapper::`scalar deleting destructor'
PUBLIC	?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
PUBLIC	?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
PUBLIC	??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
PUBLIC	??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z ; std::_Find_last_vectorized<char const ,char>
PUBLIC	??$_Copy_memmove_tail@PAPAVCSpeedTreeWrapper@@@std@@YAPAPAVCSpeedTreeWrapper@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CSpeedTreeWrapper * *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7CSpeedTreeWrapper@@6B@			; CSpeedTreeWrapper::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@	; `string'
PUBLIC	??_C@_04LIKELABK@?4dds@				; `string'
PUBLIC	??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@ ; `string'
PUBLIC	??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R4CSpeedTreeWrapper@@6B@			; CSpeedTreeWrapper::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSpeedTreeWrapper@@@8			; CSpeedTreeWrapper `RTTI Type Descriptor'
PUBLIC	??_R3CSpeedTreeWrapper@@8			; CSpeedTreeWrapper::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSpeedTreeWrapper@@8			; CSpeedTreeWrapper::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSpeedTreeWrapper@@8		; CSpeedTreeWrapper::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicObjectInstance@@8		; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicObjectInstance@@@8		; CGraphicObjectInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f666666
PUBLIC	__real@41100000
PUBLIC	__real@447a0000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	??0SGeometry@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::SGeometry::SGeometry
EXTRN	??1SGeometry@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::SGeometry::~SGeometry
EXTRN	??0STextures@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::STextures::STextures
EXTRN	??1STextures@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::STextures::~STextures
EXTRN	??0CSpeedTreeRT@@QAE@XZ:PROC			; CSpeedTreeRT::CSpeedTreeRT
EXTRN	??1CSpeedTreeRT@@QAE@XZ:PROC			; CSpeedTreeRT::~CSpeedTreeRT
EXTRN	??2CSpeedTreeRT@@SAPAXI@Z:PROC			; CSpeedTreeRT::operator new
EXTRN	??3CSpeedTreeRT@@SAXPAX@Z:PROC			; CSpeedTreeRT::operator delete
EXTRN	?Compute@CSpeedTreeRT@@QAE_NPBMI_N@Z:PROC	; CSpeedTreeRT::Compute
EXTRN	?MakeInstance@CSpeedTreeRT@@QAEPAV1@XZ:PROC	; CSpeedTreeRT::MakeInstance
EXTRN	?DeleteTransientData@CSpeedTreeRT@@QAEXXZ:PROC	; CSpeedTreeRT::DeleteTransientData
EXTRN	?LoadTree@CSpeedTreeRT@@QAE_NPBD@Z:PROC		; CSpeedTreeRT::LoadTree
EXTRN	?LoadTree@CSpeedTreeRT@@QAE_NPBEI@Z:PROC	; CSpeedTreeRT::LoadTree
EXTRN	?GetTreeSize@CSpeedTreeRT@@QBEXAAM0@Z:PROC	; CSpeedTreeRT::GetTreeSize
EXTRN	?SetTreeSize@CSpeedTreeRT@@QAEXMM@Z:PROC	; CSpeedTreeRT::SetTreeSize
EXTRN	?GetTreePosition@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetTreePosition
EXTRN	?SetTreePosition@CSpeedTreeRT@@QAEXMMM@Z:PROC	; CSpeedTreeRT::SetTreePosition
EXTRN	?SetBranchLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z:PROC ; CSpeedTreeRT::SetBranchLightingMethod
EXTRN	?SetLeafLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z:PROC ; CSpeedTreeRT::SetLeafLightingMethod
EXTRN	?SetFrondLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z:PROC ; CSpeedTreeRT::SetFrondLightingMethod
EXTRN	?GetLeafLightingAdjustment@CSpeedTreeRT@@QBEMXZ:PROC ; CSpeedTreeRT::GetLeafLightingAdjustment
EXTRN	?GetBranchMaterial@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetBranchMaterial
EXTRN	?GetLeafMaterial@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetLeafMaterial
EXTRN	?GetFrondMaterial@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetFrondMaterial
EXTRN	?SetLeafRockingState@CSpeedTreeRT@@QAEX_N@Z:PROC ; CSpeedTreeRT::SetLeafRockingState
EXTRN	?SetNumLeafRockingGroups@CSpeedTreeRT@@QAEXI@Z:PROC ; CSpeedTreeRT::SetNumLeafRockingGroups
EXTRN	?SetLeafWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z:PROC ; CSpeedTreeRT::SetLeafWindMethod
EXTRN	?SetBranchWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z:PROC ; CSpeedTreeRT::SetBranchWindMethod
EXTRN	?SetFrondWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z:PROC ; CSpeedTreeRT::SetFrondWindMethod
EXTRN	?SetWindStrength@CSpeedTreeRT@@QAEMMMM@Z:PROC	; CSpeedTreeRT::SetWindStrength
EXTRN	?SetLocalMatrices@CSpeedTreeRT@@QAEXII@Z:PROC	; CSpeedTreeRT::SetLocalMatrices
EXTRN	?ComputeLodLevel@CSpeedTreeRT@@QAEXXZ:PROC	; CSpeedTreeRT::ComputeLodLevel
EXTRN	?SetLodLevel@CSpeedTreeRT@@QAEXM@Z:PROC		; CSpeedTreeRT::SetLodLevel
EXTRN	?SetDropToBillboard@CSpeedTreeRT@@SAX_N@Z:PROC	; CSpeedTreeRT::SetDropToBillboard
EXTRN	?SetLodLimits@CSpeedTreeRT@@QAEXMM@Z:PROC	; CSpeedTreeRT::SetLodLimits
EXTRN	?GetNumBranchLodLevels@CSpeedTreeRT@@QBEGXZ:PROC ; CSpeedTreeRT::GetNumBranchLodLevels
EXTRN	?GetNumLeafLodLevels@CSpeedTreeRT@@QBEGXZ:PROC	; CSpeedTreeRT::GetNumLeafLodLevels
EXTRN	?GetNumFrondLodLevels@CSpeedTreeRT@@QBEGXZ:PROC	; CSpeedTreeRT::GetNumFrondLodLevels
EXTRN	?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z:PROC ; CSpeedTreeRT::GetGeometry
EXTRN	?GetTextures@CSpeedTreeRT@@QBEXAAUSTextures@1@@Z:PROC ; CSpeedTreeRT::GetTextures
EXTRN	?SetTextureFlip@CSpeedTreeRT@@SAX_N@Z:PROC	; CSpeedTreeRT::SetTextureFlip
EXTRN	?GetCurrentError@CSpeedTreeRT@@SAPBDXZ:PROC	; CSpeedTreeRT::GetCurrentError
EXTRN	?GetBoundingBox@CSpeedTreeRT@@QBEXPAM@Z:PROC	; CSpeedTreeRT::GetBoundingBox
EXTRN	?GetCollisionObjectCount@CSpeedTreeRT@@QAEIXZ:PROC ; CSpeedTreeRT::GetCollisionObjectCount
EXTRN	?GetCollisionObject@CSpeedTreeRT@@QAEXIAAW4ECollisionObjectType@1@PAM1@Z:PROC ; CSpeedTreeRT::GetCollisionObject
EXTRN	_D3DXVec4Transform@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	___std_find_last_trivial_1@12:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CGraphicObjectInstance@@QAE@XZ:PROC		; CGraphicObjectInstance::CGraphicObjectInstance
EXTRN	??1CGraphicObjectInstance@@UAE@XZ:PROC		; CGraphicObjectInstance::~CGraphicObjectInstance
EXTRN	?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z:PROC ; CGraphicObjectInstance::SetPosition
EXTRN	?Clear@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Clear
EXTRN	?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ:PROC ; CGraphicObjectInstance::GetTransform
EXTRN	?OnInitialize@CGraphicObjectInstance@@UAEXXZ:PROC ; CGraphicObjectInstance::OnInitialize
EXTRN	?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z:PROC ; CGraphicObjectInstance::AddCollision
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?IsEmpty@CGraphicImageInstance@@QBE_NXZ:PROC	; CGraphicImageInstance::IsEmpty
EXTRN	?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTextureReference
EXTRN	?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ:PROC ; CGraphicImageInstance::GetGraphicImagePointer
EXTRN	??_ECSpeedTreeWrapper@@UAEPAXI@Z:PROC		; CSpeedTreeWrapper::`vector deleting destructor'
EXTRN	?UpdateSystem@CSpeedTreeForest@@QAEXM@Z:PROC	; CSpeedTreeForest::UpdateSystem
EXTRN	?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z:PROC ; CSpeedTreeForestDirectX8::UpdateCompundMatrix
EXTRN	?ELTimer_GetMSec@@YAKXZ:PROC			; ELTimer_GetMSec
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z:PROC ; CStateManager::SetVertexShaderConstant
EXTRN	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z:PROC ; CStateManager::SetStreamSource
EXTRN	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z:PROC ; CStateManager::SetIndices
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::GetRenderState
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matView
EXTRN	?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matProj
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_faceCount@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_faceCount
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A DD 01H DUP (?) ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R2CGraphicObjectInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8 ; CGraphicObjectInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R3CGraphicObjectInstance@@8 DD 00H			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicObjectInstance@@@8
data$rs	SEGMENT
??_R0?AVCGraphicObjectInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicObjectInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicObjectInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicObjectInstance@@8 DD FLAT:??_R0?AVCGraphicObjectInstance@@@8 ; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSpeedTreeWrapper@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSpeedTreeWrapper@@8 DD FLAT:??_R0?AVCSpeedTreeWrapper@@@8 ; CSpeedTreeWrapper::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSpeedTreeWrapper@@8
rdata$r	ENDS
;	COMDAT ??_R2CSpeedTreeWrapper@@8
rdata$r	SEGMENT
??_R2CSpeedTreeWrapper@@8 DD FLAT:??_R1A@?0A@EA@CSpeedTreeWrapper@@8 ; CSpeedTreeWrapper::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CSpeedTreeWrapper@@8
rdata$r	SEGMENT
??_R3CSpeedTreeWrapper@@8 DD 00H			; CSpeedTreeWrapper::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CSpeedTreeWrapper@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSpeedTreeWrapper@@@8
data$rs	SEGMENT
??_R0?AVCSpeedTreeWrapper@@@8 DD FLAT:??_7type_info@@6B@ ; CSpeedTreeWrapper `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSpeedTreeWrapper@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSpeedTreeWrapper@@6B@
rdata$r	SEGMENT
??_R4CSpeedTreeWrapper@@6B@ DD 00H			; CSpeedTreeWrapper::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSpeedTreeWrapper@@@8
	DD	FLAT:??_R3CSpeedTreeWrapper@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@ DB 'SpeedTreeRT Error: '
	DB	'%s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@
CONST	SEGMENT
??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@ DB 0aH, 'Fatal '
	DB	'Error, cannot compute tree [%s]', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LIKELABK@?4dds@
CONST	SEGMENT
??_C@_04LIKELABK@?4dds@ DB '.dds', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@
CONST	SEGMENT
??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@ DB 'SpeedTreeRT Error: %s'
	DB	00H						; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+3
?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA DD 0242H		; D3DFVF_SPEEDTREE_BRANCH_VERTEX
?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA DD 0142H		; D3DFVF_SPEEDTREE_LEAF_VERTEX
_DATA	ENDS
;	COMDAT ??_7CSpeedTreeWrapper@@6B@
CONST	SEGMENT
??_7CSpeedTreeWrapper@@6B@ DD FLAT:??_R4CSpeedTreeWrapper@@6B@ ; CSpeedTreeWrapper::`vftable'
	DD	FLAT:??_ECSpeedTreeWrapper@@UAEPAXI@Z
	DD	FLAT:?GetType@CSpeedTreeWrapper@@EBEHXZ
	DD	FLAT:?OnInitialize@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z
	DD	FLAT:?OnRender@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnClear@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdate@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnDeform@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
	DD	FLAT:?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z
	DD	FLAT:?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z
	DD	FLAT:?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z
	DD	FLAT:?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ$0
__ehfuncinfo$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ$0
__ehfuncinfo$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z DD 019930522H
	DD	011H
	DD	FLAT:__unwindtable$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$6
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$11
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$16
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSpeedTreeWrapper@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CSpeedTreeWrapper@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CSpeedTreeWrapper@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CSpeedTreeWrapper@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$5
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCSpeedTreeWrapper@@@std@@YAPAPAVCSpeedTreeWrapper@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCSpeedTreeWrapper@@@std@@YAPAPAVCSpeedTreeWrapper@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CSpeedTreeWrapper * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCSpeedTreeWrapper@@@std@@YAPAPAVCSpeedTreeWrapper@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CSpeedTreeWrapper * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 1
??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z PROC	; std::_Find_last_vectorized<char const ,char>, COMDAT

; 226  : _Ty* _Find_last_vectorized(_Ty* const _First, _Ty* const _Last, const _TVal _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 227  :     if constexpr (is_pointer_v<_TVal> || is_null_pointer_v<_TVal>) {
; 228  : #ifdef _WIN64
; 229  :         return const_cast<_Ty*>(
; 230  :             static_cast<const _Ty*>(::__std_find_last_trivial_8(_First, _Last, reinterpret_cast<uint64_t>(_Val))));
; 231  : #else
; 232  :         return const_cast<_Ty*>(
; 233  :             static_cast<const _Ty*>(::__std_find_last_trivial_4(_First, _Last, reinterpret_cast<uint32_t>(_Val))));
; 234  : #endif
; 235  :     } else if constexpr (sizeof(_Ty) == 1) {
; 236  :         return const_cast<_Ty*>(

  00003	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ___std_find_last_trivial_1@12

; 237  :             static_cast<const _Ty*>(::__std_find_last_trivial_1(_First, _Last, static_cast<uint8_t>(_Val))));
; 238  :     } else if constexpr (sizeof(_Ty) == 2) {
; 239  :         return const_cast<_Ty*>(
; 240  :             static_cast<const _Ty*>(::__std_find_last_trivial_2(_First, _Last, static_cast<uint16_t>(_Val))));
; 241  :     } else if constexpr (sizeof(_Ty) == 4) {
; 242  :         return const_cast<_Ty*>(
; 243  :             static_cast<const _Ty*>(::__std_find_last_trivial_4(_First, _Last, static_cast<uint32_t>(_Val))));
; 244  :     } else if constexpr (sizeof(_Ty) == 8) {
; 245  :         return const_cast<_Ty*>(
; 246  :             static_cast<const _Ty*>(::__std_find_last_trivial_8(_First, _Last, static_cast<uint64_t>(_Val))));
; 247  :     } else {
; 248  :         _STL_INTERNAL_STATIC_ASSERT(false); // unexpected size
; 249  :     }
; 250  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z ENDP	; std::_Find_last_vectorized<char const ,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCSpeedTreeWrapper@@@std@@YAPAPAVCSpeedTreeWrapper@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CSpeedTreeWrapper * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\VertexShaders.h
;	COMDAT ?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_pDx$ = 8						; size = 4
?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z PROC	; LoadLeafShader, COMDAT

; 277  : 	DWORD dwShader = D3DFVF_SPEEDTREE_LEAF_VERTEX;
; 278  : 
; 279  : 	#if defined WRAPPER_USE_GPU_LEAF_PLACEMENT || defined WRAPPER_USE_GPU_WIND
; 280  : 
; 281  : 		// leaf shader declaration
; 282  : 		DWORD pLeafShaderDecl[ ] =
; 283  : 		{
; 284  : 				D3DVSD_STREAM(0),
; 285  : 				D3DVSD_REG(D3DVSDE_POSITION,        D3DVSDT_FLOAT3),
; 286  : 			#ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 287  : 				D3DVSD_REG(D3DVSDE_NORMAL,			D3DVSDT_FLOAT3),
; 288  : 			#else
; 289  : 				D3DVSD_REG(D3DVSDE_DIFFUSE,			D3DVSDT_D3DCOLOR),
; 290  : 			#endif
; 291  : 				D3DVSD_REG(D3DVSDE_TEXCOORD0,		D3DVSDT_FLOAT2),
; 292  : 				D3DVSD_REG(D3DVSDE_TEXCOORD2,		D3DVSDT_FLOAT4),
; 293  : 				D3DVSD_END( )
; 294  : 		};
; 295  : 
; 296  : 		// assemble shader
; 297  : 		LPD3DXBUFFER pCode, pError;
; 298  : 
; 299  : 		if (D3DXAssembleShader(g_achLeafVertexProgram, sizeof(g_achLeafVertexProgram) - 1, 0, NULL, &pCode, &pError) == D3D_OK)
; 300  : 		{
; 301  : 			if (pDx->CreateVertexShader(pLeafShaderDecl, (DWORD*) pCode->GetBufferPointer( ), &dwShader, 0) != D3D_OK)
; 302  : 			{
; 303  : 				Tracef("Failed to create leaf vertex shader.");
; 304  : 				/*
; 305  : 				char szError[1024];
; 306  : 				sprintf(szError, "Failed to create leaf vertex shader.");
; 307  : 				MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 308  : 				*/
; 309  : 			}
; 310  : 		}
; 311  : 		else
; 312  : 		{
; 313  : 			Tracef("Failed to assemble leaf vertex shader. The error reported is [ %s ].\n", pError->GetBufferPointer( ));
; 314  : 			/*
; 315  : 			char szError[1024];
; 316  : 			sprintf(szError, "Failed to assemble leaf vertex shader. The error reported is [ %s ].\n", pError->GetBufferPointer( ));
; 317  : 			MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 318  : 			*/
; 319  : 		}
; 320  : 
; 321  : 		if (pCode)
; 322  :     		pCode->Release( );
; 323  : 
; 324  : 	#else
; 325  : 
; 326  : 		dwShader = D3DFVF_SPEEDTREE_LEAF_VERTEX;
; 327  : 
; 328  : 	#endif
; 329  : 
; 330  : 	return dwShader;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA

; 331  : }

  00005	c3		 ret	 0
?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z ENDP	; LoadLeafShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\VertexShaders.h
;	COMDAT ?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_pDx$ = 8						; size = 4
?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z PROC	; LoadBranchShader, COMDAT

; 131  : 	#ifndef WRAPPER_USE_GPU_WIND
; 132  : 		return D3DFVF_SPEEDTREE_BRANCH_VERTEX;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA

; 133  : 	#endif
; 134  : 
; 135  : 	// branch shader declaration
; 136  :     DWORD pBranchShaderDecl[] =
; 137  :     {
; 138  : 			D3DVSD_STREAM(0),
; 139  : 			D3DVSD_REG(D3DVSDE_POSITION,        D3DVSDT_FLOAT3),
; 140  : 		#ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 141  : 			D3DVSD_REG(D3DVSDE_NORMAL,			D3DVSDT_FLOAT3),
; 142  : 		#else
; 143  : 			D3DVSD_REG(D3DVSDE_DIFFUSE,			D3DVSDT_D3DCOLOR),
; 144  : 		#endif
; 145  : 			D3DVSD_REG(D3DVSDE_TEXCOORD0,		D3DVSDT_FLOAT2),
; 146  : 		#ifdef WRAPPER_RENDER_SELF_SHADOWS
; 147  : 			D3DVSD_REG(D3DVSDE_TEXCOORD1,		D3DVSDT_FLOAT2),
; 148  : 		#endif
; 149  : 		#ifdef WRAPPER_USE_GPU_WIND
; 150  : 			D3DVSD_REG(D3DVSDE_TEXCOORD2,		D3DVSDT_FLOAT2),
; 151  : 		#endif
; 152  : 			D3DVSD_END( )
; 153  :     };
; 154  : 
; 155  :     // assemble shader
; 156  : 	DWORD dwShader;
; 157  : 	LPD3DXBUFFER pCode, pError;
; 158  : 
; 159  :     if (D3DXAssembleShader(g_achSimpleVertexProgram, sizeof(g_achSimpleVertexProgram) - 1, 0, NULL, &pCode, &pError) == D3D_OK)
; 160  : 	{
; 161  : 		if (pDx->CreateVertexShader(pBranchShaderDecl, (DWORD*) pCode->GetBufferPointer( ), &dwShader, 0) != D3D_OK)
; 162  : 		{
; 163  : 			char szError[1024];
; 164  : 			sprintf(szError, "Failed to create branch vertex shader.");
; 165  : 			MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 166  : 		}
; 167  : 	}
; 168  : 	else
; 169  :     {
; 170  :         char szError[1024];
; 171  : 	    sprintf(szError, "Failed to assemble branch vertex shader.\nThe error reported is [ %s ].\n", pError->GetBufferPointer( ));
; 172  : 	    MessageBox(NULL, szError, "Vertex Shader Error", MB_ICONSTOP);
; 173  :     }
; 174  : 
; 175  : 	if (pCode)
; 176  :     	pCode->Release();
; 177  : 
; 178  : 	return dwShader;
; 179  : }

  00005	c3		 ret	 0
?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z ENDP	; LoadBranchShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
;	COMDAT ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
__Result$1$ = -8					; size = 4
tv678 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
__Count$1$ = 12						; size = 4
tv680 = 12						; size = 4
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::NoExtension, COMDAT

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00009	8b 7d 0c	 mov	 edi, DWORD PTR _str$[ebp]
  0000c	8b d7		 mov	 edx, edi

; 434  :         return _Myres > _Small_string_capacity;

  0000e	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH
  00012	8d 5f 14	 lea	 ebx, DWORD PTR [edi+20]

; 425  :         const value_type* _Result = _Bx._Buf;

  00015	89 7d f8	 mov	 DWORD PTR __Result$1$[ebp], edi

; 434  :         return _Myres > _Small_string_capacity;

  00018	89 5d fc	 mov	 DWORD PTR tv678[ebp], ebx

; 426  :         if (_Large_mode_engaged()) {

  0001b	76 05		 jbe	 SHORT $LN128@NoExtensio

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 17		 mov	 edx, DWORD PTR [edi]
  0001f	89 55 f8	 mov	 DWORD PTR __Result$1$[ebp], edx
$LN128@NoExtensio:

; 2704 :         return static_cast<size_type>(

  00022	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00025	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00028	89 4d 0c	 mov	 DWORD PTR tv680[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 723  :     if (_Hay_size == 0) { // no room for match

  0002b	85 c0		 test	 eax, eax
  0002d	74 66		 je	 SHORT $LN2@NoExtensio

; 724  :         return static_cast<size_t>(-1);
; 725  :     }
; 726  : 
; 727  :     const size_t _Actual_start_at = (_STD min)(_Start_at, _Hay_size - 1);

  0002f	48		 dec	 eax
  00030	83 c9 ff	 or	 ecx, -1
  00033	3b c1		 cmp	 eax, ecx

; 728  : 
; 729  : #if _USE_STD_VECTOR_ALGORITHMS
; 730  :     if constexpr (_Is_implementation_handled_char_traits<_Traits>) {
; 731  :         if (!_STD _Is_constant_evaluated()) {
; 732  :             const auto _End = _Haystack + _Actual_start_at + 1;
; 733  :             const auto _Ptr = _STD _Find_last_vectorized(_Haystack, _End, _Ch);

  00035	6a 2e		 push	 46			; 0000002eH
  00037	0f 42 c8	 cmovb	 ecx, eax
  0003a	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0003d	03 f2		 add	 esi, edx
  0003f	56		 push	 esi
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 ??$_Find_last_vectorized@$$CBDD@std@@YAPBDQBD0D@Z ; std::_Find_last_vectorized<char const ,char>
  00046	8b c8		 mov	 ecx, eax

; 734  : 
; 735  :             if (_Ptr != _End) {

  00048	89 5d fc	 mov	 DWORD PTR tv678[ebp], ebx
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	3b ce		 cmp	 ecx, esi
  00050	74 40		 je	 SHORT $LN130@NoExtensio

; 736  :                 return static_cast<size_t>(_Ptr - _Haystack);

  00052	2b 4d f8	 sub	 ecx, DWORD PTR __Result$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h

; 336  : 	if (string::npos != npos)

  00055	83 f9 ff	 cmp	 ecx, -1
  00058	74 38		 je	 SHORT $LN130@NoExtensio
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0005a	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0005d	0f 57 c0	 xorps	 xmm0, xmm0

; 450  :         if (_Mysize < _Off) {

  00060	8b 45 0c	 mov	 eax, DWORD PTR tv680[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00063	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00066	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0006d	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  00074	39 08		 cmp	 DWORD PTR [eax], ecx
  00076	0f 42 08	 cmovb	 ecx, DWORD PTR [eax]

; 434  :         return _Myres > _Small_string_capacity;

  00079	83 3b 0f	 cmp	 DWORD PTR [ebx], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0007c	76 02		 jbe	 SHORT $LN60@NoExtensio

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0007e	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN60@NoExtensio:

; 713  :         _Construct<_Construct_strategy::_From_ptr>(

  00080	51		 push	 ecx
  00081	57		 push	 edi
  00082	8b ce		 mov	 ecx, esi
  00084	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
  00089	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h

; 337  : 		return std::string(str, 0, npos);

  0008a	8b c6		 mov	 eax, esi

; 340  : }

  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
$LN130@NoExtensio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00092	8b 4d 0c	 mov	 ecx, DWORD PTR tv680[ebp]
$LN2@NoExtensio:
  00095	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00098	0f 57 c0	 xorps	 xmm0, xmm0

; 434  :         return _Myres > _Small_string_capacity;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR tv678[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0009e	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000a1	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000a8	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 434  :         return _Myres > _Small_string_capacity;

  000af	83 38 0f	 cmp	 DWORD PTR [eax], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  000b2	76 02		 jbe	 SHORT $LN83@NoExtensio

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000b4	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN83@NoExtensio:

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	89 45 0c	 mov	 DWORD PTR __Count$1$[ebp], eax

; 857  :         if (_Count > max_size()) {

  000bb	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000c0	0f 87 8f 00 00
	00		 ja	 $LN144@NoExtensio

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  000c6	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000c9	77 19		 ja	 SHORT $LN91@NoExtensio

; 866  :             _My_data._Mysize = _Count;

  000cb	89 43 10	 mov	 DWORD PTR [ebx+16], eax
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h

; 339  : 	return str;

  000ce	8b c3		 mov	 eax, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000d0	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d7	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  000da	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h

; 340  : }

  000db	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000dc	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h

; 340  : }

  000df	5b		 pop	 ebx
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN91@NoExtensio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000e4	8b f0		 mov	 esi, eax
  000e6	83 ce 0f	 or	 esi, 15			; 0000000fH
  000e9	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000ef	76 12		 jbe	 SHORT $LN97@NoExtensio

; 2944 :             return _Max;

  000f1	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  000f6	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00101	eb 2b		 jmp	 SHORT $LN142@NoExtensio
$LN97@NoExtensio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00103	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00108	3b f1		 cmp	 esi, ecx
  0010a	0f 42 f1	 cmovb	 esi, ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  0010d	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00110	85 c9		 test	 ecx, ecx
  00112	75 04		 jne	 SHORT $LN111@NoExtensio

; 228  :         return nullptr;

  00114	33 d2		 xor	 edx, edx
  00116	eb 1e		 jmp	 SHORT $LN110@NoExtensio
$LN111@NoExtensio:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00118	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011e	72 08		 jb	 SHORT $LN112@NoExtensio

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00120	51		 push	 ecx
  00121	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00126	eb 06		 jmp	 SHORT $LN142@NoExtensio
$LN112@NoExtensio:

; 136  :         return ::operator new(_Bytes);

  00128	51		 push	 ecx
  00129	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN142@NoExtensio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0012e	8b d0		 mov	 edx, eax
  00130	83 c4 04	 add	 esp, 4
  00133	8b 45 0c	 mov	 eax, DWORD PTR __Count$1$[ebp]
$LN110@NoExtensio:

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00136	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00139	89 13		 mov	 DWORD PTR [ebx], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0013b	51		 push	 ecx
  0013c	57		 push	 edi
  0013d	52		 push	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  0013e	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 892  :         _My_data._Myres  = _New_capacity;

  00141	89 73 14	 mov	 DWORD PTR [ebx+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00144	e8 00 00 00 00	 call	 _memcpy
  00149	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h

; 339  : 	return str;

  0014c	8b c3		 mov	 eax, ebx
  0014e	5f		 pop	 edi

; 340  : }

  0014f	5e		 pop	 esi
  00150	5b		 pop	 ebx
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
$LN144@NoExtensio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  00155	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN141@NoExtensio:
  0015a	cc		 int	 3
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::NoExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h
;	COMDAT ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -1036				; size = 4
___$ReturnUdt$GSCopy$1$ = -1032				; size = 4
_szPath$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::GetPath, COMDAT

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 04 00
	00		 sub	 esp, 1040		; 00000410H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]

; 304  : 	char szPath[1024];
; 305  : 	szPath[0] = '\0';
; 306  : 
; 307  : 	size_t nLength = str.length();

  0001b	8b 72 10	 mov	 esi, DWORD PTR [edx+16]
  0001e	89 bd f8 fb ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], edi
  00024	89 bd f4 fb ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], edi
  0002a	c6 85 fc fb ff
	ff 00		 mov	 BYTE PTR _szPath$[ebp], 0

; 308  : 
; 309  : 	if (nLength > 0)

  00031	85 f6		 test	 esi, esi
  00033	74 32		 je	 SHORT $LN3@GetPath

; 310  : 	{
; 311  : 		for (size_t i = nLength - 1; i > 0; i--)

  00035	83 c6 ff	 add	 esi, -1
  00038	74 2d		 je	 SHORT $LN3@GetPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0003a	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0003d	0f 1f 00	 npad	 3
$LL4@GetPath:

; 416  :         value_type* _Result = _Bx._Buf;

  00040	8b c2		 mov	 eax, edx

; 434  :         return _Myres > _Small_string_capacity;

  00042	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00045	76 02		 jbe	 SHORT $LN86@GetPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00047	8b 02		 mov	 eax, DWORD PTR [edx]
$LN86@GetPath:
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h

; 313  : 			if (str[i] == '/' || str[i] == '\\')

  00049	80 3c 30 2f	 cmp	 BYTE PTR [eax+esi], 47	; 0000002fH
  0004d	74 5f		 je	 SHORT $LN69@GetPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  0004f	8b c2		 mov	 eax, edx

; 434  :         return _Myres > _Small_string_capacity;

  00051	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00054	76 02		 jbe	 SHORT $LN85@GetPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00056	8b 02		 mov	 eax, DWORD PTR [edx]
$LN85@GetPath:
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h

; 313  : 			if (str[i] == '/' || str[i] == '\\')

  00058	80 3c 30 5c	 cmp	 BYTE PTR [eax+esi], 92	; 0000005cH
  0005c	74 50		 je	 SHORT $LN69@GetPath

; 319  : 			}
; 320  : 
; 321  : 			if (0 == i)

  0005e	85 f6		 test	 esi, esi
  00060	74 05		 je	 SHORT $LN3@GetPath

; 310  : 	{
; 311  : 		for (size_t i = nLength - 1; i > 0; i--)

  00062	83 ee 01	 sub	 esi, 1
  00065	75 d9		 jne	 SHORT $LL4@GetPath
$LN3@GetPath:
  00067	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0006a	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00070	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00073	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0007a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0007d	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
$LL87@GetPath:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00084	8a 01		 mov	 al, BYTE PTR [ecx]
  00086	41		 inc	 ecx
  00087	84 c0		 test	 al, al
  00089	75 f9		 jne	 SHORT $LL87@GetPath
  0008b	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008d	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  00093	51		 push	 ecx
  00094	50		 push	 eax
  00095	8b cf		 mov	 ecx, edi
  00097	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h

; 326  : }

  0009c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009f	8b c7		 mov	 eax, edi
  000a1	5f		 pop	 edi
  000a2	33 cd		 xor	 ecx, ebp
  000a4	5e		 pop	 esi
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN69@GetPath:
  000ae	53		 push	 ebx

; 315  : 				for (size_t j = 0; j < i + 1; j++)

  000af	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
  000b2	85 db		 test	 ebx, ebx
  000b4	74 35		 je	 SHORT $LN76@GetPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 417  :         if (_Large_mode_engaged()) {

  000b6	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  000bc	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000bf	76 0e		 jbe	 SHORT $LN73@GetPath
  000c1	53		 push	 ebx
  000c2	ff 32		 push	 DWORD PTR [edx]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _memcpy
  000ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cd	eb 1c		 jmp	 SHORT $LN76@GetPath
$LN73@GetPath:
; File C:\Marty 5.5\Src-Client\Client\eterBase\Filename.h

; 315  : 				for (size_t j = 0; j < i + 1; j++)

  000cf	33 ff		 xor	 edi, edi
  000d1	2b d0		 sub	 edx, eax
$LL74@GetPath:

; 316  : 					szPath[j] = str[j];

  000d3	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$[ebp]
  000d9	03 cf		 add	 ecx, edi
  000db	47		 inc	 edi
  000dc	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  000df	88 01		 mov	 BYTE PTR [ecx], al
  000e1	3b fb		 cmp	 edi, ebx
  000e3	72 ee		 jb	 SHORT $LL74@GetPath
  000e5	8b bd f8 fb ff
	ff		 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
$LN76@GetPath:

; 317  : 				szPath[i+1] = '\0';

  000eb	46		 inc	 esi
  000ec	5b		 pop	 ebx
  000ed	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  000f3	73 0d		 jae	 SHORT $LN15@GetPath
  000f5	c6 84 35 fc fb
	ff ff 00	 mov	 BYTE PTR _szPath$[ebp+esi], 0

; 318  : 				break;

  000fd	e9 65 ff ff ff	 jmp	 $LN3@GetPath
$LN15@GetPath:

; 317  : 				szPath[i+1] = '\0';

  00102	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN100@GetPath:
  00107	cc		 int	 3
?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::GetPath
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSpeedTreeWrapper@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSpeedTreeWrapper@@UAEPAXI@Z PROC			; CSpeedTreeWrapper::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSpeedTreeWrapper@@UAE@XZ ; CSpeedTreeWrapper::~CSpeedTreeWrapper
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 30 03 00 00	 push	 816			; 00000330H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSpeedTreeWrapper@@UAEPAXI@Z ENDP			; CSpeedTreeWrapper::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 820  :     }

  0004a	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00050	cc		 int	 3
??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z
_TEXT	SEGMENT
_afMaterial$ = -52					; size = 32
_afUsefulConstants$ = -20				; size = 16
__$ArrayPad$ = -4					; size = 4
_pMaterial$ = 8						; size = 4
?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z PROC	; CSpeedTreeWrapper::SetShaderConstants, COMDAT
; _this$ = ecx

; 1319 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1320 : 	const float afUsefulConstants[] =
; 1321 : 	{
; 1322 : 		m_pSpeedTree->GetLeafLightingAdjustment(), 0.0f, 0.0f, 0.0f,

  00010	8b 89 7c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+380]
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _pMaterial$[ebp]
  0001a	e8 00 00 00 00	 call	 ?GetLeafLightingAdjustment@CSpeedTreeRT@@QBEMXZ ; CSpeedTreeRT::GetLeafLightingAdjustment

; 1323 : 	};
; 1324 : 
; 1325 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_LeafLightingAdjustment, afUsefulConstants, 1);

  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00025	8d 45 ec	 lea	 eax, DWORD PTR _afUsefulConstants$[ebp]
  00028	6a 01		 push	 1
  0002a	50		 push	 eax
  0002b	6a 46		 push	 70			; 00000046H
  0002d	d9 5d ec	 fstp	 DWORD PTR _afUsefulConstants$[ebp]
  00030	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _afUsefulConstants$[ebp+4], 0
  00037	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _afUsefulConstants$[ebp+8], 0
  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _afUsefulConstants$[ebp+12], 0
  00045	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 1326 : 
; 1327 : 	const float afMaterial[] =
; 1328 : 	{
; 1329 : 		pMaterial[0], pMaterial[1], pMaterial[2], 1.0f,

  0004a	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]

; 1330 : 			pMaterial[3], pMaterial[4], pMaterial[5], 1.0f
; 1331 : 	};
; 1332 : 
; 1333 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_Material, afMaterial, 2);

  0004e	8d 45 cc	 lea	 eax, DWORD PTR _afMaterial$[ebp]
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00057	f3 0f 11 45 cc	 movss	 DWORD PTR _afMaterial$[ebp], xmm0
  0005c	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00061	f3 0f 11 45 d0	 movss	 DWORD PTR _afMaterial$[ebp+4], xmm0
  00066	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0006b	f3 0f 11 45 d4	 movss	 DWORD PTR _afMaterial$[ebp+8], xmm0
  00070	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00075	f3 0f 11 45 dc	 movss	 DWORD PTR _afMaterial$[ebp+16], xmm0
  0007a	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  0007f	6a 02		 push	 2
  00081	f3 0f 11 45 e0	 movss	 DWORD PTR _afMaterial$[ebp+20], xmm0
  00086	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  0008b	50		 push	 eax
  0008c	6a 4a		 push	 74			; 0000004aH
  0008e	c7 45 d8 00 00
	80 3f		 mov	 DWORD PTR _afMaterial$[ebp+12], 1065353216 ; 3f800000H
  00095	f3 0f 11 45 e4	 movss	 DWORD PTR _afMaterial$[ebp+24], xmm0
  0009a	c7 45 e8 00 00
	80 3f		 mov	 DWORD PTR _afMaterial$[ebp+28], 1065353216 ; 3f800000H
  000a1	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 1334 : }

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	33 cd		 xor	 ecx, ebp
  000ab	5e		 pop	 esi
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z ENDP	; CSpeedTreeWrapper::SetShaderConstants
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z
_TEXT	SEGMENT
_pFilename$ = 8						; size = 4
_rImage$ = 12						; size = 4
?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z PROC ; CSpeedTreeWrapper::LoadTexture, COMDAT

; 1303 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1304 : 	CResource * pResource = CResourceManager::Instance().GetResourcePointer(pFilename);

  00003	ff 75 08	 push	 DWORD PTR _pFilename$[ebp]
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0000c	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 1305 : 	rImage.SetImagePointer(static_cast<CGraphicImage *>(pResource));

  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _rImage$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 1306 : 
; 1307 : 	if (rImage.IsEmpty())

  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _rImage$[ebp]
  0001d	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  00022	84 c0		 test	 al, al
  00024	0f 94 c0	 sete	 al

; 1308 : 		return false;
; 1309 : 
; 1310 : 	//TraceError("SpeedTreeWrapper::LoadTexture: %s", pFilename);
; 1311 : 	return true;
; 1312 : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ENDP ; CSpeedTreeWrapper::LoadTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?PositionTree@CSpeedTreeWrapper@@ABEXXZ
_TEXT	SEGMENT
_vecConstant$ = -96					; size = 16
_vecPosition$$sroa$140$1$ = -80				; size = 4
_vecPosition$$sroa$312$1$ = -76				; size = 4
_vecPosition$$sroa$313$1$ = -72				; size = 4
_matTranslation$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
?PositionTree@CSpeedTreeWrapper@@ABEXXZ PROC		; CSpeedTreeWrapper::PositionTree, COMDAT
; _this$ = ecx

; 1284 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1285 : 	D3DXVECTOR3 vecPosition = m_pSpeedTree->GetTreePosition();

  00010	8b 89 7c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+380]
  00016	e8 00 00 00 00	 call	 ?GetTreePosition@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetTreePosition

; 1288 : 	D3DXMatrixTranslation(&matTranslation, vecPosition.x, vecPosition.y, vecPosition.z);

  0001b	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 166  :     z = pf[2];

  0001e	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  00023	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00028	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1288 : 	D3DXMatrixTranslation(&matTranslation, vecPosition.x, vecPosition.y, vecPosition.z);

  0002c	8d 45 bc	 lea	 eax, DWORD PTR _matTranslation$[ebp]
  0002f	f3 0f 11 5c 24
	08		 movss	 DWORD PTR [esp+8], xmm3
  00035	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  0003b	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00040	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 164  :     x = pf[0];

  00041	f3 0f 11 4d b8	 movss	 DWORD PTR _vecPosition$$sroa$313$1$[ebp], xmm1

; 165  :     y = pf[1];

  00046	f3 0f 11 55 b4	 movss	 DWORD PTR _vecPosition$$sroa$312$1$[ebp], xmm2

; 166  :     z = pf[2];

  0004b	f3 0f 11 5d b0	 movss	 DWORD PTR _vecPosition$$sroa$140$1$[ebp], xmm3

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00050	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+56], 0
  00057	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+52], 0
  0005e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+48], 0
  00065	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+44], 0
  0006c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+36], 0
  00073	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+32], 0
  0007a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+28], 0
  00081	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+24], 0
  00088	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+16], 0
  0008f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+12], 0
  00096	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+8], 0
  0009d	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+4], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000a4	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp+60], 1065353216 ; 3f800000H
  000ab	c7 45 e4 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp+40], 1065353216 ; 3f800000H
  000b2	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp+20], 1065353216 ; 3f800000H
  000b9	c7 45 bc 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1288 : 	D3DXMatrixTranslation(&matTranslation, vecPosition.x, vecPosition.y, vecPosition.z);

  000c0	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 1289 : 
; 1290 : 	// store translation for client-side transformation
; 1291 : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &matTranslation);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cb	8d 45 bc	 lea	 eax, DWORD PTR _matTranslation$[ebp]
  000ce	50		 push	 eax
  000cf	68 00 01 00 00	 push	 256			; 00000100H
  000d4	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 321  :     x = fx;

  000d9	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _vecPosition$$sroa$313$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1295 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  000de	8d 45 a0	 lea	 eax, DWORD PTR _vecConstant$[ebp]
  000e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 321  :     x = fx;

  000e7	f3 0f 11 45 a0	 movss	 DWORD PTR _vecConstant$[ebp], xmm0

; 322  :     y = fy;

  000ec	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _vecPosition$$sroa$312$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1295 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  000f1	6a 01		 push	 1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 322  :     y = fy;

  000f3	f3 0f 11 45 a4	 movss	 DWORD PTR _vecConstant$[ebp+4], xmm0

; 323  :     z = fz;

  000f8	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _vecPosition$$sroa$140$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1295 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  000fd	50		 push	 eax
  000fe	6a 34		 push	 52			; 00000034H
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 323  :     z = fz;

  00100	f3 0f 11 45 a8	 movss	 DWORD PTR _vecConstant$[ebp+8], xmm0

; 324  :     w = fw;

  00105	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vecConstant$[ebp+12], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1295 : 	STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  0010c	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 1296 : }

  00111	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00114	33 cd		 xor	 ecx, ebp
  00116	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
?PositionTree@CSpeedTreeWrapper@@ABEXXZ ENDP		; CSpeedTreeWrapper::PositionTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
_pVertexBuffer$1 = -16					; size = 4
_usLeafCount$1$ = -12					; size = 4
tv1244 = -8						; size = 4
_unLeaf$1$ = -4						; size = 4
?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ PROC	; CSpeedTreeWrapper::SetupLeafBuffers, COMDAT
; _this$ = ecx

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 664  : 	// set up constants
; 665  : 	const short anVertexIndices[6] = { 0, 1, 2, 0, 2, 3 };
; 666  : 	//const int nNumLeafMaps = m_pTextureInfo->m_uiLeafTextureCount;
; 667  : 
; 668  : 	// set up the leaf counts for each LOD
; 669  : 	m_usNumLeafLods = m_pSpeedTree->GetNumLeafLodLevels();

  0000a	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00010	e8 00 00 00 00	 call	 ?GetNumLeafLodLevels@CSpeedTreeRT@@QBEGXZ ; CSpeedTreeRT::GetNumLeafLodLevels
  00015	66 89 86 bc 01
	00 00		 mov	 WORD PTR [esi+444], ax

; 670  : 
; 671  : 	// create array of vertex buffers (one for each LOD)
; 672  : 	m_pLeafVertexBuffer = new LPDIRECT3DVERTEXBUFFER8[m_usNumLeafLods];

  0001c	b9 04 00 00 00	 mov	 ecx, 4
  00021	0f b7 c0	 movzx	 eax, ax
  00024	f7 e1		 mul	 ecx
  00026	b9 ff ff ff ff	 mov	 ecx, -1
  0002b	0f 42 c1	 cmovb	 eax, ecx
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00034	89 86 c0 01 00
	00		 mov	 DWORD PTR [esi+448], eax

; 673  : 
; 674  : 	// create array of bools for CPU updating (so we don't update for each instance)
; 675  : 	m_pLeavesUpdatedByCpu = new bool[m_usNumLeafLods];

  0003a	0f b7 86 bc 01
	00 00		 movzx	 eax, WORD PTR [esi+444]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00047	89 86 c4 01 00
	00		 mov	 DWORD PTR [esi+452], eax
  0004d	83 c4 08	 add	 esp, 8

; 676  : 
; 677  : 	// cycle through LODs
; 678  : 	for (UINT unLod = 0; unLod < m_usNumLeafLods; ++unLod)

  00050	33 c0		 xor	 eax, eax
  00052	33 db		 xor	 ebx, ebx
  00054	66 3b 86 bc 01
	00 00		 cmp	 ax, WORD PTR [esi+444]
  0005b	0f 83 61 02 00
	00		 jae	 $LN3@SetupLeafB
  00061	57		 push	 edi
$LL4@SetupLeafB:

; 679  : 	{
; 680  : 		m_pLeavesUpdatedByCpu[unLod] = false;

  00062	8b 86 c4 01 00
	00		 mov	 eax, DWORD PTR [esi+452]

; 681  : 		m_pLeafVertexBuffer[unLod] = NULL;

  00068	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  0006f	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  00073	8b 86 c0 01 00
	00		 mov	 eax, DWORD PTR [esi+448]
  00079	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], 0

; 682  : 
; 683  : 		// if this LOD has no leaves, skip it
; 684  : 		unsigned short usLeafCount = m_pGeometryCache->m_sLeaves0.m_usLeafCount;

  00080	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  00086	0f b7 80 84 00
	00 00		 movzx	 eax, WORD PTR [eax+132]
  0008d	89 45 f4	 mov	 DWORD PTR _usLeafCount$1$[ebp], eax

; 685  : 
; 686  : 		if (usLeafCount < 1)

  00090	83 f8 01	 cmp	 eax, 1
  00093	0f 82 18 02 00
	00		 jb	 $LN2@SetupLeafB

; 687  : 			continue;
; 688  : 
; 689  : 		SFVFLeafVertex* pVertexBuffer = NULL;
; 690  : 		// create the vertex buffer for storing leaf vertices
; 691  : #ifndef WRAPPER_USE_CPU_LEAF_PLACEMENT
; 692  : 		ms_lpd3dDevice->CreateVertexBuffer(usLeafCount * 6 * sizeof(SFVFLeafVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_LEAF_VERTEX, D3DPOOL_MANAGED, &m_pLeafVertexBuffer[unLod]);
; 693  : 		// fill the vertex buffer by interleaving SpeedTree data
; 694  : 		m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), 0);
; 695  : #else
; 696  : 		ms_lpd3dDevice->CreateVertexBuffer(usLeafCount * 6 * sizeof(SFVFLeafVertex), D3DUSAGE_DYNAMIC, D3DFVF_SPEEDTREE_LEAF_VERTEX, D3DPOOL_SYSTEMMEM, &m_pLeafVertexBuffer[unLod]);

  00099	8b 86 c0 01 00
	00		 mov	 eax, DWORD PTR [esi+448]
  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000a5	03 c7		 add	 eax, edi
  000a7	8b 7d f4	 mov	 edi, DWORD PTR _usLeafCount$1$[ebp]
  000aa	50		 push	 eax
  000ab	6a 02		 push	 2
  000ad	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA
  000b3	0f b7 c7	 movzx	 eax, di
  000b6	68 00 02 00 00	 push	 512			; 00000200H
  000bb	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pVertexBuffer$1[ebp], 0
  000c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c4	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  000c7	c1 e0 04	 shl	 eax, 4
  000ca	50		 push	 eax
  000cb	51		 push	 ecx
  000cc	ff 52 5c	 call	 DWORD PTR [edx+92]

; 697  : 		// fill the vertex buffer by interleaving SpeedTree data
; 698  : 		m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);

  000cf	8b 86 c0 01 00
	00		 mov	 eax, DWORD PTR [esi+448]
  000d5	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  000dc	68 00 28 00 00	 push	 10240			; 00002800H
  000e1	8d 55 f0	 lea	 edx, DWORD PTR _pVertexBuffer$1[ebp]
  000e4	52		 push	 edx
  000e5	8b 04 07	 mov	 eax, DWORD PTR [edi+eax]
  000e8	6a 00		 push	 0
  000ea	6a 00		 push	 0
  000ec	50		 push	 eax
  000ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ef	ff 51 2c	 call	 DWORD PTR [ecx+44]
  000f2	33 c9		 xor	 ecx, ecx
  000f4	89 4d fc	 mov	 DWORD PTR _unLeaf$1$[ebp], ecx

; 699  : #endif
; 700  : 		SFVFLeafVertex* pVertex = pVertexBuffer;
; 701  : 		for (UINT unLeaf = 0; unLeaf < usLeafCount; ++unLeaf)

  000f7	66 39 4d f4	 cmp	 WORD PTR _usLeafCount$1$[ebp], cx
  000fb	0f 84 a1 01 00
	00		 je	 $LN29@SetupLeafB

; 687  : 			continue;
; 688  : 
; 689  : 		SFVFLeafVertex* pVertexBuffer = NULL;
; 690  : 		// create the vertex buffer for storing leaf vertices
; 691  : #ifndef WRAPPER_USE_CPU_LEAF_PLACEMENT
; 692  : 		ms_lpd3dDevice->CreateVertexBuffer(usLeafCount * 6 * sizeof(SFVFLeafVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_LEAF_VERTEX, D3DPOOL_MANAGED, &m_pLeafVertexBuffer[unLod]);
; 693  : 		// fill the vertex buffer by interleaving SpeedTree data
; 694  : 		m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), 0);
; 695  : #else
; 696  : 		ms_lpd3dDevice->CreateVertexBuffer(usLeafCount * 6 * sizeof(SFVFLeafVertex), D3DUSAGE_DYNAMIC, D3DFVF_SPEEDTREE_LEAF_VERTEX, D3DPOOL_SYSTEMMEM, &m_pLeafVertexBuffer[unLod]);

  00101	8b 7d f0	 mov	 edi, DWORD PTR _pVertexBuffer$1[ebp]
  00104	89 4d f8	 mov	 DWORD PTR tv1244[ebp], ecx
  00107	83 c7 10	 add	 edi, 16			; 00000010H
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL7@SetupLeafB:

; 702  : 		{
; 703  : 			const CSpeedTreeRT::SGeometry::SLeaf* pLeaf = &(m_pGeometryCache->m_sLeaves0);

  00110	8b 96 98 01 00
	00		 mov	 edx, DWORD PTR [esi+408]

; 704  : 			for (UINT unVert = 0; unVert < 6; ++unVert)  // 6 verts == 2 triangles
; 705  : 			{
; 706  : 				// position
; 707  : 				memcpy(pVertex->m_vPosition, &(pLeaf->m_pCenterCoords[unLeaf * 3]), 3 * sizeof(float));

  00116	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0011c	f3 0f 7e 04 08	 movq	 xmm0, QWORD PTR [eax+ecx]
  00121	66 0f d6 47 f0	 movq	 QWORD PTR [edi-16], xmm0
  00126	8b 44 08 08	 mov	 eax, DWORD PTR [eax+ecx+8]
  0012a	89 47 f8	 mov	 DWORD PTR [edi-8], eax

; 708  : 
; 709  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 710  : 				// normal
; 711  : 				memcpy(&pVertex->m_vNormal, &(pLeaf->m_pNormals[unLeaf * 3]), 3 * sizeof(float));
; 712  : #else
; 713  : 				// color
; 714  : 				pVertex->m_dwDiffuseColor = pLeaf->m_pColors[unLeaf];

  0012d	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00133	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  00136	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00139	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 715  : #endif
; 716  : 
; 717  : 				// tex coord
; 718  : 				memcpy(pVertex->m_fTexCoords, &(pLeaf->m_pLeafMapTexCoords[unLeaf][anVertexIndices[unVert] * 2]), 2 * sizeof(float));

  0013c	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00142	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00145	8b 08		 mov	 ecx, DWORD PTR [eax]
  00147	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0014a	89 0f		 mov	 DWORD PTR [edi], ecx
  0014c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0014f	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00155	03 45 f8	 add	 eax, DWORD PTR tv1244[ebp]
  00158	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  0015b	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0015f	66 0f d6 47 08	 movq	 QWORD PTR [edi+8], xmm0
  00164	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00167	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0016a	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00170	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00173	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00176	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  0017c	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0017f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00182	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00185	89 4f 18	 mov	 DWORD PTR [edi+24], ecx
  00188	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  0018b	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00191	03 45 f8	 add	 eax, DWORD PTR tv1244[ebp]
  00194	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  00197	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0019b	66 0f d6 47 20	 movq	 QWORD PTR [edi+32], xmm0
  001a0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001a3	89 47 28	 mov	 DWORD PTR [edi+40], eax
  001a6	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  001ac	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  001af	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  001b2	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  001b8	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  001bb	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001be	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  001c1	89 4f 30	 mov	 DWORD PTR [edi+48], ecx
  001c4	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  001c7	89 47 34	 mov	 DWORD PTR [edi+52], eax
  001ca	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  001d0	03 45 f8	 add	 eax, DWORD PTR tv1244[ebp]
  001d3	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  001d7	66 0f d6 47 38	 movq	 QWORD PTR [edi+56], xmm0
  001dc	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001df	89 47 40	 mov	 DWORD PTR [edi+64], eax
  001e2	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  001e8	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  001eb	89 47 44	 mov	 DWORD PTR [edi+68], eax
  001ee	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  001f4	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  001f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001fc	89 4f 48	 mov	 DWORD PTR [edi+72], ecx
  001ff	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  00202	89 47 4c	 mov	 DWORD PTR [edi+76], eax
  00205	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  0020b	03 45 f8	 add	 eax, DWORD PTR tv1244[ebp]
  0020e	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00212	66 0f d6 47 50	 movq	 QWORD PTR [edi+80], xmm0
  00217	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0021a	89 47 58	 mov	 DWORD PTR [edi+88], eax
  0021d	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00223	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00226	89 47 5c	 mov	 DWORD PTR [edi+92], eax
  00229	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  0022f	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00232	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00235	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00238	89 4f 60	 mov	 DWORD PTR [edi+96], ecx
  0023b	89 47 64	 mov	 DWORD PTR [edi+100], eax
  0023e	8b 82 90 00 00
	00		 mov	 eax, DWORD PTR [edx+144]
  00244	03 45 f8	 add	 eax, DWORD PTR tv1244[ebp]
  00247	8d bf 90 00 00
	00		 lea	 edi, DWORD PTR [edi+144]
  0024d	8b 4d fc	 mov	 ecx, DWORD PTR _unLeaf$1$[ebp]
  00250	83 45 f8 0c	 add	 DWORD PTR tv1244[ebp], 12 ; 0000000cH
  00254	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00258	66 0f d6 47 d8	 movq	 QWORD PTR [edi-40], xmm0
  0025d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00260	89 47 e0	 mov	 DWORD PTR [edi-32], eax
  00263	8b 82 9c 00 00
	00		 mov	 eax, DWORD PTR [edx+156]
  00269	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0026c	89 47 e4	 mov	 DWORD PTR [edi-28], eax
  0026f	8b 82 94 00 00
	00		 mov	 eax, DWORD PTR [edx+148]
  00275	8b d1		 mov	 edx, ecx
  00277	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0027a	42		 inc	 edx
  0027b	89 55 fc	 mov	 DWORD PTR _unLeaf$1$[ebp], edx
  0027e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00281	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00284	89 4f e8	 mov	 DWORD PTR [edi-24], ecx
  00287	8b 4d f4	 mov	 ecx, DWORD PTR _usLeafCount$1$[ebp]
  0028a	89 47 ec	 mov	 DWORD PTR [edi-20], eax
  0028d	0f b7 c1	 movzx	 eax, cx
  00290	8b 4d f8	 mov	 ecx, DWORD PTR tv1244[ebp]
  00293	3b d0		 cmp	 edx, eax
  00295	0f 82 75 fe ff
	ff		 jb	 $LL7@SetupLeafB
  0029b	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
$LN29@SetupLeafB:

; 719  : 
; 720  : 				// wind weights
; 721  : #ifdef WRAPPER_USE_GPU_WIND
; 722  : 				pVertex->m_fWindIndex = 4.0f * pLeaf->m_pWindMatrixIndices[unLeaf];
; 723  : 				pVertex->m_fWindWeight = pLeaf->m_pWindWeights[unLeaf];
; 724  : #endif
; 725  : 
; 726  : 				// GPU placement data
; 727  : #ifdef WRAPPER_USE_GPU_LEAF_PLACEMENT
; 728  : 				pVertex->m_fLeafPlacementIndex = c_nVertexShader_LeafTables + pLeaf->m_pLeafClusterIndices[unLeaf] * 4.0f + anVertexIndices[unVert];
; 729  : 				pVertex->m_fLeafScalarValue = m_pSpeedTree->GetLeafLodSizeAdjustments()[unLod];
; 730  : #endif
; 731  : 
; 732  : 				++pVertex;
; 733  : 			}
; 734  : 		}
; 735  : 		m_pLeafVertexBuffer[unLod]->Unlock();

  002a2	8b 86 c0 01 00
	00		 mov	 eax, DWORD PTR [esi+448]
  002a8	8b 04 07	 mov	 eax, DWORD PTR [edi+eax]
  002ab	50		 push	 eax
  002ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ae	ff 51 30	 call	 DWORD PTR [ecx+48]
$LN2@SetupLeafB:

; 676  : 
; 677  : 	// cycle through LODs
; 678  : 	for (UINT unLod = 0; unLod < m_usNumLeafLods; ++unLod)

  002b1	0f b7 86 bc 01
	00 00		 movzx	 eax, WORD PTR [esi+444]
  002b8	43		 inc	 ebx
  002b9	3b d8		 cmp	 ebx, eax
  002bb	0f 82 a1 fd ff
	ff		 jb	 $LL4@SetupLeafB
  002c1	5f		 pop	 edi
$LN3@SetupLeafB:
  002c2	5e		 pop	 esi

; 736  : 	}
; 737  : }

  002c3	5b		 pop	 ebx
  002c4	8b e5		 mov	 esp, ebp
  002c6	5d		 pop	 ebp
  002c7	c3		 ret	 0
?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP	; CSpeedTreeWrapper::SetupLeafBuffers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
_unNumLodLevels$1$ = -16				; size = 4
_pIndexBuffer$1 = -12					; size = 4
tv723 = -8						; size = 4
_pVertexBuffer$2 = -4					; size = 4
?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ PROC	; CSpeedTreeWrapper::SetupFrondBuffers, COMDAT
; _this$ = ecx

; 578  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 579  : 	// reference to frond structure
; 580  : 	CSpeedTreeRT::SGeometry::SIndexed* pFronds = &(m_pGeometryCache->m_sFronds);

  0000a	8b 9f 98 01 00
	00		 mov	 ebx, DWORD PTR [edi+408]
  00010	89 5d f8	 mov	 DWORD PTR tv723[ebp], ebx

; 581  : 	m_unFrondVertexCount = pFronds->m_usVertexCount; // we asked for a contiguous strip

  00013	0f b7 53 4c	 movzx	 edx, WORD PTR [ebx+76]
  00017	89 97 b0 01 00
	00		 mov	 DWORD PTR [edi+432], edx

; 582  : 
; 583  : 	// check if tree has fronds
; 584  : 	if (m_unFrondVertexCount > 1)

  0001d	83 fa 01	 cmp	 edx, 1
  00020	0f 86 c0 01 00
	00		 jbe	 $LN8@SetupFrond

; 585  : 	{
; 586  : 		// create the vertex buffer for storing frond vertices
; 587  : 		SFVFBranchVertex * pVertexBuffer = NULL;
; 588  : #ifndef WRAPPER_USE_CPU_WIND
; 589  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unFrondVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_MANAGED, &m_pFrondVertexBuffer);

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0002b	56		 push	 esi
  0002c	8d b7 ac 01 00
	00		 lea	 esi, DWORD PTR [edi+428]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVertexBuffer$2[ebp], 0
  00039	56		 push	 esi
  0003a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003c	6a 01		 push	 1
  0003e	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA
  00044	c1 e2 05	 shl	 edx, 5
  00047	6a 08		 push	 8
  00049	52		 push	 edx
  0004a	50		 push	 eax
  0004b	ff 51 5c	 call	 DWORD PTR [ecx+92]

; 590  : 		// fill the vertex buffer by interleaving SpeedTree data
; 591  : 		m_pFrondVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), 0);

  0004e	8b 06		 mov	 eax, DWORD PTR [esi]
  00050	8d 55 fc	 lea	 edx, DWORD PTR _pVertexBuffer$2[ebp]
  00053	6a 00		 push	 0
  00055	52		 push	 edx
  00056	6a 00		 push	 0
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	6a 00		 push	 0
  0005c	50		 push	 eax
  0005d	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 592  : #else
; 593  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unFrondVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_DYNAMIC, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_SYSTEMMEM, &m_pFrondVertexBuffer);
; 594  : 		// fill the vertex buffer by interleaving SpeedTree data
; 595  : 		m_pFrondVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 596  : #endif
; 597  : 		for (UINT i = 0; i < m_unFrondVertexCount; ++i)

  00060	33 d2		 xor	 edx, edx
  00062	39 97 b0 01 00
	00		 cmp	 DWORD PTR [edi+432], edx
  00068	76 76		 jbe	 SHORT $LN3@SetupFrond

; 585  : 	{
; 586  : 		// create the vertex buffer for storing frond vertices
; 587  : 		SFVFBranchVertex * pVertexBuffer = NULL;
; 588  : #ifndef WRAPPER_USE_CPU_WIND
; 589  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unFrondVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_MANAGED, &m_pFrondVertexBuffer);

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  0006d	33 f6		 xor	 esi, esi
  0006f	90		 npad	 1
$LL4@SetupFrond:

; 598  : 		{
; 599  : 			// position
; 600  : 			memcpy(&pVertexBuffer->m_vPosition, &(pFronds->m_pCoords[i * 3]), 3 * sizeof(float));

  00070	8b 4b 60	 mov	 ecx, DWORD PTR [ebx+96]
  00073	8d 76 0c	 lea	 esi, DWORD PTR [esi+12]
  00076	f3 0f 7e 44 31
	f4		 movq	 xmm0, QWORD PTR [ecx+esi-12]
  0007c	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00080	8b 4c 31 fc	 mov	 ecx, DWORD PTR [ecx+esi-4]
  00084	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00087	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 601  : 
; 602  : 			// normal or color
; 603  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 604  : 			memcpy(&pVertexBuffer->m_vNormal, &(pFronds->m_pNormals[i * 3]), 3 * sizeof(float));
; 605  : #else
; 606  : 			pVertexBuffer->m_dwDiffuseColor = pFronds->m_pColors[i];

  0008a	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  0008d	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00090	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00093	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 607  : #endif
; 608  : 
; 609  : 			// texcoords for layer 0
; 610  : 			pVertexBuffer->m_fTexCoords[0] = pFronds->m_pTexCoords0[i * 2];

  00096	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]
  00099	8b 0c d0	 mov	 ecx, DWORD PTR [eax+edx*8]
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  0009f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 611  : 			pVertexBuffer->m_fTexCoords[1] = pFronds->m_pTexCoords0[i * 2 + 1];

  000a2	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]
  000a5	8b 4c d0 04	 mov	 ecx, DWORD PTR [eax+edx*8+4]
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000ac	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 612  : 
; 613  : 			// texcoords for layer 1 (if enabled)
; 614  : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 615  : 			pVertexBuffer->m_fShadowCoords[0] = pFronds->m_pTexCoords1[i * 2];

  000af	8b 43 68	 mov	 eax, DWORD PTR [ebx+104]
  000b2	8b 0c d0	 mov	 ecx, DWORD PTR [eax+edx*8]
  000b5	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000b8	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 616  : 			pVertexBuffer->m_fShadowCoords[1] = pFronds->m_pTexCoords1[i * 2 + 1];

  000bb	8b 43 68	 mov	 eax, DWORD PTR [ebx+104]
  000be	8b 4c d0 04	 mov	 ecx, DWORD PTR [eax+edx*8+4]
  000c2	42		 inc	 edx
  000c3	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000c6	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 617  : #endif
; 618  : 
; 619  : 			// extra data for gpu wind
; 620  : #ifdef WRAPPER_USE_GPU_WIND
; 621  : 			pVertexBuffer->m_fWindIndex = 4.0f * pFronds->m_pWindMatrixIndices[i];
; 622  : 			pVertexBuffer->m_fWindWeight = pFronds->m_pWindWeights[i];
; 623  : #endif
; 624  : 
; 625  : 			++pVertexBuffer;

  000c9	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000cc	83 c0 20	 add	 eax, 32			; 00000020H
  000cf	89 45 fc	 mov	 DWORD PTR _pVertexBuffer$2[ebp], eax
  000d2	3b 97 b0 01 00
	00		 cmp	 edx, DWORD PTR [edi+432]
  000d8	72 96		 jb	 SHORT $LL4@SetupFrond
  000da	8d b7 ac 01 00
	00		 lea	 esi, DWORD PTR [edi+428]
$LN3@SetupFrond:

; 626  : 		}
; 627  : 		m_pFrondVertexBuffer->Unlock();

  000e0	8b 06		 mov	 eax, DWORD PTR [esi]
  000e2	50		 push	 eax
  000e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e5	ff 51 30	 call	 DWORD PTR [ecx+48]

; 628  : 
; 629  : 		// create and fill the index counts for each LOD
; 630  : 		UINT unNumLodLevels = m_pSpeedTree->GetNumFrondLodLevels();

  000e8	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  000ee	e8 00 00 00 00	 call	 ?GetNumFrondLodLevels@CSpeedTreeRT@@QBEGXZ ; CSpeedTreeRT::GetNumFrondLodLevels
  000f3	0f b7 f0	 movzx	 esi, ax

; 631  : 		m_pFrondIndexCounts = new unsigned short[unNumLodLevels];

  000f6	b9 02 00 00 00	 mov	 ecx, 2
  000fb	8b c6		 mov	 eax, esi
  000fd	89 75 f0	 mov	 DWORD PTR _unNumLodLevels$1$[ebp], esi
  00100	f7 e1		 mul	 ecx
  00102	b9 ff ff ff ff	 mov	 ecx, -1
  00107	0f 42 c1	 cmovb	 eax, ecx
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00110	83 c4 04	 add	 esp, 4
  00113	89 87 b8 01 00
	00		 mov	 DWORD PTR [edi+440], eax
  00119	33 db		 xor	 ebx, ebx

; 632  : 		for (WORD j = 0; j < unNumLodLevels; ++j)

  0011b	85 f6		 test	 esi, esi
  0011d	74 4b		 je	 SHORT $LN20@SetupFrond
  0011f	33 f6		 xor	 esi, esi
$LL7@SetupFrond:

; 633  : 		{
; 634  : 			// force update for this LOD
; 635  : 			m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry, -1, j);

  00121	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00127	6a ff		 push	 -1
  00129	53		 push	 ebx
  0012a	6a ff		 push	 -1
  0012c	6a 02		 push	 2
  0012e	ff b7 98 01 00
	00		 push	 DWORD PTR [edi+408]
  00134	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 636  : 
; 637  : 			// check if this LOD has fronds
; 638  : 			if (pFronds->m_usNumStrips > 0)

  00139	8b 45 f8	 mov	 eax, DWORD PTR tv723[ebp]
  0013c	66 83 78 40 00	 cmp	 WORD PTR [eax+64], 0
  00141	76 12		 jbe	 SHORT $LN9@SetupFrond

; 639  : 				m_pFrondIndexCounts[j] = pFronds->m_pStripLengths[0];

  00143	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00146	8b 8f b8 01 00
	00		 mov	 ecx, DWORD PTR [edi+440]
  0014c	66 8b 00	 mov	 ax, WORD PTR [eax]
  0014f	66 89 04 71	 mov	 WORD PTR [ecx+esi*2], ax
  00153	eb 0c		 jmp	 SHORT $LN5@SetupFrond
$LN9@SetupFrond:

; 640  : 			else
; 641  : 				m_pFrondIndexCounts[j] = 0;

  00155	8b 87 b8 01 00
	00		 mov	 eax, DWORD PTR [edi+440]
  0015b	33 c9		 xor	 ecx, ecx
  0015d	66 89 0c 70	 mov	 WORD PTR [eax+esi*2], cx
$LN5@SetupFrond:

; 632  : 		for (WORD j = 0; j < unNumLodLevels; ++j)

  00161	43		 inc	 ebx
  00162	0f b7 f3	 movzx	 esi, bx
  00165	3b 75 f0	 cmp	 esi, DWORD PTR _unNumLodLevels$1$[ebp]
  00168	72 b7		 jb	 SHORT $LL7@SetupFrond
$LN20@SetupFrond:

; 642  : 		}
; 643  : 		// go back to highest LOD
; 644  : 		m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry, -1, 0);

  0016a	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00170	6a ff		 push	 -1
  00172	6a 00		 push	 0
  00174	6a ff		 push	 -1
  00176	6a 02		 push	 2
  00178	ff b7 98 01 00
	00		 push	 DWORD PTR [edi+408]
  0017e	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 645  : 
; 646  : 		// the first LOD level contains the most indices of all the levels, so
; 647  : 		// we use its size to allocate the index buffer
; 648  : 		ms_lpd3dDevice->CreateIndexBuffer(m_pFrondIndexCounts[0] * sizeof(unsigned short), D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_MANAGED, &m_pFrondIndexBuffer);

  00183	8b 87 b8 01 00
	00		 mov	 eax, DWORD PTR [edi+440]
  00189	8d b7 b4 01 00
	00		 lea	 esi, DWORD PTR [edi+436]
  0018f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00195	56		 push	 esi
  00196	6a 01		 push	 1
  00198	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0019b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019d	03 c0		 add	 eax, eax
  0019f	6a 65		 push	 101			; 00000065H
  001a1	6a 08		 push	 8
  001a3	50		 push	 eax
  001a4	51		 push	 ecx
  001a5	ff 52 60	 call	 DWORD PTR [edx+96]

; 649  : 
; 650  : 		// fill the index buffer
; 651  : 		unsigned short * pIndexBuffer = NULL;
; 652  : 		m_pFrondIndexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pIndexBuffer), 0);

  001a8	8b 06		 mov	 eax, DWORD PTR [esi]
  001aa	8d 55 f4	 lea	 edx, DWORD PTR _pIndexBuffer$1[ebp]
  001ad	6a 00		 push	 0
  001af	52		 push	 edx
  001b0	6a 00		 push	 0
  001b2	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pIndexBuffer$1[ebp], 0
  001b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bb	6a 00		 push	 0
  001bd	50		 push	 eax
  001be	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 653  : 		memcpy(pIndexBuffer, pFronds->m_pStrips[0], pFronds->m_pStripLengths[0] * sizeof(unsigned short));

  001c1	8b 4d f8	 mov	 ecx, DWORD PTR tv723[ebp]
  001c4	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  001c7	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001ca	03 c0		 add	 eax, eax
  001cc	50		 push	 eax
  001cd	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  001d0	ff 30		 push	 DWORD PTR [eax]
  001d2	ff 75 f4	 push	 DWORD PTR _pIndexBuffer$1[ebp]
  001d5	e8 00 00 00 00	 call	 _memcpy

; 654  : 		m_pFrondIndexBuffer->Unlock();

  001da	8b 06		 mov	 eax, DWORD PTR [esi]
  001dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  001df	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e1	50		 push	 eax
  001e2	ff 51 30	 call	 DWORD PTR [ecx+48]
  001e5	5e		 pop	 esi
$LN8@SetupFrond:

; 655  : 	}
; 656  : }

  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c3		 ret	 0
?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP	; CSpeedTreeWrapper::SetupFrondBuffers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
_pIndexBuffer$1 = -12					; size = 4
_unNumLodLevels$1$ = -8					; size = 4
_pVertexBuffer$2 = -4					; size = 4
?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ PROC	; CSpeedTreeWrapper::SetupBranchBuffers, COMDAT
; _this$ = ecx

; 490  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 491  : 	// reference to branch structure
; 492  : 	CSpeedTreeRT::SGeometry::SIndexed* pBranches = &(m_pGeometryCache->m_sBranches);

  0000a	8b 9f 98 01 00
	00		 mov	 ebx, DWORD PTR [edi+408]

; 493  : 	m_unBranchVertexCount = pBranches->m_usVertexCount; // we asked for a contiguous strip

  00010	0f b7 53 10	 movzx	 edx, WORD PTR [ebx+16]
  00014	89 97 a0 01 00
	00		 mov	 DWORD PTR [edi+416], edx

; 494  : 
; 495  : 	// check if this tree has branches
; 496  : 	if (m_unBranchVertexCount > 1)

  0001a	83 fa 01	 cmp	 edx, 1
  0001d	0f 86 b9 01 00
	00		 jbe	 $LN8@SetupBranc

; 497  : 	{
; 498  : 		// create the vertex buffer for storing branch vertices
; 499  : 		SFVFBranchVertex * pVertexBuffer = NULL;
; 500  : 
; 501  : #ifndef WRAPPER_USE_CPU_WIND
; 502  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unBranchVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_MANAGED, &m_pBranchVertexBuffer);

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00028	56		 push	 esi
  00029	8d b7 9c 01 00
	00		 lea	 esi, DWORD PTR [edi+412]
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVertexBuffer$2[ebp], 0
  00036	56		 push	 esi
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	6a 01		 push	 1
  0003b	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA
  00041	c1 e2 05	 shl	 edx, 5
  00044	6a 08		 push	 8
  00046	52		 push	 edx
  00047	50		 push	 eax
  00048	ff 51 5c	 call	 DWORD PTR [ecx+92]

; 503  : 		// fill the vertex buffer by interleaving SpeedTree data
; 504  : 		m_pBranchVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), 0);

  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	8d 55 fc	 lea	 edx, DWORD PTR _pVertexBuffer$2[ebp]
  00050	6a 00		 push	 0
  00052	52		 push	 edx
  00053	6a 00		 push	 0
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	6a 00		 push	 0
  00059	50		 push	 eax
  0005a	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 505  : #else
; 506  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unBranchVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_DYNAMIC, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_SYSTEMMEM, &m_pBranchVertexBuffer);
; 507  : 		// fill the vertex buffer by interleaving SpeedTree data
; 508  : 		m_pBranchVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 509  : #endif
; 510  : 		{
; 511  : 			for (UINT i = 0; i < m_unBranchVertexCount; ++i)

  0005d	33 d2		 xor	 edx, edx
  0005f	39 97 a0 01 00
	00		 cmp	 DWORD PTR [edi+416], edx
  00065	76 79		 jbe	 SHORT $LN3@SetupBranc

; 497  : 	{
; 498  : 		// create the vertex buffer for storing branch vertices
; 499  : 		SFVFBranchVertex * pVertexBuffer = NULL;
; 500  : 
; 501  : #ifndef WRAPPER_USE_CPU_WIND
; 502  : 		ms_lpd3dDevice->CreateVertexBuffer(m_unBranchVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_MANAGED, &m_pBranchVertexBuffer);

  00067	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  0006a	33 f6		 xor	 esi, esi
  0006c	0f 1f 40 00	 npad	 4
$LL4@SetupBranc:

; 512  : 			{
; 513  : 				// position
; 514  : 				memcpy(&pVertexBuffer->m_vPosition, &(pBranches->m_pCoords[i * 3]), 3 * sizeof(float));

  00070	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00073	8d 76 0c	 lea	 esi, DWORD PTR [esi+12]
  00076	f3 0f 7e 44 31
	f4		 movq	 xmm0, QWORD PTR [ecx+esi-12]
  0007c	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00080	8b 4c 31 fc	 mov	 ecx, DWORD PTR [ecx+esi-4]
  00084	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00087	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 515  : 
; 516  : 				// normal or color
; 517  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 518  : 				memcpy(&pVertexBuffer->m_vNormal, &(pBranches->m_pNormals[i * 3]), 3 * sizeof(float));
; 519  : #else
; 520  : 				pVertexBuffer->m_dwDiffuseColor = pBranches->m_pColors[i];

  0008a	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0008d	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00090	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00093	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 521  : #endif
; 522  : 
; 523  : 				// texcoords for layer 0
; 524  : 				pVertexBuffer->m_fTexCoords[0] = pBranches->m_pTexCoords0[i * 2];

  00096	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00099	8b 0c d0	 mov	 ecx, DWORD PTR [eax+edx*8]
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  0009f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 525  : 				pVertexBuffer->m_fTexCoords[1] = pBranches->m_pTexCoords0[i * 2 + 1];

  000a2	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  000a5	8b 4c d0 04	 mov	 ecx, DWORD PTR [eax+edx*8+4]
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000ac	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 526  : 
; 527  : 				// texcoords for layer 1 (if enabled)
; 528  : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 529  : 				pVertexBuffer->m_fShadowCoords[0] = pBranches->m_pTexCoords1[i * 2];

  000af	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000b2	8b 0c d0	 mov	 ecx, DWORD PTR [eax+edx*8]
  000b5	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000b8	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 530  : 				pVertexBuffer->m_fShadowCoords[1] = pBranches->m_pTexCoords1[i * 2 + 1];

  000bb	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000be	8b 4c d0 04	 mov	 ecx, DWORD PTR [eax+edx*8+4]
  000c2	42		 inc	 edx
  000c3	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000c6	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 531  : #endif
; 532  : 
; 533  : 				// extra data for gpu wind
; 534  : #ifdef WRAPPER_USE_GPU_WIND
; 535  : 				pVertexBuffer->m_fWindIndex = 4.0f * pBranches->m_pWindMatrixIndices[i];
; 536  : 				pVertexBuffer->m_fWindWeight = pBranches->m_pWindWeights[i];
; 537  : #endif
; 538  : 
; 539  : 				++pVertexBuffer;

  000c9	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000cc	83 c0 20	 add	 eax, 32			; 00000020H
  000cf	89 45 fc	 mov	 DWORD PTR _pVertexBuffer$2[ebp], eax
  000d2	3b 97 a0 01 00
	00		 cmp	 edx, DWORD PTR [edi+416]
  000d8	72 96		 jb	 SHORT $LL4@SetupBranc
  000da	8d b7 9c 01 00
	00		 lea	 esi, DWORD PTR [edi+412]
$LN3@SetupBranc:

; 540  : 			}
; 541  : 			m_pBranchVertexBuffer->Unlock();

  000e0	8b 06		 mov	 eax, DWORD PTR [esi]
  000e2	50		 push	 eax
  000e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e5	ff 51 30	 call	 DWORD PTR [ecx+48]

; 542  : 		}
; 543  : 
; 544  : 		// create and fill the index counts for each LOD
; 545  : 		UINT unNumLodLevels = m_pSpeedTree->GetNumBranchLodLevels();

  000e8	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  000ee	e8 00 00 00 00	 call	 ?GetNumBranchLodLevels@CSpeedTreeRT@@QBEGXZ ; CSpeedTreeRT::GetNumBranchLodLevels
  000f3	0f b7 c0	 movzx	 eax, ax

; 546  : 		m_pBranchIndexCounts = new unsigned short[unNumLodLevels];

  000f6	b9 02 00 00 00	 mov	 ecx, 2
  000fb	89 45 f8	 mov	 DWORD PTR _unNumLodLevels$1$[ebp], eax
  000fe	f7 e1		 mul	 ecx
  00100	b9 ff ff ff ff	 mov	 ecx, -1
  00105	0f 42 c1	 cmovb	 eax, ecx
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0010e	33 f6		 xor	 esi, esi
  00110	89 87 a8 01 00
	00		 mov	 DWORD PTR [edi+424], eax
  00116	83 c4 04	 add	 esp, 4

; 547  : 		for (UINT i = 0; i < unNumLodLevels; ++i)

  00119	39 75 f8	 cmp	 DWORD PTR _unNumLodLevels$1$[ebp], esi
  0011c	76 45		 jbe	 SHORT $LN20@SetupBranc
  0011e	66 90		 npad	 2
$LL7@SetupBranc:

; 548  : 		{
; 549  : 			// force update for particular LOD
; 550  : 			m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry, i);

  00120	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00126	6a ff		 push	 -1
  00128	6a ff		 push	 -1
  0012a	56		 push	 esi
  0012b	6a 01		 push	 1
  0012d	ff b7 98 01 00
	00		 push	 DWORD PTR [edi+408]
  00133	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 551  : 
; 552  : 			// check if this LOD has branches
; 553  : 			if (pBranches->m_usNumStrips > 0)

  00138	66 83 7b 04 00	 cmp	 WORD PTR [ebx+4], 0
  0013d	76 12		 jbe	 SHORT $LN9@SetupBranc

; 554  : 				m_pBranchIndexCounts[i] = pBranches->m_pStripLengths[0];

  0013f	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00142	8b 8f a8 01 00
	00		 mov	 ecx, DWORD PTR [edi+424]
  00148	66 8b 00	 mov	 ax, WORD PTR [eax]
  0014b	66 89 04 71	 mov	 WORD PTR [ecx+esi*2], ax
  0014f	eb 0c		 jmp	 SHORT $LN5@SetupBranc
$LN9@SetupBranc:

; 555  : 			else
; 556  : 				m_pBranchIndexCounts[i] = 0;

  00151	8b 87 a8 01 00
	00		 mov	 eax, DWORD PTR [edi+424]
  00157	33 c9		 xor	 ecx, ecx
  00159	66 89 0c 70	 mov	 WORD PTR [eax+esi*2], cx
$LN5@SetupBranc:

; 547  : 		for (UINT i = 0; i < unNumLodLevels; ++i)

  0015d	46		 inc	 esi
  0015e	3b 75 f8	 cmp	 esi, DWORD PTR _unNumLodLevels$1$[ebp]
  00161	72 bd		 jb	 SHORT $LL7@SetupBranc
$LN20@SetupBranc:

; 557  : 		}
; 558  : 		// set back to highest LOD
; 559  : 		m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry, 0);

  00163	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00169	6a ff		 push	 -1
  0016b	6a ff		 push	 -1
  0016d	6a 00		 push	 0
  0016f	6a 01		 push	 1
  00171	ff b7 98 01 00
	00		 push	 DWORD PTR [edi+408]
  00177	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 560  : 
; 561  : 		// the first LOD level contains the most indices of all the levels, so
; 562  : 		// we use its size to allocate the index buffer
; 563  : 		ms_lpd3dDevice->CreateIndexBuffer(m_pBranchIndexCounts[0] * sizeof(unsigned short), D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_MANAGED, &m_pBranchIndexBuffer);

  0017c	8b 87 a8 01 00
	00		 mov	 eax, DWORD PTR [edi+424]
  00182	8d b7 a4 01 00
	00		 lea	 esi, DWORD PTR [edi+420]
  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0018e	56		 push	 esi
  0018f	6a 01		 push	 1
  00191	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00194	8b 11		 mov	 edx, DWORD PTR [ecx]
  00196	03 c0		 add	 eax, eax
  00198	6a 65		 push	 101			; 00000065H
  0019a	6a 08		 push	 8
  0019c	50		 push	 eax
  0019d	51		 push	 ecx
  0019e	ff 52 60	 call	 DWORD PTR [edx+96]

; 564  : 
; 565  : 		// fill the index buffer
; 566  : 		unsigned short* pIndexBuffer = NULL;
; 567  : 		m_pBranchIndexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pIndexBuffer), 0);

  001a1	8b 06		 mov	 eax, DWORD PTR [esi]
  001a3	8d 55 f4	 lea	 edx, DWORD PTR _pIndexBuffer$1[ebp]
  001a6	6a 00		 push	 0
  001a8	52		 push	 edx
  001a9	6a 00		 push	 0
  001ab	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pIndexBuffer$1[ebp], 0
  001b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b4	6a 00		 push	 0
  001b6	50		 push	 eax
  001b7	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 568  : 		memcpy(pIndexBuffer, pBranches->m_pStrips[0], pBranches->m_pStripLengths[0] * sizeof(unsigned short));

  001ba	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  001bd	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001c0	03 c0		 add	 eax, eax
  001c2	50		 push	 eax
  001c3	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  001c6	ff 30		 push	 DWORD PTR [eax]
  001c8	ff 75 f4	 push	 DWORD PTR _pIndexBuffer$1[ebp]
  001cb	e8 00 00 00 00	 call	 _memcpy

; 569  : 		m_pBranchIndexBuffer->Unlock();

  001d0	8b 06		 mov	 eax, DWORD PTR [esi]
  001d2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d7	50		 push	 eax
  001d8	ff 51 30	 call	 DWORD PTR [ecx+48]
  001db	5e		 pop	 esi
$LN8@SetupBranc:

; 570  : 	}
; 571  : }

  001dc	5f		 pop	 edi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c3		 ret	 0
?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP	; CSpeedTreeWrapper::SetupBranchBuffers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ PROC		; CSpeedTreeWrapper::SetupBuffers, COMDAT
; _this$ = ecx

; 471  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 472  : 	// read all the geometry for highest LOD into the geometry cache (just a precaution, it's updated later)
; 473  : 	m_pSpeedTree->SetLodLevel(1.0f);

  00026	51		 push	 ecx
  00027	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  0002d	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00034	e8 00 00 00 00	 call	 ?SetLodLevel@CSpeedTreeRT@@QAEXM@Z ; CSpeedTreeRT::SetLodLevel

; 474  : 
; 475  : 	if (m_pGeometryCache == NULL)

  00039	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  0003f	85 c0		 test	 eax, eax
  00041	75 33		 jne	 SHORT $LN2@SetupBuffe

; 476  : 		m_pGeometryCache = new CSpeedTreeRT::SGeometry;

  00043	68 20 01 00 00	 push	 288			; 00000120H
  00048	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005a	85 c0		 test	 eax, eax
  0005c	74 09		 je	 SHORT $LN4@SetupBuffe
  0005e	8b c8		 mov	 ecx, eax
  00060	e8 00 00 00 00	 call	 ??0SGeometry@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::SGeometry::SGeometry
  00065	eb 02		 jmp	 SHORT $LN5@SetupBuffe
$LN4@SetupBuffe:
  00067	33 c0		 xor	 eax, eax
$LN5@SetupBuffe:
  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	89 86 98 01 00
	00		 mov	 DWORD PTR [esi+408], eax
$LN2@SetupBuffe:

; 477  : 
; 478  : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache);

  00076	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  0007c	6a ff		 push	 -1
  0007e	6a ff		 push	 -1
  00080	6a ff		 push	 -1
  00082	6a 0f		 push	 15			; 0000000fH
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 479  : 
; 480  : 	// setup the buffers for each part
; 481  : 	SetupBranchBuffers();

  0008a	8b ce		 mov	 ecx, esi
  0008c	e8 00 00 00 00	 call	 ?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupBranchBuffers

; 482  : 	SetupFrondBuffers();

  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupFrondBuffers

; 483  : 	SetupLeafBuffers();

  00098	8b ce		 mov	 ecx, esi
  0009a	e8 00 00 00 00	 call	 ?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupLeafBuffers

; 484  : }

  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5e		 pop	 esi
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ$0:
  00000	68 20 01 00 00	 push	 288			; 00000120H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP		; CSpeedTreeWrapper::SetupBuffers
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ
_TEXT	SEGMENT
?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ PROC		; CSpeedTreeWrapper::CleanUpMemory, COMDAT
; _this$ = ecx

; 1276 : 	if (!m_bIsInstance)

  00000	80 b9 84 01 00
	00 00		 cmp	 BYTE PTR [ecx+388], 0
  00007	75 0b		 jne	 SHORT $LN2@CleanUpMem

; 1277 : 		m_pSpeedTree->DeleteTransientData();

  00009	8b 89 7c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+380]
  0000f	e9 00 00 00 00	 jmp	 ?DeleteTransientData@CSpeedTreeRT@@QAEXXZ ; CSpeedTreeRT::DeleteTransientData
$LN2@CleanUpMem:

; 1278 : }

  00014	c3		 ret	 0
?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ ENDP		; CSpeedTreeWrapper::CleanUpMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?Advance@CSpeedTreeWrapper@@QAEXXZ
_TEXT	SEGMENT
?Advance@CSpeedTreeWrapper@@QAEXXZ PROC			; CSpeedTreeWrapper::Advance, COMDAT
; _this$ = ecx

; 744  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 745  : 	// compute LOD level (based on distance from camera)
; 746  : 	m_pSpeedTree->ComputeLodLevel();

  00003	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00009	e8 00 00 00 00	 call	 ?ComputeLodLevel@CSpeedTreeRT@@QAEXXZ ; CSpeedTreeRT::ComputeLodLevel

; 747  : 	m_pSpeedTree->SetLodLevel(1.0f);

  0000e	51		 push	 ecx
  0000f	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00015	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0001c	e8 00 00 00 00	 call	 ?SetLodLevel@CSpeedTreeRT@@QAEXM@Z ; CSpeedTreeRT::SetLodLevel
  00021	5e		 pop	 esi

; 748  : 
; 749  : 	// compute wind
; 750  : #ifdef WRAPPER_USE_CPU_WIND
; 751  : 	m_pSpeedTree->ComputeWindEffects(true, true, true);
; 752  : #endif
; 753  : }

  00022	c3		 ret	 0
?Advance@CSpeedTreeWrapper@@QAEXXZ ENDP			; CSpeedTreeWrapper::Advance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z
_TEXT	SEGMENT
_pInstance$ = 8						; size = 4
?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z PROC	; CSpeedTreeWrapper::DeleteInstance, COMDAT
; _this$ = ecx

; 828  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 831  : 	while (itor != m_vInstances.end())

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _pInstance$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000b	8b b7 88 01 00
	00		 mov	 esi, DWORD PTR [edi+392]
  00011	8b 87 8c 01 00
	00		 mov	 eax, DWORD PTR [edi+396]
  00017	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 831  : 	while (itor != m_vInstances.end())

  00019	74 2c		 je	 SHORT $LN3@DeleteInst
  0001b	0f 1f 44 00 00	 npad	 5
$LL2@DeleteInst:

; 832  : 	{
; 833  : 		if (*itor == pInstance)

  00020	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00023	39 1e		 cmp	 DWORD PTR [esi], ebx
  00025	75 1a		 jne	 SHORT $LN4@DeleteInst
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5163 :                 return _STD _Copy_memmove(_First, _Last, _Dest);

  00027	56		 push	 esi
  00028	50		 push	 eax
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1763 :         --_Mylast;

  00032	83 87 8c 01 00
	00 fc		 add	 DWORD PTR [edi+396], -4	; fffffffcH
  00039	8b 87 8c 01 00
	00		 mov	 eax, DWORD PTR [edi+396]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 836  : 		}

  0003f	eb 02		 jmp	 SHORT $LN51@DeleteInst
$LN4@DeleteInst:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  00041	8b f1		 mov	 esi, ecx
$LN51@DeleteInst:

; 166  :         return _Ptr == _Right._Ptr;

  00043	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 831  : 	while (itor != m_vInstances.end())

  00045	75 d9		 jne	 SHORT $LL2@DeleteInst
$LN3@DeleteInst:

; 837  : 		else
; 838  : 			++itor;
; 839  : 	}
; 840  : 	delete pInstance;

  00047	85 db		 test	 ebx, ebx
  00049	74 08		 je	 SHORT $LN7@DeleteInst
  0004b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004d	8b cb		 mov	 ecx, ebx
  0004f	6a 01		 push	 1
  00051	ff 10		 call	 DWORD PTR [eax]
$LN7@DeleteInst:

; 841  : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z ENDP	; CSpeedTreeWrapper::DeleteInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
_TEXT	SEGMENT
_pInstance$ = -16					; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ PROC	; CSpeedTreeWrapper::MakeInstance, COMDAT
; _this$ = ecx

; 759  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 760  : 	CSpeedTreeWrapper * pInstance = new CSpeedTreeWrapper;

  00027	68 30 03 00 00	 push	 816			; 00000330H
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	85 c0		 test	 eax, eax
  00040	74 0b		 je	 SHORT $LN6@MakeInstan
  00042	8b c8		 mov	 ecx, eax
  00044	e8 00 00 00 00	 call	 ??0CSpeedTreeWrapper@@QAE@XZ ; CSpeedTreeWrapper::CSpeedTreeWrapper
  00049	8b f0		 mov	 esi, eax
  0004b	eb 02		 jmp	 SHORT $LN7@MakeInstan
$LN6@MakeInstan:
  0004d	33 f6		 xor	 esi, esi
$LN7@MakeInstan:

; 761  : 
; 762  : 	// make an instance of this object's SpeedTree
; 763  : 	pInstance->m_bIsInstance = true;

  0004f	c6 86 84 01 00
	00 01		 mov	 BYTE PTR [esi+388], 1

; 764  : 	pInstance->m_pSpeedTree = m_pSpeedTree->MakeInstance();

  00056	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	89 75 f0	 mov	 DWORD PTR _pInstance$[ebp], esi
  00066	e8 00 00 00 00	 call	 ?MakeInstance@CSpeedTreeRT@@QAEPAV1@XZ ; CSpeedTreeRT::MakeInstance
  0006b	89 86 7c 01 00
	00		 mov	 DWORD PTR [esi+380], eax

; 765  : 
; 766  : 	if (pInstance->m_pSpeedTree)

  00071	85 c0		 test	 eax, eax
  00073	0f 84 42 02 00
	00		 je	 $LN2@MakeInstan

; 767  :     {
; 768  : 		// use the same materials
; 769  : 		pInstance->m_cBranchMaterial = m_cBranchMaterial;

  00079	0f 10 87 ec 01
	00 00		 movups	 xmm0, XMMWORD PTR [edi+492]

; 770  : 		pInstance->m_cLeafMaterial = m_cLeafMaterial;
; 771  : 		pInstance->m_cFrondMaterial = m_cFrondMaterial;
; 772  : 		pInstance->m_CompositeImageInstance.SetImagePointer(m_CompositeImageInstance.GetGraphicImagePointer());

  00080	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  00086	0f 11 86 ec 01
	00 00		 movups	 XMMWORD PTR [esi+492], xmm0
  0008d	0f 10 87 fc 01
	00 00		 movups	 xmm0, XMMWORD PTR [edi+508]
  00094	0f 11 86 fc 01
	00 00		 movups	 XMMWORD PTR [esi+508], xmm0
  0009b	0f 10 87 0c 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+524]
  000a2	0f 11 86 0c 02
	00 00		 movups	 XMMWORD PTR [esi+524], xmm0
  000a9	0f 10 87 1c 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+540]
  000b0	0f 11 86 1c 02
	00 00		 movups	 XMMWORD PTR [esi+540], xmm0
  000b7	8b 87 2c 02 00
	00		 mov	 eax, DWORD PTR [edi+556]
  000bd	89 86 2c 02 00
	00		 mov	 DWORD PTR [esi+556], eax
  000c3	0f 10 87 30 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+560]
  000ca	0f 11 86 30 02
	00 00		 movups	 XMMWORD PTR [esi+560], xmm0
  000d1	0f 10 87 40 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+576]
  000d8	0f 11 86 40 02
	00 00		 movups	 XMMWORD PTR [esi+576], xmm0
  000df	0f 10 87 50 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+592]
  000e6	0f 11 86 50 02
	00 00		 movups	 XMMWORD PTR [esi+592], xmm0
  000ed	0f 10 87 60 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+608]
  000f4	0f 11 86 60 02
	00 00		 movups	 XMMWORD PTR [esi+608], xmm0
  000fb	8b 87 70 02 00
	00		 mov	 eax, DWORD PTR [edi+624]
  00101	89 86 70 02 00
	00		 mov	 DWORD PTR [esi+624], eax
  00107	0f 10 87 74 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+628]
  0010e	0f 11 86 74 02
	00 00		 movups	 XMMWORD PTR [esi+628], xmm0
  00115	0f 10 87 84 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+644]
  0011c	0f 11 86 84 02
	00 00		 movups	 XMMWORD PTR [esi+644], xmm0
  00123	0f 10 87 94 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+660]
  0012a	0f 11 86 94 02
	00 00		 movups	 XMMWORD PTR [esi+660], xmm0
  00131	0f 10 87 a4 02
	00 00		 movups	 xmm0, XMMWORD PTR [edi+676]
  00138	0f 11 86 a4 02
	00 00		 movups	 XMMWORD PTR [esi+676], xmm0
  0013f	8b 87 b4 02 00
	00		 mov	 eax, DWORD PTR [edi+692]
  00145	89 86 b4 02 00
	00		 mov	 DWORD PTR [esi+692], eax
  0014b	e8 00 00 00 00	 call	 ?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicImageInstance::GetGraphicImagePointer
  00150	50		 push	 eax
  00151	8d 8e 08 03 00
	00		 lea	 ecx, DWORD PTR [esi+776]
  00157	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 773  : 		pInstance->m_BranchImageInstance.SetImagePointer(m_BranchImageInstance.GetGraphicImagePointer());

  0015c	8d 8f b8 02 00
	00		 lea	 ecx, DWORD PTR [edi+696]
  00162	e8 00 00 00 00	 call	 ?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicImageInstance::GetGraphicImagePointer
  00167	50		 push	 eax
  00168	8d 8e b8 02 00
	00		 lea	 ecx, DWORD PTR [esi+696]
  0016e	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 774  : 
; 775  : 		if (!m_ShadowImageInstance.IsEmpty())

  00173	8d 8f e0 02 00
	00		 lea	 ecx, DWORD PTR [edi+736]
  00179	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0017e	84 c0		 test	 al, al
  00180	75 17		 jne	 SHORT $LN4@MakeInstan

; 776  : 			pInstance->m_ShadowImageInstance.SetImagePointer(m_ShadowImageInstance.GetGraphicImagePointer());

  00182	8d 8f e0 02 00
	00		 lea	 ecx, DWORD PTR [edi+736]
  00188	e8 00 00 00 00	 call	 ?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicImageInstance::GetGraphicImagePointer
  0018d	50		 push	 eax
  0018e	8d 8e e0 02 00
	00		 lea	 ecx, DWORD PTR [esi+736]
  00194	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
$LN4@MakeInstan:

; 777  : 
; 778  : 		pInstance->m_pTextureInfo = m_pTextureInfo;

  00199	8b 87 80 01 00
	00		 mov	 eax, DWORD PTR [edi+384]

; 779  : 
; 780  : 		// use the same geometry cache
; 781  : 		pInstance->m_pGeometryCache = m_pGeometryCache;
; 782  : 
; 783  : 		// use the same buffers
; 784  : 		pInstance->m_pBranchIndexBuffer = m_pBranchIndexBuffer;
; 785  : 		pInstance->m_pBranchIndexCounts = m_pBranchIndexCounts;
; 786  : 		pInstance->m_pBranchVertexBuffer = m_pBranchVertexBuffer;
; 787  : 		pInstance->m_unBranchVertexCount = m_unBranchVertexCount;
; 788  : 
; 789  : 		pInstance->m_pFrondIndexBuffer = m_pFrondIndexBuffer;
; 790  : 		pInstance->m_pFrondIndexCounts = m_pFrondIndexCounts;
; 791  : 		pInstance->m_pFrondVertexBuffer = m_pFrondVertexBuffer;
; 792  : 		pInstance->m_unFrondVertexCount = m_unFrondVertexCount;
; 793  : 
; 794  : 		pInstance->m_pLeafVertexBuffer = m_pLeafVertexBuffer;
; 795  : 		pInstance->m_usNumLeafLods = m_usNumLeafLods;
; 796  : 		pInstance->m_pLeavesUpdatedByCpu = m_pLeavesUpdatedByCpu;
; 797  : 
; 798  : 		// new stuff
; 799  : 		memcpy(pInstance->m_afPos, m_afPos, 3 * sizeof(float));
; 800  : 		memcpy(pInstance->m_afBoundingBox, m_afBoundingBox, 6 * sizeof(float));
; 801  : 		pInstance->m_pInstanceOf = this;
; 802  : 		m_vInstances.push_back(pInstance);

  0019f	8d 8f 88 01 00
	00		 lea	 ecx, DWORD PTR [edi+392]
  001a5	89 86 80 01 00
	00		 mov	 DWORD PTR [esi+384], eax
  001ab	8b 87 98 01 00
	00		 mov	 eax, DWORD PTR [edi+408]
  001b1	89 86 98 01 00
	00		 mov	 DWORD PTR [esi+408], eax
  001b7	8b 87 a4 01 00
	00		 mov	 eax, DWORD PTR [edi+420]
  001bd	89 86 a4 01 00
	00		 mov	 DWORD PTR [esi+420], eax
  001c3	8b 87 a8 01 00
	00		 mov	 eax, DWORD PTR [edi+424]
  001c9	89 86 a8 01 00
	00		 mov	 DWORD PTR [esi+424], eax
  001cf	8b 87 9c 01 00
	00		 mov	 eax, DWORD PTR [edi+412]
  001d5	89 86 9c 01 00
	00		 mov	 DWORD PTR [esi+412], eax
  001db	8b 87 a0 01 00
	00		 mov	 eax, DWORD PTR [edi+416]
  001e1	89 86 a0 01 00
	00		 mov	 DWORD PTR [esi+416], eax
  001e7	8b 87 b4 01 00
	00		 mov	 eax, DWORD PTR [edi+436]
  001ed	89 86 b4 01 00
	00		 mov	 DWORD PTR [esi+436], eax
  001f3	8b 87 b8 01 00
	00		 mov	 eax, DWORD PTR [edi+440]
  001f9	89 86 b8 01 00
	00		 mov	 DWORD PTR [esi+440], eax
  001ff	8b 87 ac 01 00
	00		 mov	 eax, DWORD PTR [edi+428]
  00205	89 86 ac 01 00
	00		 mov	 DWORD PTR [esi+428], eax
  0020b	8b 87 b0 01 00
	00		 mov	 eax, DWORD PTR [edi+432]
  00211	89 86 b0 01 00
	00		 mov	 DWORD PTR [esi+432], eax
  00217	8b 87 c0 01 00
	00		 mov	 eax, DWORD PTR [edi+448]
  0021d	89 86 c0 01 00
	00		 mov	 DWORD PTR [esi+448], eax
  00223	66 8b 87 bc 01
	00 00		 mov	 ax, WORD PTR [edi+444]
  0022a	66 89 86 bc 01
	00 00		 mov	 WORD PTR [esi+444], ax
  00231	8b 87 c4 01 00
	00		 mov	 eax, DWORD PTR [edi+452]
  00237	89 86 c4 01 00
	00		 mov	 DWORD PTR [esi+452], eax
  0023d	f3 0f 7e 87 c8
	01 00 00	 movq	 xmm0, QWORD PTR [edi+456]
  00245	66 0f d6 86 c8
	01 00 00	 movq	 QWORD PTR [esi+456], xmm0
  0024d	8b 87 d0 01 00
	00		 mov	 eax, DWORD PTR [edi+464]
  00253	89 86 d0 01 00
	00		 mov	 DWORD PTR [esi+464], eax
  00259	0f 10 87 d4 01
	00 00		 movups	 xmm0, XMMWORD PTR [edi+468]
  00260	0f 11 86 d4 01
	00 00		 movups	 XMMWORD PTR [esi+468], xmm0
  00267	f3 0f 7e 87 e4
	01 00 00	 movq	 xmm0, QWORD PTR [edi+484]
  0026f	66 0f d6 86 e4
	01 00 00	 movq	 QWORD PTR [esi+484], xmm0
  00277	89 be 94 01 00
	00		 mov	 DWORD PTR [esi+404], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0027d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00280	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00283	74 19		 je	 SHORT $LN14@MakeInstan

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00285	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 811  : 	return pInstance;

  00287	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00289	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 812  : }

  0028d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00290	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00297	59		 pop	 ecx
  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	8b e5		 mov	 esp, ebp
  0029c	5d		 pop	 ebp
  0029d	c3		 ret	 0
$LN14@MakeInstan:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0029e	8d 55 f0	 lea	 edx, DWORD PTR _pInstance$[ebp]
  002a1	52		 push	 edx
  002a2	50		 push	 eax
  002a3	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 811  : 	return pInstance;

  002a8	8b c6		 mov	 eax, esi

; 812  : }

  002aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002b4	59		 pop	 ecx
  002b5	5f		 pop	 edi
  002b6	5e		 pop	 esi
  002b7	8b e5		 mov	 esp, ebp
  002b9	5d		 pop	 ebp
  002ba	c3		 ret	 0
$LN2@MakeInstan:

; 803  :     }
; 804  :     else
; 805  : 	{
; 806  : 		fprintf(stderr, "SpeedTreeRT Error: %s\n", m_pSpeedTree->GetCurrentError());

  002bb	e8 00 00 00 00	 call	 ?GetCurrentError@CSpeedTreeRT@@SAPBDXZ ; CSpeedTreeRT::GetCurrentError
  002c0	50		 push	 eax
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@
  002c6	6a 02		 push	 2
  002c8	e8 00 00 00 00	 call	 ___acrt_iob_func
  002cd	83 c4 04	 add	 esp, 4
  002d0	50		 push	 eax
  002d1	e8 00 00 00 00	 call	 _fprintf

; 807  :         delete pInstance;

  002d6	8b 06		 mov	 eax, DWORD PTR [esi]
  002d8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002db	8b ce		 mov	 ecx, esi
  002dd	6a 01		 push	 1
  002df	ff 10		 call	 DWORD PTR [eax]

; 811  : 	return pInstance;

  002e1	33 c0		 xor	 eax, eax

; 812  : }

  002e3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ed	59		 pop	 ecx
  002ee	5f		 pop	 edi
  002ef	5e		 pop	 esi
  002f0	8b e5		 mov	 esp, ebp
  002f2	5d		 pop	 ebp
  002f3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ$0:
  00000	68 30 03 00 00	 push	 816			; 00000330H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ ENDP	; CSpeedTreeWrapper::MakeInstance
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z
_TEXT	SEGMENT
_nCount$ = 8						; size = 4
?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z PROC	; CSpeedTreeWrapper::GetInstances, COMDAT
; _this$ = ecx

; 819  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 91 8c 01 00
	00		 mov	 edx, DWORD PTR [ecx+396]
  00009	2b 91 88 01 00
	00		 sub	 edx, DWORD PTR [ecx+392]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 820  : 	nCount = m_vInstances.size();

  0000f	8b 45 08	 mov	 eax, DWORD PTR _nCount$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00012	c1 fa 02	 sar	 edx, 2
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 820  : 	nCount = m_vInstances.size();

  00015	89 10		 mov	 DWORD PTR [eax], edx

; 821  : 	if (nCount)

  00017	85 d2		 test	 edx, edx
  00019	74 0a		 je	 SHORT $LN2@GetInstanc

; 822  : 		return &(m_vInstances[0]);

  0001b	8b 81 88 01 00
	00		 mov	 eax, DWORD PTR [ecx+392]

; 825  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN2@GetInstanc:

; 823  : 	else
; 824  : 		return NULL;

  00025	33 c0		 xor	 eax, eax

; 825  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ENDP	; CSpeedTreeWrapper::GetInstances
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
_sVertex$1 = -84					; size = 80
_sVertex$2 = -84					; size = 80
__$ArrayPad$ = -4					; size = 4
?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::RenderBillboards, COMDAT
; _this$ = ecx

; 1195 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx

; 1196 : 	// render billboards in immediate mode (as close as DirectX comes to immediate mode)
; 1197 : #ifdef WRAPPER_BILLBOARD_MODE
; 1198 : 	if (!m_CompositeImageInstance.IsEmpty())

  00014	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  0001a	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0001f	84 c0		 test	 al, al
  00021	75 24		 jne	 SHORT $LN2@RenderBill
  00023	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 27   : 		return (*ms_singleton);

  00024	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1199 : 		STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  0002a	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  00030	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  0003c	50		 push	 eax
  0003d	6a 00		 push	 0
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  00046	5e		 pop	 esi
$LN2@RenderBill:

; 1200 : 
; 1201 : 	PositionTree();

  00047	8b cf		 mov	 ecx, edi
  00049	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree

; 1202 : 
; 1203 : 	struct SBillboardVertex
; 1204 : 	{
; 1205 : 		float fX, fY, fZ;
; 1206 : 		float fU, fV;
; 1207 : 	};
; 1208 : 
; 1209 : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BillboardGeometry);

  0004e	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00054	6a ff		 push	 -1
  00056	6a ff		 push	 -1
  00058	6a ff		 push	 -1
  0005a	6a 08		 push	 8
  0005c	ff b7 98 01 00
	00		 push	 DWORD PTR [edi+408]
  00062	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 1210 : 
; 1211 : 	if (m_pGeometryCache->m_sBillboard0.m_bIsActive)

  00067	8b 8f 98 01 00
	00		 mov	 ecx, DWORD PTR [edi+408]
  0006d	80 b9 f0 00 00
	00 00		 cmp	 BYTE PTR [ecx+240], 0
  00074	0f 84 1f 01 00
	00		 je	 $LN3@RenderBill

; 1212 : 	{
; 1213 : 		const float* pCoords = m_pGeometryCache->m_sBillboard0.m_pCoords;

  0007a	8b 81 f8 00 00
	00		 mov	 eax, DWORD PTR [ecx+248]

; 1214 : 		const float* pTexCoords = m_pGeometryCache->m_sBillboard0.m_pTexCoords;

  00080	8b 89 f4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+244]

; 1215 : 		SBillboardVertex sVertex[4] =
; 1216 : 		{
; 1217 : 			{ pCoords[0], pCoords[1], pCoords[2], pTexCoords[0], pTexCoords[1] },
; 1218 : 			{ pCoords[3], pCoords[4], pCoords[5], pTexCoords[2], pTexCoords[3] },
; 1219 : 			{ pCoords[6], pCoords[7], pCoords[8], pTexCoords[4], pTexCoords[5] },
; 1220 : 			{ pCoords[9], pCoords[10], pCoords[11], pTexCoords[6], pTexCoords[7] },
; 1221 : 		};
; 1222 : 
; 1223 : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ | D3DFVF_TEX1);

  00086	68 02 01 00 00	 push	 258			; 00000102H
  0008b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008f	f3 0f 11 45 ac	 movss	 DWORD PTR _sVertex$1[ebp], xmm0
  00094	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00099	f3 0f 11 45 b0	 movss	 DWORD PTR _sVertex$1[ebp+4], xmm0
  0009e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000a3	f3 0f 11 45 b4	 movss	 DWORD PTR _sVertex$1[ebp+8], xmm0
  000a8	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000ac	f3 0f 11 45 b8	 movss	 DWORD PTR _sVertex$1[ebp+12], xmm0
  000b1	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  000b6	f3 0f 11 45 bc	 movss	 DWORD PTR _sVertex$1[ebp+16], xmm0
  000bb	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000c0	f3 0f 11 45 c0	 movss	 DWORD PTR _sVertex$1[ebp+20], xmm0
  000c5	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  000ca	f3 0f 11 45 c4	 movss	 DWORD PTR _sVertex$1[ebp+24], xmm0
  000cf	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000d4	f3 0f 11 45 c8	 movss	 DWORD PTR _sVertex$1[ebp+28], xmm0
  000d9	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  000de	f3 0f 11 45 cc	 movss	 DWORD PTR _sVertex$1[ebp+32], xmm0
  000e3	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  000e8	f3 0f 11 45 d0	 movss	 DWORD PTR _sVertex$1[ebp+36], xmm0
  000ed	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  000f2	f3 0f 11 45 d4	 movss	 DWORD PTR _sVertex$1[ebp+40], xmm0
  000f7	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  000fc	f3 0f 11 45 d8	 movss	 DWORD PTR _sVertex$1[ebp+44], xmm0
  00101	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00106	f3 0f 11 45 dc	 movss	 DWORD PTR _sVertex$1[ebp+48], xmm0
  0010b	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00110	f3 0f 11 45 e0	 movss	 DWORD PTR _sVertex$1[ebp+52], xmm0
  00115	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0011a	f3 0f 11 45 e4	 movss	 DWORD PTR _sVertex$1[ebp+56], xmm0
  0011f	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00124	f3 0f 11 45 e8	 movss	 DWORD PTR _sVertex$1[ebp+60], xmm0
  00129	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  0012e	f3 0f 11 45 ec	 movss	 DWORD PTR _sVertex$1[ebp+64], xmm0
  00133	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  00138	f3 0f 11 45 f0	 movss	 DWORD PTR _sVertex$1[ebp+68], xmm0
  0013d	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00142	f3 0f 11 45 f4	 movss	 DWORD PTR _sVertex$1[ebp+72], xmm0
  00147	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  0014c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00152	f3 0f 11 45 f8	 movss	 DWORD PTR _sVertex$1[ebp+76], xmm0
  00157	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 1224 : 		STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_sBillboard0.m_fAlphaTestValue));

  0015c	8b 87 98 01 00
	00		 mov	 eax, DWORD PTR [edi+408]
  00162	f3 0f 10 80 fc
	00 00 00	 movss	 xmm0, DWORD PTR [eax+252]
  0016a	e8 00 00 00 00	 call	 __ftol3
  0016f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00175	50		 push	 eax
  00176	6a 18		 push	 24			; 00000018H
  00178	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 1225 : 
; 1226 : 		ms_faceCount += 2;
; 1227 : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, sVertex, sizeof(SBillboardVertex));

  0017d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00183	8d 45 ac	 lea	 eax, DWORD PTR _sVertex$1[ebp]
  00186	83 05 00 00 00
	00 02		 add	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, 2 ; CGraphicBase::ms_faceCount
  0018d	6a 14		 push	 20			; 00000014H
  0018f	50		 push	 eax
  00190	6a 02		 push	 2
  00192	6a 06		 push	 6
  00194	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
$LN3@RenderBill:

; 1228 : 	}
; 1229 : 
; 1230 : 	// if tree supports 360 degree billboards, render the second
; 1231 : 	if (m_pGeometryCache->m_sBillboard1.m_bIsActive)

  00199	8b 97 98 01 00
	00		 mov	 edx, DWORD PTR [edi+408]
  0019f	5f		 pop	 edi
  001a0	5b		 pop	 ebx
  001a1	80 ba 00 01 00
	00 00		 cmp	 BYTE PTR [edx+256], 0
  001a8	0f 84 09 01 00
	00		 je	 $LN4@RenderBill

; 1232 : 	{
; 1233 : 		const float* pCoords = m_pGeometryCache->m_sBillboard1.m_pCoords;

  001ae	8b 82 08 01 00
	00		 mov	 eax, DWORD PTR [edx+264]

; 1234 : 		const float* pTexCoords = m_pGeometryCache->m_sBillboard1.m_pTexCoords;

  001b4	8b 8a 04 01 00
	00		 mov	 ecx, DWORD PTR [edx+260]

; 1235 : 		SBillboardVertex sVertex[4] =
; 1236 : 		{
; 1237 : 			{ pCoords[0], pCoords[1], pCoords[2], pTexCoords[0], pTexCoords[1] },

  001ba	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001be	f3 0f 11 45 ac	 movss	 DWORD PTR _sVertex$2[ebp], xmm0
  001c3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  001c8	f3 0f 11 45 b0	 movss	 DWORD PTR _sVertex$2[ebp+4], xmm0
  001cd	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001d2	f3 0f 11 45 b4	 movss	 DWORD PTR _sVertex$2[ebp+8], xmm0
  001d7	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  001db	f3 0f 11 45 b8	 movss	 DWORD PTR _sVertex$2[ebp+12], xmm0
  001e0	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  001e5	f3 0f 11 45 bc	 movss	 DWORD PTR _sVertex$2[ebp+16], xmm0

; 1238 : 			{ pCoords[3], pCoords[4], pCoords[5], pTexCoords[2], pTexCoords[3] },

  001ea	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  001ef	f3 0f 11 45 c0	 movss	 DWORD PTR _sVertex$2[ebp+20], xmm0
  001f4	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  001f9	f3 0f 11 45 c4	 movss	 DWORD PTR _sVertex$2[ebp+24], xmm0
  001fe	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00203	f3 0f 11 45 c8	 movss	 DWORD PTR _sVertex$2[ebp+28], xmm0
  00208	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0020d	f3 0f 11 45 cc	 movss	 DWORD PTR _sVertex$2[ebp+32], xmm0
  00212	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00217	f3 0f 11 45 d0	 movss	 DWORD PTR _sVertex$2[ebp+36], xmm0

; 1239 : 			{ pCoords[6], pCoords[7], pCoords[8], pTexCoords[4], pTexCoords[5] },

  0021c	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00221	f3 0f 11 45 d4	 movss	 DWORD PTR _sVertex$2[ebp+40], xmm0
  00226	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  0022b	f3 0f 11 45 d8	 movss	 DWORD PTR _sVertex$2[ebp+44], xmm0
  00230	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00235	f3 0f 11 45 dc	 movss	 DWORD PTR _sVertex$2[ebp+48], xmm0
  0023a	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  0023f	f3 0f 11 45 e0	 movss	 DWORD PTR _sVertex$2[ebp+52], xmm0
  00244	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00249	f3 0f 11 45 e4	 movss	 DWORD PTR _sVertex$2[ebp+56], xmm0

; 1240 : 			{ pCoords[9], pCoords[10], pCoords[11], pTexCoords[6], pTexCoords[7] },

  0024e	f3 0f 10 48 24	 movss	 xmm1, DWORD PTR [eax+36]
  00253	f3 0f 11 4d e8	 movss	 DWORD PTR _sVertex$2[ebp+60], xmm1
  00258	f3 0f 10 48 28	 movss	 xmm1, DWORD PTR [eax+40]
  0025d	f3 0f 11 4d ec	 movss	 DWORD PTR _sVertex$2[ebp+64], xmm1
  00262	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  00267	f3 0f 11 4d f0	 movss	 DWORD PTR _sVertex$2[ebp+68], xmm1
  0026c	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00271	f3 0f 11 4d f4	 movss	 DWORD PTR _sVertex$2[ebp+72], xmm1
  00276	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0027b	f3 0f 11 4d f8	 movss	 DWORD PTR _sVertex$2[ebp+76], xmm1

; 1241 : 		};
; 1242 : 		STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_sBillboard1.m_fAlphaTestValue));

  00280	f3 0f 10 82 0c
	01 00 00	 movss	 xmm0, DWORD PTR [edx+268]
  00288	e8 00 00 00 00	 call	 __ftol3
  0028d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00293	50		 push	 eax
  00294	6a 18		 push	 24			; 00000018H
  00296	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 1243 : 
; 1244 : 		ms_faceCount += 2;
; 1245 : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, sVertex, sizeof(SBillboardVertex));

  0029b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002a1	8d 45 ac	 lea	 eax, DWORD PTR _sVertex$2[ebp]
  002a4	83 05 00 00 00
	00 02		 add	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, 2 ; CGraphicBase::ms_faceCount
  002ab	6a 14		 push	 20			; 00000014H
  002ad	50		 push	 eax
  002ae	6a 02		 push	 2
  002b0	6a 06		 push	 6
  002b2	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
$LN4@RenderBill:

; 1246 : 	}
; 1247 : 
; 1248 : #ifdef WRAPPER_RENDER_HORIZONTAL_BILLBOARD
; 1249 : 	// render horizontal billboard (if enabled)
; 1250 : 	if (m_pGeometryCache->m_sHorizontalBillboard.m_bIsActive)
; 1251 : 	{
; 1252 : 		const float* pCoords = m_pGeometryCache->m_sHorizontalBillboard.m_pCoords;
; 1253 : 		const float* pTexCoords = m_pGeometryCache->m_sHorizontalBillboard.m_pTexCoords;
; 1254 : 		SBillboardVertex sVertex[4] =
; 1255 : 		{
; 1256 : 			{ pCoords[0], pCoords[1], pCoords[2], pTexCoords[0], pTexCoords[1] },
; 1257 : 			{ pCoords[3], pCoords[4], pCoords[5], pTexCoords[2], pTexCoords[3] },
; 1258 : 			{ pCoords[6], pCoords[7], pCoords[8], pTexCoords[4], pTexCoords[5] },
; 1259 : 			{ pCoords[9], pCoords[10], pCoords[11], pTexCoords[6], pTexCoords[7] },
; 1260 : 		};
; 1261 : 		STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_sHorizontalBillboard.m_fAlphaTestValue));
; 1262 : 
; 1263 : 		ms_faceCount += 2;
; 1264 : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, sVertex, sizeof(SBillboardVertex));
; 1265 : 	}
; 1266 : 
; 1267 : #endif
; 1268 : #endif
; 1269 : }

  002b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ba	33 cd		 xor	 ecx, ebp
  002bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002c1	8b e5		 mov	 esp, ebp
  002c3	5d		 pop	 ebp
  002c4	c3		 ret	 0
?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::RenderBillboards
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
_unLod$1$ = -98344					; size = 4
tv1427 = -98340						; size = 4
_this$GSCopy$1$ = -98336				; size = 4
tv1400 = -98332						; size = 4
$T1 = -98328						; size = 4
_unLeaf$1$ = -98324					; size = 4
_center$1$ = -98320					; size = 4
_pVertex$2 = -98316					; size = 4
_i$1$ = -98312						; size = 4
_akPosition$3 = -98308					; size = 98304
__$ArrayPad$ = -4					; size = 4
?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ PROC		; CSpeedTreeWrapper::RenderLeaves, COMDAT
; _this$ = ecx

; 1039 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 28 80 01 00	 mov	 eax, 98344		; 00018028H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00012	33 c5		 xor	 eax, ebp
  00014	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi

; 1040 : 	// update leaf geometry
; 1041 : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_LeafGeometry);

  0001a	6a ff		 push	 -1
  0001c	6a ff		 push	 -1
  0001e	8b d9		 mov	 ebx, ecx
  00020	6a ff		 push	 -1
  00022	6a 04		 push	 4
  00024	89 9d e0 7f fe
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0002a	ff b3 98 01 00
	00		 push	 DWORD PTR [ebx+408]
  00030	8b 8b 7c 01 00
	00		 mov	 ecx, DWORD PTR [ebx+380]
  00036	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 1042 : 
; 1043 : 	// update the LOD level vertex arrays we need
; 1044 : #if defined(WRAPPER_USE_GPU_LEAF_PLACEMENT) && defined(WRAPPER_USE_GPU_WIND)
; 1045 : 	// do nothing, needs no updates
; 1046 : #else
; 1047 : #if !defined WRAPPER_USE_NO_WIND || defined WRAPPER_USE_CPU_LEAF_PLACEMENT
; 1048 : 	// possibly need to update both leaf LOD's
; 1049 : 	for (UINT i = 0; i < 2; ++i)

  0003b	33 c9		 xor	 ecx, ecx
  0003d	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
  00042	89 8d f8 7f fe
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@RenderLeav:

; 1050 : 	{
; 1051 : 		// reference to leaf structure
; 1052 : 		const CSpeedTreeRT::SGeometry::SLeaf* pLeaf = (i == 0) ? &m_pGeometryCache->m_sLeaves0 : &m_pGeometryCache->m_sLeaves1;
; 1053 : 		int unLod = pLeaf->m_nDiscreteLodLevel;

  00050	85 c9		 test	 ecx, ecx
  00052	be 78 00 00 00	 mov	 esi, 120		; 00000078H
  00057	0f 45 f0	 cmovne	 esi, eax
  0005a	03 b3 98 01 00
	00		 add	 esi, DWORD PTR [ebx+408]
  00060	89 b5 e4 7f fe
	ff		 mov	 DWORD PTR tv1400[ebp], esi

; 1054 : 
; 1055 : #if defined WRAPPER_USE_GPU_LEAF_PLACEMENT
; 1056 : 		if (pLeaf->m_bIsActive && !m_pLeavesUpdatedByCpu[unLod])
; 1057 : 		{
; 1058 : 			// update the centers
; 1059 : 			SFVFLeafVertex* pVertex = NULL;
; 1060 : 			m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertex), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 1061 : 			for (UINT unLeaf = 0; unLeaf < pLeaf->m_usLeafCount; ++unLeaf)
; 1062 : 			{
; 1063 : 				D3DXVECTOR3 vecCenter(&(pLeaf->m_pCenterCoords[unLeaf * 3]));
; 1064 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 0
; 1065 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 1
; 1066 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 2
; 1067 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 0
; 1068 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 2
; 1069 : 				(pVertex++)->m_vPosition = vecCenter;		// vertex 3
; 1070 : 			}
; 1071 : 			m_pLeafVertexBuffer[unLod]->Unlock();
; 1072 : 			m_pLeavesUpdatedByCpu[unLod] = true;
; 1073 : 		}
; 1074 : #else
; 1075 : 		if (pLeaf->m_bIsActive && m_pLeafVertexBuffer[unLod])

  00066	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00069	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0006c	89 95 d8 7f fe
	ff		 mov	 DWORD PTR _unLod$1$[ebp], edx
  00072	0f 84 cb 01 00
	00		 je	 $LN2@RenderLeav
  00078	8b 83 c0 01 00
	00		 mov	 eax, DWORD PTR [ebx+448]
  0007e	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00081	89 95 dc 7f fe
	ff		 mov	 DWORD PTR tv1427[ebp], edx
  00087	85 d2		 test	 edx, edx
  00089	0f 84 af 01 00
	00		 je	 $LN53@RenderLeav

; 1076 : 		{
; 1077 : 			// update the vertex positions
; 1078 : 			SFVFLeafVertex * pVertex = NULL;
; 1079 : 
; 1080 : 			const UINT VERTEX_NUM = 8192;
; 1081 : 			if (pLeaf->m_usLeafCount*3>=VERTEX_NUM)

  0008f	0f b7 7e 0c	 movzx	 edi, WORD PTR [esi+12]
  00093	c7 85 f4 7f fe
	ff 00 00 00 00	 mov	 DWORD PTR _pVertex$2[ebp], 0
  0009d	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000a0	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  000a5	0f 83 40 02 00
	00		 jae	 $LN12@RenderLeav

; 1082 : 				return;
; 1083 : 
; 1084 : 			D3DXVECTOR3 akPosition[VERTEX_NUM];
; 1085 : 			D3DXVECTOR3*pkPosition=akPosition;
; 1086 : 			const float* center=pLeaf->m_pCenterCoords;

  000ab	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000ae	89 85 f0 7f fe
	ff		 mov	 DWORD PTR _center$1$[ebp], eax
  000b4	c7 85 ec 7f fe
	ff 00 00 00 00	 mov	 DWORD PTR _unLeaf$1$[ebp], 0

; 1087 : 			for (UINT unLeaf = 0; unLeaf < pLeaf->m_usLeafCount; ++unLeaf)

  000be	85 ff		 test	 edi, edi
  000c0	0f 84 03 01 00
	00		 je	 $LN6@RenderLeav

; 1088 : 			{
; 1089 : 				pkPosition[0].x=pLeaf->m_pLeafMapCoords[unLeaf][0]+center[0];

  000c6	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000c9	8d 95 04 80 fe
	ff		 lea	 edx, DWORD PTR _akPosition$3[ebp+8]
  000cf	8b 9d f0 7f fe
	ff		 mov	 ebx, DWORD PTR _center$1$[ebp]
  000d5	8b b5 ec 7f fe
	ff		 mov	 esi, DWORD PTR _unLeaf$1$[ebp]
  000db	89 85 e8 7f fe
	ff		 mov	 DWORD PTR $T1[ebp], eax
$LL7@RenderLeav:
  000e1	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  000e4	46		 inc	 esi
  000e5	f3 0f 10 1b	 movss	 xmm3, DWORD PTR [ebx]

; 1090 : 				pkPosition[0].y=pLeaf->m_pLeafMapCoords[unLeaf][1]+center[1];

  000e9	f3 0f 10 53 04	 movss	 xmm2, DWORD PTR [ebx+4]
  000ee	0f 28 c3	 movaps	 xmm0, xmm3

; 1091 : 				pkPosition[0].z=pLeaf->m_pLeafMapCoords[unLeaf][2]+center[2];

  000f1	f3 0f 10 4b 08	 movss	 xmm1, DWORD PTR [ebx+8]

; 1092 : 				pkPosition[1].x=pLeaf->m_pLeafMapCoords[unLeaf][4]+center[0];
; 1093 : 				pkPosition[1].y=pLeaf->m_pLeafMapCoords[unLeaf][5]+center[1];
; 1094 : 				pkPosition[1].z=pLeaf->m_pLeafMapCoords[unLeaf][6]+center[2];
; 1095 : 				pkPosition[2].x=pLeaf->m_pLeafMapCoords[unLeaf][8]+center[0];
; 1096 : 				pkPosition[2].y=pLeaf->m_pLeafMapCoords[unLeaf][9]+center[1];
; 1097 : 				pkPosition[2].z=pLeaf->m_pLeafMapCoords[unLeaf][10]+center[2];
; 1098 : 				pkPosition[3]=pkPosition[0];
; 1099 : 				pkPosition[4]=pkPosition[2];
; 1100 : 				pkPosition[5].x=pLeaf->m_pLeafMapCoords[unLeaf][12]+center[0];
; 1101 : 				pkPosition[5].y=pLeaf->m_pLeafMapCoords[unLeaf][13]+center[1];
; 1102 : 				pkPosition[5].z=pLeaf->m_pLeafMapCoords[unLeaf][14]+center[2];
; 1103 : 				pkPosition+=6;
; 1104 : 				center+=3;

  000f6	83 c3 0c	 add	 ebx, 12			; 0000000cH
  000f9	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  000fd	f3 0f 11 42 f8	 movss	 DWORD PTR [edx-8], xmm0
  00102	0f 28 c2	 movaps	 xmm0, xmm2
  00105	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0010a	f3 0f 11 42 fc	 movss	 DWORD PTR [edx-4], xmm0
  0010f	0f 28 c1	 movaps	 xmm0, xmm1
  00112	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00117	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  0011b	0f 28 c3	 movaps	 xmm0, xmm3
  0011e	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  00123	8b 02		 mov	 eax, DWORD PTR [edx]
  00125	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0
  0012a	0f 28 c2	 movaps	 xmm0, xmm2
  0012d	f3 0f 58 41 14	 addss	 xmm0, DWORD PTR [ecx+20]
  00132	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0
  00137	0f 28 c1	 movaps	 xmm0, xmm1
  0013a	f3 0f 58 41 18	 addss	 xmm0, DWORD PTR [ecx+24]
  0013f	f3 0f 11 42 0c	 movss	 DWORD PTR [edx+12], xmm0
  00144	0f 28 c3	 movaps	 xmm0, xmm3
  00147	f3 0f 58 41 20	 addss	 xmm0, DWORD PTR [ecx+32]
  0014c	f3 0f 58 59 30	 addss	 xmm3, DWORD PTR [ecx+48]
  00151	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0
  00156	0f 28 c2	 movaps	 xmm0, xmm2
  00159	f3 0f 58 41 24	 addss	 xmm0, DWORD PTR [ecx+36]
  0015e	f3 0f 58 51 34	 addss	 xmm2, DWORD PTR [ecx+52]
  00163	f3 0f 11 5a 34	 movss	 DWORD PTR [edx+52], xmm3
  00168	f3 0f 11 42 14	 movss	 DWORD PTR [edx+20], xmm0
  0016d	0f 28 c1	 movaps	 xmm0, xmm1
  00170	f3 0f 58 41 28	 addss	 xmm0, DWORD PTR [ecx+40]
  00175	f3 0f 58 49 38	 addss	 xmm1, DWORD PTR [ecx+56]
  0017a	f3 0f 11 52 38	 movss	 DWORD PTR [edx+56], xmm2
  0017f	f3 0f 11 42 18	 movss	 DWORD PTR [edx+24], xmm0
  00184	f3 0f 7e 42 f8	 movq	 xmm0, QWORD PTR [edx-8]
  00189	66 0f d6 42 1c	 movq	 QWORD PTR [edx+28], xmm0
  0018e	f3 0f 7e 42 10	 movq	 xmm0, QWORD PTR [edx+16]
  00193	89 42 24	 mov	 DWORD PTR [edx+36], eax
  00196	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00199	66 0f d6 42 28	 movq	 QWORD PTR [edx+40], xmm0
  0019e	89 42 30	 mov	 DWORD PTR [edx+48], eax
  001a1	8b 85 e8 7f fe
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  001a7	f3 0f 11 4a 3c	 movss	 DWORD PTR [edx+60], xmm1
  001ac	83 c2 48	 add	 edx, 72			; 00000048H
  001af	3b f7		 cmp	 esi, edi
  001b1	0f 82 2a ff ff
	ff		 jb	 $LL7@RenderLeav
  001b7	8b b5 e4 7f fe
	ff		 mov	 esi, DWORD PTR tv1400[ebp]
  001bd	8b 9d e0 7f fe
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  001c3	8b 95 dc 7f fe
	ff		 mov	 edx, DWORD PTR tv1427[ebp]
$LN6@RenderLeav:

; 1105 : 			}
; 1106 : 
; 1107 : 			if (SUCCEEDED(

  001c9	8b 02		 mov	 eax, DWORD PTR [edx]
  001cb	8d 8d f4 7f fe
	ff		 lea	 ecx, DWORD PTR _pVertex$2[ebp]
  001d1	68 00 28 00 00	 push	 10240			; 00002800H
  001d6	51		 push	 ecx
  001d7	6a 00		 push	 0
  001d9	6a 00		 push	 0
  001db	52		 push	 edx
  001dc	ff 50 2c	 call	 DWORD PTR [eax+44]
  001df	85 c0		 test	 eax, eax
  001e1	78 55		 js	 SHORT $LN52@RenderLeav

; 1108 : 				m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertex), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK)
; 1109 : 			))
; 1110 : 			{
; 1111 : 				UINT uVtxCount=pLeaf->m_usLeafCount*6;

  001e3	0f b7 46 0c	 movzx	 eax, WORD PTR [esi+12]
  001e7	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]
  001ea	03 ff		 add	 edi, edi

; 1112 : 				for (UINT i = 0; i<uVtxCount; ++i)

  001ec	74 35		 je	 SHORT $LN9@RenderLeav

; 1108 : 				m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertex), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK)
; 1109 : 			))
; 1110 : 			{
; 1111 : 				UINT uVtxCount=pLeaf->m_usLeafCount*6;

  001ee	33 d2		 xor	 edx, edx
  001f0	8d b5 fc 7f fe
	ff		 lea	 esi, DWORD PTR _akPosition$3[ebp]
  001f6	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL10@RenderLeav:

; 1113 : 					pVertex[i].m_vPosition=akPosition[i];

  00200	8b 8d f4 7f fe
	ff		 mov	 ecx, DWORD PTR _pVertex$2[ebp]
  00206	8d 76 0c	 lea	 esi, DWORD PTR [esi+12]
  00209	f3 0f 7e 46 f4	 movq	 xmm0, QWORD PTR [esi-12]
  0020e	8d 52 18	 lea	 edx, DWORD PTR [edx+24]
  00211	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00214	66 0f d6 44 0a
	e8		 movq	 QWORD PTR [edx+ecx-24], xmm0
  0021a	89 44 0a f0	 mov	 DWORD PTR [edx+ecx-16], eax
  0021e	83 ef 01	 sub	 edi, 1
  00221	75 dd		 jne	 SHORT $LL10@RenderLeav
$LN9@RenderLeav:

; 1114 : 
; 1115 : 					/*
; 1116 : 					memcpy(vec0, pLeaf->m_pLeafMapCoords[unLeaf]+0, sizeof(D3DXVECTOR3));
; 1117 : 					memcpy(vec1, pLeaf->m_pLeafMapCoords[unLeaf]+4, sizeof(D3DXVECTOR3));
; 1118 : 					memcpy(vec2, pLeaf->m_pLeafMapCoords[unLeaf]+8, sizeof(D3DXVECTOR3));
; 1119 : 					memcpy(vec3, pLeaf->m_pLeafMapCoords[unLeaf]+12, sizeof(D3DXVECTOR3));
; 1120 : 					memcpy(vecCenter, pLeaf->m_pCenterCoords + unLeaf * 3, sizeof(D3DXVECTOR3));
; 1121 : 					vec0 += vecCenter;
; 1122 : 					vec1 += vecCenter;
; 1123 : 					vec2 += vecCenter;
; 1124 : 					vec3 += vecCenter;
; 1125 : 
; 1126 : 					pVertex[0].m_vPosition = vec0;
; 1127 : 					pVertex[3].m_vPosition = vec0;
; 1128 : 					pVertex[1].m_vPosition = vec1;
; 1129 : 					pVertex[4].m_vPosition = vec2;
; 1130 : 					pVertex[2].m_vPosition = vec2;
; 1131 : 					pVertex[5].m_vPosition = vec3;
; 1132 : 					*/
; 1133 : 				/*
; 1134 : 				for (UINT unLeaf = 0; unLeaf < pLeaf->m_usLeafCount; ++unLeaf)
; 1135 : 				{
; 1136 : 					D3DXVECTOR3 vecCenter(&(pLeaf->m_pCenterCoords[unLeaf * 3]));
; 1137 : 					D3DXVECTOR3 vec0(&pLeaf->m_pLeafMapCoords[unLeaf][0]);
; 1138 : 					D3DXVECTOR3 vec1(&pLeaf->m_pLeafMapCoords[unLeaf][4]);
; 1139 : 					D3DXVECTOR3 vec2(&pLeaf->m_pLeafMapCoords[unLeaf][8]);
; 1140 : 					D3DXVECTOR3 vec3(&pLeaf->m_pLeafMapCoords[unLeaf][12]);
; 1141 : 
; 1142 : 					(pVertex++)->m_vPosition = vecCenter + vec0;		// vertex 0
; 1143 : 					(pVertex++)->m_vPosition = vecCenter + vec1;		// vertex 1
; 1144 : 					(pVertex++)->m_vPosition = vecCenter + vec2;		// vertex 2
; 1145 : 					(pVertex++)->m_vPosition = vecCenter + vec0;		// vertex 0
; 1146 : 					(pVertex++)->m_vPosition = vecCenter + vec2;		// vertex 2
; 1147 : 					(pVertex++)->m_vPosition = vecCenter + vec3;		// vertex 3
; 1148 : 				}
; 1149 : 				*/
; 1150 : 				m_pLeafVertexBuffer[unLod]->Unlock();

  00223	8b 83 c0 01 00
	00		 mov	 eax, DWORD PTR [ebx+448]
  00229	8b 8d d8 7f fe
	ff		 mov	 ecx, DWORD PTR _unLod$1$[ebp]
  0022f	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00232	50		 push	 eax
  00233	8b 08		 mov	 ecx, DWORD PTR [eax]
  00235	ff 51 30	 call	 DWORD PTR [ecx+48]
$LN52@RenderLeav:

; 1042 : 
; 1043 : 	// update the LOD level vertex arrays we need
; 1044 : #if defined(WRAPPER_USE_GPU_LEAF_PLACEMENT) && defined(WRAPPER_USE_GPU_WIND)
; 1045 : 	// do nothing, needs no updates
; 1046 : #else
; 1047 : #if !defined WRAPPER_USE_NO_WIND || defined WRAPPER_USE_CPU_LEAF_PLACEMENT
; 1048 : 	// possibly need to update both leaf LOD's
; 1049 : 	for (UINT i = 0; i < 2; ++i)

  00238	8b 8d f8 7f fe
	ff		 mov	 ecx, DWORD PTR _i$1$[ebp]
$LN53@RenderLeav:
  0023e	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
$LN2@RenderLeav:
  00243	41		 inc	 ecx
  00244	89 8d f8 7f fe
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
  0024a	83 f9 02	 cmp	 ecx, 2
  0024d	0f 82 fd fd ff
	ff		 jb	 $LL4@RenderLeav

; 1151 : 			}
; 1152 : 		}
; 1153 : #endif
; 1154 : 	}
; 1155 : #endif
; 1156 : #endif
; 1157 : 
; 1158 : 	PositionTree();

  00253	8b cb		 mov	 ecx, ebx
  00255	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree
  0025a	33 ff		 xor	 edi, edi
  0025c	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
$LL13@RenderLeav:

; 1162 : 	{
; 1163 : 		const CSpeedTreeRT::SGeometry::SLeaf* pLeaf = (unLeafLevel == 0) ?
; 1164 : 			&m_pGeometryCache->m_sLeaves0 : &m_pGeometryCache->m_sLeaves1;
; 1165 : 
; 1166 : 		int unLod = pLeaf->m_nDiscreteLodLevel;

  00261	85 ff		 test	 edi, edi
  00263	be 78 00 00 00	 mov	 esi, 120		; 00000078H
  00268	0f 45 f0	 cmovne	 esi, eax
  0026b	03 b3 98 01 00
	00		 add	 esi, DWORD PTR [ebx+408]
  00271	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1167 : 
; 1168 : 		if (unLod > -1 && pLeaf->m_bIsActive && pLeaf->m_usLeafCount > 0)

  00274	83 f9 ff	 cmp	 ecx, -1
  00277	7e 68		 jle	 SHORT $LN11@RenderLeav
  00279	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0027c	74 63		 je	 SHORT $LN11@RenderLeav
  0027e	66 83 7e 0c 00	 cmp	 WORD PTR [esi+12], 0
  00283	76 5c		 jbe	 SHORT $LN11@RenderLeav

; 1169 : 		{
; 1170 : 			STATEMANAGER.SetStreamSource(0, m_pLeafVertexBuffer[unLod], sizeof(SFVFLeafVertex));

  00285	8b 83 c0 01 00
	00		 mov	 eax, DWORD PTR [ebx+448]
  0028b	6a 18		 push	 24			; 00000018H
  0028d	ff 34 88	 push	 DWORD PTR [eax+ecx*4]
  00290	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00296	6a 00		 push	 0
  00298	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 1171 : 			STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(pLeaf->m_fAlphaTestValue));

  0029d	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  002a2	e8 00 00 00 00	 call	 __ftol3
  002a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002ad	50		 push	 eax
  002ae	6a 18		 push	 24			; 00000018H
  002b0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 1172 : 
; 1173 : 			ms_faceCount += pLeaf->m_usLeafCount * 2;

  002b5	0f b7 4e 0c	 movzx	 ecx, WORD PTR [esi+12]
  002b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_faceCount@CGraphicBase@@1KA ; CGraphicBase::ms_faceCount
  002be	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]

; 1174 : 			STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLELIST, 0, pLeaf->m_usLeafCount * 2);

  002c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002c7	a3 00 00 00 00	 mov	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, eax ; CGraphicBase::ms_faceCount
  002cc	0f b7 46 0c	 movzx	 eax, WORD PTR [esi+12]
  002d0	03 c0		 add	 eax, eax
  002d2	50		 push	 eax
  002d3	6a 00		 push	 0
  002d5	6a 04		 push	 4
  002d7	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
  002dc	b8 b4 00 00 00	 mov	 eax, 180		; 000000b4H
$LN11@RenderLeav:

; 1159 : 
; 1160 : 	// render LODs, if needed
; 1161 : 	for (UINT unLeafLevel = 0; unLeafLevel < 2; ++unLeafLevel)

  002e1	47		 inc	 edi
  002e2	83 ff 02	 cmp	 edi, 2
  002e5	0f 82 76 ff ff
	ff		 jb	 $LL13@RenderLeav
$LN12@RenderLeav:

; 1175 : 		}
; 1176 : 	}
; 1177 : }

  002eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ee	5f		 pop	 edi
  002ef	5e		 pop	 esi
  002f0	33 cd		 xor	 ecx, ebp
  002f2	5b		 pop	 ebx
  002f3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f8	8b e5		 mov	 esp, ebp
  002fa	5d		 pop	 ebp
  002fb	c3		 ret	 0
?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ ENDP		; CSpeedTreeWrapper::RenderLeaves
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderFronds@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?RenderFronds@CSpeedTreeWrapper@@QBEXXZ PROC		; CSpeedTreeWrapper::RenderFronds, COMDAT
; _this$ = ecx

; 972  : {

  00000	56		 push	 esi

; 973  : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry);

  00001	6a ff		 push	 -1
  00003	6a ff		 push	 -1
  00005	8b f1		 mov	 esi, ecx
  00007	6a ff		 push	 -1
  00009	6a 02		 push	 2
  0000b	ff b6 98 01 00
	00		 push	 DWORD PTR [esi+408]
  00011	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00017	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 974  : 
; 975  : 	if (m_pGeometryCache->m_fFrondAlphaTestValue > 0.0f)

  0001c	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  00022	f3 0f 10 40 74	 movss	 xmm0, DWORD PTR [eax+116]
  00027	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0002e	76 7f		 jbe	 SHORT $LN3@RenderFron

; 976  : 	{
; 977  : 		PositionTree();

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree

; 978  : 
; 979  : 		// set alpha test value
; 980  : 		STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_fFrondAlphaTestValue));

  00037	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  0003d	f3 0f 10 40 74	 movss	 xmm0, DWORD PTR [eax+116]
  00042	e8 00 00 00 00	 call	 __ftol3
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004d	50		 push	 eax
  0004e	6a 18		 push	 24			; 00000018H
  00050	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 981  : 
; 982  : 		// render if this LOD has fronds
; 983  : 		if (m_pFrondIndexCounts &&

  00055	8b 8e b8 01 00
	00		 mov	 ecx, DWORD PTR [esi+440]
  0005b	85 c9		 test	 ecx, ecx
  0005d	74 50		 je	 SHORT $LN3@RenderFron
  0005f	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  00065	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00068	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0006c	66 85 c0	 test	 ax, ax
  0006f	74 3e		 je	 SHORT $LN3@RenderFron

; 984  : 			m_pFrondIndexCounts[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel] > 0)
; 985  : 		{
; 986  : 			ms_faceCount += m_pFrondIndexCounts[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel] - 2;

  00071	8b c8		 mov	 ecx, eax
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_faceCount@CGraphicBase@@1KA ; CGraphicBase::ms_faceCount
  00078	83 c0 fe	 add	 eax, -2			; fffffffeH
  0007b	03 c1		 add	 eax, ecx
  0007d	a3 00 00 00 00	 mov	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, eax ; CGraphicBase::ms_faceCount

; 987  : 			STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLESTRIP, 0, m_pGeometryCache->m_sFronds.m_usVertexCount, 0, m_pFrondIndexCounts[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel] - 2);

  00082	8b 96 98 01 00
	00		 mov	 edx, DWORD PTR [esi+408]
  00088	8b 86 b8 01 00
	00		 mov	 eax, DWORD PTR [esi+440]
  0008e	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  00091	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0009b	83 e8 02	 sub	 eax, 2
  0009e	50		 push	 eax
  0009f	0f b7 42 4c	 movzx	 eax, WORD PTR [edx+76]
  000a3	6a 00		 push	 0
  000a5	50		 push	 eax
  000a6	6a 00		 push	 0
  000a8	6a 05		 push	 5
  000aa	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN3@RenderFron:

; 988  : 		}
; 989  : 	}
; 990  : }

  000af	5e		 pop	 esi
  000b0	c3		 ret	 0
?RenderFronds@CSpeedTreeWrapper@@QBEXXZ ENDP		; CSpeedTreeWrapper::RenderFronds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderBranches@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?RenderBranches@CSpeedTreeWrapper@@QBEXXZ PROC		; CSpeedTreeWrapper::RenderBranches, COMDAT
; _this$ = ecx

; 899  : {

  00000	56		 push	 esi

; 900  : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry);

  00001	6a ff		 push	 -1
  00003	6a ff		 push	 -1
  00005	8b f1		 mov	 esi, ecx
  00007	6a ff		 push	 -1
  00009	6a 01		 push	 1
  0000b	ff b6 98 01 00
	00		 push	 DWORD PTR [esi+408]
  00011	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00017	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 901  : 
; 902  : 	if (m_pGeometryCache->m_fBranchAlphaTestValue)

  0001c	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  00022	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00027	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0002e	9f		 lahf
  0002f	f6 c4 44	 test	 ah, 68			; 00000044H
  00032	7b 7d		 jnp	 SHORT $LN3@RenderBran

; 903  : 	{
; 904  : 		PositionTree();

  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree

; 905  : 
; 906  : 		// set alpha test value
; 907  : 		STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_fBranchAlphaTestValue));

  0003b	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  00041	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00046	e8 00 00 00 00	 call	 __ftol3
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00051	50		 push	 eax
  00052	6a 18		 push	 24			; 00000018H
  00054	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 908  : 
; 909  : 		// render if this LOD has branches
; 910  : 		if (m_pBranchIndexCounts &&

  00059	8b 8e a8 01 00
	00		 mov	 ecx, DWORD PTR [esi+424]
  0005f	85 c9		 test	 ecx, ecx
  00061	74 4e		 je	 SHORT $LN3@RenderBran
  00063	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  00069	8b 00		 mov	 eax, DWORD PTR [eax]
  0006b	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0006f	66 85 c0	 test	 ax, ax
  00072	74 3d		 je	 SHORT $LN3@RenderBran

; 911  : 			m_pBranchIndexCounts[m_pGeometryCache->m_sBranches.m_nDiscreteLodLevel] > 0)
; 912  : 		{
; 913  : 			ms_faceCount += m_pBranchIndexCounts[m_pGeometryCache->m_sBranches.m_nDiscreteLodLevel] - 2;

  00074	8b c8		 mov	 ecx, eax
  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_faceCount@CGraphicBase@@1KA ; CGraphicBase::ms_faceCount
  0007b	83 c0 fe	 add	 eax, -2			; fffffffeH
  0007e	03 c1		 add	 eax, ecx
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, eax ; CGraphicBase::ms_faceCount

; 914  : 			STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLESTRIP, 0, m_pGeometryCache->m_sBranches.m_usVertexCount, 0, m_pBranchIndexCounts[m_pGeometryCache->m_sBranches.m_nDiscreteLodLevel] - 2);

  00085	8b 96 98 01 00
	00		 mov	 edx, DWORD PTR [esi+408]
  0008b	8b 86 a8 01 00
	00		 mov	 eax, DWORD PTR [esi+424]
  00091	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00093	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0009d	83 e8 02	 sub	 eax, 2
  000a0	50		 push	 eax
  000a1	0f b7 42 10	 movzx	 eax, WORD PTR [edx+16]
  000a5	6a 00		 push	 0
  000a7	50		 push	 eax
  000a8	6a 00		 push	 0
  000aa	6a 05		 push	 5
  000ac	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN3@RenderBran:

; 915  : 		}
; 916  : 	}
; 917  : }

  000b1	5e		 pop	 esi
  000b2	c3		 ret	 0
?RenderBranches@CSpeedTreeWrapper@@QBEXXZ ENDP		; CSpeedTreeWrapper::RenderBranches
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ
_TEXT	SEGMENT
?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ PROC	; CSpeedTreeWrapper::EndLeafForTreeType, COMDAT
; _this$ = ecx

; 1184 : {

  00000	8b d1		 mov	 edx, ecx

; 1185 : 	// reset copy flags for CPU wind
; 1186 : 	for (UINT i = 0; i < m_usNumLeafLods; ++i)

  00002	33 c0		 xor	 eax, eax
  00004	33 c9		 xor	 ecx, ecx
  00006	66 3b 8a bc 01
	00 00		 cmp	 cx, WORD PTR [edx+444]
  0000d	73 17		 jae	 SHORT $LN3@EndLeafFor
  0000f	90		 npad	 1
$LL4@EndLeafFor:

; 1187 : 		m_pLeavesUpdatedByCpu[i] = false;

  00010	8b 8a c4 01 00
	00		 mov	 ecx, DWORD PTR [edx+452]
  00016	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  0001a	40		 inc	 eax
  0001b	0f b7 8a bc 01
	00 00		 movzx	 ecx, WORD PTR [edx+444]
  00022	3b c1		 cmp	 eax, ecx
  00024	72 ea		 jb	 SHORT $LL4@EndLeafFor
$LN3@EndLeafFor:

; 1188 : }

  00026	c3		 ret	 0
?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ ENDP	; CSpeedTreeWrapper::EndLeafForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::SetupLeafForTreeType, COMDAT
; _this$ = ecx

; 997  : {

  00000	57		 push	 edi

; 998  : #ifdef SPEEDTREE_LIGHTING_DYNAMIC
; 999  : 	// set lighting material
; 1000 : 	STATEMANAGER.SetMaterial(m_cLeafMaterial.Get());
; 1001 : 	SetShaderConstants(m_pSpeedTree->GetLeafMaterial());
; 1002 : #endif
; 1003 : 
; 1004 : 	// pass leaf tables to shader
; 1005 : #ifdef WRAPPER_USE_GPU_LEAF_PLACEMENT
; 1006 : 	UploadLeafTables(c_nVertexShader_LeafTables);
; 1007 : #endif
; 1008 : 
; 1009 : 	if (!m_CompositeImageInstance.IsEmpty())

  00001	8d b9 08 03 00
	00		 lea	 edi, DWORD PTR [ecx+776]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0000e	84 c0		 test	 al, al
  00010	75 20		 jne	 SHORT $LN2@SetupLeafF
  00012	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 27   : 		return (*ms_singleton);

  00013	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1010 : 		STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00027	50		 push	 eax
  00028	6a 00		 push	 0
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  00031	5e		 pop	 esi
$LN2@SetupLeafF:

; 1011 : 
; 1012 : 	// bind shadow texture
; 1013 : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 1014 : 	STATEMANAGER.SetTexture(1, NULL);

  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00038	6a 00		 push	 0
  0003a	6a 01		 push	 1
  0003c	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  00041	5f		 pop	 edi

; 1015 : #endif
; 1016 : }

  00042	c3		 ret	 0
?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::SetupLeafForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::SetupFrondForTreeType, COMDAT
; _this$ = ecx

; 924  : {

  00000	53		 push	 ebx
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 925  : #ifdef SPEEDTREE_LIGHTING_DYNAMIC
; 926  : 	// set lighting material
; 927  : 	STATEMANAGER.SetMaterial(m_cFrondMaterial.Get());
; 928  : 	SetShaderConstants(m_pSpeedTree->GetFrondMaterial());
; 929  : #endif
; 930  : 
; 931  : 	// update the frond geometry for CPU wind
; 932  : #ifdef WRAPPER_USE_CPU_WIND
; 933  : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry);
; 934  : 	if (m_pGeometryCache->m_sFronds.m_usNumStrips > 0)
; 935  : 	{
; 936  : 		// update the vertex array
; 937  : 		SFVFBranchVertex * pVertexBuffer = NULL;
; 938  : 		m_pFrondVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 939  : 		for (UINT i = 0; i < m_unFrondVertexCount; ++i)
; 940  : 		{
; 941  : 			memcpy(&(pVertexBuffer[i].m_vPosition), &(m_pGeometryCache->m_sFronds.m_pCoords[i * 3]), 3 * sizeof(float));
; 942  : 		}
; 943  : 		m_pFrondVertexBuffer->Unlock();
; 944  : 	}
; 945  : #endif
; 946  : 
; 947  : 	if (!m_CompositeImageInstance.IsEmpty())

  00004	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  0000a	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0000f	84 c0		 test	 al, al
  00011	75 24		 jne	 SHORT $LN2@SetupFrond
  00013	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 27   : 		return (*ms_singleton);

  00014	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 948  : 		STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  0001a	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  00020	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00025	8b c8		 mov	 ecx, eax
  00027	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  00036	5e		 pop	 esi
$LN2@SetupFrond:

; 949  : 
; 950  : 	// bind shadow texture
; 951  : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 952  : 	LPDIRECT3DTEXTURE8 lpd3dTexture;
; 953  : 
; 954  : 	if ((lpd3dTexture = m_ShadowImageInstance.GetTextureReference().GetD3DTexture()))

  00037	8d 8f e0 02 00
	00		 lea	 ecx, DWORD PTR [edi+736]
  0003d	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00042	8b c8		 mov	 ecx, eax
  00044	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00049	85 c0		 test	 eax, eax
  0004b	74 0e		 je	 SHORT $LN3@SetupFrond

; 955  : 		STATEMANAGER.SetTexture(1, lpd3dTexture);

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00053	50		 push	 eax
  00054	6a 01		 push	 1
  00056	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN3@SetupFrond:

; 956  : #endif
; 957  : 
; 958  : 	if (m_pGeometryCache->m_sFronds.m_usVertexCount > 0)

  0005b	8b 87 98 01 00
	00		 mov	 eax, DWORD PTR [edi+408]
  00061	66 83 78 4c 00	 cmp	 WORD PTR [eax+76], 0
  00066	76 28		 jbe	 SHORT $LN4@SetupFrond

; 959  : 	{
; 960  : 		// activate the frond vertex buffer
; 961  : 		STATEMANAGER.SetStreamSource(0, m_pFrondVertexBuffer, sizeof(SFVFBranchVertex));

  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006e	6a 20		 push	 32			; 00000020H
  00070	ff b7 ac 01 00
	00		 push	 DWORD PTR [edi+428]
  00076	6a 00		 push	 0
  00078	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 962  : 		// set the index buffer
; 963  : 		STATEMANAGER.SetIndices(m_pFrondIndexBuffer, 0);

  0007d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00083	6a 00		 push	 0
  00085	ff b7 b4 01 00
	00		 push	 DWORD PTR [edi+436]
  0008b	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
$LN4@SetupFrond:

; 964  : 	}
; 965  : }

  00090	5f		 pop	 edi
  00091	5b		 pop	 ebx
  00092	c3		 ret	 0
?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::SetupFrondForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::SetupBranchForTreeType, COMDAT
; _this$ = ecx

; 847  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 848  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 849  : 	// set lighting material
; 850  : 	STATEMANAGER.SetMaterial(m_cBranchMaterial.Get());
; 851  : 	SetShaderConstants(m_pSpeedTree->GetBranchMaterial());
; 852  : #endif
; 853  : 
; 854  : 	// update the branch geometry for CPU wind
; 855  : #ifdef WRAPPER_USE_CPU_WIND
; 856  : 	m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry);
; 857  : 
; 858  : 	if (m_pGeometryCache->m_sBranches.m_usNumStrips > 0)
; 859  : 	{
; 860  : 		// update the vertex array
; 861  : 		SFVFBranchVertex* pVertexBuffer = NULL;
; 862  : 		m_pBranchVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 863  : 		for (UINT i = 0; i < m_unBranchVertexCount; ++i)
; 864  : 		{
; 865  : 			memcpy(&(pVertexBuffer[i].m_vPosition), &(m_pGeometryCache->m_sBranches.m_pCoords[i * 3]), 3 * sizeof(float));
; 866  : 		}
; 867  : 		m_pBranchVertexBuffer->Unlock();
; 868  : 	}
; 869  : #endif
; 870  : 
; 871  : 	LPDIRECT3DTEXTURE8 lpd3dTexture;
; 872  : 
; 873  :     // set texture map
; 874  :     if ((lpd3dTexture = m_BranchImageInstance.GetTextureReference().GetD3DTexture()))

  00003	8d 8e b8 02 00
	00		 lea	 ecx, DWORD PTR [esi+696]
  00009	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0000e	8b c8		 mov	 ecx, eax
  00010	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00015	85 c0		 test	 eax, eax
  00017	74 0e		 je	 SHORT $LN2@SetupBranc

; 875  :         STATEMANAGER.SetTexture(0, lpd3dTexture);

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001f	50		 push	 eax
  00020	6a 00		 push	 0
  00022	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN2@SetupBranc:

; 876  : 
; 877  : 	// bind shadow texture
; 878  : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 879  : 	if (ms_bSelfShadowOn && (lpd3dTexture = m_ShadowImageInstance.GetTextureReference().GetD3DTexture()))

  00027	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA, 0 ; CSpeedTreeWrapper::ms_bSelfShadowOn
  0002e	74 19		 je	 SHORT $LN3@SetupBranc
  00030	8d 8e e0 02 00
	00		 lea	 ecx, DWORD PTR [esi+736]
  00036	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0003b	8b c8		 mov	 ecx, eax
  0003d	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00042	85 c0		 test	 eax, eax
  00044	74 03		 je	 SHORT $LN3@SetupBranc

; 880  : 		STATEMANAGER.SetTexture(1, lpd3dTexture);

  00046	50		 push	 eax
  00047	eb 02		 jmp	 SHORT $LN13@SetupBranc
$LN3@SetupBranc:

; 881  : 	else
; 882  : 		STATEMANAGER.SetTexture(1, NULL);

  00049	6a 00		 push	 0
$LN13@SetupBranc:

; 883  : #endif
; 884  : 
; 885  : 	if (m_pGeometryCache->m_sBranches.m_usVertexCount > 0)

  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00051	6a 01		 push	 1
  00053	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  00058	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  0005e	66 83 78 10 00	 cmp	 WORD PTR [eax+16], 0
  00063	76 28		 jbe	 SHORT $LN5@SetupBranc

; 886  : 	{
; 887  : 		// activate the branch vertex buffer
; 888  : 		STATEMANAGER.SetStreamSource(0, m_pBranchVertexBuffer, sizeof(SFVFBranchVertex));

  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006b	6a 20		 push	 32			; 00000020H
  0006d	ff b6 9c 01 00
	00		 push	 DWORD PTR [esi+412]
  00073	6a 00		 push	 0
  00075	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 889  : 		// set the index buffer
; 890  : 		STATEMANAGER.SetIndices(m_pBranchIndexBuffer, 0);

  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00080	6a 00		 push	 0
  00082	ff b6 a4 01 00
	00		 push	 DWORD PTR [esi+420]
  00088	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
$LN5@SetupBranc:

; 891  : 	}
; 892  : }

  0008d	5e		 pop	 esi
  0008e	c3		 ret	 0
?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::SetupBranchForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetCollisionObject@CSpeedTreeWrapper@@QAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
_eType$ = 12						; size = 4
_pPosition$ = 16					; size = 4
_pDimensions$ = 20					; size = 4
?GetCollisionObject@CSpeedTreeWrapper@@QAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z PROC ; CSpeedTreeWrapper::GetCollisionObject, COMDAT
; _this$ = ecx

; 1430 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1431 : 	assert(m_pSpeedTree);
; 1432 : 	m_pSpeedTree->GetCollisionObject(nIndex, eType, pPosition, pDimensions);

  00003	8b 89 7c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+380]

; 1433 : }

  00009	5d		 pop	 ebp

; 1431 : 	assert(m_pSpeedTree);
; 1432 : 	m_pSpeedTree->GetCollisionObject(nIndex, eType, pPosition, pDimensions);

  0000a	e9 00 00 00 00	 jmp	 ?GetCollisionObject@CSpeedTreeRT@@QAEXIAAW4ECollisionObjectType@1@PAM1@Z ; CSpeedTreeRT::GetCollisionObject
?GetCollisionObject@CSpeedTreeWrapper@@QAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z ENDP ; CSpeedTreeWrapper::GetCollisionObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ
_TEXT	SEGMENT
?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ PROC	; CSpeedTreeWrapper::GetCollisionObjectCount, COMDAT
; _this$ = ecx

; 1425 : 	assert(m_pSpeedTree);
; 1426 : 	return m_pSpeedTree->GetCollisionObjectCount();

  00000	8b 89 7c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+380]
  00006	e9 00 00 00 00	 jmp	 ?GetCollisionObjectCount@CSpeedTreeRT@@QAEIXZ ; CSpeedTreeRT::GetCollisionObjectCount
?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ ENDP	; CSpeedTreeWrapper::GetCollisionObjectCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetTreeSize@CSpeedTreeWrapper@@QAEXAAM0@Z
_TEXT	SEGMENT
_r_fSize$ = 8						; size = 4
_r_fVariance$ = 12					; size = 4
?GetTreeSize@CSpeedTreeWrapper@@QAEXAAM0@Z PROC		; CSpeedTreeWrapper::GetTreeSize, COMDAT
; _this$ = ecx

; 1442 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1443 : 	m_pSpeedTree->GetTreeSize(r_fSize, r_fVariance);

  00003	8b 89 7c 01 00
	00		 mov	 ecx, DWORD PTR [ecx+380]

; 1444 : }

  00009	5d		 pop	 ebp

; 1443 : 	m_pSpeedTree->GetTreeSize(r_fSize, r_fVariance);

  0000a	e9 00 00 00 00	 jmp	 ?GetTreeSize@CSpeedTreeRT@@QBEXAAM0@Z ; CSpeedTreeRT::GetTreeSize
?GetTreeSize@CSpeedTreeWrapper@@QAEXAAM0@Z ENDP		; CSpeedTreeWrapper::GetTreeSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
_TEXT	SEGMENT
_pszSptFile$GSCopy$1$ = -196				; size = 4
$T2 = -192						; size = 4
$T3 = -192						; size = 1
$T4 = -192						; size = 1
$T5 = -192						; size = 1
_bSuccess$1$ = -185					; size = 1
$T6 = -184						; size = 24
$T7 = -184						; size = 24
$T8 = -160						; size = 24
$T9 = -160						; size = 24
$T10 = -160						; size = 24
$T11 = -136						; size = 24
$T12 = -136						; size = 24
$T13 = -136						; size = 24
_vs1$14 = -112						; size = 24
_vs2$15 = -88						; size = 24
$T16 = -64						; size = 24
_vss$17 = -64						; size = 24
_vss$18 = -64						; size = 24
$T19 = -40						; size = 24
$T20 = -40						; size = 24
$T21 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszSptFile$ = 8					; size = 4
_c_pbBlock$ = 12					; size = 4
_uiBlockSize$ = 16					; size = 4
_nSeed$ = 20						; size = 4
_fSize$ = 24						; size = 4
_fSizeVariance$ = 28					; size = 4
?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z PROC	; CSpeedTreeWrapper::LoadTree, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 45 08	 mov	 eax, DWORD PTR _pszSptFile$[ebp]
  00032	8b 75 0c	 mov	 esi, DWORD PTR _c_pbBlock$[ebp]

; 356  :     bool bSuccess = false;
; 357  : 
; 358  : 	// directx, so allow for flipping of the texture coordinate
; 359  : #ifdef WRAPPER_FLIP_T_TEXCOORD
; 360  : 	m_pSpeedTree->SetTextureFlip(true);

  00035	6a 01		 push	 1
  00037	89 85 3c ff ff
	ff		 mov	 DWORD PTR _pszSptFile$GSCopy$1$[ebp], eax
  0003d	c6 85 47 ff ff
	ff 00		 mov	 BYTE PTR _bSuccess$1$[ebp], 0
  00044	e8 00 00 00 00	 call	 ?SetTextureFlip@CSpeedTreeRT@@SAX_N@Z ; CSpeedTreeRT::SetTextureFlip

; 361  : #endif
; 362  : 
; 363  : 	// load the tree file
; 364  : 	if (!m_pSpeedTree->LoadTree(c_pbBlock, uiBlockSize))

  00049	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  0004f	83 c4 04	 add	 esp, 4
  00052	ff 75 10	 push	 DWORD PTR _uiBlockSize$[ebp]
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 ?LoadTree@CSpeedTreeRT@@QAE_NPBEI@Z ; CSpeedTreeRT::LoadTree
  0005b	8b b5 3c ff ff
	ff		 mov	 esi, DWORD PTR _pszSptFile$GSCopy$1$[ebp]
  00061	84 c0		 test	 al, al
  00063	75 2a		 jne	 SHORT $LN3@LoadTree

; 365  : 	{
; 366  : 		if (!m_pSpeedTree->LoadTree(pszSptFile))

  00065	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ?LoadTree@CSpeedTreeRT@@QAE_NPBD@Z ; CSpeedTreeRT::LoadTree
  00071	84 c0		 test	 al, al
  00073	75 1a		 jne	 SHORT $LN3@LoadTree

; 367  : 		{
; 368  : 			TraceError("SpeedTreeRT Error: %s", CSpeedTreeRT::GetCurrentError());

  00075	e8 00 00 00 00	 call	 ?GetCurrentError@CSpeedTreeRT@@SAPBDXZ ; CSpeedTreeRT::GetCurrentError
  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@
  00080	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00085	83 c4 08	 add	 esp, 8

; 369  : 			return false;

  00088	32 c0		 xor	 al, al
  0008a	e9 d6 06 00 00	 jmp	 $LN1@LoadTree
$LN3@LoadTree:

; 370  : 		}
; 371  : 	}
; 372  : 
; 373  : 	// override the lighting method stored in the spt file
; 374  : #ifdef WRAPPER_USE_DYNAMIC_LIGHTING
; 375  : 	m_pSpeedTree->SetBranchLightingMethod(CSpeedTreeRT::LIGHT_DYNAMIC);
; 376  : 	m_pSpeedTree->SetLeafLightingMethod(CSpeedTreeRT::LIGHT_DYNAMIC);
; 377  : 	m_pSpeedTree->SetFrondLightingMethod(CSpeedTreeRT::LIGHT_DYNAMIC);
; 378  : #else
; 379  : 	m_pSpeedTree->SetBranchLightingMethod(CSpeedTreeRT::LIGHT_STATIC);

  0008f	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00095	6a 01		 push	 1
  00097	e8 00 00 00 00	 call	 ?SetBranchLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z ; CSpeedTreeRT::SetBranchLightingMethod

; 380  : 	m_pSpeedTree->SetLeafLightingMethod(CSpeedTreeRT::LIGHT_STATIC);

  0009c	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  000a2	6a 01		 push	 1
  000a4	e8 00 00 00 00	 call	 ?SetLeafLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z ; CSpeedTreeRT::SetLeafLightingMethod

; 381  : 	m_pSpeedTree->SetFrondLightingMethod(CSpeedTreeRT::LIGHT_STATIC);

  000a9	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  000af	6a 01		 push	 1
  000b1	e8 00 00 00 00	 call	 ?SetFrondLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z ; CSpeedTreeRT::SetFrondLightingMethod

; 382  : #endif
; 383  : 
; 384  : 	// set the wind method
; 385  : #ifdef WRAPPER_USE_GPU_WIND
; 386  : 	m_pSpeedTree->SetBranchWindMethod(CSpeedTreeRT::WIND_GPU);
; 387  : 	m_pSpeedTree->SetLeafWindMethod(CSpeedTreeRT::WIND_GPU);
; 388  : 	m_pSpeedTree->SetFrondWindMethod(CSpeedTreeRT::WIND_GPU);
; 389  : #endif
; 390  : #ifdef WRAPPER_USE_CPU_WIND
; 391  : 	m_pSpeedTree->SetBranchWindMethod(CSpeedTreeRT::WIND_CPU);
; 392  : 	m_pSpeedTree->SetLeafWindMethod(CSpeedTreeRT::WIND_CPU);
; 393  : 	m_pSpeedTree->SetFrondWindMethod(CSpeedTreeRT::WIND_CPU);
; 394  : #endif
; 395  : #ifdef WRAPPER_USE_NO_WIND
; 396  : 	m_pSpeedTree->SetBranchWindMethod(CSpeedTreeRT::WIND_NONE);

  000b6	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  000bc	6a 02		 push	 2
  000be	e8 00 00 00 00	 call	 ?SetBranchWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z ; CSpeedTreeRT::SetBranchWindMethod

; 397  : 	m_pSpeedTree->SetLeafWindMethod(CSpeedTreeRT::WIND_NONE);

  000c3	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  000c9	6a 02		 push	 2
  000cb	e8 00 00 00 00	 call	 ?SetLeafWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z ; CSpeedTreeRT::SetLeafWindMethod

; 398  : 	m_pSpeedTree->SetFrondWindMethod(CSpeedTreeRT::WIND_NONE);

  000d0	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  000d6	6a 02		 push	 2
  000d8	e8 00 00 00 00	 call	 ?SetFrondWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z ; CSpeedTreeRT::SetFrondWindMethod

; 399  : #endif
; 400  : 
; 401  : 	m_pSpeedTree->SetNumLeafRockingGroups(1);

  000dd	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  000e3	6a 01		 push	 1
  000e5	e8 00 00 00 00	 call	 ?SetNumLeafRockingGroups@CSpeedTreeRT@@QAEXI@Z ; CSpeedTreeRT::SetNumLeafRockingGroups

; 402  : 
; 403  : 	// override the size, if necessary
; 404  : 	if (fSize >= 0.0f && fSizeVariance >= 0.0f)

  000ea	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _fSize$[ebp]
  000ef	0f 57 c9	 xorps	 xmm1, xmm1
  000f2	0f 2f d1	 comiss	 xmm2, xmm1
  000f5	72 23		 jb	 SHORT $LN4@LoadTree
  000f7	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fSizeVariance$[ebp]
  000fc	0f 2f c1	 comiss	 xmm0, xmm1
  000ff	72 19		 jb	 SHORT $LN4@LoadTree

; 405  : 		m_pSpeedTree->SetTreeSize(fSize, fSizeVariance);

  00101	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00107	83 ec 08	 sub	 esp, 8
  0010a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00110	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  00115	e8 00 00 00 00	 call	 ?SetTreeSize@CSpeedTreeRT@@QAEXMM@Z ; CSpeedTreeRT::SetTreeSize
$LN4@LoadTree:

; 406  : 
; 407  : 	// generate tree geometry
; 408  : 	if (m_pSpeedTree->Compute(NULL, nSeed))

  0011a	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00120	6a 01		 push	 1
  00122	ff 75 14	 push	 DWORD PTR _nSeed$[ebp]
  00125	6a 00		 push	 0
  00127	e8 00 00 00 00	 call	 ?Compute@CSpeedTreeRT@@QAE_NPBMI_N@Z ; CSpeedTreeRT::Compute
  0012c	84 c0		 test	 al, al
  0012e	0f 84 0d 06 00
	00		 je	 $LN5@LoadTree

; 409  : 	{
; 410  : 		// get the dimensions
; 411  : 		m_pSpeedTree->GetBoundingBox(m_afBoundingBox);

  00134	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  0013a	8d 87 d4 01 00
	00		 lea	 eax, DWORD PTR [edi+468]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?GetBoundingBox@CSpeedTreeRT@@QBEXPAM@Z ; CSpeedTreeRT::GetBoundingBox

; 412  : 
; 413  : 		// make the leaves rock in the wind
; 414  : 		m_pSpeedTree->SetLeafRockingState(true);

  00146	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  0014c	6a 01		 push	 1
  0014e	e8 00 00 00 00	 call	 ?SetLeafRockingState@CSpeedTreeRT@@QAEX_N@Z ; CSpeedTreeRT::SetLeafRockingState

; 415  : 
; 416  : 		// billboard setup
; 417  : #ifdef WRAPPER_NO_BILLBOARD_MODE
; 418  : 		CSpeedTreeRT::SetDropToBillboard(false);
; 419  : #else
; 420  : 		CSpeedTreeRT::SetDropToBillboard(true);

  00153	6a 01		 push	 1
  00155	e8 00 00 00 00	 call	 ?SetDropToBillboard@CSpeedTreeRT@@SAX_N@Z ; CSpeedTreeRT::SetDropToBillboard

; 421  : #endif
; 422  : 
; 423  : 		// query & set materials
; 424  : 		m_cBranchMaterial.Set(m_pSpeedTree->GetBranchMaterial());

  0015a	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00160	83 c4 04	 add	 esp, 4
  00163	e8 00 00 00 00	 call	 ?GetBranchMaterial@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetBranchMaterial
  00168	50		 push	 eax
  00169	8d 8f ec 01 00
	00		 lea	 ecx, DWORD PTR [edi+492]
  0016f	e8 00 00 00 00	 call	 ?Set@CSpeedTreeMaterial@@QAEXPBM@Z ; CSpeedTreeMaterial::Set

; 425  : 		m_cFrondMaterial.Set(m_pSpeedTree->GetFrondMaterial());

  00174	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  0017a	e8 00 00 00 00	 call	 ?GetFrondMaterial@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetFrondMaterial
  0017f	50		 push	 eax
  00180	8d 8f 74 02 00
	00		 lea	 ecx, DWORD PTR [edi+628]
  00186	e8 00 00 00 00	 call	 ?Set@CSpeedTreeMaterial@@QAEXPBM@Z ; CSpeedTreeMaterial::Set

; 426  : 		m_cLeafMaterial.Set(m_pSpeedTree->GetLeafMaterial());

  0018b	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00191	e8 00 00 00 00	 call	 ?GetLeafMaterial@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetLeafMaterial
  00196	50		 push	 eax
  00197	8d 8f 30 02 00
	00		 lea	 ecx, DWORD PTR [edi+560]
  0019d	e8 00 00 00 00	 call	 ?Set@CSpeedTreeMaterial@@QAEXPBM@Z ; CSpeedTreeMaterial::Set

; 427  : 
; 428  : 		// adjust lod distances
; 429  : 		float fHeight = m_afBoundingBox[5] - m_afBoundingBox[2];

  001a2	f3 0f 10 8f e8
	01 00 00	 movss	 xmm1, DWORD PTR [edi+488]

; 430  : 		m_pSpeedTree->SetLodLimits(fHeight * c_fNearLodFactor, fHeight * c_fFarLodFactor);

  001aa	83 ec 08	 sub	 esp, 8
  001ad	f3 0f 5c 8f dc
	01 00 00	 subss	 xmm1, DWORD PTR [edi+476]
  001b5	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  001bb	0f 28 c1	 movaps	 xmm0, xmm1
  001be	f3 0f 58 c9	 addss	 xmm1, xmm1
  001c2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41100000
  001ca	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001d0	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  001d5	e8 00 00 00 00	 call	 ?SetLodLimits@CSpeedTreeRT@@QAEXMM@Z ; CSpeedTreeRT::SetLodLimits

; 431  : 
; 432  : 		// query textures
; 433  : 		m_pTextureInfo = new CSpeedTreeRT::STextures;

  001da	6a 1c		 push	 28			; 0000001cH
  001dc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001e1	83 c4 04	 add	 esp, 4
  001e4	89 85 40 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  001ea	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001f1	85 c0		 test	 eax, eax
  001f3	74 09		 je	 SHORT $LN10@LoadTree
  001f5	8b c8		 mov	 ecx, eax
  001f7	e8 00 00 00 00	 call	 ??0STextures@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::STextures::STextures
  001fc	eb 02		 jmp	 SHORT $LN11@LoadTree
$LN10@LoadTree:
  001fe	33 c0		 xor	 eax, eax
$LN11@LoadTree:

; 434  : 		m_pSpeedTree->GetTextures(*m_pTextureInfo);

  00200	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00206	50		 push	 eax
  00207	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0020e	89 87 80 01 00
	00		 mov	 DWORD PTR [edi+384], eax
  00214	e8 00 00 00 00	 call	 ?GetTextures@CSpeedTreeRT@@QBEXAAUSTextures@1@@Z ; CSpeedTreeRT::GetTextures
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00219	8b ce		 mov	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0021b	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _vs1$14[ebp+16], 0
  00222	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00225	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vs1$14[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0022c	0f 11 45 90	 movups	 XMMWORD PTR _vs1$14[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00230	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL517@LoadTree:
  00233	8a 01		 mov	 al, BYTE PTR [ecx]
  00235	41		 inc	 ecx
  00236	84 c0		 test	 al, al
  00238	75 f9		 jne	 SHORT $LL517@LoadTree
  0023a	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0023c	51		 push	 ecx
  0023d	56		 push	 esi
  0023e	8d 4d 90	 lea	 ecx, DWORD PTR _vs1$14[ebp]
  00241	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 438  : 		auto vs2 = std::string(m_pTextureInfo->m_pBranchTextureFilename);

  00246	8b 87 80 01 00
	00		 mov	 eax, DWORD PTR [edi+384]
  0024c	0f 57 c0	 xorps	 xmm0, xmm0
  0024f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00256	8b 10		 mov	 edx, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00258	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0025a	0f 11 45 a8	 movups	 XMMWORD PTR _vs2$15[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0025e	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _vs2$15[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00265	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vs2$15[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0026c	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0026f	90		 npad	 1
$LL518@LoadTree:
  00270	8a 01		 mov	 al, BYTE PTR [ecx]
  00272	41		 inc	 ecx
  00273	84 c0		 test	 al, al
  00275	75 f9		 jne	 SHORT $LL518@LoadTree
  00277	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00279	51		 push	 ecx
  0027a	52		 push	 edx
  0027b	8d 4d a8	 lea	 ecx, DWORD PTR _vs2$15[ebp]
  0027e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 439  : 		LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vs2) + ".dds").c_str(), m_BranchImageInstance);

  00283	8d 45 a8	 lea	 eax, DWORD PTR _vs2$15[ebp]
  00286	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0028a	50		 push	 eax
  0028b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00291	50		 push	 eax
  00292	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  00297	8b f0		 mov	 esi, eax
  00299	8d 45 90	 lea	 eax, DWORD PTR _vs1$14[ebp]
  0029c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002a0	50		 push	 eax
  002a1	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  002a7	50		 push	 eax
  002a8	e8 00 00 00 00	 call	 ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
  002ad	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  002b0	56		 push	 esi
  002b1	50		 push	 eax
  002b2	ff b5 40 ff ff
	ff		 push	 DWORD PTR $T3[ebp]
  002b8	8d 4d c0	 lea	 ecx, DWORD PTR $T16[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 439  : 		LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vs2) + ".dds").c_str(), m_BranchImageInstance);

  002bb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  002bf	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002c4	6a 04		 push	 4
  002c6	68 00 00 00 00	 push	 OFFSET ??_C@_04LIKELABK@?4dds@
  002cb	8d 4d c0	 lea	 ecx, DWORD PTR $T16[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 439  : 		LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vs2) + ".dds").c_str(), m_BranchImageInstance);

  002ce	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002d2	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  002d7	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T19[ebp+16], 0
  002de	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  002e1	0f 11 45 d8	 movups	 XMMWORD PTR $T19[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  002e5	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T19[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  002ec	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002ef	0f 11 45 d8	 movups	 XMMWORD PTR $T19[ebp], xmm0
  002f3	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  002f8	66 0f d6 45 e8	 movq	 QWORD PTR $T19[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  002fd	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00304	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0030b	c6 00 00	 mov	 BYTE PTR [eax], 0

; 434  :         return _Myres > _Small_string_capacity;

  0030e	83 7d ec 0f	 cmp	 DWORD PTR $T19[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 439  : 		LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vs2) + ".dds").c_str(), m_BranchImageInstance);

  00312	8d 87 b8 02 00
	00		 lea	 eax, DWORD PTR [edi+696]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00318	8d 4d d8	 lea	 ecx, DWORD PTR $T19[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 439  : 		LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vs2) + ".dds").c_str(), m_BranchImageInstance);

  0031b	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0031f	0f 47 4d d8	 cmova	 ecx, DWORD PTR $T19[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 439  : 		LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vs2) + ".dds").c_str(), m_BranchImageInstance);

  00323	50		 push	 eax
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0032a	8b 4d ec	 mov	 ecx, DWORD PTR $T19[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 439  : 		LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vs2) + ".dds").c_str(), m_BranchImageInstance);

  0032d	83 c4 08	 add	 esp, 8
  00330	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00334	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00337	76 2c		 jbe	 SHORT $LN137@LoadTree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00339	8b 55 d8	 mov	 edx, DWORD PTR $T19[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0033c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0033d	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0033f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00345	72 14		 jb	 SHORT $LN148@LoadTree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00347	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0034a	83 c1 23	 add	 ecx, 35			; 00000023H
  0034d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0034f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00352	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00355	0f 87 27 04 00
	00		 ja	 $LN525@LoadTree
$LN148@LoadTree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0035b	51		 push	 ecx
  0035c	52		 push	 edx
  0035d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00362	83 c4 08	 add	 esp, 8
$LN137@LoadTree:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 439  : 		LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vs2) + ".dds").c_str(), m_BranchImageInstance);

  00365	8d 4d c0	 lea	 ecx, DWORD PTR $T16[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00368	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T19[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0036f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T19[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00376	c6 45 d8 00	 mov	 BYTE PTR $T19[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 439  : 		LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vs2) + ".dds").c_str(), m_BranchImageInstance);

  0037a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0037f	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00385	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0038a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00390	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00394	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 440  : 
; 441  : #ifdef WRAPPER_RENDER_SELF_SHADOWS
; 442  : 		if (m_pTextureInfo->m_pSelfShadowFilename != NULL)

  00399	8b 87 80 01 00
	00		 mov	 eax, DWORD PTR [edi+384]
  0039f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  003a2	85 d2		 test	 edx, edx
  003a4	0f 84 80 01 00
	00		 je	 $LN309@LoadTree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003aa	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  003ac	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _vss$17[ebp+16], 0
  003b3	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  003b6	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vss$17[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003bd	0f 11 45 c0	 movups	 XMMWORD PTR _vss$17[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003c1	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL519@LoadTree:
  003c4	8a 01		 mov	 al, BYTE PTR [ecx]
  003c6	41		 inc	 ecx
  003c7	84 c0		 test	 al, al
  003c9	75 f9		 jne	 SHORT $LL519@LoadTree
  003cb	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003cd	51		 push	 ecx
  003ce	52		 push	 edx
  003cf	8d 4d c0	 lea	 ecx, DWORD PTR _vss$17[ebp]
  003d2	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 445  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_ShadowImageInstance);

  003d7	8d 45 c0	 lea	 eax, DWORD PTR _vss$17[ebp]
  003da	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  003de	50		 push	 eax
  003df	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  003e5	50		 push	 eax
  003e6	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  003eb	8b f0		 mov	 esi, eax
  003ed	8d 45 90	 lea	 eax, DWORD PTR _vs1$14[ebp]
  003f0	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  003f4	50		 push	 eax
  003f5	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  003fb	50		 push	 eax
  003fc	e8 00 00 00 00	 call	 ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
  00401	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00404	56		 push	 esi
  00405	50		 push	 eax
  00406	ff b5 40 ff ff
	ff		 push	 DWORD PTR $T4[ebp]
  0040c	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 445  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_ShadowImageInstance);

  00412	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00416	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0041b	6a 04		 push	 4
  0041d	68 00 00 00 00	 push	 OFFSET ??_C@_04LIKELABK@?4dds@
  00422	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 445  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_ShadowImageInstance);

  00428	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0042c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00431	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+16], 0
  00438	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0043b	0f 11 45 d8	 movups	 XMMWORD PTR $T20[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0043f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00446	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00449	0f 11 45 d8	 movups	 XMMWORD PTR $T20[ebp], xmm0
  0044d	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00452	66 0f d6 45 e8	 movq	 QWORD PTR $T20[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00457	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0045e	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00465	c6 00 00	 mov	 BYTE PTR [eax], 0

; 434  :         return _Myres > _Small_string_capacity;

  00468	83 7d ec 0f	 cmp	 DWORD PTR $T20[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 445  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_ShadowImageInstance);

  0046c	8d 87 e0 02 00
	00		 lea	 eax, DWORD PTR [edi+736]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00472	8d 4d d8	 lea	 ecx, DWORD PTR $T20[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 445  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_ShadowImageInstance);

  00475	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00479	0f 47 4d d8	 cmova	 ecx, DWORD PTR $T20[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 445  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_ShadowImageInstance);

  0047d	50		 push	 eax
  0047e	51		 push	 ecx
  0047f	e8 00 00 00 00	 call	 ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00484	8b 4d ec	 mov	 ecx, DWORD PTR $T20[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 445  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_ShadowImageInstance);

  00487	83 c4 08	 add	 esp, 8
  0048a	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0048e	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00491	76 2c		 jbe	 SHORT $LN490@LoadTree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00493	8b 55 d8	 mov	 edx, DWORD PTR $T20[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00496	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00497	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00499	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0049f	72 14		 jb	 SHORT $LN501@LoadTree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004a1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004a4	83 c1 23	 add	 ecx, 35			; 00000023H
  004a7	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004a9	83 c0 fc	 add	 eax, -4			; fffffffcH
  004ac	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004af	0f 87 d2 02 00
	00		 ja	 $LN526@LoadTree
$LN501@LoadTree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004b5	51		 push	 ecx
  004b6	52		 push	 edx
  004b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004bc	83 c4 08	 add	 esp, 8
$LN490@LoadTree:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 445  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_ShadowImageInstance);

  004bf	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  004c5	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  004cc	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T20[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  004d3	c6 45 d8 00	 mov	 BYTE PTR $T20[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 445  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_ShadowImageInstance);

  004d7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004dc	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  004e2	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  004e7	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  004ed	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004f2	8b 4d d4	 mov	 ecx, DWORD PTR _vss$17[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 446  : 		}

  004f5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004f9	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004fc	76 2c		 jbe	 SHORT $LN309@LoadTree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004fe	8b 55 c0	 mov	 edx, DWORD PTR _vss$17[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00501	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00502	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00504	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0050a	72 14		 jb	 SHORT $LN320@LoadTree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0050c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0050f	83 c1 23	 add	 ecx, 35			; 00000023H
  00512	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00514	83 c0 fc	 add	 eax, -4			; fffffffcH
  00517	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0051a	0f 87 6c 02 00
	00		 ja	 $LN527@LoadTree
$LN320@LoadTree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00520	51		 push	 ecx
  00521	52		 push	 edx
  00522	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00527	83 c4 08	 add	 esp, 8
$LN309@LoadTree:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 448  : 		if (m_pTextureInfo->m_pCompositeFilename)

  0052a	8b 87 80 01 00
	00		 mov	 eax, DWORD PTR [edi+384]
  00530	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00533	85 d2		 test	 edx, edx
  00535	0f 84 80 01 00
	00		 je	 $LN453@LoadTree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0053b	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0053d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _vss$18[ebp+16], 0
  00544	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00547	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vss$18[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0054e	0f 11 45 c0	 movups	 XMMWORD PTR _vss$18[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00552	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL520@LoadTree:
  00555	8a 01		 mov	 al, BYTE PTR [ecx]
  00557	41		 inc	 ecx
  00558	84 c0		 test	 al, al
  0055a	75 f9		 jne	 SHORT $LL520@LoadTree
  0055c	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0055e	51		 push	 ecx
  0055f	52		 push	 edx
  00560	8d 4d c0	 lea	 ecx, DWORD PTR _vss$18[ebp]
  00563	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 451  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_CompositeImageInstance);

  00568	8d 45 c0	 lea	 eax, DWORD PTR _vss$18[ebp]
  0056b	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  0056f	50		 push	 eax
  00570	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00576	50		 push	 eax
  00577	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  0057c	8b f0		 mov	 esi, eax
  0057e	8d 45 90	 lea	 eax, DWORD PTR _vs1$14[ebp]
  00581	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  00585	50		 push	 eax
  00586	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0058c	50		 push	 eax
  0058d	e8 00 00 00 00	 call	 ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
  00592	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00595	56		 push	 esi
  00596	50		 push	 eax
  00597	ff b5 40 ff ff
	ff		 push	 DWORD PTR $T5[ebp]
  0059d	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 451  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_CompositeImageInstance);

  005a3	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  005a7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005ac	6a 04		 push	 4
  005ae	68 00 00 00 00	 push	 OFFSET ??_C@_04LIKELABK@?4dds@
  005b3	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 451  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_CompositeImageInstance);

  005b9	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005bd	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  005c2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+16], 0
  005c9	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  005cc	0f 11 45 d8	 movups	 XMMWORD PTR $T21[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  005d0	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  005d7	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  005da	0f 11 45 d8	 movups	 XMMWORD PTR $T21[ebp], xmm0
  005de	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  005e3	66 0f d6 45 e8	 movq	 QWORD PTR $T21[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  005e8	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  005ef	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  005f6	c6 00 00	 mov	 BYTE PTR [eax], 0

; 434  :         return _Myres > _Small_string_capacity;

  005f9	83 7d ec 0f	 cmp	 DWORD PTR $T21[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 451  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_CompositeImageInstance);

  005fd	8d 87 08 03 00
	00		 lea	 eax, DWORD PTR [edi+776]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00603	8d 4d d8	 lea	 ecx, DWORD PTR $T21[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 451  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_CompositeImageInstance);

  00606	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0060a	0f 47 4d d8	 cmova	 ecx, DWORD PTR $T21[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 451  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_CompositeImageInstance);

  0060e	50		 push	 eax
  0060f	51		 push	 ecx
  00610	e8 00 00 00 00	 call	 ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00615	8b 4d ec	 mov	 ecx, DWORD PTR $T21[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 451  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_CompositeImageInstance);

  00618	83 c4 08	 add	 esp, 8
  0061b	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0061f	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00622	76 2c		 jbe	 SHORT $LN416@LoadTree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00624	8b 55 d8	 mov	 edx, DWORD PTR $T21[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00627	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00628	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0062a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00630	72 14		 jb	 SHORT $LN427@LoadTree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00632	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00635	83 c1 23	 add	 ecx, 35			; 00000023H
  00638	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0063a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0063d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00640	0f 87 4b 01 00
	00		 ja	 $LN528@LoadTree
$LN427@LoadTree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00646	51		 push	 ecx
  00647	52		 push	 edx
  00648	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0064d	83 c4 08	 add	 esp, 8
$LN416@LoadTree:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 451  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_CompositeImageInstance);

  00650	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00656	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T21[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0065d	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T21[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00664	c6 45 d8 00	 mov	 BYTE PTR $T21[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 451  : 			LoadTexture((CFileNameHelper::GetPath(vs1) + CFileNameHelper::NoExtension(vss) + ".dds").c_str(), m_CompositeImageInstance);

  00668	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0066d	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00673	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00678	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0067e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00683	8b 4d d4	 mov	 ecx, DWORD PTR _vss$18[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 452  : 		}

  00686	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0068a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0068d	76 2c		 jbe	 SHORT $LN453@LoadTree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0068f	8b 55 c0	 mov	 edx, DWORD PTR _vss$18[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00692	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00693	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00695	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0069b	72 14		 jb	 SHORT $LN464@LoadTree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0069d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  006a0	83 c1 23	 add	 ecx, 35			; 00000023H
  006a3	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  006a5	83 c0 fc	 add	 eax, -4			; fffffffcH
  006a8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  006ab	0f 87 e5 00 00
	00		 ja	 $LN529@LoadTree
$LN464@LoadTree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  006b1	51		 push	 ecx
  006b2	52		 push	 edx
  006b3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006b8	83 c4 08	 add	 esp, 8
$LN453@LoadTree:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 455  : 		SetupBuffers();

  006bb	8b cf		 mov	 ecx, edi
  006bd	e8 00 00 00 00	 call	 ?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupBuffers
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  006c2	8b 4d bc	 mov	 ecx, DWORD PTR _vs2$15[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 458  : 		bSuccess = true;

  006c5	c6 85 47 ff ff
	ff 01		 mov	 BYTE PTR _bSuccess$1$[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  006cc	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  006cf	76 2c		 jbe	 SHORT $LN175@LoadTree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006d1	8b 55 a8	 mov	 edx, DWORD PTR _vs2$15[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  006d4	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006d5	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  006d7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  006dd	72 14		 jb	 SHORT $LN186@LoadTree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  006df	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  006e2	83 c1 23	 add	 ecx, 35			; 00000023H
  006e5	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  006e7	83 c0 fc	 add	 eax, -4			; fffffffcH
  006ea	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  006ed	0f 87 a8 00 00
	00		 ja	 $LN220@LoadTree
$LN186@LoadTree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  006f3	51		 push	 ecx
  006f4	52		 push	 edx
  006f5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006fa	83 c4 08	 add	 esp, 8
$LN175@LoadTree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  006fd	8b 4d a4	 mov	 ecx, DWORD PTR _vs1$14[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  00700	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _vs2$15[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00707	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _vs2$15[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0070e	c6 45 a8 00	 mov	 BYTE PTR _vs2$15[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  00712	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00715	76 48		 jbe	 SHORT $LN6@LoadTree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00717	8b 55 90	 mov	 edx, DWORD PTR _vs1$14[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0071a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0071b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0071d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00723	72 10		 jb	 SHORT $LN223@LoadTree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00725	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00728	83 c1 23	 add	 ecx, 35			; 00000023H
  0072b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0072d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00730	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00733	77 66		 ja	 SHORT $LN220@LoadTree
$LN223@LoadTree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00735	51		 push	 ecx
  00736	52		 push	 edx
  00737	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0073c	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 459  : 	}

  0073f	eb 1e		 jmp	 SHORT $LN6@LoadTree
$LN5@LoadTree:

; 460  : 	else // tree failed to compute
; 461  : 		fprintf(stderr, "\nFatal Error, cannot compute tree [%s]\n\n", CSpeedTreeRT::GetCurrentError());

  00741	e8 00 00 00 00	 call	 ?GetCurrentError@CSpeedTreeRT@@SAPBDXZ ; CSpeedTreeRT::GetCurrentError
  00746	50		 push	 eax
  00747	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@
  0074c	6a 02		 push	 2
  0074e	e8 00 00 00 00	 call	 ___acrt_iob_func
  00753	83 c4 04	 add	 esp, 4
  00756	50		 push	 eax
  00757	e8 00 00 00 00	 call	 _fprintf
  0075c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@LoadTree:

; 462  : 
; 463  :     return bSuccess;

  0075f	8a 85 47 ff ff
	ff		 mov	 al, BYTE PTR _bSuccess$1$[ebp]
$LN1@LoadTree:

; 464  : }

  00765	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00768	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0076f	59		 pop	 ecx
  00770	5f		 pop	 edi
  00771	5e		 pop	 esi
  00772	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00775	33 cd		 xor	 ecx, ebp
  00777	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0077c	8b e5		 mov	 esp, ebp
  0077e	5d		 pop	 ebp
  0077f	c2 18 00	 ret	 24			; 00000018H
$LN525@LoadTree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00782	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN526@LoadTree:
  00787	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN527@LoadTree:
  0078c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN528@LoadTree:
  00791	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN529@LoadTree:
  00796	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN220@LoadTree:
  0079b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN523@LoadTree:
  007a0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$0:
  00000	6a 1c		 push	 28			; 0000001cH
  00002	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$1:
  00012	8d 4d 90	 lea	 ecx, DWORD PTR _vs1$14[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$2:
  0001a	8d 4d a8	 lea	 ecx, DWORD PTR _vs2$15[ebp]
  0001d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$3:
  00022	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00028	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$4:
  0002d	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$5:
  00038	8d 4d c0	 lea	 ecx, DWORD PTR $T16[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$6:
  00040	8d 4d d8	 lea	 ecx, DWORD PTR $T19[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$7:
  00048	8d 4d c0	 lea	 ecx, DWORD PTR _vss$17[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$8:
  00050	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00056	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$9:
  0005b	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00061	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$10:
  00066	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0006c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$11:
  00071	8d 4d d8	 lea	 ecx, DWORD PTR $T20[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$12:
  00079	8d 4d c0	 lea	 ecx, DWORD PTR _vss$18[ebp]
  0007c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$13:
  00081	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00087	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$14:
  0008c	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00092	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$15:
  00097	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  0009d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$16:
  000a2	8d 4d d8	 lea	 ecx, DWORD PTR $T21[ebp]
  000a5	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000aa	cc		 int	 3
  000ab	cc		 int	 3
  000ac	cc		 int	 3
  000ad	cc		 int	 3
  000ae	cc		 int	 3
__ehhandler$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z:
  000af	90		 npad	 1
  000b0	90		 npad	 1
  000b1	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000b5	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000b8	8b 8a 3c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-196]
  000be	33 c8		 xor	 ecx, eax
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000c8	33 c8		 xor	 ecx, eax
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
  000d4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z ENDP	; CSpeedTreeWrapper::LoadTree
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetVertexShaders@CSpeedTreeWrapper@@SAXKK@Z
_TEXT	SEGMENT
_dwBranchVertexShader$ = 8				; size = 4
_dwLeafVertexShader$ = 12				; size = 4
?SetVertexShaders@CSpeedTreeWrapper@@SAXKK@Z PROC	; CSpeedTreeWrapper::SetVertexShaders, COMDAT

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   : 	ms_dwBranchVertexShader = dwBranchVertexShader;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwBranchVertexShader$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwBranchVertexShader

; 87   : 	ms_dwLeafVertexShader = dwLeafVertexShader;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _dwLeafVertexShader$[ebp]
  0000e	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwLeafVertexShader

; 88   : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?SetVertexShaders@CSpeedTreeWrapper@@SAXKK@Z ENDP	; CSpeedTreeWrapper::SetVertexShaders
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetPosition@CSpeedTreeWrapper@@QAEPBMXZ
_TEXT	SEGMENT
?GetPosition@CSpeedTreeWrapper@@QAEPBMXZ PROC		; CSpeedTreeWrapper::GetPosition, COMDAT
; _this$ = ecx

; 1438 : 	return m_afPos;

  00000	8d 81 c8 01 00
	00		 lea	 eax, DWORD PTR [ecx+456]

; 1439 : }

  00006	c3		 ret	 0
?GetPosition@CSpeedTreeWrapper@@QAEPBMXZ ENDP		; CSpeedTreeWrapper::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ??1CSpeedTreeWrapper@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSpeedTreeWrapper@@UAE@XZ PROC			; CSpeedTreeWrapper::~CSpeedTreeWrapper, COMDAT
; _this$ = ecx

; 311  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSpeedTreeWrapper@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 312  : 	// if this is not an instance, clean up
; 313  : 	if (!m_bIsInstance)

  00027	80 be 84 01 00
	00 00		 cmp	 BYTE PTR [esi+388], 0
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSpeedTreeWrapper@@6B@
  00034	0f 85 a6 01 00
	00		 jne	 $LN19@CSpeedTree

; 314  : 	{
; 315  : 		if (m_unBranchVertexCount > 0)

  0003a	83 be a0 01 00
	00 00		 cmp	 DWORD PTR [esi+416], 0
  00041	76 51		 jbe	 SHORT $LN9@CSpeedTree

; 316  : 		{
; 317  : 			SAFE_RELEASE(m_pBranchVertexBuffer);

  00043	8b 8e 9c 01 00
	00		 mov	 ecx, DWORD PTR [esi+412]
  00049	85 c9		 test	 ecx, ecx
  0004b	74 10		 je	 SHORT $LN7@CSpeedTree
  0004d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004f	51		 push	 ecx
  00050	ff 50 08	 call	 DWORD PTR [eax+8]
  00053	c7 86 9c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+412], 0
$LN7@CSpeedTree:

; 318  : 			SAFE_RELEASE(m_pBranchIndexBuffer);

  0005d	8b 8e a4 01 00
	00		 mov	 ecx, DWORD PTR [esi+420]
  00063	85 c9		 test	 ecx, ecx
  00065	74 10		 je	 SHORT $LN8@CSpeedTree
  00067	8b 01		 mov	 eax, DWORD PTR [ecx]
  00069	51		 push	 ecx
  0006a	ff 50 08	 call	 DWORD PTR [eax+8]
  0006d	c7 86 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+420], 0
$LN8@CSpeedTree:

; 319  : 			SAFE_DELETE_ARRAY(m_pBranchIndexCounts);

  00077	8b 86 a8 01 00
	00		 mov	 eax, DWORD PTR [esi+424]
  0007d	85 c0		 test	 eax, eax
  0007f	74 13		 je	 SHORT $LN9@CSpeedTree
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00087	83 c4 04	 add	 esp, 4
  0008a	c7 86 a8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+424], 0
$LN9@CSpeedTree:

; 320  : 		}
; 321  : 
; 322  : 		if (m_unFrondVertexCount > 0)

  00094	83 be b0 01 00
	00 00		 cmp	 DWORD PTR [esi+432], 0
  0009b	76 51		 jbe	 SHORT $LN13@CSpeedTree

; 323  : 		{
; 324  : 			SAFE_RELEASE(m_pFrondVertexBuffer);

  0009d	8b 8e ac 01 00
	00		 mov	 ecx, DWORD PTR [esi+428]
  000a3	85 c9		 test	 ecx, ecx
  000a5	74 10		 je	 SHORT $LN11@CSpeedTree
  000a7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a9	51		 push	 ecx
  000aa	ff 50 08	 call	 DWORD PTR [eax+8]
  000ad	c7 86 ac 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+428], 0
$LN11@CSpeedTree:

; 325  : 			SAFE_RELEASE(m_pFrondIndexBuffer);

  000b7	8b 8e b4 01 00
	00		 mov	 ecx, DWORD PTR [esi+436]
  000bd	85 c9		 test	 ecx, ecx
  000bf	74 10		 je	 SHORT $LN12@CSpeedTree
  000c1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c3	51		 push	 ecx
  000c4	ff 50 08	 call	 DWORD PTR [eax+8]
  000c7	c7 86 b4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+436], 0
$LN12@CSpeedTree:

; 326  : 			SAFE_DELETE_ARRAY(m_pFrondIndexCounts);

  000d1	8b 86 b8 01 00
	00		 mov	 eax, DWORD PTR [esi+440]
  000d7	85 c0		 test	 eax, eax
  000d9	74 13		 je	 SHORT $LN13@CSpeedTree
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000e1	83 c4 04	 add	 esp, 4
  000e4	c7 86 b8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+440], 0
$LN13@CSpeedTree:

; 327  : 		}
; 328  : 
; 329  : 		for (short i = 0; i < m_usNumLeafLods; ++i)

  000ee	33 c0		 xor	 eax, eax
  000f0	33 ff		 xor	 edi, edi
  000f2	66 3b 86 bc 01
	00 00		 cmp	 ax, WORD PTR [esi+444]
  000f9	73 5c		 jae	 SHORT $LN3@CSpeedTree
  000fb	33 db		 xor	 ebx, ebx
  000fd	0f 1f 00	 npad	 3
$LL4@CSpeedTree:

; 330  : 		{
; 331  : 			m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_LeafGeometry, -1, -1, i);

  00100	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00106	57		 push	 edi
  00107	6a ff		 push	 -1
  00109	6a ff		 push	 -1
  0010b	6a 04		 push	 4
  0010d	ff b6 98 01 00
	00		 push	 DWORD PTR [esi+408]
  00113	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 332  : 
; 333  : 			if (m_pGeometryCache->m_sLeaves0.m_usLeafCount > 0)

  00118	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  0011e	66 83 b8 84 00
	00 00 00	 cmp	 WORD PTR [eax+132], 0
  00126	76 20		 jbe	 SHORT $LN2@CSpeedTree

; 334  : 				SAFE_RELEASE(m_pLeafVertexBuffer[i]);

  00128	8b 86 c0 01 00
	00		 mov	 eax, DWORD PTR [esi+448]
  0012e	8b 0c 98	 mov	 ecx, DWORD PTR [eax+ebx*4]
  00131	85 c9		 test	 ecx, ecx
  00133	74 13		 je	 SHORT $LN2@CSpeedTree
  00135	8b 01		 mov	 eax, DWORD PTR [ecx]
  00137	51		 push	 ecx
  00138	ff 50 08	 call	 DWORD PTR [eax+8]
  0013b	8b 86 c0 01 00
	00		 mov	 eax, DWORD PTR [esi+448]
  00141	c7 04 98 00 00
	00 00		 mov	 DWORD PTR [eax+ebx*4], 0
$LN2@CSpeedTree:

; 327  : 		}
; 328  : 
; 329  : 		for (short i = 0; i < m_usNumLeafLods; ++i)

  00148	0f b7 86 bc 01
	00 00		 movzx	 eax, WORD PTR [esi+444]
  0014f	47		 inc	 edi
  00150	0f bf df	 movsx	 ebx, di
  00153	3b d8		 cmp	 ebx, eax
  00155	7c a9		 jl	 SHORT $LL4@CSpeedTree
$LN3@CSpeedTree:

; 335  : 		}
; 336  : 
; 337  : 		SAFE_DELETE_ARRAY(m_pLeavesUpdatedByCpu);

  00157	8b 86 c4 01 00
	00		 mov	 eax, DWORD PTR [esi+452]
  0015d	85 c0		 test	 eax, eax
  0015f	74 13		 je	 SHORT $LN16@CSpeedTree
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00167	83 c4 04	 add	 esp, 4
  0016a	c7 86 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+452], 0
$LN16@CSpeedTree:

; 338  : 		SAFE_DELETE_ARRAY(m_pLeafVertexBuffer);

  00174	8b 86 c0 01 00
	00		 mov	 eax, DWORD PTR [esi+448]
  0017a	85 c0		 test	 eax, eax
  0017c	74 13		 je	 SHORT $LN17@CSpeedTree
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00184	83 c4 04	 add	 esp, 4
  00187	c7 86 c0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+448], 0
$LN17@CSpeedTree:

; 339  : 
; 340  : 		SAFE_DELETE(m_pTextureInfo);

  00191	8b be 80 01 00
	00		 mov	 edi, DWORD PTR [esi+384]
  00197	85 ff		 test	 edi, edi
  00199	74 1c		 je	 SHORT $LN18@CSpeedTree
  0019b	8b cf		 mov	 ecx, edi
  0019d	e8 00 00 00 00	 call	 ??1STextures@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::STextures::~STextures
  001a2	6a 1c		 push	 28			; 0000001cH
  001a4	57		 push	 edi
  001a5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001aa	83 c4 08	 add	 esp, 8
  001ad	c7 86 80 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+384], 0
$LN18@CSpeedTree:

; 341  : 
; 342  : 		SAFE_DELETE(m_pGeometryCache);

  001b7	8b be 98 01 00
	00		 mov	 edi, DWORD PTR [esi+408]
  001bd	85 ff		 test	 edi, edi
  001bf	74 1f		 je	 SHORT $LN19@CSpeedTree
  001c1	8b cf		 mov	 ecx, edi
  001c3	e8 00 00 00 00	 call	 ??1SGeometry@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::SGeometry::~SGeometry
  001c8	68 20 01 00 00	 push	 288			; 00000120H
  001cd	57		 push	 edi
  001ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d3	83 c4 08	 add	 esp, 8
  001d6	c7 86 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+408], 0
$LN19@CSpeedTree:

; 343  : 	}
; 344  : 
; 345  : 	// always delete the speedtree
; 346  : 	SAFE_DELETE(m_pSpeedTree);

  001e0	8b be 7c 01 00
	00		 mov	 edi, DWORD PTR [esi+380]
  001e6	85 ff		 test	 edi, edi
  001e8	74 1a		 je	 SHORT $LN20@CSpeedTree
  001ea	8b cf		 mov	 ecx, edi
  001ec	e8 00 00 00 00	 call	 ??1CSpeedTreeRT@@QAE@XZ	; CSpeedTreeRT::~CSpeedTreeRT
  001f1	57		 push	 edi
  001f2	e8 00 00 00 00	 call	 ??3CSpeedTreeRT@@SAXPAX@Z ; CSpeedTreeRT::operator delete
  001f7	83 c4 04	 add	 esp, 4
  001fa	c7 86 7c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+380], 0
$LN20@CSpeedTree:

; 347  : 
; 348  : 	Clear();

  00204	8b ce		 mov	 ecx, esi
  00206	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear

; 349  : }

  0020b	8d 8e 08 03 00
	00		 lea	 ecx, DWORD PTR [esi+776]
  00211	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  00216	8d 8e e0 02 00
	00		 lea	 ecx, DWORD PTR [esi+736]
  0021c	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  00221	8d 8e b8 02 00
	00		 lea	 ecx, DWORD PTR [esi+696]
  00227	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0022c	8b 86 88 01 00
	00		 mov	 eax, DWORD PTR [esi+392]
  00232	85 c0		 test	 eax, eax
  00234	74 4d		 je	 SHORT $LN48@CSpeedTree

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00236	8b 8e 90 01 00
	00		 mov	 ecx, DWORD PTR [esi+400]
  0023c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0023e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00241	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00247	72 12		 jb	 SHORT $LN67@CSpeedTree

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00249	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0024c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0024f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00251	83 c0 fc	 add	 eax, -4			; fffffffcH
  00254	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00257	77 43		 ja	 SHORT $LN64@CSpeedTree

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00259	8b c2		 mov	 eax, edx
$LN67@CSpeedTree:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0025b	51		 push	 ecx
  0025c	50		 push	 eax
  0025d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00262	c7 86 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+392], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0026c	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0026f	c7 86 8c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+396], 0

; 2082 :             _Myend   = nullptr;

  00279	c7 86 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+400], 0
$LN48@CSpeedTree:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 349  : }

  00283	8b ce		 mov	 ecx, esi
  00285	e8 00 00 00 00	 call	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
  0028a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0028d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00294	59		 pop	 ecx
  00295	5f		 pop	 edi
  00296	5e		 pop	 esi
  00297	5b		 pop	 ebx
  00298	8b e5		 mov	 esp, ebp
  0029a	5d		 pop	 ebp
  0029b	c3		 ret	 0
$LN64@CSpeedTree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0029c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN79@CSpeedTree:
  002a1	cc		 int	 3
  002a2	cc		 int	 3
  002a3	cc		 int	 3
  002a4	cc		 int	 3
  002a5	cc		 int	 3
  002a6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSpeedTreeWrapper@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSpeedTreeWrapper@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSpeedTreeWrapper@@UAE@XZ ENDP			; CSpeedTreeWrapper::~CSpeedTreeWrapper
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ??0CSpeedTreeWrapper@@QAE@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSpeedTreeWrapper@@QAE@XZ PROC			; CSpeedTreeWrapper::CSpeedTreeWrapper, COMDAT
; _this$ = ecx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSpeedTreeWrapper@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	e8 00 00 00 00	 call	 ??0CGraphicObjectInstance@@QAE@XZ ; CGraphicObjectInstance::CGraphicObjectInstance

; 60   : m_pSpeedTree(new CSpeedTreeRT),

  00030	68 9c 00 00 00	 push	 156			; 0000009cH
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSpeedTreeWrapper@@6B@
  00042	e8 00 00 00 00	 call	 ??2CSpeedTreeRT@@SAPAXI@Z ; CSpeedTreeRT::operator new
  00047	83 c4 04	 add	 esp, 4
  0004a	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  0004d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00051	85 c0		 test	 eax, eax
  00053	74 09		 je	 SHORT $LN3@CSpeedTree
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ??0CSpeedTreeRT@@QAE@XZ	; CSpeedTreeRT::CSpeedTreeRT
  0005c	eb 02		 jmp	 SHORT $LN4@CSpeedTree
$LN3@CSpeedTree:
  0005e	33 c0		 xor	 eax, eax
$LN4@CSpeedTree:
  00060	89 86 7c 01 00
	00		 mov	 DWORD PTR [esi+380], eax

; 65   : m_pBranchIndexCounts(NULL),
; 66   : m_pBranchIndexBuffer(NULL),
; 67   : m_pBranchVertexBuffer(NULL),
; 68   : m_pFrondIndexCounts(NULL),
; 69   : m_pFrondIndexBuffer(NULL),
; 70   : m_pFrondVertexBuffer(NULL),
; 71   : m_pLeafVertexBuffer(NULL),
; 72   : m_pLeavesUpdatedByCpu(NULL),
; 73   : m_unBranchVertexCount(0),
; 74   : m_unFrondVertexCount(0),
; 75   : m_pTextureInfo(NULL)

  00066	c7 86 80 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+384], 0

; 61   : m_bIsInstance(false),

  00070	c6 86 84 01 00
	00 00		 mov	 BYTE PTR [esi+388], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00077	c7 86 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+392], 0
  00081	c7 86 8c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+396], 0
  0008b	c7 86 90 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+400], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 64   : m_usNumLeafLods(0),

  00095	33 c0		 xor	 eax, eax
  00097	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 76   : {

  0009b	8d 8e ec 01 00
	00		 lea	 ecx, DWORD PTR [esi+492]
  000a1	c7 86 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+404], 0
  000ab	c7 86 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+408], 0
  000b5	c7 86 9c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+412], 0
  000bf	c7 86 a0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+416], 0
  000c9	c7 86 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+420], 0
  000d3	c7 86 a8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+424], 0
  000dd	c7 86 ac 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+428], 0
  000e7	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0
  000f1	c7 86 b4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+436], 0
  000fb	c7 86 b8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+440], 0
  00105	66 89 86 bc 01
	00 00		 mov	 WORD PTR [esi+444], ax
  0010c	89 86 c0 01 00
	00		 mov	 DWORD PTR [esi+448], eax
  00112	89 86 c4 01 00
	00		 mov	 DWORD PTR [esi+452], eax
  00118	e8 00 00 00 00	 call	 ??0CSpeedTreeMaterial@@QAE@XZ ; CSpeedTreeMaterial::CSpeedTreeMaterial
  0011d	8d 8e 30 02 00
	00		 lea	 ecx, DWORD PTR [esi+560]
  00123	e8 00 00 00 00	 call	 ??0CSpeedTreeMaterial@@QAE@XZ ; CSpeedTreeMaterial::CSpeedTreeMaterial
  00128	8d 8e 74 02 00
	00		 lea	 ecx, DWORD PTR [esi+628]
  0012e	e8 00 00 00 00	 call	 ??0CSpeedTreeMaterial@@QAE@XZ ; CSpeedTreeMaterial::CSpeedTreeMaterial
  00133	8d 8e b8 02 00
	00		 lea	 ecx, DWORD PTR [esi+696]
  00139	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  0013e	8d 8e e0 02 00
	00		 lea	 ecx, DWORD PTR [esi+736]
  00144	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00148	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  0014d	8d 8e 08 03 00
	00		 lea	 ecx, DWORD PTR [esi+776]
  00153	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00157	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance

; 77   : 	// set initial position
; 78   : 	m_afPos[0] = m_afPos[1] = m_afPos[2] = 0.0f;
; 79   : 
; 80   : 	m_pSpeedTree->SetWindStrength(1.0f);

  0015c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0015f	c7 86 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+464], 0
  00169	c7 86 cc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+460], 0
  00173	c7 86 c8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+456], 0
  0017d	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  00183	c7 44 24 08 00
	00 80 bf	 mov	 DWORD PTR [esp+8], -1082130432 ; bf800000H
  0018b	c7 44 24 04 00
	00 80 bf	 mov	 DWORD PTR [esp+4], -1082130432 ; bf800000H
  00193	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00197	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0019e	e8 00 00 00 00	 call	 ?SetWindStrength@CSpeedTreeRT@@QAEMMMM@Z ; CSpeedTreeRT::SetWindStrength

; 81   : 	m_pSpeedTree->SetLocalMatrices(0, 4);

  001a3	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  001a9	dd d8		 fstp	 ST(0)
  001ab	6a 04		 push	 4
  001ad	6a 00		 push	 0
  001af	e8 00 00 00 00	 call	 ?SetLocalMatrices@CSpeedTreeRT@@QAEXII@Z ; CSpeedTreeRT::SetLocalMatrices

; 82   : }

  001b4	8b c6		 mov	 eax, esi
  001b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c0	59		 pop	 ecx
  001c1	5e		 pop	 esi
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$1:
  00008	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3CSpeedTreeRT@@SAXPAX@Z ; CSpeedTreeRT::operator delete
  00011	59		 pop	 ecx
  00012	c3		 ret	 0
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 88 01 00
	00		 add	 ecx, 392		; 00000188H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 b8 02 00
	00		 add	 ecx, 696		; 000002b8H
  0002a	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$4:
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	81 c1 e0 02 00
	00		 add	 ecx, 736		; 000002e0H
  00038	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$5:
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	81 c1 08 03 00
	00		 add	 ecx, 776		; 00000308H
  00046	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
__ehhandler$??0CSpeedTreeWrapper@@QAE@XZ:
  00050	90		 npad	 1
  00051	90		 npad	 1
  00052	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00056	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00059	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0005c	33 c8		 xor	 ecx, eax
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSpeedTreeWrapper@@QAE@XZ
  00068	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSpeedTreeWrapper@@QAE@XZ ENDP			; CSpeedTreeWrapper::CSpeedTreeWrapper
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Camera.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
_dwFogEnable$1$ = -12					; size = 4
_dwLighting$1$ = -8					; size = 4
_dwAlphaBlendEnable$1$ = -4				; size = 4
?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ PROC	; CSpeedTreeWrapper::OnRenderPCBlocker, COMDAT
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 92   : 	if (ms_dwBranchVertexShader == 0)

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA, 0 ; CSpeedTreeWrapper::ms_dwBranchVertexShader
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8b f9		 mov	 edi, ecx
  00012	75 13		 jne	 SHORT $LN2@OnRenderPC

; 93   : 	{
; 94   : 		ms_dwBranchVertexShader = LoadBranchShader(ms_lpd3dDevice);

  00014	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0001a	e8 00 00 00 00	 call	 ?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z ; LoadBranchShader
  0001f	83 c4 04	 add	 esp, 4
  00022	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwBranchVertexShader
$LN2@OnRenderPC:

; 95   : 		//LogBox("Vertex Shader not assigned. You must call CSpeedTreeWrapper::SetVertexShader for this");
; 96   : 	}
; 97   : 
; 98   : 	if (ms_dwLeafVertexShader == 0)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA, 0 ; CSpeedTreeWrapper::ms_dwLeafVertexShader
  0002e	75 13		 jne	 SHORT $LN3@OnRenderPC

; 99   : 	{
; 100  : 		ms_dwLeafVertexShader = LoadLeafShader(ms_lpd3dDevice);

  00030	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00036	e8 00 00 00 00	 call	 ?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z ; LoadLeafShader
  0003b	83 c4 04	 add	 esp, 4
  0003e	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwLeafVertexShader
$LN3@OnRenderPC:
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 27   : 		return (*ms_singleton);

  00043	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 104  : 	CSpeedTreeForestDirectX8::Instance().UpdateSystem(ELTimer_GetMSec() / 1000.0f);

  00049	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  0004e	51		 push	 ecx
  0004f	8b ce		 mov	 ecx, esi
  00051	66 0f 6e c0	 movd	 xmm0, eax
  00055	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00059	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005c	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00065	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00069	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00071	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00076	e8 00 00 00 00	 call	 ?UpdateSystem@CSpeedTreeForest@@QAEXM@Z ; CSpeedTreeForest::UpdateSystem

; 105  : 
; 106  : 	m_pSpeedTree->SetLodLevel(1.0f);

  0007b	51		 push	 ecx
  0007c	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  00082	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00089	e8 00 00 00 00	 call	 ?SetLodLevel@CSpeedTreeRT@@QAEXM@Z ; CSpeedTreeRT::SetLodLevel

; 109  : 	CSpeedTreeForestDirectX8::Instance().UpdateCompundMatrix(CCameraManager::Instance().GetCurrentCamera()->GetEye(), ms_matView, ms_matProj);

  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00094	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\eterLib\Camera.h

; 163  : 		const D3DXVECTOR3 & GetEye() const		{ return m_v3Eye; }

  0009f	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 109  : 	CSpeedTreeForestDirectX8::Instance().UpdateCompundMatrix(CCameraManager::Instance().GetCurrentCamera()->GetEye(), ms_matView, ms_matProj);

  000a2	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  000a7	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z ; CSpeedTreeForestDirectX8::UpdateCompundMatrix

; 110  : 
; 111  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  000b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000b8	6a 02		 push	 2
  000ba	6a 02		 push	 2
  000bc	6a 00		 push	 0
  000be	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 112  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  000c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000c9	6a 00		 push	 0
  000cb	6a 03		 push	 3
  000cd	6a 00		 push	 0
  000cf	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 113  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000da	6a 04		 push	 4
  000dc	6a 01		 push	 1
  000de	6a 00		 push	 0
  000e0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 114  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000eb	6a 02		 push	 2
  000ed	6a 05		 push	 5
  000ef	6a 00		 push	 0
  000f1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 115  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  000f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000fc	6a 00		 push	 0
  000fe	6a 06		 push	 6
  00100	6a 00		 push	 0
  00102	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 116  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  00107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0010d	6a 04		 push	 4
  0010f	6a 04		 push	 4
  00111	6a 00		 push	 0
  00113	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 117  : 
; 118  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00118	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0011e	6a 02		 push	 2
  00120	6a 05		 push	 5
  00122	6a 01		 push	 1
  00124	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 119  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG2, D3DTA_CURRENT);

  00129	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012f	6a 01		 push	 1
  00131	6a 06		 push	 6
  00133	6a 01		 push	 1
  00135	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 120  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

  0013a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00140	6a 04		 push	 4
  00142	6a 04		 push	 4
  00144	6a 01		 push	 1
  00146	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 121  : 
; 122  : 	DWORD dwLighting = STATEMANAGER.GetRenderState(D3DRS_LIGHTING);

  0014b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00151	68 89 00 00 00	 push	 137			; 00000089H
  00156	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 123  : 	DWORD dwFogEnable = STATEMANAGER.GetRenderState(D3DRS_FOGENABLE);

  0015b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00161	6a 1c		 push	 28			; 0000001cH
  00163	89 45 f8	 mov	 DWORD PTR _dwLighting$1$[ebp], eax
  00166	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 124  : 	DWORD dwAlphaBlendEnable = STATEMANAGER.GetRenderState(D3DRS_ALPHABLENDENABLE);

  0016b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00171	6a 1b		 push	 27			; 0000001bH
  00173	89 45 f4	 mov	 DWORD PTR _dwFogEnable$1$[ebp], eax
  00176	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState
  0017b	89 45 fc	 mov	 DWORD PTR _dwAlphaBlendEnable$1$[ebp], eax

; 125  :  	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  0017e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00184	6a 00		 push	 0
  00186	68 89 00 00 00	 push	 137			; 00000089H
  0018b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 126  : 	STATEMANAGER.SaveRenderState(D3DRS_COLORVERTEX, TRUE);

  00190	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00196	6a 01		 push	 1
  00198	68 8d 00 00 00	 push	 141			; 0000008dH
  0019d	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 127  :     STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  001a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a8	6a 01		 push	 1
  001aa	6a 1b		 push	 27			; 0000001bH
  001ac	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 128  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  001b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b7	6a 01		 push	 1
  001b9	6a 0f		 push	 15			; 0000000fH
  001bb	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 129  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  001c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c6	6a 05		 push	 5
  001c8	6a 19		 push	 25			; 00000019H
  001ca	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 130  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  001cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d5	6a 02		 push	 2
  001d7	6a 16		 push	 22			; 00000016H
  001d9	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 131  :  	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, FALSE);

  001de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001e4	6a 00		 push	 0
  001e6	6a 1c		 push	 28			; 0000001cH
  001e8	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 132  : 
; 133  : 	// choose fixed function pipeline or custom shader for fronds and branches
; 134  : 	STATEMANAGER.SetVertexShader(ms_dwBranchVertexShader);

  001ed	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA ; CSpeedTreeWrapper::ms_dwBranchVertexShader
  001f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001f9	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 135  : 
; 136  : // 	SetupBranchForTreeType();
; 137  : 	{
; 138  : 		// update the branch geometry for CPU wind
; 139  : #ifdef WRAPPER_USE_CPU_WIND
; 140  : 		m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry);
; 141  : 
; 142  : 		if (m_pGeometryCache->m_sBranches.m_usNumStrips > 0)
; 143  : 		{
; 144  : 			// update the vertex array
; 145  : 			SFVFBranchVertex* pVertexBuffer = NULL;
; 146  : 			m_pBranchVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 147  : 			for (UINT i = 0; i < m_unBranchVertexCount; ++i)
; 148  : 			{
; 149  : 				memcpy(&(pVertexBuffer[i].m_vPosition), &(m_pGeometryCache->m_sBranches.m_pCoords[i * 3]), 3 * sizeof(float));
; 150  : 			}
; 151  : 			m_pBranchVertexBuffer->Unlock();
; 152  : 		}
; 153  : #endif
; 154  : 
; 155  : 		LPDIRECT3DTEXTURE8 lpd3dTexture;
; 156  : 
; 157  : 		// set texture map
; 158  : 		if ((lpd3dTexture = m_BranchImageInstance.GetTextureReference().GetD3DTexture()))

  001fe	8d 8f b8 02 00
	00		 lea	 ecx, DWORD PTR [edi+696]
  00204	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00209	8b c8		 mov	 ecx, eax
  0020b	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00210	85 c0		 test	 eax, eax
  00212	74 0e		 je	 SHORT $LN4@OnRenderPC

; 159  : 			STATEMANAGER.SetTexture(0, lpd3dTexture);

  00214	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0021a	50		 push	 eax
  0021b	6a 00		 push	 0
  0021d	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN4@OnRenderPC:

; 160  : 
; 161  : 		if (m_pGeometryCache->m_sBranches.m_usVertexCount > 0)

  00222	8b 87 98 01 00
	00		 mov	 eax, DWORD PTR [edi+408]
  00228	66 83 78 10 00	 cmp	 WORD PTR [eax+16], 0
  0022d	76 28		 jbe	 SHORT $LN5@OnRenderPC

; 162  : 		{
; 163  : 			// activate the branch vertex buffer
; 164  : 			STATEMANAGER.SetStreamSource(0, m_pBranchVertexBuffer, sizeof(SFVFBranchVertex));

  0022f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00235	6a 20		 push	 32			; 00000020H
  00237	ff b7 9c 01 00
	00		 push	 DWORD PTR [edi+412]
  0023d	6a 00		 push	 0
  0023f	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 165  : 			// set the index buffer
; 166  : 			STATEMANAGER.SetIndices(m_pBranchIndexBuffer, 0);

  00244	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0024a	6a 00		 push	 0
  0024c	ff b7 a4 01 00
	00		 push	 DWORD PTR [edi+420]
  00252	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
$LN5@OnRenderPC:

; 167  : 		}
; 168  : 	}
; 169  : 
; 170  : 	RenderBranches();

  00257	8b cf		 mov	 ecx, edi
  00259	e8 00 00 00 00	 call	 ?RenderBranches@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBranches
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 27   : 		return (*ms_singleton);

  0025e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 172  : 	STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  00264	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  0026a	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0026f	8b c8		 mov	 ecx, eax
  00271	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00276	50		 push	 eax
  00277	6a 00		 push	 0
  00279	8b ce		 mov	 ecx, esi
  0027b	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 173  : 	STATEMANAGER.SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  00280	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00286	6a 01		 push	 1
  00288	6a 16		 push	 22			; 00000016H
  0028a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 174  : 
; 175  : // 	SetupFrondForTreeType();
; 176  : 	{
; 177  : 		// update the frond geometry for CPU wind
; 178  : #ifdef WRAPPER_USE_CPU_WIND
; 179  : 		m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry);
; 180  : 		if (m_pGeometryCache->m_sFronds.m_usNumStrips > 0)
; 181  : 		{
; 182  : 			// update the vertex array
; 183  : 			SFVFBranchVertex * pVertexBuffer = NULL;
; 184  : 			m_pFrondVertexBuffer->Lock(0, 0, reinterpret_cast<BYTE**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);
; 185  : 			for (UINT i = 0; i < m_unFrondVertexCount; ++i)
; 186  : 			{
; 187  : 				memcpy(&(pVertexBuffer[i].m_vPosition), &(m_pGeometryCache->m_sFronds.m_pCoords[i * 3]), 3 * sizeof(float));
; 188  : 			}
; 189  : 			m_pFrondVertexBuffer->Unlock();
; 190  : 		}
; 191  : #endif
; 192  : 
; 193  : 		if (!m_CompositeImageInstance.IsEmpty())

  0028f	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  00295	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0029a	84 c0		 test	 al, al
  0029c	75 22		 jne	 SHORT $LN6@OnRenderPC
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 27   : 		return (*ms_singleton);

  0029e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 194  : 			STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  002a4	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  002aa	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  002af	8b c8		 mov	 ecx, eax
  002b1	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  002b6	50		 push	 eax
  002b7	6a 00		 push	 0
  002b9	8b ce		 mov	 ecx, esi
  002bb	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN6@OnRenderPC:

; 195  : 
; 196  : 		if (m_pGeometryCache->m_sFronds.m_usVertexCount > 0)

  002c0	8b 87 98 01 00
	00		 mov	 eax, DWORD PTR [edi+408]
  002c6	66 83 78 4c 00	 cmp	 WORD PTR [eax+76], 0
  002cb	76 28		 jbe	 SHORT $LN7@OnRenderPC

; 197  : 		{
; 198  : 			// activate the frond vertex buffer
; 199  : 			STATEMANAGER.SetStreamSource(0, m_pFrondVertexBuffer, sizeof(SFVFBranchVertex));

  002cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002d3	6a 20		 push	 32			; 00000020H
  002d5	ff b7 ac 01 00
	00		 push	 DWORD PTR [edi+428]
  002db	6a 00		 push	 0
  002dd	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 200  : 			// set the index buffer
; 201  : 			STATEMANAGER.SetIndices(m_pFrondIndexBuffer, 0);

  002e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002e8	6a 00		 push	 0
  002ea	ff b7 b4 01 00
	00		 push	 DWORD PTR [edi+436]
  002f0	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices
$LN7@OnRenderPC:

; 202  : 		}
; 203  : 	}
; 204  : 	RenderFronds();

  002f5	8b cf		 mov	 ecx, edi
  002f7	e8 00 00 00 00	 call	 ?RenderFronds@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderFronds

; 205  : 
; 206  : 	STATEMANAGER.SetVertexShader(ms_dwLeafVertexShader);

  002fc	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA ; CSpeedTreeWrapper::ms_dwLeafVertexShader
  00302	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00308	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 207  : 
; 208  : // 	SetupLeafForTreeType();
; 209  : 	{
; 210  : 		// pass leaf tables to shader
; 211  : #ifdef WRAPPER_USE_GPU_LEAF_PLACEMENT
; 212  : 		UploadLeafTables(c_nVertexShader_LeafTables);
; 213  : #endif
; 214  : 
; 215  : 		if (!m_CompositeImageInstance.IsEmpty())

  0030d	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  00313	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  00318	84 c0		 test	 al, al
  0031a	75 22		 jne	 SHORT $LN8@OnRenderPC
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 27   : 		return (*ms_singleton);

  0031c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 216  : 			STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  00322	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  00328	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0032d	8b c8		 mov	 ecx, eax
  0032f	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00334	50		 push	 eax
  00335	6a 00		 push	 0
  00337	8b ce		 mov	 ecx, esi
  00339	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
$LN8@OnRenderPC:

; 217  : 	}
; 218  : 	RenderLeaves();

  0033e	8b cf		 mov	 ecx, edi
  00340	e8 00 00 00 00	 call	 ?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderLeaves

; 219  : 	EndLeafForTreeType();

  00345	8b cf		 mov	 ecx, edi
  00347	e8 00 00 00 00	 call	 ?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ ; CSpeedTreeWrapper::EndLeafForTreeType

; 220  : 
; 221  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  0034c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00352	6a 00		 push	 0
  00354	68 89 00 00 00	 push	 137			; 00000089H
  00359	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 222  : 	STATEMANAGER.SetRenderState(D3DRS_COLORVERTEX, FALSE);

  0035e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00364	6a 00		 push	 0
  00366	68 8d 00 00 00	 push	 141			; 0000008dH
  0036b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 223  : 	RenderBillboards();

  00370	8b cf		 mov	 ecx, edi
  00372	e8 00 00 00 00	 call	 ?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBillboards

; 224  : 
; 225  : 	STATEMANAGER.RestoreRenderState(D3DRS_COLORVERTEX);

  00377	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0037d	68 8d 00 00 00	 push	 141			; 0000008dH
  00382	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 226  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  00387	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0038d	6a 16		 push	 22			; 00000016H
  0038f	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 227  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  00394	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0039a	6a 0f		 push	 15			; 0000000fH
  0039c	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 228  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  003a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003a7	6a 19		 push	 25			; 00000019H
  003a9	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 229  : 	STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, dwAlphaBlendEnable);

  003ae	ff 75 fc	 push	 DWORD PTR _dwAlphaBlendEnable$1$[ebp]
  003b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003b7	6a 1b		 push	 27			; 0000001bH
  003b9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 230  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, dwLighting);

  003be	ff 75 f8	 push	 DWORD PTR _dwLighting$1$[ebp]
  003c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003c7	68 89 00 00 00	 push	 137			; 00000089H
  003cc	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 231  :  	STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, dwFogEnable);

  003d1	ff 75 f4	 push	 DWORD PTR _dwFogEnable$1$[ebp]
  003d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003da	6a 1c		 push	 28			; 0000001cH
  003dc	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 232  : 
; 233  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  003e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003e7	6a 02		 push	 2
  003e9	6a 04		 push	 4
  003eb	6a 01		 push	 1
  003ed	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  003f2	5f		 pop	 edi
  003f3	5e		 pop	 esi
  003f4	5b		 pop	 ebx

; 234  : }

  003f5	8b e5		 mov	 esp, ebp
  003f7	5d		 pop	 ebp
  003f8	c3		 ret	 0
?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ ENDP	; CSpeedTreeWrapper::OnRenderPCBlocker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::OnRenderShadow, COMDAT
; _this$ = ecx

; 93   : 	virtual void				OnRenderShadow() {}

  00000	c2 00 00	 ret	 0
?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::OnRenderShadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ PROC	; CSpeedTreeWrapper::OnRenderToShadowMap, COMDAT
; _this$ = ecx

; 92   : 	virtual void				OnRenderToShadowMap() {}

  00000	c2 00 00	 ret	 0
?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ ENDP	; CSpeedTreeWrapper::OnRenderToShadowMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::OnBlendRender, COMDAT
; _this$ = ecx

; 91   : 	virtual void				OnBlendRender() {}

  00000	c2 00 00	 ret	 0
?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::OnBlendRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Camera.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?OnRender@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnRender@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::OnRender, COMDAT
; _this$ = ecx

; 238  : 	if (ms_dwBranchVertexShader == 0)

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA, 0 ; CSpeedTreeWrapper::ms_dwBranchVertexShader
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	75 13		 jne	 SHORT $LN2@OnRender

; 239  : 	{
; 240  : 		ms_dwBranchVertexShader = LoadBranchShader(ms_lpd3dDevice);

  0000d	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00013	e8 00 00 00 00	 call	 ?LoadBranchShader@@YAKPAUIDirect3DDevice8@@@Z ; LoadBranchShader
  00018	83 c4 04	 add	 esp, 4
  0001b	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwBranchVertexShader
$LN2@OnRender:

; 241  : 		//LogBox("Vertex Shader not assigned. You must call CSpeedTreeWrapper::SetVertexShader for this");
; 242  : 	}
; 243  : 
; 244  : 	if (ms_dwLeafVertexShader == 0)

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA, 0 ; CSpeedTreeWrapper::ms_dwLeafVertexShader
  00027	75 13		 jne	 SHORT $LN3@OnRender

; 245  : 	{
; 246  : 		ms_dwLeafVertexShader = LoadLeafShader(ms_lpd3dDevice);

  00029	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0002f	e8 00 00 00 00	 call	 ?LoadLeafShader@@YAKPAUIDirect3DDevice8@@@Z ; LoadLeafShader
  00034	83 c4 04	 add	 esp, 4
  00037	a3 00 00 00 00	 mov	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA, eax ; CSpeedTreeWrapper::ms_dwLeafVertexShader
$LN3@OnRender:
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 27   : 		return (*ms_singleton);

  0003c	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 250  : 	CSpeedTreeForestDirectX8::Instance().UpdateSystem(ELTimer_GetMSec() / 1000.0f);

  00042	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  00047	51		 push	 ecx
  00048	8b ce		 mov	 ecx, esi
  0004a	66 0f 6e c0	 movd	 xmm0, eax
  0004e	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00052	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00055	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0005e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00062	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0006a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006f	e8 00 00 00 00	 call	 ?UpdateSystem@CSpeedTreeForest@@QAEXM@Z ; CSpeedTreeForest::UpdateSystem

; 251  : 
; 252  : 	m_pSpeedTree->SetLodLevel(1.0f);

  00074	51		 push	 ecx
  00075	8b 8f 7c 01 00
	00		 mov	 ecx, DWORD PTR [edi+380]
  0007b	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00082	e8 00 00 00 00	 call	 ?SetLodLevel@CSpeedTreeRT@@QAEXM@Z ; CSpeedTreeRT::SetLodLevel

; 255  : 	CSpeedTreeForestDirectX8::Instance().UpdateCompundMatrix(CCameraManager::Instance().GetCurrentCamera()->GetEye(), ms_matView, ms_matProj);

  00087	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0008d	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSpeedTreeForestDirectX8@@@@0PAVCSpeedTreeForestDirectX8@@A ; CSingleton<CSpeedTreeForestDirectX8>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\eterLib\Camera.h

; 163  : 		const D3DXVECTOR3 & GetEye() const		{ return m_v3Eye; }

  00098	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 255  : 	CSpeedTreeForestDirectX8::Instance().UpdateCompundMatrix(CCameraManager::Instance().GetCurrentCamera()->GetEye(), ms_matView, ms_matProj);

  0009b	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  000a0	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?UpdateCompundMatrix@CSpeedTreeForestDirectX8@@QAEXABUD3DXVECTOR3@@ABUD3DXMATRIX@@1@Z ; CSpeedTreeForestDirectX8::UpdateCompundMatrix

; 256  : 
; 257  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000b1	6a 02		 push	 2
  000b3	6a 02		 push	 2
  000b5	6a 00		 push	 0
  000b7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 258  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000c2	6a 00		 push	 0
  000c4	6a 03		 push	 3
  000c6	6a 00		 push	 0
  000c8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 259  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  000cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000d3	6a 04		 push	 4
  000d5	6a 01		 push	 1
  000d7	6a 00		 push	 0
  000d9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 260  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  000de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e4	6a 02		 push	 2
  000e6	6a 05		 push	 5
  000e8	6a 00		 push	 0
  000ea	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 261  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f5	6a 00		 push	 0
  000f7	6a 06		 push	 6
  000f9	6a 00		 push	 0
  000fb	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 262  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00106	6a 04		 push	 4
  00108	6a 04		 push	 4
  0010a	6a 00		 push	 0
  0010c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 263  : 
; 264  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_MODULATE);

  00111	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00117	6a 04		 push	 4
  00119	6a 01		 push	 1
  0011b	6a 01		 push	 1
  0011d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 265  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00122	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00128	6a 02		 push	 2
  0012a	6a 02		 push	 2
  0012c	6a 01		 push	 1
  0012e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 266  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG2, D3DTA_CURRENT);

  00133	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00139	6a 01		 push	 1
  0013b	6a 03		 push	 3
  0013d	6a 01		 push	 1
  0013f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 267  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP);

  00144	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0014a	6a 01		 push	 1
  0014c	6a 0d		 push	 13			; 0000000dH
  0014e	6a 01		 push	 1
  00150	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 268  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP);

  00155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0015b	6a 01		 push	 1
  0015d	6a 0e		 push	 14			; 0000000eH
  0015f	6a 01		 push	 1
  00161	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 269  : 
; 270  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE);

  00166	6a 00		 push	 0
  00168	68 89 00 00 00	 push	 137			; 00000089H
  0016d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00173	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 271  : 	STATEMANAGER.SaveRenderState(D3DRS_COLORVERTEX, TRUE);

  00178	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0017e	6a 01		 push	 1
  00180	68 8d 00 00 00	 push	 141			; 0000008dH
  00185	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 272  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  0018a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00190	6a 01		 push	 1
  00192	6a 0f		 push	 15			; 0000000fH
  00194	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 273  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  00199	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0019f	6a 05		 push	 5
  001a1	6a 19		 push	 25			; 00000019H
  001a3	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 274  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  001a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ae	6a 02		 push	 2
  001b0	6a 16		 push	 22			; 00000016H
  001b2	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 275  : 	STATEMANAGER.SaveRenderState(D3DRS_FOGENABLE, FALSE);

  001b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001bd	6a 00		 push	 0
  001bf	6a 1c		 push	 28			; 0000001cH
  001c1	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 276  : 
; 277  : 	// choose fixed function pipeline or custom shader for fronds and branches
; 278  : 	STATEMANAGER.SetVertexShader(ms_dwBranchVertexShader);

  001c6	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_dwBranchVertexShader@CSpeedTreeWrapper@@0KA ; CSpeedTreeWrapper::ms_dwBranchVertexShader
  001cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d2	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 279  : 
; 280  : 	SetupBranchForTreeType();

  001d7	8b cf		 mov	 ecx, edi
  001d9	e8 00 00 00 00	 call	 ?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupBranchForTreeType

; 281  : 	RenderBranches();

  001de	8b cf		 mov	 ecx, edi
  001e0	e8 00 00 00 00	 call	 ?RenderBranches@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBranches
; File C:\Marty 5.5\Src-Client\Client\eterbase\Singleton.h

; 27   : 		return (*ms_singleton);

  001e5	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 283  : 	STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  001eb	8d 8f 08 03 00
	00		 lea	 ecx, DWORD PTR [edi+776]
  001f1	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  001f6	8b c8		 mov	 ecx, eax
  001f8	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  001fd	50		 push	 eax
  001fe	6a 00		 push	 0
  00200	8b ce		 mov	 ecx, esi
  00202	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 284  : 	STATEMANAGER.SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  00207	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0020d	6a 01		 push	 1
  0020f	6a 16		 push	 22			; 00000016H
  00211	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 285  : 
; 286  : 	SetupFrondForTreeType();

  00216	8b cf		 mov	 ecx, edi
  00218	e8 00 00 00 00	 call	 ?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupFrondForTreeType

; 287  : 	RenderFronds();

  0021d	8b cf		 mov	 ecx, edi
  0021f	e8 00 00 00 00	 call	 ?RenderFronds@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderFronds

; 288  : 
; 289  : 	STATEMANAGER.SetVertexShader(ms_dwLeafVertexShader);

  00224	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_dwLeafVertexShader@CSpeedTreeWrapper@@0KA ; CSpeedTreeWrapper::ms_dwLeafVertexShader
  0022a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00230	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 290  : 
; 291  : 	SetupLeafForTreeType();

  00235	8b cf		 mov	 ecx, edi
  00237	e8 00 00 00 00	 call	 ?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupLeafForTreeType

; 292  : 	RenderLeaves();

  0023c	8b cf		 mov	 ecx, edi
  0023e	e8 00 00 00 00	 call	 ?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderLeaves

; 293  : 	EndLeafForTreeType();

  00243	8b cf		 mov	 ecx, edi
  00245	e8 00 00 00 00	 call	 ?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ ; CSpeedTreeWrapper::EndLeafForTreeType

; 294  : 
; 295  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  0024a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00250	6a 00		 push	 0
  00252	68 89 00 00 00	 push	 137			; 00000089H
  00257	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 296  : 	STATEMANAGER.SetRenderState(D3DRS_COLORVERTEX, FALSE);

  0025c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00262	6a 00		 push	 0
  00264	68 8d 00 00 00	 push	 141			; 0000008dH
  00269	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 297  : 	RenderBillboards();

  0026e	8b cf		 mov	 ecx, edi
  00270	e8 00 00 00 00	 call	 ?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBillboards

; 298  : 
; 299  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00275	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0027b	68 89 00 00 00	 push	 137			; 00000089H
  00280	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 300  : 	STATEMANAGER.RestoreRenderState(D3DRS_COLORVERTEX);

  00285	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0028b	68 8d 00 00 00	 push	 141			; 0000008dH
  00290	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 301  :     STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  00295	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0029b	6a 0f		 push	 15			; 0000000fH
  0029d	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 302  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  002a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002a8	6a 19		 push	 25			; 00000019H
  002aa	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 303  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  002af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002b5	6a 16		 push	 22			; 00000016H
  002b7	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 304  : 	STATEMANAGER.RestoreRenderState(D3DRS_FOGENABLE);

  002bc	6a 1c		 push	 28			; 0000001cH
  002be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002c4	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
  002c9	5f		 pop	 edi
  002ca	5e		 pop	 esi

; 305  : }

  002cb	c3		 ret	 0
?OnRender@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::OnRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
_c_rmatTransform$1$ = -8				; size = 4
_i$1$ = -4						; size = 4
?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::CalculateBBox, COMDAT
; _this$ = ecx

; 1367 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1368 : 	float fX, fY, fZ;
; 1369 : 
; 1370 : 	fX = m_afBoundingBox[3] - m_afBoundingBox[0];
; 1371 : 	fY = m_afBoundingBox[4] - m_afBoundingBox[1];
; 1372 : 	fZ = m_afBoundingBox[5] - m_afBoundingBox[2];
; 1373 : 
; 1374 : 	m_v3BBoxMin.x = -fX / 2.0f;

  00006	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx
  00011	57		 push	 edi
  00012	f3 0f 10 ae e0
	01 00 00	 movss	 xmm5, DWORD PTR [esi+480]
  0001a	f3 0f 10 a6 e4
	01 00 00	 movss	 xmm4, DWORD PTR [esi+484]
  00022	f3 0f 5c ae d4
	01 00 00	 subss	 xmm5, DWORD PTR [esi+468]
  0002a	f3 0f 5c a6 d8
	01 00 00	 subss	 xmm4, DWORD PTR [esi+472]

; 1375 : 	m_v3BBoxMin.y = -fY / 2.0f;
; 1376 : 	m_v3BBoxMin.z = 0.0f;

  00032	c7 86 50 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+336], 0
  0003c	0f 28 d5	 movaps	 xmm2, xmm5

; 1377 : 	m_v3BBoxMax.x = fX / 2.0f;

  0003f	f3 0f 59 e9	 mulss	 xmm5, xmm1
  00043	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  0004a	0f 28 dc	 movaps	 xmm3, xmm4
  0004d	0f 57 1d 00 00
	00 00		 xorps	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000
  00054	f3 0f 11 ae 54
	01 00 00	 movss	 DWORD PTR [esi+340], xmm5
  0005c	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00060	f3 0f 59 d9	 mulss	 xmm3, xmm1
  00064	f3 0f 11 96 48
	01 00 00	 movss	 DWORD PTR [esi+328], xmm2

; 1378 : 	m_v3BBoxMax.y = fY / 2.0f;

  0006c	f3 0f 59 e1	 mulss	 xmm4, xmm1
  00070	f3 0f 10 8e e8
	01 00 00	 movss	 xmm1, DWORD PTR [esi+488]
  00078	f3 0f 5c 8e dc
	01 00 00	 subss	 xmm1, DWORD PTR [esi+476]
  00080	f3 0f 11 9e 4c
	01 00 00	 movss	 DWORD PTR [esi+332], xmm3
  00088	f3 0f 11 a6 58
	01 00 00	 movss	 DWORD PTR [esi+344], xmm4

; 1379 : 	m_v3BBoxMax.z = fZ;

  00090	f3 0f 11 8e 5c
	01 00 00	 movss	 DWORD PTR [esi+348], xmm1

; 1380 : 
; 1381 : 	m_v4TBBox[0] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMin.y, m_v3BBoxMin.z, 1.0f);

  00098	f3 0f 11 96 b0
	00 00 00	 movss	 DWORD PTR [esi+176], xmm2
  000a0	f3 0f 11 9e b4
	00 00 00	 movss	 DWORD PTR [esi+180], xmm3
  000a8	c7 86 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+184], 0
  000b2	c7 86 bc 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+188], 1065353216 ; 3f800000H

; 1382 : 	m_v4TBBox[1] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMax.y, m_v3BBoxMin.z, 1.0f);

  000bc	f3 0f 11 96 c0
	00 00 00	 movss	 DWORD PTR [esi+192], xmm2
  000c4	f3 0f 11 a6 c4
	00 00 00	 movss	 DWORD PTR [esi+196], xmm4
  000cc	c7 86 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+200], 0
  000d6	c7 86 cc 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+204], 1065353216 ; 3f800000H

; 1383 : 	m_v4TBBox[2] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMin.y, m_v3BBoxMin.z, 1.0f);

  000e0	f3 0f 11 ae d0
	00 00 00	 movss	 DWORD PTR [esi+208], xmm5
  000e8	f3 0f 11 9e d4
	00 00 00	 movss	 DWORD PTR [esi+212], xmm3
  000f0	c7 86 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+216], 0
  000fa	c7 86 dc 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+220], 1065353216 ; 3f800000H

; 1384 : 	m_v4TBBox[3] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMax.y, m_v3BBoxMin.z, 1.0f);

  00104	f3 0f 11 ae e0
	00 00 00	 movss	 DWORD PTR [esi+224], xmm5
  0010c	f3 0f 11 a6 e4
	00 00 00	 movss	 DWORD PTR [esi+228], xmm4
  00114	c7 86 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+232], 0
  0011e	c7 86 ec 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+236], 1065353216 ; 3f800000H

; 1385 : 	m_v4TBBox[4] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMin.y, m_v3BBoxMax.z, 1.0f);

  00128	f3 0f 11 96 f0
	00 00 00	 movss	 DWORD PTR [esi+240], xmm2
  00130	f3 0f 11 9e f4
	00 00 00	 movss	 DWORD PTR [esi+244], xmm3
  00138	f3 0f 11 8e f8
	00 00 00	 movss	 DWORD PTR [esi+248], xmm1
  00140	c7 86 fc 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+252], 1065353216 ; 3f800000H

; 1386 : 	m_v4TBBox[5] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMax.y, m_v3BBoxMax.z, 1.0f);

  0014a	f3 0f 11 96 00
	01 00 00	 movss	 DWORD PTR [esi+256], xmm2
  00152	f3 0f 11 a6 04
	01 00 00	 movss	 DWORD PTR [esi+260], xmm4
  0015a	f3 0f 11 8e 08
	01 00 00	 movss	 DWORD PTR [esi+264], xmm1
  00162	c7 86 0c 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+268], 1065353216 ; 3f800000H

; 1387 : 	m_v4TBBox[6] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMin.y, m_v3BBoxMax.z, 1.0f);

  0016c	f3 0f 11 ae 10
	01 00 00	 movss	 DWORD PTR [esi+272], xmm5
  00174	f3 0f 11 9e 14
	01 00 00	 movss	 DWORD PTR [esi+276], xmm3
  0017c	f3 0f 11 8e 18
	01 00 00	 movss	 DWORD PTR [esi+280], xmm1
  00184	c7 86 1c 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+284], 1065353216 ; 3f800000H

; 1388 : 	m_v4TBBox[7] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMax.y, m_v3BBoxMax.z, 1.0f);

  0018e	f3 0f 11 ae 20
	01 00 00	 movss	 DWORD PTR [esi+288], xmm5
  00196	f3 0f 11 a6 24
	01 00 00	 movss	 DWORD PTR [esi+292], xmm4
  0019e	f3 0f 11 8e 28
	01 00 00	 movss	 DWORD PTR [esi+296], xmm1
  001a6	c7 86 2c 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+300], 1065353216 ; 3f800000H

; 1389 : 
; 1390 : 	const D3DXMATRIX & c_rmatTransform = GetTransform();

  001b0	e8 00 00 00 00	 call	 ?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ; CGraphicObjectInstance::GetTransform
  001b5	8b d0		 mov	 edx, eax
  001b7	33 c9		 xor	 ecx, ecx
  001b9	89 55 f8	 mov	 DWORD PTR _c_rmatTransform$1$[ebp], edx
$LN42@CalculateB:

; 1393 : 	{
; 1394 : 		D3DXVec4Transform(&m_v4TBBox[i], &m_v4TBBox[i], &c_rmatTransform);

  001bc	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
  001bf	90		 npad	 1
$LL4@CalculateB:
  001c0	8b f9		 mov	 edi, ecx
  001c2	8d 86 b0 00 00
	00		 lea	 eax, DWORD PTR [esi+176]
  001c8	c1 e7 04	 shl	 edi, 4
  001cb	03 c7		 add	 eax, edi
  001cd	52		 push	 edx
  001ce	50		 push	 eax
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 _D3DXVec4Transform@12
  001d5	8b 4d fc	 mov	 ecx, DWORD PTR _i$1$[ebp]
  001d8	8d 51 0b	 lea	 edx, DWORD PTR [ecx+11]
  001db	03 d2		 add	 edx, edx

; 1395 : 		if (0 == i)

  001dd	85 c9		 test	 ecx, ecx
  001df	75 4b		 jne	 SHORT $LN5@CalculateB

; 1396 : 		{
; 1397 : 			m_v3TBBoxMin.x = m_v4TBBox[i].x;

  001e1	8b 86 b0 00 00
	00		 mov	 eax, DWORD PTR [esi+176]

; 1398 : 			m_v3TBBoxMin.y = m_v4TBBox[i].y;
; 1399 : 			m_v3TBBoxMin.z = m_v4TBBox[i].z;
; 1400 : 			m_v3TBBoxMax.x = m_v4TBBox[i].x;
; 1401 : 			m_v3TBBoxMax.y = m_v4TBBox[i].y;
; 1402 : 			m_v3TBBoxMax.z = m_v4TBBox[i].z;

  001e7	41		 inc	 ecx
  001e8	89 86 30 01 00
	00		 mov	 DWORD PTR [esi+304], eax
  001ee	f3 0f 10 8e b4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+180]
  001f6	f3 0f 11 8e 34
	01 00 00	 movss	 DWORD PTR [esi+308], xmm1
  001fe	f3 0f 10 86 b8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+184]
  00206	f3 0f 11 86 38
	01 00 00	 movss	 DWORD PTR [esi+312], xmm0
  0020e	8b 04 d6	 mov	 eax, DWORD PTR [esi+edx*8]

; 1403 : 		}

  00211	8b 55 f8	 mov	 edx, DWORD PTR _c_rmatTransform$1$[ebp]
  00214	89 86 3c 01 00
	00		 mov	 DWORD PTR [esi+316], eax
  0021a	f3 0f 11 8e 40
	01 00 00	 movss	 DWORD PTR [esi+320], xmm1
  00222	f3 0f 11 86 44
	01 00 00	 movss	 DWORD PTR [esi+324], xmm0
  0022a	eb 90		 jmp	 SHORT $LN42@CalculateB
$LN5@CalculateB:

; 1404 : 		else
; 1405 : 		{
; 1406 : 			if (m_v3TBBoxMin.x > m_v4TBBox[i].x)

  0022c	f3 0f 10 0c d6	 movss	 xmm1, DWORD PTR [esi+edx*8]
  00231	f3 0f 10 86 30
	01 00 00	 movss	 xmm0, DWORD PTR [esi+304]
  00239	0f 2f c1	 comiss	 xmm0, xmm1
  0023c	76 08		 jbe	 SHORT $LN7@CalculateB

; 1407 : 				m_v3TBBoxMin.x = m_v4TBBox[i].x;

  0023e	f3 0f 11 8e 30
	01 00 00	 movss	 DWORD PTR [esi+304], xmm1
$LN7@CalculateB:

; 1408 : 			if (m_v3TBBoxMax.x < m_v4TBBox[i].x)

  00246	f3 0f 10 04 d6	 movss	 xmm0, DWORD PTR [esi+edx*8]
  0024b	0f 2f 86 3c 01
	00 00		 comiss	 xmm0, DWORD PTR [esi+316]
  00252	76 08		 jbe	 SHORT $LN8@CalculateB

; 1409 : 				m_v3TBBoxMax.x = m_v4TBBox[i].x;

  00254	f3 0f 11 86 3c
	01 00 00	 movss	 DWORD PTR [esi+316], xmm0
$LN8@CalculateB:

; 1410 : 			if (m_v3TBBoxMin.y > m_v4TBBox[i].y)

  0025c	f3 0f 10 8c 37
	b4 00 00 00	 movss	 xmm1, DWORD PTR [edi+esi+180]
  00265	f3 0f 10 86 34
	01 00 00	 movss	 xmm0, DWORD PTR [esi+308]
  0026d	0f 2f c1	 comiss	 xmm0, xmm1
  00270	76 08		 jbe	 SHORT $LN9@CalculateB

; 1411 : 				m_v3TBBoxMin.y = m_v4TBBox[i].y;

  00272	f3 0f 11 8e 34
	01 00 00	 movss	 DWORD PTR [esi+308], xmm1
$LN9@CalculateB:

; 1412 : 			if (m_v3TBBoxMax.y < m_v4TBBox[i].y)

  0027a	f3 0f 10 84 37
	b4 00 00 00	 movss	 xmm0, DWORD PTR [edi+esi+180]
  00283	0f 2f 86 40 01
	00 00		 comiss	 xmm0, DWORD PTR [esi+320]
  0028a	76 08		 jbe	 SHORT $LN10@CalculateB

; 1413 : 				m_v3TBBoxMax.y = m_v4TBBox[i].y;

  0028c	f3 0f 11 86 40
	01 00 00	 movss	 DWORD PTR [esi+320], xmm0
$LN10@CalculateB:

; 1414 : 			if (m_v3TBBoxMin.z > m_v4TBBox[i].z)

  00294	f3 0f 10 8c 37
	b8 00 00 00	 movss	 xmm1, DWORD PTR [edi+esi+184]
  0029d	f3 0f 10 86 38
	01 00 00	 movss	 xmm0, DWORD PTR [esi+312]
  002a5	0f 2f c1	 comiss	 xmm0, xmm1
  002a8	76 08		 jbe	 SHORT $LN11@CalculateB

; 1415 : 				m_v3TBBoxMin.z = m_v4TBBox[i].z;

  002aa	f3 0f 11 8e 38
	01 00 00	 movss	 DWORD PTR [esi+312], xmm1
$LN11@CalculateB:

; 1416 : 			if (m_v3TBBoxMax.z < m_v4TBBox[i].z)

  002b2	f3 0f 10 84 37
	b8 00 00 00	 movss	 xmm0, DWORD PTR [edi+esi+184]
  002bb	0f 2f 86 44 01
	00 00		 comiss	 xmm0, DWORD PTR [esi+324]
  002c2	76 08		 jbe	 SHORT $LN2@CalculateB

; 1417 : 				m_v3TBBoxMax.z = m_v4TBBox[i].z;

  002c4	f3 0f 11 86 44
	01 00 00	 movss	 DWORD PTR [esi+324], xmm0
$LN2@CalculateB:

; 1391 : 
; 1392 : 	for (DWORD i = 0; i < 8; ++i)

  002cc	8b 55 f8	 mov	 edx, DWORD PTR _c_rmatTransform$1$[ebp]
  002cf	41		 inc	 ecx
  002d0	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
  002d3	83 f9 08	 cmp	 ecx, 8
  002d6	0f 82 e4 fe ff
	ff		 jb	 $LL4@CalculateB
  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi

; 1418 : 		}
; 1419 : 	}
; 1420 : }

  002de	8b e5		 mov	 esp, ebp
  002e0	5d		 pop	 ebp
  002e1	c3		 ret	 0
?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::CalculateBBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z PROC		; CSpeedTreeWrapper::SetPosition, COMDAT
; _this$ = ecx

; 1337 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1338 : 	m_afPos[0] = x;
; 1339 : 	m_afPos[1] = y;
; 1340 : 	m_afPos[2] = z;

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00008	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y$[ebp]
  0000d	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _x$[ebp]
  00012	56		 push	 esi
  00013	8b f1		 mov	 esi, ecx

; 1341 : 	m_pSpeedTree->SetTreePosition(x, y, z);

  00015	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00018	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  0001e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00024	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  0002a	f3 0f 11 96 c8
	01 00 00	 movss	 DWORD PTR [esi+456], xmm2
  00032	f3 0f 11 8e cc
	01 00 00	 movss	 DWORD PTR [esi+460], xmm1
  0003a	f3 0f 11 86 d0
	01 00 00	 movss	 DWORD PTR [esi+464], xmm0
  00042	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  00047	e8 00 00 00 00	 call	 ?SetTreePosition@CSpeedTreeRT@@QAEXMMM@Z ; CSpeedTreeRT::SetTreePosition

; 1342 : 	CGraphicObjectInstance::SetPosition(x, y, z);

  0004c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00051	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00054	8b ce		 mov	 ecx, esi
  00056	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0005c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00061	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00067	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition
  00076	5e		 pop	 esi

; 1343 : }

  00077	5d		 pop	 ebp
  00078	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z ENDP		; CSpeedTreeWrapper::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z
_TEXT	SEGMENT
_v3Center$ = 8						; size = 4
_fRadius$ = 12						; size = 4
?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z PROC ; CSpeedTreeWrapper::GetBoundingSphere, COMDAT
; _this$ = ecx

; 1346 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 1347 : 	float fX, fY, fZ;
; 1348 : 
; 1349 : 	fX = m_afBoundingBox[3] - m_afBoundingBox[0];
; 1350 : 	fY = m_afBoundingBox[4] - m_afBoundingBox[1];
; 1351 : 	fZ = m_afBoundingBox[5] - m_afBoundingBox[2];
; 1352 : 
; 1353 : 	v3Center.x = 0.0f;

  0000a	8b 7d 08	 mov	 edi, DWORD PTR _v3Center$[ebp]
  0000d	f3 0f 10 96 e0
	01 00 00	 movss	 xmm2, DWORD PTR [esi+480]
  00015	f3 0f 10 9e e4
	01 00 00	 movss	 xmm3, DWORD PTR [esi+484]
  0001d	f3 0f 5c 9e d8
	01 00 00	 subss	 xmm3, DWORD PTR [esi+472]
  00025	f3 0f 5c 96 d4
	01 00 00	 subss	 xmm2, DWORD PTR [esi+468]
  0002d	f3 0f 10 8e e8
	01 00 00	 movss	 xmm1, DWORD PTR [esi+488]
  00035	f3 0f 5c 8e dc
	01 00 00	 subss	 xmm1, DWORD PTR [esi+476]
  0003d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 1357 : 	fRadius = sqrtf(fX * fX + fY * fY + fZ * fZ) * 0.5f * 0.9f; // 0.9f for reduce size

  00043	f3 0f 59 db	 mulss	 xmm3, xmm3
  00047	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0004e	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00052	0f 28 c1	 movaps	 xmm0, xmm1
  00055	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00059	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00061	f3 0f 58 da	 addss	 xmm3, xmm2
  00065	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
  0006a	f3 0f 58 d9	 addss	 xmm3, xmm1
  0006e	0f 57 c9	 xorps	 xmm1, xmm1
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00071	0f 5a c3	 cvtps2pd xmm0, xmm3
  00074	66 0f 2e c8	 ucomisd xmm1, xmm0
  00078	77 06		 ja	 SHORT $LN9@GetBoundin
  0007a	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0007e	eb 05		 jmp	 SHORT $LN10@GetBoundin
$LN9@GetBoundin:
  00080	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN10@GetBoundin:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1357 : 	fRadius = sqrtf(fX * fX + fY * fY + fZ * fZ) * 0.5f * 0.9f; // 0.9f for reduce size

  00085	8b 45 0c	 mov	 eax, DWORD PTR _fRadius$[ebp]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00088	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1357 : 	fRadius = sqrtf(fX * fX + fY * fY + fZ * fZ) * 0.5f * 0.9f; // 0.9f for reduce size

  0008c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00094	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f666666
  0009c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1358 : 
; 1359 : 	D3DXVECTOR3 vec = m_pSpeedTree->GetTreePosition();

  000a0	8b 8e 7c 01 00
	00		 mov	 ecx, DWORD PTR [esi+380]
  000a6	e8 00 00 00 00	 call	 ?GetTreePosition@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetTreePosition
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  000ab	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]

; 165  :     y = pf[1];

  000af	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 166  :     z = pf[2];

  000b4	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]

; 204  :     x += v.x;

  000b9	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]

; 205  :     y += v.y;

  000bd	f3 0f 58 4f 04	 addss	 xmm1, DWORD PTR [edi+4]

; 206  :     z += v.z;

  000c2	f3 0f 58 57 08	 addss	 xmm2, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1363 : 	return true;

  000c7	b0 01		 mov	 al, 1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  000c9	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 205  :     y += v.y;

  000cd	f3 0f 11 4f 04	 movss	 DWORD PTR [edi+4], xmm1

; 206  :     z += v.z;

  000d2	f3 0f 11 57 08	 movss	 DWORD PTR [edi+8], xmm2
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp

; 1364 : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z ENDP ; CSpeedTreeWrapper::GetBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z
_TEXT	SEGMENT
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_pfHeight$ = 16						; size = 4
?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z PROC	; CSpeedTreeWrapper::OnGetObjectHeight, COMDAT
; _this$ = ecx

; 77   : 	virtual bool OnGetObjectHeight(float fX, float fY, float * pfHeight) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 0c 00	 ret	 12			; 0000000cH
?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z ENDP	; CSpeedTreeWrapper::OnGetObjectHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pAttributeInstance$ = 8				; size = 4
?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z PROC ; CSpeedTreeWrapper::OnUpdateHeighInstance, COMDAT
; _this$ = ecx

; 76   : 	virtual void OnUpdateHeighInstance(CAttributeInstance * pAttributeInstance) {}

  00000	c2 04 00	 ret	 4
?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z ENDP ; CSpeedTreeWrapper::OnUpdateHeighInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
_TEXT	SEGMENT
_ObjectType$1 = -152					; size = 4
_mat$ = -148						; size = 64
_CollisionData$2 = -84					; size = 80
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z PROC ; CSpeedTreeWrapper::OnUpdateCollisionData, COMDAT
; _this$ = ecx

; 1448 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 1449 : 	D3DXMATRIX mat;
; 1450 : 	D3DXMatrixTranslation(&mat, m_afPos[0], m_afPos[1], m_afPos[2]);

  00017	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _mat$[ebp]
  0001d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00020	f3 0f 10 87 d0
	01 00 00	 movss	 xmm0, DWORD PTR [edi+464]
  00028	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0002e	f3 0f 10 87 cc
	01 00 00	 movss	 xmm0, DWORD PTR [edi+460]
  00036	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003c	f3 0f 10 87 c8
	01 00 00	 movss	 xmm0, DWORD PTR [edi+456]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 1451 : 
; 1452 : 	/////
; 1453 : 	for (UINT i = 0; i < GetCollisionObjectCount(); ++i)

  0004f	8b cf		 mov	 ecx, edi
  00051	33 f6		 xor	 esi, esi
  00053	e8 00 00 00 00	 call	 ?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ ; CSpeedTreeWrapper::GetCollisionObjectCount
  00058	85 c0		 test	 eax, eax
  0005a	74 5e		 je	 SHORT $LN3@OnUpdateCo
  0005c	0f 1f 40 00	 npad	 4
$LL4@OnUpdateCo:

; 1454 : 	{
; 1455 : 		CSpeedTreeRT::ECollisionObjectType ObjectType;
; 1456 : 		CStaticCollisionData CollisionData;
; 1457 : 
; 1458 : 		GetCollisionObject(i, ObjectType, (float * )&CollisionData.v3Position, CollisionData.fDimensions);

  00060	8d 45 e0	 lea	 eax, DWORD PTR _CollisionData$2[ebp+52]
  00063	8b cf		 mov	 ecx, edi
  00065	50		 push	 eax
  00066	8d 45 d4	 lea	 eax, DWORD PTR _CollisionData$2[ebp+40]
  00069	50		 push	 eax
  0006a	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _ObjectType$1[ebp]
  00070	50		 push	 eax
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?GetCollisionObject@CSpeedTreeWrapper@@QAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z ; CSpeedTreeWrapper::GetCollisionObject

; 1459 : 
; 1460 : 		if (ObjectType == CSpeedTreeRT::CO_BOX)

  00077	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _ObjectType$1[ebp]
  0007d	83 f8 02	 cmp	 eax, 2
  00080	74 2c		 je	 SHORT $LN2@OnUpdateCo

; 1461 : 			continue;
; 1462 : 
; 1463 : 		switch(ObjectType)

  00082	83 e8 00	 sub	 eax, 0
  00085	74 0e		 je	 SHORT $LN8@OnUpdateCo
  00087	83 e8 01	 sub	 eax, 1
  0008a	75 10		 jne	 SHORT $LN5@OnUpdateCo

; 1467 : 			CollisionData.fDimensions[0] = CollisionData.fDimensions[0] /** fSizeRatio*/;
; 1468 : 			//AddCollision(&CollisionData);
; 1469 : 			break;
; 1470 : 
; 1471 : 		case CSpeedTreeRT::CO_CYLINDER:
; 1472 : 			CollisionData.dwType = COLLISION_TYPE_CYLINDER;

  0008c	c7 45 ac 03 00
	00 00		 mov	 DWORD PTR _CollisionData$2[ebp], 3

; 1473 : 			CollisionData.fDimensions[0] = CollisionData.fDimensions[0] /** fSizeRatio*/;
; 1474 : 			CollisionData.fDimensions[1] = CollisionData.fDimensions[1] /** fSizeRatio*/;

  00093	eb 07		 jmp	 SHORT $LN5@OnUpdateCo
$LN8@OnUpdateCo:

; 1464 : 		{
; 1465 : 		case CSpeedTreeRT::CO_SPHERE:
; 1466 : 			CollisionData.dwType = COLLISION_TYPE_SPHERE;

  00095	c7 45 ac 02 00
	00 00		 mov	 DWORD PTR _CollisionData$2[ebp], 2
$LN5@OnUpdateCo:

; 1475 : 			//AddCollision(&CollisionData);
; 1476 : 			break;
; 1477 : 
; 1478 : 			/*case CSpeedTreeRT::CO_BOX:
; 1479 : 			break;*/
; 1480 : 		}
; 1481 : 		AddCollision(&CollisionData, &mat);

  0009c	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _mat$[ebp]
  000a2	8b cf		 mov	 ecx, edi
  000a4	50		 push	 eax
  000a5	8d 45 ac	 lea	 eax, DWORD PTR _CollisionData$2[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CGraphicObjectInstance::AddCollision
$LN2@OnUpdateCo:

; 1451 : 
; 1452 : 	/////
; 1453 : 	for (UINT i = 0; i < GetCollisionObjectCount(); ++i)

  000ae	8b cf		 mov	 ecx, edi
  000b0	46		 inc	 esi
  000b1	e8 00 00 00 00	 call	 ?GetCollisionObjectCount@CSpeedTreeWrapper@@QAEIXZ ; CSpeedTreeWrapper::GetCollisionObjectCount
  000b6	3b f0		 cmp	 esi, eax
  000b8	72 a6		 jb	 SHORT $LL4@OnUpdateCo
$LN3@OnUpdateCo:

; 1482 : 	}
; 1483 : }

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bd	5f		 pop	 edi
  000be	33 cd		 xor	 ecx, ebp
  000c0	5e		 pop	 esi
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ENDP ; CSpeedTreeWrapper::OnUpdateCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?GetType@CSpeedTreeWrapper@@EBEHXZ
_TEXT	SEGMENT
?GetType@CSpeedTreeWrapper@@EBEHXZ PROC			; CSpeedTreeWrapper::GetType, COMDAT
; _this$ = ecx

; 71   : 	int GetType() const { return ID; }

  00000	b8 a6 f7 c9 8a	 mov	 eax, -1966475354	; 8ac9f7a6H
  00005	c3		 ret	 0
?GetType@CSpeedTreeWrapper@@EBEHXZ ENDP			; CSpeedTreeWrapper::GetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpObjectInstance.h
;	COMDAT ?OnDeform@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnDeform@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnDeform, COMDAT
; _this$ = ecx

; 109  : 		virtual void			OnDeform(){}

  00000	c2 00 00	 ret	 0
?OnDeform@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnDeform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpObjectInstance.h
;	COMDAT ?OnUpdate@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnUpdate@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnUpdate, COMDAT
; _this$ = ecx

; 108  : 		virtual void			OnUpdate(){}

  00000	c2 00 00	 ret	 0
?OnUpdate@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\GrpObjectInstance.h
;	COMDAT ?OnClear@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnClear@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnClear, COMDAT
; _this$ = ecx

; 107  : 		virtual void			OnClear(){}

  00000	c2 00 00	 ret	 0
?OnClear@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv518 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
tv508 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv503 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv508[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv508[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv508[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR __Old$1$[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv518[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv503[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv518[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv503[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__Left$ = 12						; size = 4
__New_size$1$ = 12					; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1056 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1063 :         const auto _Right_size = _Right_data._Mysize;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1057 :         auto& _My_data    = _Mypair._Myval2;
; 1058 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 1059 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1060 :         _Left_data._Orphan_all();
; 1061 :         _Right_data._Orphan_all();
; 1062 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 1063 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 1064 : 
; 1065 :         const auto _Left_capacity  = _Left_data._Myres;
; 1066 :         const auto _Right_capacity = _Right_data._Myres;
; 1067 :         // overflow is OK due to max_size() checks:
; 1068 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 1069 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 1070 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00041	77 5a		 ja	 SHORT $LN113@basic_stri
  00043	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00046	77 55		 ja	 SHORT $LN113@basic_stri

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0004b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0004e	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00053	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00058	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0005f	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00066	c6 07 00	 mov	 BYTE PTR [edi], 0

; 416  :         value_type* _Result = _Bx._Buf;

  00069	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  0006b	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0006f	76 02		 jbe	 SHORT $LN71@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN71@basic_stri:

; 434  :         return _Myres > _Small_string_capacity;

  00073	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00077	76 02		 jbe	 SHORT $LN78@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN78@basic_stri:

; 1076 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1076 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	53		 push	 ebx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1077 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 1122 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00092	8b c6		 mov	 eax, esi
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN113@basic_stri:

; 1078 :             return;
; 1079 :         }
; 1080 : 
; 1081 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 1082 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN112@basic_stri

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 1097 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000ad	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  000b2	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000b7	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000be	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000c5	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 1083 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 1084 :             // At this point, we have tested:
; 1085 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 1086 :             // therefore: (by De Morgan's Laws)
; 1087 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 1088 :             // therefore: (by the distributive property)
; 1089 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 1090 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 1091 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_mode_engaged()
; 1092 :             _STL_INTERNAL_CHECK(_Right_data._Large_mode_engaged());
; 1093 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 1094 :             _Take_contents(_Right);
; 1095 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1097 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000d7	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000db	76 02		 jbe	 SHORT $LN102@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN102@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	57		 push	 edi
  000e4	53		 push	 ebx
  000e5	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1099 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 1122 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000f3	8b c6		 mov	 eax, esi
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN112@basic_stri:

; 1100 :             return;
; 1101 :         }
; 1102 : 
; 1103 :         // can't use either buffer, reallocate
; 1104 :         const auto _Max = max_size();
; 1105 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 a2 00 00
	00		 jb	 $LN132@basic_stri

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 14		 jbe	 SHORT $LN20@basic_stri

; 2944 :             return _Max;

  0011a	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  0011f	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR $T2[ebp], 2147483647 ; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00126	52		 push	 edx
  00127	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0012c	eb 2a		 jmp	 SHORT $LN130@basic_stri
$LN20@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0012e	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  00133	3b c2		 cmp	 eax, edx
  00135	0f 42 c2	 cmovb	 eax, edx
  00138	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0013b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0013e	85 d2		 test	 edx, edx
  00140	74 21		 je	 SHORT $LN129@basic_stri
$LN34@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00142	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00148	72 08		 jb	 SHORT $LN35@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00150	eb 06		 jmp	 SHORT $LN130@basic_stri
$LN35@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00152	52		 push	 edx
  00153	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN130@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00158	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  0015b	8b d0		 mov	 edx, eax
  0015d	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00160	83 c4 04	 add	 esp, 4
$LN129@basic_stri:

; 1115 :         _My_data._Mysize = _New_size;

  00163	8b 5d 0c	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  00166	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 417  :         if (_Large_mode_engaged()) {

  00169	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016c	89 16		 mov	 DWORD PTR [esi], edx

; 1116 :         _My_data._Myres  = _New_capacity;

  0016e	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 434  :         return _Myres > _Small_string_capacity;

  00171	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00175	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx

; 417  :         if (_Large_mode_engaged()) {

  00178	76 02		 jbe	 SHORT $LN40@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0017a	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN40@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0017c	51		 push	 ecx
  0017d	57		 push	 edi
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 _memcpy
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00187	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0018b	76 02		 jbe	 SHORT $LN50@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0018d	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN50@basic_stri:

; 1119 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0018f	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00192	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00193	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1119 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00194	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  00197	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019a	53		 push	 ebx
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1122 :     }

  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	8b c6		 mov	 eax, esi
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 0c 00	 ret	 12			; 0000000cH
$LN132@basic_stri:

; 1106 :             _Xlen_string();

  001af	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN127@basic_stri:
  001b4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);
; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 842  :         __crt_va_end(_ArgList);
; 843  :         return _Result;
; 844  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeMaterial.h
;	COMDAT ?Set@CSpeedTreeMaterial@@QAEXPBM@Z
_TEXT	SEGMENT
_pMaterialArray$ = 8					; size = 4
?Set@CSpeedTreeMaterial@@QAEXPBM@Z PROC			; CSpeedTreeMaterial::Set, COMDAT
; _this$ = ecx

; 56   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 			memcpy(&m_cMaterial.Diffuse, pMaterialArray, 3 * sizeof(float));

  00003	8b 55 08	 mov	 edx, DWORD PTR _pMaterialArray$[ebp]
  00006	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  0000a	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0000e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00011	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 58   : 			m_cMaterial.Diffuse.a = 1.0f;

  00014	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [ecx+12], 1065353216 ; 3f800000H

; 59   : 
; 60   : 			memcpy(&m_cMaterial.Ambient, pMaterialArray + 3, 3 * sizeof(float));

  0001b	f3 0f 7e 42 0c	 movq	 xmm0, QWORD PTR [edx+12]
  00020	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00025	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00028	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 61   : 			m_cMaterial.Ambient.a = 1.0f;

  0002b	c7 41 1c 00 00
	80 3f		 mov	 DWORD PTR [ecx+28], 1065353216 ; 3f800000H

; 62   : 
; 63   : 			memcpy(&m_cMaterial.Specular, pMaterialArray + 6, 3 * sizeof(float));

  00032	f3 0f 7e 42 18	 movq	 xmm0, QWORD PTR [edx+24]
  00037	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  0003c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0003f	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 64   : 			m_cMaterial.Specular.a = 1.0f;

  00042	c7 41 2c 00 00
	80 3f		 mov	 DWORD PTR [ecx+44], 1065353216 ; 3f800000H

; 65   : 
; 66   : 			memcpy(&m_cMaterial.Emissive, pMaterialArray + 9, 3 * sizeof(float));

  00049	f3 0f 7e 42 24	 movq	 xmm0, QWORD PTR [edx+36]
  0004e	66 0f d6 41 30	 movq	 QWORD PTR [ecx+48], xmm0
  00053	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00056	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 67   : 			m_cMaterial.Emissive.a = 1.0f;

  00059	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [ecx+60], 1065353216 ; 3f800000H

; 68   : 
; 69   : 			m_cMaterial.Power = pMaterialArray[12];

  00060	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00063	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 70   : 		}

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?Set@CSpeedTreeMaterial@@QAEXPBM@Z ENDP			; CSpeedTreeMaterial::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeMaterial.h
;	COMDAT ??0CSpeedTreeMaterial@@QAE@XZ
_TEXT	SEGMENT
??0CSpeedTreeMaterial@@QAE@XZ PROC			; CSpeedTreeMaterial::CSpeedTreeMaterial, COMDAT
; _this$ = ecx

; 47   : 		{
; 48   : 			m_cMaterial.Ambient.r = m_cMaterial.Diffuse.r = m_cMaterial.Specular.r = m_cMaterial.Emissive.r = 1.0f;

  00000	c7 41 30 00 00
	80 3f		 mov	 DWORD PTR [ecx+48], 1065353216 ; 3f800000H

; 49   : 			m_cMaterial.Ambient.g = m_cMaterial.Diffuse.g = m_cMaterial.Specular.g = m_cMaterial.Emissive.g = 1.0f;
; 50   : 			m_cMaterial.Ambient.b = m_cMaterial.Diffuse.b = m_cMaterial.Specular.b = m_cMaterial.Emissive.b = 1.0f;
; 51   : 			m_cMaterial.Ambient.a = m_cMaterial.Diffuse.a = m_cMaterial.Specular.a = m_cMaterial.Emissive.a = 1.0f;
; 52   : 			m_cMaterial.Power = 5.0f;
; 53   : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 20 00 00
	80 3f		 mov	 DWORD PTR [ecx+32], 1065353216 ; 3f800000H
  00010	c7 01 00 00 80
	3f		 mov	 DWORD PTR [ecx], 1065353216 ; 3f800000H
  00016	c7 41 10 00 00
	80 3f		 mov	 DWORD PTR [ecx+16], 1065353216 ; 3f800000H
  0001d	c7 41 34 00 00
	80 3f		 mov	 DWORD PTR [ecx+52], 1065353216 ; 3f800000H
  00024	c7 41 24 00 00
	80 3f		 mov	 DWORD PTR [ecx+36], 1065353216 ; 3f800000H
  0002b	c7 41 04 00 00
	80 3f		 mov	 DWORD PTR [ecx+4], 1065353216 ; 3f800000H
  00032	c7 41 14 00 00
	80 3f		 mov	 DWORD PTR [ecx+20], 1065353216 ; 3f800000H
  00039	c7 41 38 00 00
	80 3f		 mov	 DWORD PTR [ecx+56], 1065353216 ; 3f800000H
  00040	c7 41 28 00 00
	80 3f		 mov	 DWORD PTR [ecx+40], 1065353216 ; 3f800000H
  00047	c7 41 08 00 00
	80 3f		 mov	 DWORD PTR [ecx+8], 1065353216 ; 3f800000H
  0004e	c7 41 18 00 00
	80 3f		 mov	 DWORD PTR [ecx+24], 1065353216 ; 3f800000H
  00055	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [ecx+60], 1065353216 ; 3f800000H
  0005c	c7 41 2c 00 00
	80 3f		 mov	 DWORD PTR [ecx+44], 1065353216 ; 3f800000H
  00063	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [ecx+12], 1065353216 ; 3f800000H
  0006a	c7 41 1c 00 00
	80 3f		 mov	 DWORD PTR [ecx+28], 1065353216 ; 3f800000H
  00071	c7 41 40 00 00
	a0 40		 mov	 DWORD PTR [ecx+64], 1084227584 ; 40a00000H
  00078	c3		 ret	 0
??0CSpeedTreeMaterial@@QAE@XZ ENDP			; CSpeedTreeMaterial::CSpeedTreeMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
