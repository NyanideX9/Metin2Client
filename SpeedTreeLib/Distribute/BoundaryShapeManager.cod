; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\Distribute\BoundaryShapeManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__Avx2WmemEnabledWeakValue
;	COMDAT __Avx2WmemEnabledWeakValue
_BSS	SEGMENT
__Avx2WmemEnabledWeakValue DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
PUBLIC	??1SBoundaryShape@@QAE@XZ			; SBoundaryShape::~SBoundaryShape
PUBLIC	??0CBoundaryShapeManager@@QAE@XZ		; CBoundaryShapeManager::CBoundaryShapeManager
PUBLIC	??1CBoundaryShapeManager@@UAE@XZ		; CBoundaryShapeManager::~CBoundaryShapeManager
PUBLIC	?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z	; CBoundaryShapeManager::LoadBsfFile
PUBLIC	?PointInside@CBoundaryShapeManager@@QAE_NMM@Z	; CBoundaryShapeManager::PointInside
PUBLIC	?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z	; CBoundaryShapeManager::RandomPoint
PUBLIC	?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape
PUBLIC	??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >
PUBLIC	?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
PUBLIC	??_GCBoundaryShapeManager@@UAEPAXI@Z		; CBoundaryShapeManager::`scalar deleting destructor'
PUBLIC	??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
PUBLIC	??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
PUBLIC	?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
PUBLIC	?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEPAUSPoint@@QAU2@ABU2@@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
PUBLIC	??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
PUBLIC	??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
PUBLIC	??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>
PUBLIC	??1_Reallocation_guard@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Reallocation_guard::~_Reallocation_guard
PUBLIC	??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
PUBLIC	??1_Reallocation_guard@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Reallocation_guard::~_Reallocation_guard
PUBLIC	??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??$_Copy_memmove_tail@PAUSPoint@@@std@@YAPAUSPoint@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<SPoint *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7CBoundaryShapeManager@@6B@			; CBoundaryShapeManager::`vftable'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R4CBoundaryShapeManager@@6B@			; CBoundaryShapeManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBoundaryShapeManager@@@8		; CBoundaryShapeManager `RTTI Type Descriptor'
PUBLIC	??_R3CBoundaryShapeManager@@8			; CBoundaryShapeManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBoundaryShapeManager@@8			; CBoundaryShapeManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBoundaryShapeManager@@8		; CBoundaryShapeManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	?random_range@@YAJJJ@Z:PROC			; random_range
EXTRN	??_ECBoundaryShapeManager@@UAEPAXI@Z:PROC	; CBoundaryShapeManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBoundaryShapeManager@@8 DD FLAT:??_R0?AVCBoundaryShapeManager@@@8 ; CBoundaryShapeManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R2CBoundaryShapeManager@@8 DD FLAT:??_R1A@?0A@EA@CBoundaryShapeManager@@8 ; CBoundaryShapeManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R3CBoundaryShapeManager@@8 DD 00H			; CBoundaryShapeManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBoundaryShapeManager@@@8
data$rs	SEGMENT
??_R0?AVCBoundaryShapeManager@@@8 DD FLAT:??_7type_info@@6B@ ; CBoundaryShapeManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBoundaryShapeManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CBoundaryShapeManager@@6B@
rdata$r	SEGMENT
??_R4CBoundaryShapeManager@@6B@ DD 00H			; CBoundaryShapeManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBoundaryShapeManager@@@8
	DD	FLAT:??_R3CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Could not open ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of bou'
	DB	'ndaries', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of con'
	DB	'tours', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of poi'
	DB	'nts', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CBoundaryShapeManager@@6B@
CONST	SEGMENT
??_7CBoundaryShapeManager@@6B@ DD FLAT:??_R4CBoundaryShapeManager@@6B@ ; CBoundaryShapeManager::`vftable'
	DD	FLAT:??_ECBoundaryShapeManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@PAV12@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@PAV10@00AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@PAV12@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@PAV10@00AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@PAV12@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@PAV10@00AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@PAV12@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@PAV10@00AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_n@ABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABQAV12@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXIABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_n@ABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABQAV12@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXIABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_n@ABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABQAV12@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXIABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@0@Z$1
__ehfuncinfo$??$_Construct_n@ABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABQAV12@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXIABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct_n@ABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABQAV12@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXIABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$2
__ehfuncinfo$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$0
__ehfuncinfo$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z$0
__ehfuncinfo$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$17 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$0
__tryblocktable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 00H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$17
__ehfuncinfo$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$5
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SBoundaryShape@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SBoundaryShape@@QAE@ABU0@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0SBoundaryShape@@QAE@ABU0@@Z$2
__ehfuncinfo$??0SBoundaryShape@@QAE@ABU0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SBoundaryShape@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >, COMDAT
; _this$ = ecx

; 87   :         if (_Target) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	0f 85 00 00 00
	00		 jne	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy

; 88   :             _Target->_Tidy();
; 89   :         }
; 90   :     }

  0000a	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAUSPoint@@@std@@YAPAUSPoint@@QBDQAU1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAUSPoint@@@std@@YAPAUSPoint@@QBDQAU1@II@Z PROC ; std::_Copy_memmove_tail<SPoint *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAUSPoint@@@std@@YAPAUSPoint@@QBDQAU1@II@Z ENDP ; std::_Copy_memmove_tail<SPoint *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT
; _this$ = ecx

; 1801 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

  00000	56		 push	 esi

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 1098 :         for (; _First != _Last; ++_First) {

  00007	3b f7		 cmp	 esi, edi
  00009	74 13		 je	 SHORT $LN6@Uninitiali
  0000b	0f 1f 44 00 00	 npad	 5
$LL7@Uninitiali:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00017	83 c6 0c	 add	 esi, 12			; 0000000cH
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL7@Uninitiali
$LN6@Uninitiali:
  0001e	5f		 pop	 edi

; 1803 :     }

  0001f	5e		 pop	 esi
  00020	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z PROC ; std::_Copy_memmove<SPoint *,SPoint *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 4d 08	 sub	 ecx, DWORD PTR __First$[ebp]
  0000e	f7 e9		 imul	 ecx
  00010	d1 fa		 sar	 edx, 1
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00019	50		 push	 eax
  0001a	51		 push	 ecx
  0001b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAUSPoint@@@std@@YAPAUSPoint@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<SPoint *>
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ENDP ; std::_Copy_memmove<SPoint *,SPoint *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
tv442 = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT

; 1940 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	57		 push	 edi

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	8b c7		 mov	 eax, edi
  00010	3b d3		 cmp	 edx, ebx
  00012	74 45		 je	 SHORT $LN3@Uninitiali

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00014	2b c2		 sub	 eax, edx
  00016	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  00019	89 45 10	 mov	 DWORD PTR tv442[ebp], eax
  0001c	56		 push	 esi
  0001d	0f 1f 00	 npad	 3
$LL4@Uninitiali:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00022	8d 49 0c	 lea	 ecx, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00025	8b 41 f0	 mov	 eax, DWORD PTR [ecx-16]
  00028	8b 71 f8	 mov	 esi, DWORD PTR [ecx-8]

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0002b	c7 41 f8 00 00
	00 00		 mov	 DWORD PTR [ecx-8], 0
  00032	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0
  00039	c7 41 f0 00 00
	00 00		 mov	 DWORD PTR [ecx-16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 403  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00040	89 07		 mov	 DWORD PTR [edi], eax
  00042	8b 45 10	 mov	 eax, DWORD PTR tv442[ebp]
  00045	89 77 08	 mov	 DWORD PTR [edi+8], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00048	83 c7 0c	 add	 edi, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 403  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  0004b	89 54 08 f4	 mov	 DWORD PTR [eax+ecx-12], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0004f	8d 51 fc	 lea	 edx, DWORD PTR [ecx-4]
  00052	3b d3		 cmp	 edx, ebx
  00054	75 ca		 jne	 SHORT $LL4@Uninitiali
  00056	5e		 pop	 esi

; 1962 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1963 :     }
; 1964 : 
; 1965 :     return _Backout._Release();

  00057	8b c7		 mov	 eax, edi
$LN3@Uninitiali:

; 1966 : }

  00059	5f		 pop	 edi
  0005a	5b		 pop	 ebx
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1_Reallocation_guard@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Reallocation_guard@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Reallocation_guard::~_Reallocation_guard, COMDAT
; _this$ = ecx

; 605  :         _CONSTEXPR20 ~_Reallocation_guard() noexcept {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 606  :             if (_New_begin != nullptr) {

  00003	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  00007	74 4c		 je	 SHORT $LN25@Reallocati

; 607  :                 _STD _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00009	56		 push	 esi
  0000a	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  0000d	57		 push	 edi
  0000e	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00011	3b f7		 cmp	 esi, edi
  00013	74 0e		 je	 SHORT $LN7@Reallocati
$LL8@Reallocati:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  00015	8b ce		 mov	 ecx, esi
  00017	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  0001c	83 c6 0c	 add	 esi, 12			; 0000000cH
  0001f	3b f7		 cmp	 esi, edi
  00021	75 f2		 jne	 SHORT $LL8@Reallocati
$LN7@Reallocati:

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00023	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0002b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0002e	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00031	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00037	72 12		 jb	 SHORT $LN36@Reallocati

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00039	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00041	83 c0 fc	 add	 eax, -4			; fffffffcH
  00044	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00047	77 0e		 ja	 SHORT $LN33@Reallocati

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b c2		 mov	 eax, edx
$LN36@Reallocati:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8
$LN25@Reallocati:
  00055	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 610  :         }

  00056	c3		 ret	 0
$LN33@Reallocati:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00057	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@Reallocati:
  0005c	cc		 int	 3
??1_Reallocation_guard@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Reallocation_guard::~_Reallocation_guard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
tv603 = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z PROC ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >, COMDAT

; 1940 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	57		 push	 edi

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000a	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0000d	74 6d		 je	 SHORT $LN69@Uninitiali

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000f	8b d7		 mov	 edx, edi
  00011	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00014	53		 push	 ebx
  00015	2b d0		 sub	 edx, eax
  00017	8d 5f 0c	 lea	 ebx, DWORD PTR [edi+12]
  0001a	56		 push	 esi
  0001b	89 55 10	 mov	 DWORD PTR tv603[ebp], edx
  0001e	66 90		 npad	 2
$LL4@Uninitiali:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00022	8d 49 24	 lea	 ecx, DWORD PTR [ecx+36]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00025	8b 41 d8	 mov	 eax, DWORD PTR [ecx-40]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00028	8d 5b 24	 lea	 ebx, DWORD PTR [ebx+36]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0002b	8b 71 e0	 mov	 esi, DWORD PTR [ecx-32]

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0002e	c7 41 e0 00 00
	00 00		 mov	 DWORD PTR [ecx-32], 0
  00035	c7 41 dc 00 00
	00 00		 mov	 DWORD PTR [ecx-36], 0
  0003c	c7 41 d8 00 00
	00 00		 mov	 DWORD PTR [ecx-40], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 403  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00043	89 07		 mov	 DWORD PTR [edi], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00045	83 c7 24	 add	 edi, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 403  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00048	8b 45 10	 mov	 eax, DWORD PTR tv603[ebp]
  0004b	89 73 d8	 mov	 DWORD PTR [ebx-40], esi
  0004e	89 54 08 dc	 mov	 DWORD PTR [eax+ecx-36], edx
  00052	f3 0f 7e 41 e4	 movq	 xmm0, QWORD PTR [ecx-28]
  00057	66 0f d6 43 dc	 movq	 QWORD PTR [ebx-36], xmm0
  0005c	8b 41 ec	 mov	 eax, DWORD PTR [ecx-20]
  0005f	89 43 e4	 mov	 DWORD PTR [ebx-28], eax
  00062	f3 0f 7e 41 f0	 movq	 xmm0, QWORD PTR [ecx-16]
  00067	66 0f d6 43 e8	 movq	 QWORD PTR [ebx-24], xmm0
  0006c	8b 51 f8	 mov	 edx, DWORD PTR [ecx-8]
  0006f	89 53 f0	 mov	 DWORD PTR [ebx-16], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00072	8d 51 fc	 lea	 edx, DWORD PTR [ecx-4]
  00075	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  00078	75 a6		 jne	 SHORT $LL4@Uninitiali
  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
$LN69@Uninitiali:

; 1962 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1963 :     }
; 1964 : 
; 1965 :     return _Backout._Release();
; 1966 : }

  0007c	8b c7		 mov	 eax, edi
  0007e	5f		 pop	 edi
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ENDP ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1_Reallocation_guard@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Reallocation_guard@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Reallocation_guard::~_Reallocation_guard, COMDAT
; _this$ = ecx

; 605  :         _CONSTEXPR20 ~_Reallocation_guard() noexcept {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 606  :             if (_New_begin != nullptr) {

  00003	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  00007	74 4c		 je	 SHORT $LN30@Reallocati

; 607  :                 _STD _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00009	56		 push	 esi
  0000a	8b 73 0c	 mov	 esi, DWORD PTR [ebx+12]
  0000d	57		 push	 edi
  0000e	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00011	3b f7		 cmp	 esi, edi
  00013	74 0e		 je	 SHORT $LN7@Reallocati
$LL8@Reallocati:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  00015	8b ce		 mov	 ecx, esi
  00017	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  0001c	83 c6 24	 add	 esi, 36			; 00000024H
  0001f	3b f7		 cmp	 esi, edi
  00021	75 f2		 jne	 SHORT $LL8@Reallocati
$LN7@Reallocati:

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00023	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0002b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0002e	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00031	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00037	72 12		 jb	 SHORT $LN41@Reallocati

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00039	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00041	83 c0 fc	 add	 eax, -4			; fffffffcH
  00044	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00047	77 0e		 ja	 SHORT $LN38@Reallocati

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b c2		 mov	 eax, edx
$LN41@Reallocati:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8
$LN30@Reallocati:
  00055	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 610  :         }

  00056	c3		 ret	 0
$LN38@Reallocati:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00057	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN53@Reallocati:
  0005c	cc		 int	 3
??1_Reallocation_guard@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Reallocation_guard::~_Reallocation_guard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
_TEXT	SEGMENT
__Backout$2 = -32					; size = 12
__Guard$3 = -20						; size = 4
__Last$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>, COMDAT

; 728  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00028	8b 5d 0c	 mov	 ebx, DWORD PTR __Ptr$[ebp]

; 733  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	8b 75 10	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00033	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00039	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00040	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 733  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0004c	f7 e9		 imul	 ecx
  0004e	d1 fa		 sar	 edx, 1
  00050	8b c2		 mov	 eax, edx
  00052	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00055	03 c2		 add	 eax, edx

; 2096 :         if (_Count != 0) {

  00057	0f 84 84 00 00
	00		 je	 $LN74@construct

; 2036 :         if (_Newcapacity > max_size()) {

  0005d	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00062	0f 87 ab 00 00
	00		 ja	 $LN92@construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  00068	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]
  0006b	c1 e7 02	 shl	 edi, 2

; 227  :     if (_Bytes == 0) {

  0006e	85 ff		 test	 edi, edi
  00070	75 04		 jne	 SHORT $LN32@construct

; 228  :         return nullptr;

  00072	33 f6		 xor	 esi, esi
  00074	eb 1a		 jmp	 SHORT $LN31@construct
$LN32@construct:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00076	57		 push	 edi
  00077	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0007d	72 07		 jb	 SHORT $LN33@construct

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00084	eb 05		 jmp	 SHORT $LN90@construct
$LN33@construct:

; 136  :         return ::operator new(_Bytes);

  00086	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN90@construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  0008b	8b f0		 mov	 esi, eax
  0008d	83 c4 04	 add	 esp, 4
$LN31@construct:
  00090	89 33		 mov	 DWORD PTR [ebx], esi

; 2021 :         _Mylast               = _Newvec;
; 2022 :         _Myend                = _Newvec + _Newcapacity;

  00092	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00095	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  00098	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 2098 :             _Tidy_guard<vector> _Guard{this};

  0009b	89 5d ec	 mov	 DWORD PTR __Guard$3[ebp], ebx

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  0009e	8b 7d 10	 mov	 edi, DWORD PTR _<_Args_0>$[ebp]
  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000a8	89 75 e0	 mov	 DWORD PTR __Backout$2[ebp], esi
  000ab	89 75 e4	 mov	 DWORD PTR __Backout$2[ebp+4], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000ae	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b1	8b 3f		 mov	 edi, DWORD PTR [edi]
  000b3	89 45 f0	 mov	 DWORD PTR __Last$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000b6	89 5d e8	 mov	 DWORD PTR __Backout$2[ebp+8], ebx

; 1863 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  000b9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1864 :     for (; _UFirst != _ULast; ++_UFirst) {

  000bd	3b f8		 cmp	 edi, eax
  000bf	74 1a		 je	 SHORT $LN43@construct
  000c1	8b d8		 mov	 ebx, eax
$LL44@construct:

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000c3	57		 push	 edi
  000c4	8b ce		 mov	 ecx, esi
  000c6	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >

; 1808 :         ++_Last;

  000cb	83 c6 0c	 add	 esi, 12			; 0000000cH

; 1864 :     for (; _UFirst != _ULast; ++_UFirst) {

  000ce	83 c7 0c	 add	 edi, 12			; 0000000cH

; 1808 :         ++_Last;

  000d1	89 75 e4	 mov	 DWORD PTR __Backout$2[ebp+4], esi

; 1864 :     for (; _UFirst != _ULast; ++_UFirst) {

  000d4	3b fb		 cmp	 edi, ebx
  000d6	75 eb		 jne	 SHORT $LL44@construct
  000d8	8b 5d 0c	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN43@construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000db	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  000de	8b 75 10	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
$LN74@construct:
  000e1	f3 0f 7e 46 0c	 movq	 xmm0, QWORD PTR [esi+12]
  000e6	66 0f d6 43 0c	 movq	 QWORD PTR [ebx+12], xmm0
  000eb	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000ee	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000f1	f3 0f 7e 46 18	 movq	 xmm0, QWORD PTR [esi+24]
  000f6	66 0f d6 43 18	 movq	 QWORD PTR [ebx+24], xmm0
  000fb	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000fe	89 43 20	 mov	 DWORD PTR [ebx+32], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 734  :     }

  00101	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00104	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010b	59		 pop	 ecx
  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
$LN92@construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2037 :             _Xlength();

  00113	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
$LN89@construct:
  00118	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$2:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Guard$ = -52						; size = 20
tv570 = -32						; size = 4
__Newsize$1$ = -28					; size = 4
_this$1$ = -24						; size = 4
__Whereoff$1$ = -20					; size = 4
$T2 = -20						; size = 4
tv572 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d e8	 mov	 DWORD PTR _this$1$[ebp], edi

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0002d	8b 37		 mov	 esi, DWORD PTR [edi]
  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00037	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003a	2b d6		 sub	 edx, esi
  0003c	f7 ea		 imul	 edx
  0003e	2b ce		 sub	 ecx, esi
  00040	d1 fa		 sar	 edx, 1
  00042	8b c2		 mov	 eax, edx
  00044	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00047	03 c2		 add	 eax, edx
  00049	89 45 ec	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00051	f7 e9		 imul	 ecx
  00053	d1 fa		 sar	 edx, 1
  00055	8b c2		 mov	 eax, edx
  00057	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005a	03 c2		 add	 eax, edx

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0005c	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00061	0f 84 7d 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00067	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0006a	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006d	2b ce		 sub	 ecx, esi

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0006f	89 5d e4	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00072	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00077	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00079	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0007e	d1 fa		 sar	 edx, 1
  00080	8b ca		 mov	 ecx, edx
  00082	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00085	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00087	8b d1		 mov	 edx, ecx
  00089	d1 ea		 shr	 edx, 1
  0008b	2b c2		 sub	 eax, edx
  0008d	3b c8		 cmp	 ecx, eax
  0008f	76 19		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00091	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00096	c7 45 f0 fc ff
	ff ff		 mov	 DWORD PTR tv572[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009d	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1997 :             return _Max; // geometric growth would overflow

  0009e	be 55 55 55 15	 mov	 esi, 357913941		; 15555555H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	eb 3c		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000aa	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  000ad	8b f3		 mov	 esi, ebx
  000af	3b c3		 cmp	 eax, ebx
  000b1	0f 43 f0	 cmovae	 esi, eax
  000b4	81 fe 55 55 55
	15		 cmp	 esi, 357913941		; 15555555H
  000ba	0f 87 29 01 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  000c0	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000c3	c1 e0 02	 shl	 eax, 2
  000c6	89 45 f0	 mov	 DWORD PTR tv572[ebp], eax

; 227  :     if (_Bytes == 0) {

  000c9	85 c0		 test	 eax, eax
  000cb	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000cd	33 db		 xor	 ebx, ebx
  000cf	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000d1	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d6	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000de	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000e6	8b d8		 mov	 ebx, eax
  000e8	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000eb	8b 45 ec	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 882  :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Constructed_last, _Constructed_last};

  000ee	89 7d cc	 mov	 DWORD PTR __Guard$[ebp], edi
  000f1	89 5d d0	 mov	 DWORD PTR __Guard$[ebp+4], ebx
  000f4	89 75 d4	 mov	 DWORD PTR __Guard$[ebp+8], esi
  000f7	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000fa	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  000fd	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00100	89 4d e0	 mov	 DWORD PTR tv570[ebp], ecx
  00103	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  00106	89 45 d8	 mov	 DWORD PTR __Guard$[ebp+12], eax
  00109	89 45 dc	 mov	 DWORD PTR __Guard$[ebp+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0010c	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 882  :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Constructed_last, _Constructed_last};

  0010f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00116	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0011b	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0011e	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  00121	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00123	3b f2		 cmp	 esi, edx
  00125	75 04		 jne	 SHORT $LN3@Emplace_re

; 889  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 890  :                 _STD _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00127	8b c3		 mov	 eax, ebx

; 891  :             } else {
; 892  :                 _STD _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 893  :             }
; 894  :         } else { // provide basic guarantee

  00129	eb 14		 jmp	 SHORT $LN4@Emplace_re
$LN3@Emplace_re:

; 895  :             _STD _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0012b	57		 push	 edi
  0012c	53		 push	 ebx
  0012d	56		 push	 esi
  0012e	51		 push	 ecx
  0012f	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >

; 896  :             _Constructed_first = _Newvec;
; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00134	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00137	83 c4 10	 add	 esp, 16			; 00000010H
  0013a	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0013d	8b ce		 mov	 ecx, esi
$LN4@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  0013f	57		 push	 edi
  00140	50		 push	 eax
  00141	52		 push	 edx
  00142	51		 push	 ecx
  00143	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00148	8b 37		 mov	 esi, DWORD PTR [edi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  0014a	83 c4 10	 add	 esp, 16			; 00000010H

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0014d	85 f6		 test	 esi, esi
  0014f	74 61		 je	 SHORT $LN56@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00151	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00154	3b f0		 cmp	 esi, eax
  00156	74 19		 je	 SHORT $LN38@Emplace_re
  00158	8b f8		 mov	 edi, eax
  0015a	66 0f 1f 44 00
	00		 npad	 6
$LL39@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  00160	8b ce		 mov	 ecx, esi
  00162	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00167	83 c6 0c	 add	 esi, 12			; 0000000cH
  0016a	3b f7		 cmp	 esi, edi
  0016c	75 f2		 jne	 SHORT $LL39@Emplace_re
  0016e	8b 7d e8	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN38@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00171	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00174	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00179	8b 37		 mov	 esi, DWORD PTR [edi]
  0017b	2b ce		 sub	 ecx, esi
  0017d	f7 e9		 imul	 ecx
  0017f	d1 fa		 sar	 edx, 1
  00181	8b c2		 mov	 eax, edx
  00183	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00186	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00188	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0018b	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0018e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00194	72 12		 jb	 SHORT $LN67@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00196	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00199	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0019c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001a1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a4	77 39		 ja	 SHORT $LN64@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001a6	8b f2		 mov	 esi, edx
$LN67@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001a8	51		 push	 ecx
  001a9	56		 push	 esi
  001aa	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001af	83 c4 08	 add	 esp, 8
$LN56@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  001b2	8b 4d e4	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  001b5	8b 45 e0	 mov	 eax, DWORD PTR tv570[ebp]

; 2060 :         _Myfirst = _Newvec;

  001b8	89 1f		 mov	 DWORD PTR [edi], ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  001ba	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  001bd	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  001c0	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  001c3	8b 4d f0	 mov	 ecx, DWORD PTR tv572[ebp]
  001c6	03 cb		 add	 ecx, ebx
  001c8	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 903  :     }

  001cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d5	59		 pop	 ecx
  001d6	5f		 pop	 edi
  001d7	5e		 pop	 esi
  001d8	5b		 pop	 ebx
  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c2 08 00	 ret	 8
$LN64@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  001e4	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  001e9	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  001ee	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR __Guard$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Reallocation_guard@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Reallocation_guard::~_Reallocation_guard
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Guard$ = -52						; size = 20
tv538 = -32						; size = 4
__Newsize$1$ = -28					; size = 4
_this$1$ = -24						; size = 4
__Whereoff$1$ = -20					; size = 4
$T2 = -20						; size = 4
tv540 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d e8	 mov	 DWORD PTR _this$1$[ebp], edi

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0002d	8b 37		 mov	 esi, DWORD PTR [edi]
  0002f	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00034	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00037	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003a	2b d6		 sub	 edx, esi
  0003c	f7 ea		 imul	 edx
  0003e	2b ce		 sub	 ecx, esi
  00040	c1 fa 03	 sar	 edx, 3
  00043	8b c2		 mov	 eax, edx
  00045	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00048	03 c2		 add	 eax, edx
  0004a	89 45 ec	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004d	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00052	f7 e9		 imul	 ecx
  00054	c1 fa 03	 sar	 edx, 3
  00057	8b c2		 mov	 eax, edx
  00059	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005c	03 c2		 add	 eax, edx

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0005e	3d c7 71 1c 07	 cmp	 eax, 119304647		; 071c71c7H
  00063	0f 84 7e 01 00
	00		 je	 $LN131@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00069	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0006c	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006f	2b ce		 sub	 ecx, esi

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00071	89 5d e4	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00074	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00079	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0007b	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00080	c1 fa 03	 sar	 edx, 3
  00083	8b ca		 mov	 ecx, edx
  00085	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00088	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008a	8b d1		 mov	 edx, ecx
  0008c	d1 ea		 shr	 edx, 1
  0008e	2b c2		 sub	 eax, edx
  00090	3b c8		 cmp	 ecx, eax
  00092	76 19		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00094	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00099	c7 45 f0 fc ff
	ff ff		 mov	 DWORD PTR tv540[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a0	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1997 :             return _Max; // geometric growth would overflow

  000a1	be c7 71 1c 07	 mov	 esi, 119304647		; 071c71c7H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ab	eb 3c		 jmp	 SHORT $LN129@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000ad	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  000b0	8b f3		 mov	 esi, ebx
  000b2	3b c3		 cmp	 eax, ebx
  000b4	0f 43 f0	 cmovae	 esi, eax
  000b7	81 fe c7 71 1c
	07		 cmp	 esi, 119304647		; 071c71c7H
  000bd	0f 87 29 01 00
	00		 ja	 $LN132@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  000c3	8d 04 f6	 lea	 eax, DWORD PTR [esi+esi*8]
  000c6	c1 e0 02	 shl	 eax, 2
  000c9	89 45 f0	 mov	 DWORD PTR tv540[ebp], eax

; 227  :     if (_Bytes == 0) {

  000cc	85 c0		 test	 eax, eax
  000ce	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000d0	33 db		 xor	 ebx, ebx
  000d2	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000d4	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d9	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000e1	eb 06		 jmp	 SHORT $LN129@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN129@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000e9	8b d8		 mov	 ebx, eax
  000eb	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000ee	8b 45 ec	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 881  : 
; 882  :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Constructed_last, _Constructed_last};

  000f1	89 7d cc	 mov	 DWORD PTR __Guard$[ebp], edi
  000f4	89 5d d0	 mov	 DWORD PTR __Guard$[ebp+4], ebx
  000f7	89 75 d4	 mov	 DWORD PTR __Guard$[ebp+8], esi
  000fa	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  000fd	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  00100	8d 41 24	 lea	 eax, DWORD PTR [ecx+36]
  00103	89 4d e0	 mov	 DWORD PTR tv538[ebp], ecx
  00106	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  00109	89 45 d8	 mov	 DWORD PTR __Guard$[ebp+12], eax
  0010c	89 45 dc	 mov	 DWORD PTR __Guard$[ebp+16], eax

; 883  :         auto& _Constructed_first = _Guard._Constructed_first;
; 884  : 
; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0010f	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00112	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00119	51		 push	 ecx
  0011a	57		 push	 edi
  0011b	e8 00 00 00 00	 call	 ??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00120	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH
  00126	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  00129	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0012b	3b f2		 cmp	 esi, edx
  0012d	75 04		 jne	 SHORT $LN3@Emplace_re

; 889  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 890  :                 _STD _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  0012f	8b c3		 mov	 eax, ebx

; 891  :             } else {
; 892  :                 _STD _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 893  :             }
; 894  :         } else { // provide basic guarantee

  00131	eb 14		 jmp	 SHORT $LN4@Emplace_re
$LN3@Emplace_re:

; 895  :             _STD _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  00133	57		 push	 edi
  00134	53		 push	 ebx
  00135	56		 push	 esi
  00136	51		 push	 ecx
  00137	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >

; 896  :             _Constructed_first = _Newvec;
; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0013c	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0013f	83 c4 10	 add	 esp, 16			; 00000010H
  00142	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00145	8b ce		 mov	 ecx, esi
$LN4@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00147	57		 push	 edi
  00148	50		 push	 eax
  00149	52		 push	 edx
  0014a	51		 push	 ecx
  0014b	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00150	8b 37		 mov	 esi, DWORD PTR [edi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00152	83 c4 10	 add	 esp, 16			; 00000010H

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00155	85 f6		 test	 esi, esi
  00157	74 5c		 je	 SHORT $LN59@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00159	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  0015c	3b f0		 cmp	 esi, eax
  0015e	74 13		 je	 SHORT $LN36@Emplace_re
  00160	8b f8		 mov	 edi, eax
$LL37@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  00162	8b ce		 mov	 ecx, esi
  00164	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00169	83 c6 24	 add	 esi, 36			; 00000024H
  0016c	3b f7		 cmp	 esi, edi
  0016e	75 f2		 jne	 SHORT $LL37@Emplace_re
  00170	8b 7d e8	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN36@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00173	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00176	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0017b	8b 37		 mov	 esi, DWORD PTR [edi]
  0017d	2b ce		 sub	 ecx, esi
  0017f	f7 e9		 imul	 ecx
  00181	c1 fa 03	 sar	 edx, 3
  00184	8b c2		 mov	 eax, edx
  00186	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00189	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018b	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0018e	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00191	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00197	72 12		 jb	 SHORT $LN70@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00199	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0019c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0019f	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a1	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001a4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a7	77 39		 ja	 SHORT $LN67@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001a9	8b f2		 mov	 esi, edx
$LN70@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ab	51		 push	 ecx
  001ac	56		 push	 esi
  001ad	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001b2	83 c4 08	 add	 esp, 8
$LN59@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  001b5	8b 4d e4	 mov	 ecx, DWORD PTR __Newsize$1$[ebp]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  001b8	8b 45 e0	 mov	 eax, DWORD PTR tv538[ebp]

; 2060 :         _Myfirst = _Newvec;

  001bb	89 1f		 mov	 DWORD PTR [edi], ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  001bd	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  001c0	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  001c3	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  001c6	8b 4d f0	 mov	 ecx, DWORD PTR tv540[ebp]
  001c9	03 cb		 add	 ecx, ebx
  001cb	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 903  :     }

  001ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d8	59		 pop	 ecx
  001d9	5f		 pop	 edi
  001da	5e		 pop	 esi
  001db	5b		 pop	 ebx
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c2 08 00	 ret	 8
$LN67@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN131@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  001e7	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
$LN132@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  001ec	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN128@Emplace_re:
  001f1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR __Guard$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Reallocation_guard@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Reallocation_guard::~_Reallocation_guard
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEPAUSPoint@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
__Whereoff$1$ = -8					; size = 4
tv618 = -8						; size = 4
tv620 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEPAUSPoint@@QAU2@ABU2@@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	57		 push	 edi
  00012	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00014	2b d7		 sub	 edx, edi

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00016	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00019	f7 ea		 imul	 edx
  0001b	2b cf		 sub	 ecx, edi
  0001d	d1 fa		 sar	 edx, 1
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
  00026	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00029	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002e	f7 e9		 imul	 ecx
  00030	d1 fa		 sar	 edx, 1
  00032	8b c2		 mov	 eax, edx
  00034	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00037	03 c2		 add	 eax, edx
  00039	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0003c	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00041	0f 84 38 01 00
	00		 je	 $LN131@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00047	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0004a	2b cf		 sub	 ecx, edi
  0004c	56		 push	 esi

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0004d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00057	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005c	d1 fa		 sar	 edx, 1
  0005e	8b ca		 mov	 ecx, edx
  00060	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00063	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00065	8b d1		 mov	 edx, ecx
  00067	d1 ea		 shr	 edx, 1
  00069	2b c2		 sub	 eax, edx
  0006b	3b c8		 cmp	 ecx, eax
  0006d	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  0006f	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00074	c7 45 fc fc ff
	ff ff		 mov	 DWORD PTR tv620[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00081	eb 3e		 jmp	 SHORT $LN129@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00083	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00086	8b ce		 mov	 ecx, esi
  00088	3b c6		 cmp	 eax, esi
  0008a	0f 43 c8	 cmovae	 ecx, eax
  0008d	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00093	0f 87 eb 00 00
	00		 ja	 $LN132@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00099	8d 34 49	 lea	 esi, DWORD PTR [ecx+ecx*2]
  0009c	c1 e6 02	 shl	 esi, 2

; 986  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009f	8b c6		 mov	 eax, esi

; 122  :     return _Count * _Ty_size;

  000a1	89 75 fc	 mov	 DWORD PTR tv620[ebp], esi

; 227  :     if (_Bytes == 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000a8	33 ff		 xor	 edi, edi
  000aa	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ac	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b1	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b9	eb 06		 jmp	 SHORT $LN129@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN129@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000c1	8b f8		 mov	 edi, eax
  000c3	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000c6	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000c9	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000cc	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000cf	8d 34 87	 lea	 esi, DWORD PTR [edi+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d2	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d5	89 75 f8	 mov	 DWORD PTR tv618[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000d8	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000dc	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  000e0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e3	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000e6	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000e9	8b 03		 mov	 eax, DWORD PTR [ebx]
  000eb	3b d1		 cmp	 edx, ecx
  000ed	75 04		 jne	 SHORT $LN3@Emplace_re
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000ef	8b f7		 mov	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000f1	eb 14		 jmp	 SHORT $LN58@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000f3	57		 push	 edi
  000f4	52		 push	 edx
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>
  000fb	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH
  00101	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00104	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN58@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00107	56		 push	 esi
  00108	51		 push	 ecx
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0010f	8b 33		 mov	 esi, DWORD PTR [ebx]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00111	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00114	85 f6		 test	 esi, esi
  00116	74 3f		 je	 SHORT $LN80@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00118	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0011b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00120	2b ce		 sub	 ecx, esi
  00122	f7 e9		 imul	 ecx
  00124	d1 fa		 sar	 edx, 1
  00126	8b c2		 mov	 eax, edx
  00128	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0012b	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012d	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00130	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00133	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00139	72 12		 jb	 SHORT $LN91@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0013b	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0013e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00141	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00143	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00146	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00149	77 2f		 ja	 SHORT $LN88@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0014b	8b f2		 mov	 esi, edx
$LN91@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0014d	51		 push	 ecx
  0014e	56		 push	 esi
  0014f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00154	83 c4 08	 add	 esp, 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00157	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0015a	40		 inc	 eax
  0015b	89 3b		 mov	 DWORD PTR [ebx], edi

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  0015d	5e		 pop	 esi

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0015e	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00161	8b 45 f8	 mov	 eax, DWORD PTR tv618[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00164	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  00167	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0016a	8b 4d fc	 mov	 ecx, DWORD PTR tv620[ebp]
  0016d	03 cf		 add	 ecx, edi

; 903  :     }

  0016f	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00170	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 903  :     }

  00173	5b		 pop	 ebx
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c2 08 00	 ret	 8
$LN88@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN131@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  0017f	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
$LN132@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00184	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN128@Emplace_re:
  00189	cc		 int	 3
??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEPAUSPoint@@QAU2@ABU2@@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy, COMDAT
; _this$ = ecx

; 2066 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2067 :         auto& _Al         = _Getal();
; 2068 :         auto& _My_data    = _Mypair._Myval2;
; 2069 :         pointer& _Myfirst = _My_data._Myfirst;
; 2070 :         pointer& _Mylast  = _My_data._Mylast;
; 2071 :         pointer& _Myend   = _My_data._Myend;
; 2072 : 
; 2073 :         _My_data._Orphan_all();
; 2074 : 
; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN2@Tidy

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN21@Tidy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN18@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN21@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN2@Tidy:

; 2084 :     }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN18@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Tidy:
  00065	cc		 int	 3
?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >, COMDAT
; _this$ = ecx

; 815  :         _Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >, COMDAT
; _this$ = ecx

; 731  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 732  :         const auto& _Right_data = _Right._Mypair._Myval2;
; 733  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00004	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 732  :         const auto& _Right_data = _Right._Mypair._Myval2;
; 733  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00024	2b 08		 sub	 ecx, DWORD PTR [eax]
  00026	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002b	f7 e9		 imul	 ecx
  0002d	d1 fa		 sar	 edx, 1
  0002f	8b c2		 mov	 eax, edx
  00031	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00034	03 c2		 add	 eax, edx

; 2096 :         if (_Count != 0) {

  00036	74 6f		 je	 SHORT $LN50@vector

; 2036 :         if (_Newcapacity > max_size()) {

  00038	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0003d	77 71		 ja	 SHORT $LN61@vector
  0003f	53		 push	 ebx
  00040	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  00041	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00044	c1 e6 02	 shl	 esi, 2

; 227  :     if (_Bytes == 0) {

  00047	85 f6		 test	 esi, esi
  00049	75 04		 jne	 SHORT $LN27@vector

; 228  :         return nullptr;

  0004b	33 db		 xor	 ebx, ebx
  0004d	eb 1a		 jmp	 SHORT $LN26@vector
$LN27@vector:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0004f	56		 push	 esi
  00050	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  00056	72 07		 jb	 SHORT $LN28@vector

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00058	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005d	eb 05		 jmp	 SHORT $LN59@vector
$LN28@vector:

; 136  :         return ::operator new(_Bytes);

  0005f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN59@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2020 :         _Myfirst              = _Newvec;

  00064	8b d8		 mov	 ebx, eax
  00066	83 c4 04	 add	 esp, 4
$LN26@vector:
  00069	89 1f		 mov	 DWORD PTR [edi], ebx

; 2021 :         _Mylast               = _Newvec;
; 2022 :         _Myend                = _Newvec + _Newcapacity;

  0006b	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  0006e	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00071	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1839 :     auto _UFirst = _STD _Get_unwrapped(_STD move(_First));

  00074	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 1852 :                 _STD _Copy_memmove(_STD _To_address(_UFirst), _STD _To_address(_ULast), _STD _Unfancy(_Dest));

  00077	53		 push	 ebx
  00078	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  0007b	8b 30		 mov	 esi, DWORD PTR [eax]
  0007d	57		 push	 edi
  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>

; 1853 :                 _Dest += _ULast - _UFirst;

  00084	2b fe		 sub	 edi, esi
  00086	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0008b	f7 ef		 imul	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  0008d	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1852 :                 _STD _Copy_memmove(_STD _To_address(_UFirst), _STD _To_address(_ULast), _STD _Unfancy(_Dest));

  00090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1853 :                 _Dest += _ULast - _UFirst;

  00093	d1 fa		 sar	 edx, 1
  00095	8b c2		 mov	 eax, edx
  00097	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009a	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  0009c	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1853 :                 _Dest += _ULast - _UFirst;

  0009d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000a0	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2105 :                 _My_data._Mylast = _STD _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000a3	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000a6	5b		 pop	 ebx
$LN50@vector:

; 734  :         _Construct_n(_Count, _Right_data._Myfirst, _Right_data._Mylast);
; 735  :     }

  000a7	8b c7		 mov	 eax, edi
  000a9	5f		 pop	 edi
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
$LN61@vector:

; 2037 :             _Xlength();

  000b0	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
$LN58@vector:
  000b5	cc		 int	 3
??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCBoundaryShapeManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBoundaryShapeManager@@UAEPAXI@Z PROC		; CBoundaryShapeManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CBoundaryShapeManager@@UAE@XZ ; CBoundaryShapeManager::~CBoundaryShapeManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCBoundaryShapeManager@@UAEPAXI@Z ENDP		; CBoundaryShapeManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 6d		 je	 SHORT $LN5@vector
  0000a	53		 push	 ebx

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 0e		 je	 SHORT $LN10@vector
$LL11@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00019	83 c6 24	 add	 esi, 36			; 00000024H
  0001c	3b f3		 cmp	 esi, ebx
  0001e	75 f2		 jne	 SHORT $LL11@vector
$LN10@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00020	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00023	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00028	8b 37		 mov	 esi, DWORD PTR [edi]
  0002a	2b ce		 sub	 ecx, esi
  0002c	f7 e9		 imul	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0002f	c1 fa 03	 sar	 edx, 3
  00032	8b c2		 mov	 eax, edx
  00034	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00037	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00039	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0003c	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0003f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00045	72 12		 jb	 SHORT $LN44@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00047	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0004a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004d	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00052	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00055	77 23		 ja	 SHORT $LN41@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b f2		 mov	 esi, edx
$LN44@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00059	51		 push	 ecx
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00060	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00069	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  00070	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  00077	5f		 pop	 edi

; 820  :     }

  00078	5e		 pop	 esi
  00079	c3		 ret	 0
$LN41@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN57@vector:
  0007f	cc		 int	 3
??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_sShape$ = 8						; size = 4
$T2 = 8							; size = 4
_fX$ = 12						; size = 4
_fY$ = 16						; size = 4
?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z PROC ; CBoundaryShapeManager::PointInShape, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00004	8b 45 08	 mov	 eax, DWORD PTR _sShape$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 171  : {

  00007	53		 push	 ebx
  00008	57		 push	 edi

; 172  : 	bool bInside = false;

  00009	32 db		 xor	 bl, bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 38		 mov	 edi, DWORD PTR [eax]
  0000d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00010	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00015	2b cf		 sub	 ecx, edi
  00017	89 7d 08	 mov	 DWORD PTR $T2[ebp], edi
  0001a	f7 e9		 imul	 ecx
  0001c	d1 fa		 sar	 edx, 1
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
  00025	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 174  : 	for (DWORD k = 0; k < sShape.m_vContours.size(); ++k)

  00028	0f 84 a7 00 00
	00		 je	 $LN118@PointInSha
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0002e	f3 0f 10 65 10	 movss	 xmm4, DWORD PTR _fY$[ebp]
  00033	f3 0f 10 75 0c	 movss	 xmm6, DWORD PTR _fX$[ebp]
  00038	56		 push	 esi
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@PointInSha:

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00040	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00043	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00048	8b 37		 mov	 esi, DWORD PTR [edi]
  0004a	2b ce		 sub	 ecx, esi
  0004c	f7 e9		 imul	 ecx
  0004e	d1 fa		 sar	 edx, 1
  00050	8b fa		 mov	 edi, edx
  00052	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00055	03 fa		 add	 edi, edx
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 176  : 		for (DWORD i = 0, j = sShape.m_vContours[k].size() - 1; i < sShape.m_vContours[k].size(); j = i++)

  00057	74 68		 je	 SHORT $LN2@PointInSha
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00059	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0005c	33 c9		 xor	 ecx, ecx
  0005e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00061	c1 e0 02	 shl	 eax, 2
$LL7@PointInSha:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 179  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  00064	f3 0f 10 6c 31
	04		 movss	 xmm5, DWORD PTR [ecx+esi+4]
  0006a	0f 2f e5	 comiss	 xmm4, xmm5
  0006d	72 0b		 jb	 SHORT $LN117@PointInSha
  0006f	f3 0f 10 5c 30
	04		 movss	 xmm3, DWORD PTR [eax+esi+4]
  00075	0f 2f dc	 comiss	 xmm3, xmm4
  00078	77 10		 ja	 SHORT $LN116@PointInSha
$LN117@PointInSha:
  0007a	f3 0f 10 5c 30
	04		 movss	 xmm3, DWORD PTR [eax+esi+4]
  00080	0f 2f e3	 comiss	 xmm4, xmm3
  00083	72 32		 jb	 SHORT $LN5@PointInSha
  00085	0f 2f ec	 comiss	 xmm5, xmm4
  00088	76 2d		 jbe	 SHORT $LN5@PointInSha
$LN116@PointInSha:
  0008a	f3 0f 10 14 31	 movss	 xmm2, DWORD PTR [ecx+esi]
  0008f	f3 0f 5c dd	 subss	 xmm3, xmm5
  00093	0f 28 ca	 movaps	 xmm1, xmm2
  00096	0f 28 c4	 movaps	 xmm0, xmm4
  00099	f3 0f 5c ca	 subss	 xmm1, xmm2
  0009d	f3 0f 5c c5	 subss	 xmm0, xmm5
  000a1	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000a5	f3 0f 5e cb	 divss	 xmm1, xmm3
  000a9	f3 0f 58 ca	 addss	 xmm1, xmm2
  000ad	0f 2f ce	 comiss	 xmm1, xmm6
  000b0	76 05		 jbe	 SHORT $LN5@PointInSha

; 180  : 				  (fX < (sShape.m_vContours[k][i][0] - sShape.m_vContours[k][i][0]) * (fY - sShape.m_vContours[k][i][1]) / (sShape.m_vContours[k][j][1] - sShape.m_vContours[k][i][1]) + sShape.m_vContours[k][i][0]))
; 181  : 			{
; 182  : 				bInside = !bInside;

  000b2	84 db		 test	 bl, bl
  000b4	0f 94 c3	 sete	 bl
$LN5@PointInSha:

; 176  : 		for (DWORD i = 0, j = sShape.m_vContours[k].size() - 1; i < sShape.m_vContours[k].size(); j = i++)

  000b7	8b c1		 mov	 eax, ecx
  000b9	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000bc	83 ef 01	 sub	 edi, 1
  000bf	75 a3		 jne	 SHORT $LL7@PointInSha
$LN2@PointInSha:

; 174  : 	for (DWORD k = 0; k < sShape.m_vContours.size(); ++k)

  000c1	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  000c4	83 c7 0c	 add	 edi, 12			; 0000000cH
  000c7	83 6d fc 01	 sub	 DWORD PTR $T1[ebp], 1
  000cb	89 7d 08	 mov	 DWORD PTR $T2[ebp], edi
  000ce	0f 85 6c ff ff
	ff		 jne	 $LL4@PointInSha
  000d4	5e		 pop	 esi
$LN118@PointInSha:
  000d5	5f		 pop	 edi

; 183  : 			}
; 184  : 		}
; 185  : 	}
; 186  : 
; 187  : 	return bInside;
; 188  : }

  000d6	8a c3		 mov	 al, bl
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 0c 00	 ret	 12			; 0000000cH
?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ENDP ; CBoundaryShapeManager::PointInShape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z
_TEXT	SEGMENT
_fX$ = 8						; size = 4
tv88 = 8						; size = 4
_fY$ = 12						; size = 4
?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z PROC	; CBoundaryShapeManager::RandomPoint, COMDAT
; _this$ = ecx

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00006	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 196  : 	bool bSuccess = false;

  0000b	32 c9		 xor	 cl, cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000d	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00010	2b 53 04	 sub	 edx, DWORD PTR [ebx+4]
  00013	f7 ea		 imul	 edx
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 198  : 	if (m_vBoundaries.size() > 0)

  0001f	74 7b		 je	 SHORT $LN13@RandomPoin

; 199  : 	{
; 200  : 		// pick a random boundary shape
; 201  : 		int nIndex = random_range(0, m_vBoundaries.size() - 1);

  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	48		 dec	 eax
  00024	50		 push	 eax
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0002c	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0002f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 205  : 		fX = frandom(sShape.m_afMin[0], sShape.m_afMax[0]);

  00032	f3 0f 10 44 88
	18		 movss	 xmm0, DWORD PTR [eax+ecx*4+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00038	8d 3c 88	 lea	 edi, DWORD PTR [eax+ecx*4]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 205  : 		fX = frandom(sShape.m_afMin[0], sShape.m_afMax[0]);

  0003b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00041	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00050	8b 75 08	 mov	 esi, DWORD PTR _fX$[ebp]
  00053	d9 1e		 fstp	 DWORD PTR [esi]

; 206  : 		fY = frandom(sShape.m_afMin[1], sShape.m_afMax[1]);

  00055	f3 0f 10 47 1c	 movss	 xmm0, DWORD PTR [edi+28]
  0005a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00060	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0006f	8b 45 0c	 mov	 eax, DWORD PTR _fY$[ebp]

; 207  : 
; 208  : 		// try it
; 209  : 		bSuccess = PointInShape(sShape, fX, fY);

  00072	8b cb		 mov	 ecx, ebx
  00074	d9 5d 08	 fstp	 DWORD PTR tv88[ebp]
  00077	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv88[ebp]
  0007c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00082	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00086	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0008a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape

; 210  : 	}
; 211  : 
; 212  : 	return bSuccess;

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 213  : }

  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
$LN13@RandomPoin:

; 210  : 	}
; 211  : 
; 212  : 	return bSuccess;

  0009c	8a c1		 mov	 al, cl
  0009e	5b		 pop	 ebx

; 213  : }

  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z ENDP	; CBoundaryShapeManager::RandomPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?PointInside@CBoundaryShapeManager@@QAE_NMM@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv183 = -4						; size = 4
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
?PointInside@CBoundaryShapeManager@@QAE_NMM@Z PROC	; CBoundaryShapeManager::PointInside, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00006	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00009	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 157  : {

  0000e	53		 push	 ebx
  0000f	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00010	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 158  : 	bool bInside = false;

  00013	32 db		 xor	 bl, bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00015	2b d6		 sub	 edx, esi
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 157  : {

  00017	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001a	f7 ea		 imul	 edx
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 157  : {

  0001c	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001d	c1 fa 03	 sar	 edx, 3
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 160  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  00020	33 ff		 xor	 edi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
  00029	89 45 fc	 mov	 DWORD PTR tv183[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 160  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  0002c	74 32		 je	 SHORT $LN16@PointInsid
  0002e	66 90		 npad	 2
$LL4@PointInsid:
  00030	84 db		 test	 bl, bl
  00032	75 2c		 jne	 SHORT $LN16@PointInsid

; 161  : 		bInside = PointInShape(m_vBoundaries[i], fX, fY);

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  00039	83 ec 08	 sub	 esp, 8
  0003c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00042	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fX$[ebp]
  00047	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape
  00052	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00055	47		 inc	 edi
  00056	83 c6 24	 add	 esi, 36			; 00000024H
  00059	8a d8		 mov	 bl, al
  0005b	3b 7d fc	 cmp	 edi, DWORD PTR tv183[ebp]
  0005e	72 d0		 jb	 SHORT $LL4@PointInsid
$LN16@PointInsid:
  00060	5f		 pop	 edi

; 162  : 
; 163  : 	return bInside;
; 164  : }

  00061	5e		 pop	 esi
  00062	8a c3		 mov	 al, bl
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
?PointInside@CBoundaryShapeManager@@QAE_NMM@Z ENDP	; CBoundaryShapeManager::PointInside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_nNumContours$2 = -160					; size = 4
_nNumBoundaries$3 = -156				; size = 4
_this$GSCopy$ = -152					; size = 4
$T4 = -152						; size = 1
_nNumPoints$5 = -148					; size = 4
_i$1$ = -144						; size = 4
_this$GSCopy$1$ = -140					; size = 4
_pFile$1$ = -136					; size = 4
_bSuccess$ = -130					; size = 1
_bSuccess$1$ = -129					; size = 1
$T6 = -128						; size = 24
_sShape$7 = -104					; size = 36
$T8 = -68						; size = 24
_sPoint$9 = -56						; size = 12
$T10 = -44						; size = 24
_vPoints$11 = -32					; size = 12
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pszFilename$ = 8					; size = 4
?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z PROC	; CBoundaryShapeManager::LoadBsfFile, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	8b f9		 mov	 edi, ecx
  00033	89 bd 74 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00039	8b 75 08	 mov	 esi, DWORD PTR _pszFilename$[ebp]

; 52   : 	bool bSuccess = true;

  0003c	b0 01		 mov	 al, 1

; 53   : 	try
; 54   : 	{
; 55   : 		FILE* pFile = fopen(pszFilename, "rb");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00043	56		 push	 esi
  00044	89 bd 68 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  0004a	88 85 7f ff ff
	ff		 mov	 BYTE PTR _bSuccess$1$[ebp], al
  00050	88 85 7e ff ff
	ff		 mov	 BYTE PTR _bSuccess$[ebp], al
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0005d	e8 00 00 00 00	 call	 _fopen
  00062	83 c4 08	 add	 esp, 8
  00065	89 85 78 ff ff
	ff		 mov	 DWORD PTR _pFile$1$[ebp], eax

; 56   : 		if (pFile)

  0006b	85 c0		 test	 eax, eax
  0006d	0f 84 02 03 00
	00		 je	 $LN15@LoadBsfFil

; 57   : 		{
; 58   : 			// number of boundary shapes
; 59   : 			unsigned int nNumBoundaries;
; 60   : 			if (fread(&nNumBoundaries, sizeof(unsigned int), 1, pFile) == 1)

  00073	8b f0		 mov	 esi, eax
  00075	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _nNumBoundaries$3[ebp]
  0007b	56		 push	 esi
  0007c	6a 01		 push	 1
  0007e	6a 04		 push	 4
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 _fread
  00086	83 c4 10	 add	 esp, 16			; 00000010H
  00089	83 f8 01	 cmp	 eax, 1
  0008c	0f 85 bb 02 00
	00		 jne	 $LN17@LoadBsfFil

; 62   : 				for (unsigned int i = 0; i < nNumBoundaries && bSuccess; ++i)

  00092	33 c0		 xor	 eax, eax
$LN327@LoadBsfFil:
  00094	89 85 70 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  0009a	3b 85 64 ff ff
	ff		 cmp	 eax, DWORD PTR _nNumBoundaries$3[ebp]
  000a0	0f 83 bb 02 00
	00		 jae	 $LN18@LoadBsfFil
  000a6	80 bd 7f ff ff
	ff 00		 cmp	 BYTE PTR _bSuccess$1$[ebp], 0
  000ad	0f 84 ae 02 00
	00		 je	 $LN18@LoadBsfFil
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000b3	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _sShape$7[ebp], 0
  000ba	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _sShape$7[ebp+4], 0
  000c1	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _sShape$7[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 68   : 					if (fread(&nNumContours, sizeof(unsigned int), 1, pFile) == 1)

  000c8	56		 push	 esi
  000c9	6a 01		 push	 1
  000cb	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _nNumContours$2[ebp]
  000d1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000d5	6a 04		 push	 4
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 _fread
  000dd	83 c4 10	 add	 esp, 16			; 00000010H
  000e0	83 f8 01	 cmp	 eax, 1
  000e3	0f 85 31 02 00
	00		 jne	 $LN19@LoadBsfFil

; 70   : 						for (unsigned int j = 0; j < nNumContours && bSuccess; ++j)

  000e9	33 ff		 xor	 edi, edi
  000eb	0f 1f 44 00 00	 npad	 5
$LL7@LoadBsfFil:
  000f0	3b bd 60 ff ff
	ff		 cmp	 edi, DWORD PTR _nNumContours$2[ebp]
  000f6	0f 83 e4 01 00
	00		 jae	 $LN6@LoadBsfFil
  000fc	80 bd 7f ff ff
	ff 00		 cmp	 BYTE PTR _bSuccess$1$[ebp], 0
  00103	0f 84 d7 01 00
	00		 je	 $LN6@LoadBsfFil
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00109	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vPoints$11[ebp], 0
  00110	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _vPoints$11[ebp+4], 0
  00117	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _vPoints$11[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 75   : 							if (fread(&nNumPoints, sizeof(unsigned int), 1, pFile) == 1)

  0011e	56		 push	 esi
  0011f	6a 01		 push	 1
  00121	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _nNumPoints$5[ebp]
  00127	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0012b	6a 04		 push	 4
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 _fread
  00133	83 c4 10	 add	 esp, 16			; 00000010H
  00136	83 f8 01	 cmp	 eax, 1
  00139	0f 85 6e 01 00
	00		 jne	 $LN21@LoadBsfFil

; 76   : 							{
; 77   : 								// read the points
; 78   : 								for (unsigned int k = 0; k < nNumPoints && bSuccess; ++k)

  0013f	33 f6		 xor	 esi, esi
$LL10@LoadBsfFil:
  00141	3b b5 6c ff ff
	ff		 cmp	 esi, DWORD PTR _nNumPoints$5[ebp]
  00147	0f 83 10 01 00
	00		 jae	 $LN9@LoadBsfFil
  0014d	80 bd 7f ff ff
	ff 00		 cmp	 BYTE PTR _bSuccess$1$[ebp], 0
  00154	0f 84 03 01 00
	00		 je	 $LN9@LoadBsfFil

; 79   : 								{
; 80   : 									SPoint sPoint;
; 81   : 
; 82   : 									if (fread(sPoint.m_afData, sizeof(float), 3, pFile) == 3)

  0015a	ff b5 78 ff ff
	ff		 push	 DWORD PTR _pFile$1$[ebp]
  00160	8d 45 c8	 lea	 eax, DWORD PTR _sPoint$9[ebp]
  00163	6a 03		 push	 3
  00165	6a 04		 push	 4
  00167	50		 push	 eax
  00168	e8 00 00 00 00	 call	 _fread
  0016d	83 c4 10	 add	 esp, 16			; 00000010H
  00170	83 f8 03	 cmp	 eax, 3
  00173	0f 85 bd 00 00
	00		 jne	 $LN23@LoadBsfFil
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00179	8b 4d e4	 mov	 ecx, DWORD PTR _vPoints$11[ebp+4]
  0017c	3b 4d e8	 cmp	 ecx, DWORD PTR _vPoints$11[ebp+8]
  0017f	74 15		 je	 SHORT $LN294@LoadBsfFil
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 506  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00181	f3 0f 7e 45 c8	 movq	 xmm0, QWORD PTR _sPoint$9[ebp]
  00186	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0018a	8b 45 d0	 mov	 eax, DWORD PTR _sPoint$9[ebp+8]
  0018d	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00190	83 45 e4 0c	 add	 DWORD PTR _vPoints$11[ebp+4], 12 ; 0000000cH

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00194	eb 0d		 jmp	 SHORT $LN293@LoadBsfFil
$LN294@LoadBsfFil:

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00196	8d 45 c8	 lea	 eax, DWORD PTR _sPoint$9[ebp]
  00199	50		 push	 eax
  0019a	51		 push	 ecx
  0019b	8d 4d e0	 lea	 ecx, DWORD PTR _vPoints$11[ebp]
  0019e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEPAUSPoint@@QAU2@ABU2@@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
$LN293@LoadBsfFil:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 87   : 										if (j == 0 && k == 0)

  001a3	85 ff		 test	 edi, edi
  001a5	75 22		 jne	 SHORT $LN25@LoadBsfFil
  001a7	85 f6		 test	 esi, esi
  001a9	75 1e		 jne	 SHORT $LN25@LoadBsfFil

; 88   : 										{
; 89   : 											// first point of this shape
; 90   : 											memcpy(sShape.m_afMin, sPoint.m_afData, 3 * sizeof(float));

  001ab	f3 0f 7e 45 c8	 movq	 xmm0, QWORD PTR _sPoint$9[ebp]
  001b0	46		 inc	 esi
  001b1	8b 45 d0	 mov	 eax, DWORD PTR _sPoint$9[ebp+8]
  001b4	66 0f d6 45 a4	 movq	 QWORD PTR _sShape$7[ebp+12], xmm0
  001b9	89 45 ac	 mov	 DWORD PTR _sShape$7[ebp+20], eax

; 91   : 											memcpy(sShape.m_afMax, sPoint.m_afData, 3 * sizeof(float));

  001bc	66 0f d6 45 b0	 movq	 QWORD PTR _sShape$7[ebp+24], xmm0
  001c1	89 45 b8	 mov	 DWORD PTR _sShape$7[ebp+32], eax
  001c4	e9 78 ff ff ff	 jmp	 $LL10@LoadBsfFil
$LN25@LoadBsfFil:

; 92   : 										}
; 93   : 										else
; 94   : 										{
; 95   : 											// check extents
; 96   : 											for (int l = 0; l < 3; ++l)
; 97   : 											{
; 98   : 												if (sPoint.m_afData[l] < sShape.m_afMin[l])

  001c9	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _sShape$7[ebp+12]
  001ce	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _sPoint$9[ebp]
  001d3	0f 2f c1	 comiss	 xmm0, xmm1
  001d6	76 07		 jbe	 SHORT $LN27@LoadBsfFil

; 99   : 													sShape.m_afMin[l] = sPoint.m_afData[l];

  001d8	f3 0f 11 4d a4	 movss	 DWORD PTR _sShape$7[ebp+12], xmm1
  001dd	eb 0b		 jmp	 SHORT $LN11@LoadBsfFil
$LN27@LoadBsfFil:

; 100  : 												else if (sPoint.m_afData[l] > sShape.m_afMax[l])

  001df	0f 2f 4d b0	 comiss	 xmm1, DWORD PTR _sShape$7[ebp+24]
  001e3	76 05		 jbe	 SHORT $LN11@LoadBsfFil

; 101  : 													sShape.m_afMax[l] = sPoint.m_afData[l];

  001e5	f3 0f 11 4d b0	 movss	 DWORD PTR _sShape$7[ebp+24], xmm1
$LN11@LoadBsfFil:

; 92   : 										}
; 93   : 										else
; 94   : 										{
; 95   : 											// check extents
; 96   : 											for (int l = 0; l < 3; ++l)
; 97   : 											{
; 98   : 												if (sPoint.m_afData[l] < sShape.m_afMin[l])

  001ea	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _sShape$7[ebp+16]
  001ef	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR _sPoint$9[ebp+4]
  001f4	0f 2f c1	 comiss	 xmm0, xmm1
  001f7	76 07		 jbe	 SHORT $LN315@LoadBsfFil

; 99   : 													sShape.m_afMin[l] = sPoint.m_afData[l];

  001f9	f3 0f 11 4d a8	 movss	 DWORD PTR _sShape$7[ebp+16], xmm1
  001fe	eb 0b		 jmp	 SHORT $LN316@LoadBsfFil
$LN315@LoadBsfFil:

; 100  : 												else if (sPoint.m_afData[l] > sShape.m_afMax[l])

  00200	0f 2f 4d b4	 comiss	 xmm1, DWORD PTR _sShape$7[ebp+28]
  00204	76 05		 jbe	 SHORT $LN316@LoadBsfFil

; 101  : 													sShape.m_afMax[l] = sPoint.m_afData[l];

  00206	f3 0f 11 4d b4	 movss	 DWORD PTR _sShape$7[ebp+28], xmm1
$LN316@LoadBsfFil:

; 92   : 										}
; 93   : 										else
; 94   : 										{
; 95   : 											// check extents
; 96   : 											for (int l = 0; l < 3; ++l)
; 97   : 											{
; 98   : 												if (sPoint.m_afData[l] < sShape.m_afMin[l])

  0020b	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _sShape$7[ebp+20]
  00210	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _sPoint$9[ebp+8]
  00215	0f 2f c1	 comiss	 xmm0, xmm1
  00218	76 0b		 jbe	 SHORT $LN318@LoadBsfFil

; 99   : 													sShape.m_afMin[l] = sPoint.m_afData[l];

  0021a	f3 0f 11 4d ac	 movss	 DWORD PTR _sShape$7[ebp+20], xmm1
  0021f	46		 inc	 esi
  00220	e9 1c ff ff ff	 jmp	 $LL10@LoadBsfFil
$LN318@LoadBsfFil:

; 100  : 												else if (sPoint.m_afData[l] > sShape.m_afMax[l])

  00225	0f 2f 4d b8	 comiss	 xmm1, DWORD PTR _sShape$7[ebp+32]
  00229	76 2c		 jbe	 SHORT $LN8@LoadBsfFil

; 101  : 													sShape.m_afMax[l] = sPoint.m_afData[l];

  0022b	f3 0f 11 4d b8	 movss	 DWORD PTR _sShape$7[ebp+32], xmm1
  00230	46		 inc	 esi
  00231	e9 0b ff ff ff	 jmp	 $LL10@LoadBsfFil
$LN23@LoadBsfFil:

; 102  : 											}
; 103  : 										}
; 104  : 									}
; 105  : 									else
; 106  : 									{
; 107  : 										m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read point";

  00236	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0023c	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@
  00241	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
  00244	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 108  : 										bSuccess = false;

  00249	32 c0		 xor	 al, al
  0024b	88 85 7f ff ff
	ff		 mov	 BYTE PTR _bSuccess$1$[ebp], al
  00251	88 85 7e ff ff
	ff		 mov	 BYTE PTR _bSuccess$[ebp], al
$LN8@LoadBsfFil:

; 76   : 							{
; 77   : 								// read the points
; 78   : 								for (unsigned int k = 0; k < nNumPoints && bSuccess; ++k)

  00257	46		 inc	 esi
  00258	e9 e4 fe ff ff	 jmp	 $LL10@LoadBsfFil
$LN9@LoadBsfFil:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0025d	8b 45 9c	 mov	 eax, DWORD PTR _sShape$7[ebp+4]
  00260	8d 4d e0	 lea	 ecx, DWORD PTR _vPoints$11[ebp]
  00263	51		 push	 ecx
  00264	3b 45 a0	 cmp	 eax, DWORD PTR _sShape$7[ebp+8]
  00267	74 23		 je	 SHORT $LN46@LoadBsfFil
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00269	8b c8		 mov	 ecx, eax
  0026b	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00270	83 45 9c 0c	 add	 DWORD PTR _sShape$7[ebp+4], 12 ; 0000000cH

; 815  :         _Tidy();

  00274	8d 4d e0	 lea	 ecx, DWORD PTR _vPoints$11[ebp]

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00277	8b b5 78 ff ff
	ff		 mov	 esi, DWORD PTR _pFile$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 120  : 						}

  0027d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  00281	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 70   : 						for (unsigned int j = 0; j < nNumContours && bSuccess; ++j)

  00286	47		 inc	 edi
  00287	e9 64 fe ff ff	 jmp	 $LL7@LoadBsfFil
$LN46@LoadBsfFil:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0028c	50		 push	 eax
  0028d	8d 4d 98	 lea	 ecx, DWORD PTR _sShape$7[ebp]
  00290	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 113  : 							}

  00295	8b b5 78 ff ff
	ff		 mov	 esi, DWORD PTR _pFile$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  0029b	8d 4d e0	 lea	 ecx, DWORD PTR _vPoints$11[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 120  : 						}

  0029e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  002a2	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 70   : 						for (unsigned int j = 0; j < nNumContours && bSuccess; ++j)

  002a7	47		 inc	 edi
  002a8	e9 43 fe ff ff	 jmp	 $LL7@LoadBsfFil
$LN21@LoadBsfFil:

; 114  : 							else
; 115  : 							{
; 116  : 								m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of points";

  002ad	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@
  002b8	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
  002bb	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 117  : 								bSuccess = false;

  002c0	32 c0		 xor	 al, al

; 120  : 						}

  002c2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  002c6	8d 4d e0	 lea	 ecx, DWORD PTR _vPoints$11[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 117  : 								bSuccess = false;

  002c9	88 85 7f ff ff
	ff		 mov	 BYTE PTR _bSuccess$1$[ebp], al
  002cf	88 85 7e ff ff
	ff		 mov	 BYTE PTR _bSuccess$[ebp], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  002d5	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 70   : 						for (unsigned int j = 0; j < nNumContours && bSuccess; ++j)

  002da	47		 inc	 edi
  002db	e9 10 fe ff ff	 jmp	 $LL7@LoadBsfFil
$LN6@LoadBsfFil:

; 121  : 						m_vBoundaries.push_back(sShape);

  002e0	8b bd 74 ff ff
	ff		 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  002e6	8d 4d 98	 lea	 ecx, DWORD PTR _sShape$7[ebp]
  002e9	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 121  : 						m_vBoundaries.push_back(sShape);

  002ec	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  002ef	51		 push	 ecx
  002f0	50		 push	 eax
  002f1	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  002f4	74 15		 je	 SHORT $LN63@LoadBsfFil

; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  002f6	56		 push	 esi
  002f7	e8 00 00 00 00	 call	 ??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>
  002fc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 854  :         ++_Mylast;

  002ff	83 46 04 24	 add	 DWORD PTR [esi+4], 36	; 00000024H

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00303	8b b5 78 ff ff
	ff		 mov	 esi, DWORD PTR _pFile$1$[ebp]
  00309	eb 2a		 jmp	 SHORT $LN20@LoadBsfFil
$LN63@LoadBsfFil:

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0030b	8b ce		 mov	 ecx, esi
  0030d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 122  : 					}

  00312	8b b5 78 ff ff
	ff		 mov	 esi, DWORD PTR _pFile$1$[ebp]
  00318	eb 1b		 jmp	 SHORT $LN20@LoadBsfFil
$LN19@LoadBsfFil:

; 123  : 					else
; 124  : 					{
; 125  : 						m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of contours";

  0031a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@
  0031f	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00322	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 126  : 						bSuccess = false;

  00327	32 c0		 xor	 al, al
  00329	88 85 7f ff ff
	ff		 mov	 BYTE PTR _bSuccess$1$[ebp], al
  0032f	88 85 7e ff ff
	ff		 mov	 BYTE PTR _bSuccess$[ebp], al
$LN20@LoadBsfFil:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  00335	8d 4d 98	 lea	 ecx, DWORD PTR _sShape$7[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 128  : 				}

  00338	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  0033c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 62   : 				for (unsigned int i = 0; i < nNumBoundaries && bSuccess; ++i)

  00341	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  00347	40		 inc	 eax
  00348	e9 47 fd ff ff	 jmp	 $LN327@LoadBsfFil
$LN17@LoadBsfFil:

; 129  : 			}
; 130  : 			else
; 131  : 			{
; 132  : 				m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of boundaries";

  0034d	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@
  00352	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00355	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 133  : 				bSuccess = false;

  0035a	c6 85 7f ff ff
	ff 00		 mov	 BYTE PTR _bSuccess$1$[ebp], 0
$LN18@LoadBsfFil:

; 134  : 			}
; 135  : 			fclose(pFile);

  00361	56		 push	 esi
  00362	e8 00 00 00 00	 call	 _fclose

; 136  : 		}

  00367	8a 85 7f ff ff
	ff		 mov	 al, BYTE PTR _bSuccess$1$[ebp]
  0036d	83 c4 04	 add	 esp, 4
  00370	e9 9c 01 00 00	 jmp	 $LN157@LoadBsfFil
$LN15@LoadBsfFil:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00375	8b ce		 mov	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00377	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+16], 0
  0037e	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00381	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00388	0f 11 45 d4	 movups	 XMMWORD PTR $T10[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0038c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0038f	90		 npad	 1
$LL323@LoadBsfFil:
  00390	8a 01		 mov	 al, BYTE PTR [ecx]
  00392	41		 inc	 ecx
  00393	84 c0		 test	 al, al
  00395	75 f9		 jne	 SHORT $LL323@LoadBsfFil
  00397	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00399	51		 push	 ecx
  0039a	56		 push	 esi
  0039b	8d 4d d4	 lea	 ecx, DWORD PTR $T10[ebp]
  0039e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 139  : 			m_strCurrentError = string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + string(pszFilename);

  003a3	0f 57 c0	 xorps	 xmm0, xmm0
  003a6	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  003aa	6a 40		 push	 64			; 00000040H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003ac	0f 11 45 bc	 movups	 XMMWORD PTR $T8[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  003b0	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  003b7	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  003be	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003c3	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  003ca	8b c8		 mov	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  003cc	c7 45 cc 3e 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 62 ; 0000003eH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  003d3	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  003d6	89 4d bc	 mov	 DWORD PTR $T8[ebp], ecx

; 892  :         _My_data._Myres  = _New_capacity;

  003d9	c7 45 d0 3f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 63 ; 0000003fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003e0	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  003e3	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@+16
  003ea	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  003ee	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@+32
  003f5	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0
  003f9	f3 0f 7e 05 30
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@+48
  00401	66 0f d6 41 30	 movq	 QWORD PTR [ecx+48], xmm0
  00406	a1 38 00 00 00	 mov	 eax, DWORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@+56
  0040b	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  0040e	66 a1 3c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@+60
  00414	66 89 41 3c	 mov	 WORD PTR [ecx+60], ax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00418	c6 41 3e 00	 mov	 BYTE PTR [ecx+62], 0

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  0041c	8d 45 d4	 lea	 eax, DWORD PTR $T10[ebp]
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 139  : 			m_strCurrentError = string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + string(pszFilename);

  0041f	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00423	50		 push	 eax
  00424	8d 45 bc	 lea	 eax, DWORD PTR $T8[ebp]
  00427	50		 push	 eax
  00428	ff b5 68 ff ff
	ff		 push	 DWORD PTR $T4[ebp]
  0042e	8d 4d 80	 lea	 ecx, DWORD PTR $T6[ebp]
  00431	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 139  : 			m_strCurrentError = string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + string(pszFilename);

  00436	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1202 :         if (this == _STD addressof(_Right)) {

  00439	8d 45 80	 lea	 eax, DWORD PTR $T6[ebp]
  0043c	3b f0		 cmp	 esi, eax
  0043e	74 1a		 je	 SHORT $LN169@LoadBsfFil

; 1203 :             return *this;
; 1204 :         }
; 1205 : 
; 1206 :         auto& _Al                 = _Getal();
; 1207 :         auto& _Right_al           = _Right._Getal();
; 1208 :         constexpr auto _Pocma_val = _Choose_pocma_v<_Alty>;
; 1209 :         if constexpr (_Pocma_val == _Pocma_values::_Propagate_allocators) {
; 1210 :             if (_Al != _Right_al) {
; 1211 :                 // intentionally slams into noexcept on OOM, TRANSITION, VSO-466800
; 1212 :                 _Mypair._Myval2._Orphan_all();
; 1213 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1214 :             }
; 1215 :         } else if constexpr (_Pocma_val == _Pocma_values::_No_propagate_allocators) {
; 1216 :             if (_Al != _Right_al) {
; 1217 :                 assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 1218 :                 return *this;
; 1219 :             }
; 1220 :         }
; 1221 : 
; 1222 :         _Tidy_deallocate();

  00440	8b ce		 mov	 ecx, esi
  00442	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00447	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T6[ebp]
  0044b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0044e	f3 0f 7e 45 90	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  00453	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 434  :         return _Myres > _Small_string_capacity;

  00458	eb 34		 jmp	 SHORT $LN200@LoadBsfFil
$LN169@LoadBsfFil:
  0045a	8b 4d 94	 mov	 ecx, DWORD PTR $T6[ebp+20]
  0045d	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00460	76 2c		 jbe	 SHORT $LN200@LoadBsfFil
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00462	8b 55 80	 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00465	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00466	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00468	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0046e	72 14		 jb	 SHORT $LN211@LoadBsfFil

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00470	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00473	83 c1 23	 add	 ecx, 35			; 00000023H
  00476	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00478	83 c0 fc	 add	 eax, -4			; fffffffcH
  0047b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0047e	0f 87 ab 00 00
	00		 ja	 $LN282@LoadBsfFil
$LN211@LoadBsfFil:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00484	51		 push	 ecx
  00485	52		 push	 edx
  00486	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0048b	83 c4 08	 add	 esp, 8
$LN200@LoadBsfFil:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0048e	8b 4d d0	 mov	 ecx, DWORD PTR $T8[ebp+20]
  00491	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00494	76 28		 jbe	 SHORT $LN237@LoadBsfFil
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00496	8b 55 bc	 mov	 edx, DWORD PTR $T8[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00499	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0049a	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0049c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004a2	72 10		 jb	 SHORT $LN248@LoadBsfFil

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004a4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004a7	83 c1 23	 add	 ecx, 35			; 00000023H
  004aa	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004ac	83 c0 fc	 add	 eax, -4			; fffffffcH
  004af	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004b2	77 7b		 ja	 SHORT $LN282@LoadBsfFil
$LN248@LoadBsfFil:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004b4	51		 push	 ecx
  004b5	52		 push	 edx
  004b6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004bb	83 c4 08	 add	 esp, 8
$LN237@LoadBsfFil:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004be	8b 4d e8	 mov	 ecx, DWORD PTR $T10[ebp+20]
  004c1	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004c4	76 28		 jbe	 SHORT $LN274@LoadBsfFil
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004c6	8b 55 d4	 mov	 edx, DWORD PTR $T10[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004c9	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004ca	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004cc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004d2	72 10		 jb	 SHORT $LN285@LoadBsfFil

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004d4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004d7	83 c1 23	 add	 ecx, 35			; 00000023H
  004da	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004dc	83 c0 fc	 add	 eax, -4			; fffffffcH
  004df	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004e2	77 4b		 ja	 SHORT $LN282@LoadBsfFil
$LN285@LoadBsfFil:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004e4	51		 push	 ecx
  004e5	52		 push	 edx
  004e6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004eb	83 c4 08	 add	 esp, 8
$LN274@LoadBsfFil:
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 140  : 			bSuccess = false;

  004ee	32 c0		 xor	 al, al

; 141  : 		}
; 142  : 	}

  004f0	eb 1f		 jmp	 SHORT $LN157@LoadBsfFil
__catch$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$0:

; 143  : 
; 144  : 	catch(...)
; 145  : 	{
; 146  : 		m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Unknown exception";

  004f2	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  004f8	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@
  004fd	8d 49 10	 lea	 ecx, DWORD PTR [ecx+16]
  00500	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 147  : 	}

  00505	b8 00 00 00 00	 mov	 eax, $LN324@LoadBsfFil
  0050a	c3		 ret	 0
$LN324@LoadBsfFil:
  0050b	8a 85 7e ff ff
	ff		 mov	 al, BYTE PTR _bSuccess$[ebp]
$LN157@LoadBsfFil:

; 150  : }

  00511	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00514	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0051b	59		 pop	 ecx
  0051c	5f		 pop	 edi
  0051d	5e		 pop	 esi
  0051e	5b		 pop	 ebx
  0051f	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00522	33 cd		 xor	 ecx, ebp
  00524	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00529	8b e5		 mov	 esp, ebp
  0052b	5d		 pop	 ebp
  0052c	c2 04 00	 ret	 4
$LN282@LoadBsfFil:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0052f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN326@LoadBsfFil:
  00534	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$2:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR _sShape$7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SBoundaryShape@@QAE@XZ
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$3:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR _vPoints$11[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$4:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T10[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$5:
  00018	8d 4d bc	 lea	 ecx, DWORD PTR $T8[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 8a 5c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-164]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z ENDP	; CBoundaryShapeManager::LoadBsfFile
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ??1CBoundaryShapeManager@@UAE@XZ
_TEXT	SEGMENT
??1CBoundaryShapeManager@@UAE@XZ PROC			; CBoundaryShapeManager::~CBoundaryShapeManager, COMDAT
; _this$ = ecx

; 43   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CBoundaryShapeManager@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00009	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0000c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0000f	76 28		 jbe	 SHORT $LN24@CBoundaryS
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00014	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN35@CBoundaryS

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 27		 ja	 SHORT $LN32@CBoundaryS

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN35@CBoundaryS:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN24@CBoundaryS:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00039	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 44   : }

  00040	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00043	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004a	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 44   : }

  0004e	5e		 pop	 esi
  0004f	e9 00 00 00 00	 jmp	 ??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >
$LN32@CBoundaryS:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN45@CBoundaryS:
  00059	cc		 int	 3
??1CBoundaryShapeManager@@UAE@XZ ENDP			; CBoundaryShapeManager::~CBoundaryShapeManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ??0CBoundaryShapeManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBoundaryShapeManager@@QAE@XZ PROC			; CBoundaryShapeManager::CBoundaryShapeManager, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBoundaryShapeManager@@6B@
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000d	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 36   : }

  00014	8b c1		 mov	 eax, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00024	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0

; 836  :         _My_data._Mysize = 0;

  00028	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0002f	c7 41 24 0f 00
	00 00		 mov	 DWORD PTR [ecx+36], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 35   : {

  00036	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00039	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0
; File C:\Marty 5.5\Src-Client\Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 36   : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??0CBoundaryShapeManager@@QAE@XZ ENDP			; CBoundaryShapeManager::CBoundaryShapeManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1SBoundaryShape@@QAE@XZ
_TEXT	SEGMENT
??1SBoundaryShape@@QAE@XZ PROC				; SBoundaryShape::~SBoundaryShape, COMDAT
; _this$ = ecx

; 815  :         _Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
??1SBoundaryShape@@QAE@XZ ENDP				; SBoundaryShape::~SBoundaryShape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy, COMDAT
; _this$ = ecx

; 2066 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2067 :         auto& _Al         = _Getal();
; 2068 :         auto& _My_data    = _Mypair._Myval2;
; 2069 :         pointer& _Myfirst = _My_data._Myfirst;
; 2070 :         pointer& _Mylast  = _My_data._Mylast;
; 2071 :         pointer& _Myend   = _My_data._Myend;
; 2072 : 
; 2073 :         _My_data._Orphan_all();
; 2074 : 
; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 6c		 je	 SHORT $LN2@Tidy

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	53		 push	 ebx
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 0e		 je	 SHORT $LN7@Tidy
$LL8@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 815  :         _Tidy();

  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00019	83 c6 0c	 add	 esi, 12			; 0000000cH
  0001c	3b f3		 cmp	 esi, ebx
  0001e	75 f2		 jne	 SHORT $LL8@Tidy
$LN7@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00020	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00023	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00028	8b 37		 mov	 esi, DWORD PTR [edi]
  0002a	2b ce		 sub	 ecx, esi
  0002c	f7 e9		 imul	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0002f	d1 fa		 sar	 edx, 1
  00031	8b c2		 mov	 eax, edx
  00033	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00036	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00038	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0003b	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN36@Tidy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 23		 ja	 SHORT $LN33@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b f2		 mov	 esi, edx
$LN36@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0005f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00065	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00068	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  0006f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN2@Tidy:

; 2084 :     }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	c3		 ret	 0
$LN33@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00079	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@Tidy:
  0007e	cc		 int	 3
?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3044 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3045 :         auto& _My_data = _Mypair._Myval2;
; 3046 :         _My_data._Orphan_all();
; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN16@Tidy_deall
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN27@Tidy_deall

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN24@Tidy_deall

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN27@Tidy_deall:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN16@Tidy_deall:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3058 :     }

  00044	c3		 ret	 0
$LN24@Tidy_deall:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN35@Tidy_deall:
  0004a	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000b	8b f2		 mov	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00010	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL82@operator:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL82@operator
  0001a	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001c	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001f	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00022	3b f1		 cmp	 esi, ecx
  00024	77 26		 ja	 SHORT $LN9@operator

; 416  :         value_type* _Result = _Bx._Buf;

  00026	8b df		 mov	 ebx, edi

; 434  :         return _Myres > _Small_string_capacity;

  00028	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002b	76 02		 jbe	 SHORT $LN12@operator

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002d	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN12@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002f	56		 push	 esi
  00030	52		 push	 edx
  00031	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00032	89 77 10	 mov	 DWORD PTR [edi+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003d	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 1422 :         return assign(_Ptr);

  00041	8b c7		 mov	 eax, edi

; 1423 :     }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN9@operator:

; 2962 :         if (_New_size > max_size()) {

  0004c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00052	0f 87 c7 00 00
	00		 ja	 $LN97@operator

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00058	8b de		 mov	 ebx, esi
  0005a	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0005d	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	76 12		 jbe	 SHORT $LN30@operator

; 2944 :             return _Max;

  00065	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006a	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00075	eb 45		 jmp	 SHORT $LN95@operator
$LN30@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00077	8b d1		 mov	 edx, ecx
  00079	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007e	d1 ea		 shr	 edx, 1
  00080	2b c2		 sub	 eax, edx
  00082	3b c8		 cmp	 ecx, eax
  00084	76 12		 jbe	 SHORT $LN31@operator

; 2948 :             return _Max;

  00086	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0008b	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00096	eb 24		 jmp	 SHORT $LN95@operator
$LN31@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00098	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0009b	3b d8		 cmp	 ebx, eax
  0009d	0f 42 d8	 cmovb	 ebx, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000a0	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000a3	85 c0		 test	 eax, eax
  000a5	74 18		 je	 SHORT $LN94@operator
$LN44@operator:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ac	72 08		 jb	 SHORT $LN45@operator

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b4	eb 06		 jmp	 SHORT $LN95@operator
$LN45@operator:

; 136  :         return ::operator new(_Bytes);

  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN95@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000bc	83 c4 04	 add	 esp, 4
$LN94@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	56		 push	 esi
  000c0	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c3	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c6	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c7	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000ca	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d2	8b 5d fc	 mov	 ebx, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000d8	8b 45 f8	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000db	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000df	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000e2	76 29		 jbe	 SHORT $LN23@operator

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000e4	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	8b 07		 mov	 eax, DWORD PTR [edi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000e9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ef	72 12		 jb	 SHORT $LN73@operator

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f4	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f7	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f9	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ff	77 19		 ja	 SHORT $LN70@operator

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00101	8b c2		 mov	 eax, edx
$LN73@operator:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00103	51		 push	 ecx
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010a	83 c4 08	 add	 esp, 8
$LN23@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1604 :         return _Reallocate_for(

  0010d	89 1f		 mov	 DWORD PTR [edi], ebx

; 1422 :         return assign(_Ptr);

  0010f	8b c7		 mov	 eax, edi

; 1423 :     }

  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 04 00	 ret	 4
$LN70@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN97@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  0011f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN93@operator:
  00124	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__Left$ = 12						; size = 4
__New_size$1$ = 12					; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1056 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1063 :         const auto _Right_size = _Right_data._Mysize;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1057 :         auto& _My_data    = _Mypair._Myval2;
; 1058 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 1059 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1060 :         _Left_data._Orphan_all();
; 1061 :         _Right_data._Orphan_all();
; 1062 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 1063 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 1064 : 
; 1065 :         const auto _Left_capacity  = _Left_data._Myres;
; 1066 :         const auto _Right_capacity = _Right_data._Myres;
; 1067 :         // overflow is OK due to max_size() checks:
; 1068 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 1069 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 1070 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00041	77 5a		 ja	 SHORT $LN113@basic_stri
  00043	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00046	77 55		 ja	 SHORT $LN113@basic_stri

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0004b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0004e	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00053	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00058	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0005f	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00066	c6 07 00	 mov	 BYTE PTR [edi], 0

; 416  :         value_type* _Result = _Bx._Buf;

  00069	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  0006b	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0006f	76 02		 jbe	 SHORT $LN71@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN71@basic_stri:

; 434  :         return _Myres > _Small_string_capacity;

  00073	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00077	76 02		 jbe	 SHORT $LN78@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN78@basic_stri:

; 1076 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1076 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	53		 push	 ebx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1077 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 1122 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00092	8b c6		 mov	 eax, esi
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN113@basic_stri:

; 1078 :             return;
; 1079 :         }
; 1080 : 
; 1081 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 1082 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN112@basic_stri

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 1097 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000ad	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  000b2	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000b7	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000be	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000c5	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 1083 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 1084 :             // At this point, we have tested:
; 1085 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 1086 :             // therefore: (by De Morgan's Laws)
; 1087 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 1088 :             // therefore: (by the distributive property)
; 1089 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 1090 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 1091 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_mode_engaged()
; 1092 :             _STL_INTERNAL_CHECK(_Right_data._Large_mode_engaged());
; 1093 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 1094 :             _Take_contents(_Right);
; 1095 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1097 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000d7	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000db	76 02		 jbe	 SHORT $LN102@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN102@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	57		 push	 edi
  000e4	53		 push	 ebx
  000e5	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1099 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 1122 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000f3	8b c6		 mov	 eax, esi
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN112@basic_stri:

; 1100 :             return;
; 1101 :         }
; 1102 : 
; 1103 :         // can't use either buffer, reallocate
; 1104 :         const auto _Max = max_size();
; 1105 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 a2 00 00
	00		 jb	 $LN132@basic_stri

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 14		 jbe	 SHORT $LN20@basic_stri

; 2944 :             return _Max;

  0011a	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  0011f	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR $T2[ebp], 2147483647 ; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00126	52		 push	 edx
  00127	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0012c	eb 2a		 jmp	 SHORT $LN130@basic_stri
$LN20@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0012e	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  00133	3b c2		 cmp	 eax, edx
  00135	0f 42 c2	 cmovb	 eax, edx
  00138	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0013b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0013e	85 d2		 test	 edx, edx
  00140	74 21		 je	 SHORT $LN129@basic_stri
$LN34@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00142	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00148	72 08		 jb	 SHORT $LN35@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00150	eb 06		 jmp	 SHORT $LN130@basic_stri
$LN35@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00152	52		 push	 edx
  00153	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN130@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00158	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  0015b	8b d0		 mov	 edx, eax
  0015d	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00160	83 c4 04	 add	 esp, 4
$LN129@basic_stri:

; 1115 :         _My_data._Mysize = _New_size;

  00163	8b 5d 0c	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  00166	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 417  :         if (_Large_mode_engaged()) {

  00169	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016c	89 16		 mov	 DWORD PTR [esi], edx

; 1116 :         _My_data._Myres  = _New_capacity;

  0016e	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 434  :         return _Myres > _Small_string_capacity;

  00171	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00175	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx

; 417  :         if (_Large_mode_engaged()) {

  00178	76 02		 jbe	 SHORT $LN40@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0017a	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN40@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0017c	51		 push	 ecx
  0017d	57		 push	 edi
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 _memcpy
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00187	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0018b	76 02		 jbe	 SHORT $LN50@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0018d	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN50@basic_stri:

; 1119 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0018f	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00192	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00193	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1119 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00194	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  00197	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019a	53		 push	 ebx
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1122 :     }

  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	8b c6		 mov	 eax, esi
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 0c 00	 ret	 12			; 0000000cH
$LN132@basic_stri:

; 1106 :             _Xlen_string();

  001af	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN127@basic_stri:
  001b4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
