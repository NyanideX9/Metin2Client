; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EffectLib\Distribute\ParticleInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCParticleInstance@@@@6B@	; CDynamicPool<CParticleInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCParticleInstance@@@@UAEPAXI@Z ; CDynamicPool<CParticleInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCParticleInstance@@@@6B@	; CDynamicPool<CParticleInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCParticleInstance@@@@@8	; CDynamicPool<CParticleInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCParticleInstance@@@@8	; CDynamicPool<CParticleInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCParticleInstance@@@@8	; CDynamicPool<CParticleInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCParticleInstance@@@@8 ; CDynamicPool<CParticleInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPool@VCParticleInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CParticleInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCParticleInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCParticleInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCParticleInstance@@@@@8 ; CDynamicPool<CParticleInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCParticleInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCParticleInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCParticleInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCParticleInstance@@@@8 ; CDynamicPool<CParticleInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCParticleInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCParticleInstance@@@@8 DD 00H	; CDynamicPool<CParticleInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCParticleInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCParticleInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCParticleInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CParticleInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCParticleInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCParticleInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCParticleInstance@@@@6B@ DD 00H	; CDynamicPool<CParticleInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCParticleInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCParticleInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCParticleInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCParticleInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCParticleInstance@@@@6B@ ; CDynamicPool<CParticleInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCParticleInstance@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SPTVertex@@QAE@XZ				; SPTVertex::SPTVertex
PUBLIC	?DeleteThis@CBaseDecorator@NEffectUpdateDecorator@@QAEXXZ ; NEffectUpdateDecorator::CBaseDecorator::DeleteThis
PUBLIC	??0CParticleInstance@@QAE@XZ			; CParticleInstance::CParticleInstance
PUBLIC	??1CParticleInstance@@QAE@XZ			; CParticleInstance::~CParticleInstance
PUBLIC	?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
PUBLIC	?Update@CParticleInstance@@QAEHMM@Z		; CParticleInstance::Update
PUBLIC	?New@CParticleInstance@@SAPAV1@XZ		; CParticleInstance::New
PUBLIC	?DestroySystem@CParticleInstance@@SAXXZ		; CParticleInstance::DestroySystem
PUBLIC	?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z ; CParticleInstance::Transform
PUBLIC	?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z ; CParticleInstance::Transform
PUBLIC	?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
PUBLIC	?DeleteThis@CParticleInstance@@QAEXXZ		; CParticleInstance::DeleteThis
PUBLIC	?Destroy@CParticleInstance@@QAEXXZ		; CParticleInstance::Destroy
PUBLIC	?__Initialize@CParticleInstance@@IAEXXZ		; CParticleInstance::__Initialize
PUBLIC	??1?$CDynamicPool@VCParticleInstance@@@@UAE@XZ	; CDynamicPool<CParticleInstance>::~CDynamicPool<CParticleInstance>
PUBLIC	?_Xlength@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@CAXXZ ; std::vector<CParticleInstance *,std::allocator<CParticleInstance *> >::_Xlength
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	??$_Emplace_reallocate@ABQAVCParticleInstance@@@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEPAPAVCParticleInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleInstance *,std::allocator<CParticleInstance *> >::_Emplace_reallocate<CParticleInstance * const &>
PUBLIC	??$_Copy_memmove@PAPAVCParticleInstance@@PAPAV1@@std@@YAPAPAVCParticleInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleInstance * *,CParticleInstance * *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCParticleInstance@@@std@@YAPAPAVCParticleInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CParticleInstance * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A ; CParticleInstance::ms_kPool
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f800000
PUBLIC	__real@80000000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXVec3TransformNormal@12:PROC
EXTRN	_D3DXMatrixRotationAxis@12:PROC
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	_D3DXQuaternionMultiply@12:PROC
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_log_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CParticleInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CParticleInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCParticleInstance@@@@6B@ ; CParticleInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CParticleInstance@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCParticleInstance@@@std@@YAPAPAVCParticleInstance@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCParticleInstance@@@std@@YAPAPAVCParticleInstance@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CParticleInstance * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCParticleInstance@@@std@@YAPAPAVCParticleInstance@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CParticleInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCParticleInstance@@PAPAV1@@std@@YAPAPAVCParticleInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCParticleInstance@@PAPAV1@@std@@YAPAPAVCParticleInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CParticleInstance * *,CParticleInstance * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCParticleInstance@@@std@@YAPAPAVCParticleInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CParticleInstance * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCParticleInstance@@PAPAV1@@std@@YAPAPAVCParticleInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CParticleInstance * *,CParticleInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCParticleInstance@@@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEPAPAVCParticleInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCParticleInstance@@@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEPAPAVCParticleInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CParticleInstance *,std::allocator<CParticleInstance *> >::_Emplace_reallocate<CParticleInstance * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCParticleInstance@@PAPAV1@@std@@YAPAPAVCParticleInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleInstance * *,CParticleInstance * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCParticleInstance@@PAPAV1@@std@@YAPAPAVCParticleInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleInstance * *,CParticleInstance * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@CAXXZ ; std::vector<CParticleInstance *,std::allocator<CParticleInstance *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCParticleInstance@@@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEPAPAVCParticleInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CParticleInstance *,std::allocator<CParticleInstance *> >::_Emplace_reallocate<CParticleInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CParticleInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A ; CParticleInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCParticleInstance@@@@UAE@XZ ; CDynamicPool<CParticleInstance>::~CDynamicPool<CParticleInstance>
??__F?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CParticleInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ??__E?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CParticleInstance::ms_kPool'', COMDAT

; 9    : CDynamicPool<CParticleInstance> CParticleInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CParticleInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CParticleInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCParticleInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCParticleInstance@@@@UAEPAXI@Z PROC	; CDynamicPool<CParticleInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCParticleInstance@@@@UAE@XZ ; CDynamicPool<CParticleInstance>::~CDynamicPool<CParticleInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCParticleInstance@@@@UAEPAXI@Z ENDP	; CDynamicPool<CParticleInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CParticleInstance *,std::allocator<CParticleInstance *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CParticleInstance *,std::allocator<CParticleInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCParticleInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCParticleInstance@@@@UAE@XZ PROC	; CDynamicPool<CParticleInstance>::~CDynamicPool<CParticleInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCParticleInstance@@@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN37@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN56@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN56@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN37@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN53@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN67@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCParticleInstance@@@@UAE@XZ ENDP	; CDynamicPool<CParticleInstance>::~CDynamicPool<CParticleInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?__Initialize@CParticleInstance@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CParticleInstance@@IAEXXZ PROC		; CParticleInstance::__Initialize, COMDAT
; _this$ = ecx

; 441  : 	//*
; 442  : 	m_pDecorator=NULL;

  00000	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0

; 443  : 
; 444  : 	m_v3Position = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00007	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0000e	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00015	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 445  : 	m_v3LastPosition = m_v3Position;

  0001c	f3 0f 7e 41 0c	 movq	 xmm0, QWORD PTR [ecx+12]
  00021	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00024	66 0f d6 41 18	 movq	 QWORD PTR [ecx+24], xmm0
  00029	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 446  : 	m_v3Velocity = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  0002c	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  00033	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  0003a	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 447  : 
; 448  : 	m_v2Scale = D3DXVECTOR2(1.0f, 1.0f);

  00041	c7 41 38 00 00
	80 3f		 mov	 DWORD PTR [ecx+56], 1065353216 ; 3f800000H
  00048	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [ecx+60], 1065353216 ; 3f800000H

; 449  : #ifdef WORLD_EDITOR
; 450  : 	m_Color = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
; 451  : #else
; 452  : 	m_dcColor.m_dwColor = 0xffffffff;

  0004f	c7 41 44 ff ff
	ff ff		 mov	 DWORD PTR [ecx+68], -1

; 453  : #endif
; 454  : 
; 455  : 	m_byFrameIndex = 0;

  00056	c6 41 50 00	 mov	 BYTE PTR [ecx+80], 0

; 456  : 	m_ParticleMesh[0].texCoord = D3DXVECTOR2(0.0f, 1.0f);

  0005a	c7 81 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+128], 0
  00064	c7 81 84 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [ecx+132], 1065353216 ; 3f800000H

; 457  : 	m_ParticleMesh[1].texCoord = D3DXVECTOR2(0.0f, 0.0f);

  0006e	c7 81 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+148], 0
  00078	c7 81 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+152], 0

; 458  : 	m_ParticleMesh[2].texCoord = D3DXVECTOR2(1.0f, 1.0f);

  00082	c7 81 a8 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [ecx+168], 1065353216 ; 3f800000H
  0008c	c7 81 ac 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [ecx+172], 1065353216 ; 3f800000H

; 459  : 	m_ParticleMesh[3].texCoord = D3DXVECTOR2(1.0f, 0.0f);

  00096	c7 81 bc 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [ecx+188], 1065353216 ; 3f800000H
  000a0	c7 81 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+192], 0

; 460  : }

  000aa	c3		 ret	 0
?__Initialize@CParticleInstance@@IAEXXZ ENDP		; CParticleInstance::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectUpdateDecorator.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?Destroy@CParticleInstance@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CParticleInstance@@QAEXXZ PROC			; CParticleInstance::Destroy, COMDAT
; _this$ = ecx

; 431  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 432  : 	if (m_pDecorator)

  00004	8b 77 70	 mov	 esi, DWORD PTR [edi+112]
  00007	85 f6		 test	 esi, esi
  00009	74 14		 je	 SHORT $LN7@Destroy
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectUpdateDecorator.h

; 46   : 			if (m_NextDecorator)

  0000b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 05		 je	 SHORT $LN5@Destroy

; 47   : 				m_NextDecorator->DeleteThis();

  00012	e8 00 00 00 00	 call	 ?DeleteThis@CBaseDecorator@NEffectUpdateDecorator@@QAEXXZ ; NEffectUpdateDecorator::CBaseDecorator::DeleteThis
$LN5@Destroy:

; 48   : 			delete this;

  00017	8b 06		 mov	 eax, DWORD PTR [esi]
  00019	8b ce		 mov	 ecx, esi
  0001b	6a 01		 push	 1
  0001d	ff 10		 call	 DWORD PTR [eax]
$LN7@Destroy:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 435  : 	__Initialize();

  0001f	8b cf		 mov	 ecx, edi
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	e9 00 00 00 00	 jmp	 ?__Initialize@CParticleInstance@@IAEXXZ ; CParticleInstance::__Initialize
?Destroy@CParticleInstance@@QAEXXZ ENDP			; CParticleInstance::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?DeleteThis@CParticleInstance@@QAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?DeleteThis@CParticleInstance@@QAEXXZ PROC		; CParticleInstance::DeleteThis, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 25   : 	Destroy();

  00007	e8 00 00 00 00	 call	 ?Destroy@CParticleInstance@@QAEXXZ ; CParticleInstance::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0000c	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 27   : 	ms_kPool.Free(this);

  00011	89 75 fc	 mov	 DWORD PTR _pkData$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00014	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+24
  0001a	74 0e		 je	 SHORT $LN8@DeleteThis

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0001c	89 30		 mov	 DWORD PTR [eax], esi

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  0001e	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+20, 4
  00025	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 28   : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@DeleteThis:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCParticleInstance@@@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEPAPAVCParticleInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleInstance *,std::allocator<CParticleInstance *> >::_Emplace_reallocate<CParticleInstance * const &>
  00039	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 28   : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?DeleteThis@CParticleInstance@@QAEXXZ ENDP		; CParticleInstance::DeleteThis
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ
_TEXT	SEGMENT
?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ PROC ; CParticleInstance::GetParticleMeshPointer, COMDAT
; _this$ = ecx

; 500  : 	return m_ParticleMesh;

  00000	8d 41 74	 lea	 eax, DWORD PTR [ecx+116]

; 501  : }

  00003	c3		 ret	 0
?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ENDP ; CParticleInstance::GetParticleMeshPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z
_TEXT	SEGMENT
_v3Up$7$ = -144						; size = 4
_fCos$1$ = -144						; size = 4
tv3087 = -144						; size = 4
_v3Cross$5$ = -144					; size = 4
_v3Cross$8$ = -144					; size = 4
_v3Up$9$ = -140						; size = 4
_v3Up$2$ = -140						; size = 4
tv2982 = -140						; size = 4
tv3086 = -140						; size = 4
$T1 = -140						; size = 4
_v3Up$12$ = -136					; size = 4
_v3Cross$2$ = -136					; size = 4
_v3Cross$6$ = -136					; size = 4
_v3Up$10$ = -132					; size = 4
_v3Up$4$ = -132						; size = 4
_length$1$ = -132					; size = 4
_v3Up$14$ = -128					; size = 4
$T2 = -128						; size = 4
$T3 = -124						; size = 4
_v3Cross$3$ = -124					; size = 4
_c_matLocal$GSCopy$1$ = -124				; size = 4
_v3Up$5$ = -120						; size = 4
_fCos$1$ = -120						; size = 4
_v3Up$ = -112						; size = 12
_v3Cross$ = -100					; size = 12
_d3dd$4 = -88						; size = 12
_v3Position$5 = -88					; size = 12
tv3229 = -88						; size = 8
_f$1$ = -88						; size = 4
$T6 = -88						; size = 4
_matRotation$7 = -72					; size = 64
__$ArrayPad$ = -4					; size = 4
_c_matLocal$ = 8					; size = 4
_c_fZRotation$ = 12					; size = 4
?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z PROC ; CParticleInstance::Transform, COMDAT
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	33 c4		 xor	 eax, esp
  00013	89 84 24 8c 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+144], eax
  0001a	8b 45 08	 mov	 eax, DWORD PTR _c_matLocal$[ebp]
  0001d	56		 push	 esi
  0001e	8b f1		 mov	 esi, ecx
  00020	89 44 24 18	 mov	 DWORD PTR _c_matLocal$GSCopy$1$[esp+148], eax

; 279  : #ifdef WORLD_EDITOR
; 280  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, m_Color);
; 281  : #else
; 282  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, (DWORD)m_dcColor);

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0002a	57		 push	 edi
  0002b	ff 76 44	 push	 DWORD PTR [esi+68]
  0002e	6a 3c		 push	 60			; 0000003cH
  00030	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 283  : #endif
; 284  : 
; 285  : 	/////
; 286  : 
; 287  : 	D3DXVECTOR3 v3Up;
; 288  : 	D3DXVECTOR3 v3Cross;
; 289  : 
; 290  : 	if (!m_pParticleProperty->m_bStretchFlag)

  00035	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00038	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0003c	0f 85 87 03 00
	00		 jne	 $LN4@Transform

; 291  : 	{
; 292  : 		CCamera * pCurrentCamera = CCameraManager::Instance().GetCurrentCamera();

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00048	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 293  : 		const D3DXVECTOR3 & c_rv3Up = pCurrentCamera->GetUp();
; 294  : 		const D3DXVECTOR3 & c_rv3Cross = pCurrentCamera->GetCross();
; 295  : 
; 296  : 		D3DXVECTOR3 v3Rotation;
; 297  : 
; 298  : 		switch(m_pParticleProperty->m_byBillboardType) {

  0004d	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00050	8b f8		 mov	 edi, eax
  00052	0f b6 49 13	 movzx	 ecx, BYTE PTR [ecx+19]
  00056	49		 dec	 ecx
  00057	83 f9 04	 cmp	 ecx, 4
  0005a	0f 87 61 02 00
	00		 ja	 $LN12@Transform
  00060	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN168@Transform[ecx*4]
$LN6@Transform:

; 299  : 		case BILLBOARD_TYPE_LIE:
; 300  : 			{
; 301  : 				float fCos = cosf(D3DXToRadian(m_fRotation)), fSin = sinf(D3DXToRadian(m_fRotation));

  00067	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
  0006c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  00074	0f 5a c0	 cvtps2pd xmm0, xmm0
  00077	f2 0f 11 44 24
	40		 movsd	 QWORD PTR tv3229[esp+152], xmm0
  0007d	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00082	0f 57 d2	 xorps	 xmm2, xmm2
  00085	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0

; 798  :             return (float)sin(_X);

  00089	f2 0f 10 44 24
	40		 movsd	 xmm0, QWORD PTR tv3229[esp+152]

; 692  :             return (float)cos(_X);

  0008f	f3 0f 11 54 24
	14		 movss	 DWORD PTR _v3Up$4$[esp+152], xmm2

; 798  :             return (float)sin(_X);

  00095	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 307  : 				v3Cross.y = fCos;

  0009a	f3 0f 10 64 24
	14		 movss	 xmm4, DWORD PTR _v3Up$4$[esp+152]

; 364  : 	}

  000a0	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  000a3	0f 57 f6	 xorps	 xmm6, xmm6
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 308  : 				v3Cross.z = 0;

  000a6	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR _v3Cross$[esp+160], 0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  000ae	f2 0f 5a f0	 cvtsd2ss xmm6, xmm0
  000b2	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 307  : 				v3Cross.y = fCos;

  000b5	0f 28 d4	 movaps	 xmm2, xmm4
  000b8	0f 28 ee	 movaps	 xmm5, xmm6

; 364  : 	}

  000bb	f3 0f 11 4c 24
	18		 movss	 DWORD PTR _v3Up$14$[esp+152], xmm1
  000c1	0f 57 2d 00 00
	00 00		 xorps	 xmm5, DWORD PTR __xmm@80000000800000008000000080000000
  000c8	f3 0f 11 6c 24
	0c		 movss	 DWORD PTR _v3Up$9$[esp+152], xmm5
  000ce	e9 c8 04 00 00	 jmp	 $LN175@Transform
$LN7@Transform:

; 309  : 			}
; 310  : 			break;
; 311  : 		case BILLBOARD_TYPE_2FACE:
; 312  : 		case BILLBOARD_TYPE_3FACE:
; 313  : 			// using setting with y, and local rotation at render
; 314  : 		case BILLBOARD_TYPE_Y:
; 315  : 		{
; 316  : 			v3Up = D3DXVECTOR3(0.0f, 0.0f, 1.0f);

  000d3	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3f800000
  000db	0f 57 ed	 xorps	 xmm5, xmm5
  000de	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _v3Up$[esp+152], 0
  000e6	0f 57 f6	 xorps	 xmm6, xmm6
  000e9	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _v3Up$[esp+156], 0
  000f1	c7 44 24 30 00
	00 80 3f	 mov	 DWORD PTR _v3Up$[esp+160], 1065353216 ; 3f800000H

; 317  : 			//v3Up = D3DXVECTOR3(cosf(D3DXToRadian(m_fRotation)),0.0f,-sinf(D3DXToRadian(m_fRotation)));
; 318  : 			const D3DXVECTOR3& c_rv3View = pCurrentCamera->GetView();
; 319  : 			if (v3Up.x * c_rv3View.y - v3Up.y * c_rv3View.x < 0)

  000f9	f3 0f 10 4f 58	 movss	 xmm1, DWORD PTR [edi+88]
  000fe	f3 0f 10 47 54	 movss	 xmm0, DWORD PTR [edi+84]
  00103	f3 0f 59 cd	 mulss	 xmm1, xmm5
  00107	f3 0f 59 c5	 mulss	 xmm0, xmm5
  0010b	f3 0f 5c c8	 subss	 xmm1, xmm0
  0010f	0f 2f e9	 comiss	 xmm5, xmm1
  00112	76 28		 jbe	 SHORT $LN10@Transform
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  00114	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@80000000

; 224  :     z *= f;

  0011c	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@bf800000
  00124	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR _v3Up$[esp+152], -2147483648 ; 80000000H
  0012c	c7 44 24 2c 00
	00 00 80	 mov	 DWORD PTR _v3Up$[esp+156], -2147483648 ; 80000000H
  00134	c7 44 24 30 00
	00 80 bf	 mov	 DWORD PTR _v3Up$[esp+160], -1082130432 ; bf800000H
$LN10@Transform:

; 181  :     y = fy;

  0013c	f3 0f 10 5f 58	 movss	 xmm3, DWORD PTR [edi+88]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 323  : 			D3DXVec3Normalize(&v3Cross, &v3Cross);

  00141	8d 44 24 34	 lea	 eax, DWORD PTR _v3Cross$[esp+152]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00145	f3 0f 10 67 54	 movss	 xmm4, DWORD PTR [edi+84]

; 182  :     z = fz;

  0014a	0f 28 d6	 movaps	 xmm2, xmm6
  0014d	f3 0f 59 d5	 mulss	 xmm2, xmm5

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00151	0f 28 cb	 movaps	 xmm1, xmm3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 323  : 			D3DXVec3Normalize(&v3Cross, &v3Cross);

  00154	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00155	f3 0f 59 cf	 mulss	 xmm1, xmm7
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 323  : 			D3DXVec3Normalize(&v3Cross, &v3Cross);

  00159	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0015a	0f 28 c2	 movaps	 xmm0, xmm2
  0015d	f3 0f 5c c1	 subss	 xmm0, xmm1

; 1281 :     *pOut = v;

  00161	f3 0f 11 44 24
	3c		 movss	 DWORD PTR _v3Cross$[esp+160], xmm0
  00167	0f 28 c4	 movaps	 xmm0, xmm4
  0016a	f3 0f 59 c7	 mulss	 xmm0, xmm7
  0016e	f3 0f 5c c2	 subss	 xmm0, xmm2
  00172	f3 0f 11 44 24
	40		 movss	 DWORD PTR _v3Cross$[esp+164], xmm0
  00178	0f 28 c6	 movaps	 xmm0, xmm6
  0017b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0017f	f3 0f 59 f4	 mulss	 xmm6, xmm4
  00183	f3 0f 5c c6	 subss	 xmm0, xmm6
  00187	f3 0f 11 44 24
	44		 movss	 DWORD PTR _v3Cross$[esp+168], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 323  : 			D3DXVec3Normalize(&v3Cross, &v3Cross);

  0018d	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 324  : 
; 325  : 			if (m_fRotation)

  00192	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
  00197	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0019e	9f		 lahf
  0019f	f6 c4 44	 test	 ah, 68			; 00000044H
  001a2	0f 8b e9 01 00
	00		 jnp	 $LN169@Transform

; 327  : 				float fCos = -sinf(D3DXToRadian(m_fRotation)); // + 90

  001a8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  001b0	f3 0f 11 44 24
	0c		 movss	 DWORD PTR tv2982[esp+152], xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  001b6	0f 5a c0	 cvtps2pd xmm0, xmm0
  001b9	e8 00 00 00 00	 call	 __libm_sse2_sin_precise

; 692  :             return (float)cos(_X);

  001be	f3 0f 10 4c 24
	0c		 movss	 xmm1, DWORD PTR tv2982[esp+152]

; 798  :             return (float)sin(_X);

  001c4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 327  : 				float fCos = -sinf(D3DXToRadian(m_fRotation)); // + 90

  001c8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001cf	f3 0f 11 44 24
	08		 movss	 DWORD PTR _fCos$1$[esp+152], xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  001d5	0f 5a c1	 cvtps2pd xmm0, xmm1
  001d8	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001dd	f3 0f 10 4c 24
	08		 movss	 xmm1, DWORD PTR _fCos$1$[esp+152]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 364  : 	}

  001e3	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  001e6	0f 57 ff	 xorps	 xmm7, xmm7
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001e9	0f 28 d1	 movaps	 xmm2, xmm1
  001ec	f3 0f 59 54 24
	28		 mulss	 xmm2, DWORD PTR _v3Up$[esp+152]
  001f2	0f 28 e1	 movaps	 xmm4, xmm1
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  001f5	f2 0f 5a f8	 cvtsd2ss xmm7, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001f9	f3 0f 59 64 24
	2c		 mulss	 xmm4, DWORD PTR _v3Up$[esp+156]
  001ff	0f 28 d9	 movaps	 xmm3, xmm1
  00202	0f 28 c7	 movaps	 xmm0, xmm7
  00205	f3 0f 59 44 24
	34		 mulss	 xmm0, DWORD PTR _v3Cross$[esp+152]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0020b	f3 0f 5c d0	 subss	 xmm2, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0020f	0f 28 c7	 movaps	 xmm0, xmm7
  00212	f3 0f 59 44 24
	38		 mulss	 xmm0, DWORD PTR _v3Cross$[esp+156]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00218	f3 0f 5c e0	 subss	 xmm4, xmm0
  0021c	f3 0f 11 54 24
	14		 movss	 DWORD PTR _v3Up$4$[esp+152], xmm2

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00222	0f 28 c1	 movaps	 xmm0, xmm1
  00225	f3 0f 59 44 24
	30		 mulss	 xmm0, DWORD PTR _v3Up$[esp+160]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0022b	f3 0f 11 64 24
	0c		 movss	 DWORD PTR _v3Up$9$[esp+152], xmm4

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00231	f3 0f 11 44 24
	18		 movss	 DWORD PTR _v3Up$14$[esp+152], xmm0
  00237	0f 28 c7	 movaps	 xmm0, xmm7
  0023a	f3 0f 59 44 24
	3c		 mulss	 xmm0, DWORD PTR _v3Cross$[esp+160]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00240	f3 0f 10 74 24
	18		 movss	 xmm6, DWORD PTR _v3Up$14$[esp+152]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 339  : 		break;

  00246	f3 0f 10 64 24
	14		 movss	 xmm4, DWORD PTR _v3Up$4$[esp+152]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0024c	f3 0f 5c f0	 subss	 xmm6, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 339  : 		break;

  00250	f3 0f 10 6c 24
	0c		 movss	 xmm5, DWORD PTR _v3Up$9$[esp+152]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00256	0f 28 c1	 movaps	 xmm0, xmm1
  00259	f3 0f 59 44 24
	34		 mulss	 xmm0, DWORD PTR _v3Cross$[esp+152]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0025f	f3 0f 11 74 24
	18		 movss	 DWORD PTR _v3Up$14$[esp+152], xmm6

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00265	f3 0f 11 44 24
	10		 movss	 DWORD PTR _v3Cross$2$[esp+152], xmm0
  0026b	0f 28 c7	 movaps	 xmm0, xmm7
  0026e	f3 0f 59 44 24
	28		 mulss	 xmm0, DWORD PTR _v3Up$[esp+152]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00274	f3 0f 10 74 24
	10		 movss	 xmm6, DWORD PTR _v3Cross$2$[esp+152]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 339  : 		break;

  0027a	f3 0f 10 4c 24
	18		 movss	 xmm1, DWORD PTR _v3Up$14$[esp+152]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00280	f3 0f 58 f0	 addss	 xmm6, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00284	0f 28 c3	 movaps	 xmm0, xmm3
  00287	f3 0f 59 44 24
	38		 mulss	 xmm0, DWORD PTR _v3Cross$[esp+156]
  0028d	f3 0f 59 5c 24
	3c		 mulss	 xmm3, DWORD PTR _v3Cross$[esp+160]
  00293	f3 0f 11 44 24
	08		 movss	 DWORD PTR _v3Cross$5$[esp+152], xmm0
  00299	0f 28 c7	 movaps	 xmm0, xmm7
  0029c	f3 0f 59 7c 24
	30		 mulss	 xmm7, DWORD PTR _v3Up$[esp+160]
  002a2	f3 0f 59 44 24
	2c		 mulss	 xmm0, DWORD PTR _v3Up$[esp+156]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  002a8	f3 0f 10 54 24
	08		 movss	 xmm2, DWORD PTR _v3Cross$5$[esp+152]
  002ae	f3 0f 58 df	 addss	 xmm3, xmm7
  002b2	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 331  : 				v3Cross = v3Cross * fCos + v3Up * fSin;

  002b6	f3 0f 11 5c 24
	3c		 movss	 DWORD PTR _v3Cross$[esp+160], xmm3

; 364  : 	}

  002bc	e9 da 02 00 00	 jmp	 $LN175@Transform
$LN12@Transform:

; 340  : 			case BILLBOARD_TYPE_ALL:
; 341  : 			default:
; 342  : 			{
; 343  : 				// NOTE : Rotation Routine. CameraŔÇ Up VectorżÍ Cross Vector ŔÚĂĽ¸¦ View Vector ±âÁŘŔ¸·Î
; 344  : 				//        Rotation ˝ĂĹ˛´Ů.
; 345  : 				// FIXME : ąÝµĺ˝Ă ĂÖŔűČ­ ÇŇ °Í!
; 346  : 				if (m_fRotation == 0.0f)

  002c1	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
  002c6	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  002cd	9f		 lahf
  002ce	f6 c4 44	 test	 ah, 68			; 00000044H
  002d1	7a 49		 jp	 SHORT $LN14@Transform
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  002d3	f3 0f 10 6f 64	 movss	 xmm5, DWORD PTR [edi+100]
  002d8	f3 0f 10 4f 68	 movss	 xmm1, DWORD PTR [edi+104]
  002dd	f3 0f 10 67 60	 movss	 xmm4, DWORD PTR [edi+96]
  002e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002ea	0f 57 e8	 xorps	 xmm5, xmm0
  002ed	0f 57 c8	 xorps	 xmm1, xmm0
  002f0	0f 57 e0	 xorps	 xmm4, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 348  : 					v3Up = -c_rv3Cross;

  002f3	f3 0f 11 6c 24
	2c		 movss	 DWORD PTR _v3Up$[esp+156], xmm5
  002f9	f3 0f 11 64 24
	28		 movss	 DWORD PTR _v3Up$[esp+152], xmm4
  002ff	f3 0f 11 4c 24
	30		 movss	 DWORD PTR _v3Up$[esp+160], xmm1

; 349  : 					v3Cross = c_rv3Up;

  00305	f3 0f 7e 47 48	 movq	 xmm0, QWORD PTR [edi+72]
  0030a	66 0f d6 44 24
	34		 movq	 QWORD PTR _v3Cross$[esp+152], xmm0
  00310	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00313	89 44 24 3c	 mov	 DWORD PTR _v3Cross$[esp+160], eax

; 350  : 				}

  00317	e9 87 00 00 00	 jmp	 $LN174@Transform
$LN14@Transform:

; 351  : 				else
; 352  : 				{
; 353  : 					const D3DXVECTOR3& c_rv3View = pCurrentCamera->GetView();
; 354  : 					D3DXMATRIX matRotation;
; 355  : 
; 356  : 					D3DXMatrixRotationAxis(&matRotation, &c_rv3View, D3DXToRadian(m_fRotation));

  0031c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00324	8d 47 54	 lea	 eax, DWORD PTR [edi+84]
  00327	51		 push	 ecx
  00328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032d	50		 push	 eax
  0032e	8d 44 24 58	 lea	 eax, DWORD PTR _matRotation$7[esp+160]
  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 _D3DXMatrixRotationAxis@12
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00338	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 358  : 					D3DXVec3TransformCoord(&v3Up, &d3dd, &matRotation);

  00340	8d 44 24 50	 lea	 eax, DWORD PTR _matRotation$7[esp+152]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00344	f3 0f 10 47 60	 movss	 xmm0, DWORD PTR [edi+96]
  00349	0f 57 c1	 xorps	 xmm0, xmm1

; 180  :     x = fx;

  0034c	f3 0f 11 44 24
	40		 movss	 DWORD PTR _d3dd$4[esp+152], xmm0

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00352	f3 0f 10 47 64	 movss	 xmm0, DWORD PTR [edi+100]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 358  : 					D3DXVec3TransformCoord(&v3Up, &d3dd, &matRotation);

  00357	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00358	0f 57 c1	 xorps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 358  : 					D3DXVec3TransformCoord(&v3Up, &d3dd, &matRotation);

  0035b	8d 44 24 44	 lea	 eax, DWORD PTR _d3dd$4[esp+156]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0035f	f3 0f 11 44 24
	48		 movss	 DWORD PTR _d3dd$4[esp+160], xmm0

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00365	f3 0f 10 47 68	 movss	 xmm0, DWORD PTR [edi+104]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 358  : 					D3DXVec3TransformCoord(&v3Up, &d3dd, &matRotation);

  0036a	50		 push	 eax
  0036b	8d 44 24 30	 lea	 eax, DWORD PTR _v3Up$[esp+160]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  0036f	0f 57 c1	 xorps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 358  : 					D3DXVec3TransformCoord(&v3Up, &d3dd, &matRotation);

  00372	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00373	f3 0f 11 44 24
	54		 movss	 DWORD PTR _d3dd$4[esp+172], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 358  : 					D3DXVec3TransformCoord(&v3Up, &d3dd, &matRotation);

  00379	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 359  : 					D3DXVec3TransformCoord(&v3Cross, &c_rv3Up, &matRotation);

  0037e	8d 44 24 50	 lea	 eax, DWORD PTR _matRotation$7[esp+152]
  00382	50		 push	 eax
  00383	8d 47 48	 lea	 eax, DWORD PTR [edi+72]
  00386	50		 push	 eax
  00387	8d 44 24 3c	 lea	 eax, DWORD PTR _v3Cross$[esp+160]
  0038b	50		 push	 eax
  0038c	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
$LN169@Transform:

; 364  : 	}

  00391	f3 0f 10 64 24
	28		 movss	 xmm4, DWORD PTR _v3Up$[esp+152]
  00397	f3 0f 10 6c 24
	2c		 movss	 xmm5, DWORD PTR _v3Up$[esp+156]
  0039d	f3 0f 10 4c 24
	30		 movss	 xmm1, DWORD PTR _v3Up$[esp+160]
$LN174@Transform:
  003a3	f3 0f 10 54 24
	38		 movss	 xmm2, DWORD PTR _v3Cross$[esp+156]
  003a9	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  003ac	f3 0f 10 74 24
	34		 movss	 xmm6, DWORD PTR _v3Cross$[esp+152]
  003b2	f3 0f 11 64 24
	14		 movss	 DWORD PTR _v3Up$4$[esp+152], xmm4
  003b8	f3 0f 11 6c 24
	0c		 movss	 DWORD PTR _v3Up$9$[esp+152], xmm5
  003be	f3 0f 11 4c 24
	18		 movss	 DWORD PTR _v3Up$14$[esp+152], xmm1
  003c4	e9 d2 01 00 00	 jmp	 $LN175@Transform
$LN4@Transform:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003c9	f3 0f 10 56 0c	 movss	 xmm2, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 367  : 		v3Up = m_v3Position - m_v3LastPosition;

  003ce	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003d1	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  003d6	f3 0f 10 5f 08	 movss	 xmm3, DWORD PTR [edi+8]
  003db	f3 0f 5c 56 18	 subss	 xmm2, DWORD PTR [esi+24]
  003e0	f3 0f 5c 46 1c	 subss	 xmm0, DWORD PTR [esi+28]
  003e5	f3 0f 5c 5e 20	 subss	 xmm3, DWORD PTR [esi+32]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 369  : 		if (c_matLocal)

  003ea	8b 44 24 1c	 mov	 eax, DWORD PTR _c_matLocal$GSCopy$1$[esp+152]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003ee	f3 0f 11 54 24
	0c		 movss	 DWORD PTR _v3Up$2$[esp+152], xmm2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 367  : 		v3Up = m_v3Position - m_v3LastPosition;

  003f4	f3 0f 11 54 24
	28		 movss	 DWORD PTR _v3Up$[esp+152], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003fa	f3 0f 11 44 24
	08		 movss	 DWORD PTR _v3Up$7$[esp+152], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 367  : 		v3Up = m_v3Position - m_v3LastPosition;

  00400	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _v3Up$[esp+156], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00406	f3 0f 11 5c 24
	10		 movss	 DWORD PTR _v3Up$12$[esp+152], xmm3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 367  : 		v3Up = m_v3Position - m_v3LastPosition;

  0040c	f3 0f 11 5c 24
	30		 movss	 DWORD PTR _v3Up$[esp+160], xmm3

; 369  : 		if (c_matLocal)

  00412	85 c0		 test	 eax, eax
  00414	74 30		 je	 SHORT $LN16@Transform

; 370  : 		{
; 371  : 			//if (!m_pParticleProperty->m_bAttachFlag)
; 372  : 				D3DXVec3TransformNormal(&v3Up, &v3Up, c_matLocal);

  00416	50		 push	 eax
  00417	8d 44 24 2c	 lea	 eax, DWORD PTR _v3Up$[esp+156]
  0041b	50		 push	 eax
  0041c	50		 push	 eax
  0041d	e8 00 00 00 00	 call	 _D3DXVec3TransformNormal@12
  00422	f3 0f 10 5c 24
	30		 movss	 xmm3, DWORD PTR _v3Up$[esp+160]
  00428	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR _v3Up$[esp+156]
  0042e	f3 0f 10 54 24
	28		 movss	 xmm2, DWORD PTR _v3Up$[esp+152]
  00434	f3 0f 11 5c 24
	10		 movss	 DWORD PTR _v3Up$12$[esp+152], xmm3
  0043a	f3 0f 11 44 24
	08		 movss	 DWORD PTR _v3Up$7$[esp+152], xmm0
  00440	f3 0f 11 54 24
	0c		 movss	 DWORD PTR _v3Up$2$[esp+152], xmm2
$LN16@Transform:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00446	0f 28 c8	 movaps	 xmm1, xmm0
  00449	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0044d	0f 28 c2	 movaps	 xmm0, xmm2
  00450	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00454	f3 0f 58 c8	 addss	 xmm1, xmm0
  00458	0f 28 c3	 movaps	 xmm0, xmm3
  0045b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0045f	f3 0f 58 c8	 addss	 xmm1, xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00463	0f 5a c1	 cvtps2pd xmm0, xmm1
  00466	0f 57 c9	 xorps	 xmm1, xmm1
  00469	66 0f 2e c8	 ucomisd xmm1, xmm0
  0046d	77 06		 ja	 SHORT $LN170@Transform
  0046f	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00473	eb 05		 jmp	 SHORT $LN171@Transform
$LN170@Transform:
  00475	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN171@Transform:
  0047a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 376  : 		if (length == 0.0f)

  0047e	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00485	f3 0f 11 44 24
	14		 movss	 DWORD PTR _length$1$[esp+152], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 376  : 		if (length == 0.0f)

  0048b	9f		 lahf
  0048c	f6 c4 44	 test	 ah, 68			; 00000044H
  0048f	7a 1a		 jp	 SHORT $LN17@Transform

; 377  : 		{
; 378  : 			v3Up = D3DXVECTOR3(0.0f,0.0f,1.0f);

  00491	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _v3Up$[esp+152], 0
  00499	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _v3Up$[esp+156], 0
  004a1	c7 44 24 30 00
	00 80 3f	 mov	 DWORD PTR _v3Up$[esp+160], 1065353216 ; 3f800000H

; 379  : 		}

  004a9	eb 50		 jmp	 SHORT $LN18@Transform
$LN17@Transform:

; 381  : 			v3Up *=(1+log(1+length))/length;

  004ab	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 780  :             return (float)log(_X);

  004b3	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  004b7	e8 00 00 00 00	 call	 __libm_sse2_log_precise
  004bc	0f 57 c9	 xorps	 xmm1, xmm1
  004bf	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 381  : 			v3Up *=(1+log(1+length))/length;

  004c3	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  004cb	f3 0f 5e 4c 24
	14		 divss	 xmm1, DWORD PTR _length$1$[esp+152]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  004d1	0f 28 c1	 movaps	 xmm0, xmm1
  004d4	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _v3Up$2$[esp+152]
  004da	f3 0f 11 44 24
	28		 movss	 DWORD PTR _v3Up$[esp+152], xmm0

; 223  :     y *= f;

  004e0	0f 28 c1	 movaps	 xmm0, xmm1
  004e3	f3 0f 59 44 24
	08		 mulss	 xmm0, DWORD PTR _v3Up$7$[esp+152]

; 224  :     z *= f;

  004e9	f3 0f 59 4c 24
	10		 mulss	 xmm1, DWORD PTR _v3Up$12$[esp+152]
  004ef	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _v3Up$[esp+156], xmm0
  004f5	f3 0f 11 4c 24
	30		 movss	 DWORD PTR _v3Up$[esp+160], xmm1
$LN18@Transform:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 385  : 		CCamera * pCurrentCamera = CCameraManager::Instance().GetCurrentCamera();

  004fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00501	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00506	f3 0f 10 60 5c	 movss	 xmm4, DWORD PTR [eax+92]
  0050b	f3 0f 10 70 58	 movss	 xmm6, DWORD PTR [eax+88]
  00510	0f 28 d4	 movaps	 xmm2, xmm4
  00513	f3 0f 59 54 24
	2c		 mulss	 xmm2, DWORD PTR _v3Up$[esp+156]
  00519	0f 28 c6	 movaps	 xmm0, xmm6
  0051c	f3 0f 59 44 24
	30		 mulss	 xmm0, DWORD PTR _v3Up$[esp+160]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00522	f3 0f 10 68 54	 movss	 xmm5, DWORD PTR [eax+84]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 388  : 		D3DXVec3Normalize(&v3Cross, &v3Cross);

  00527	8d 44 24 34	 lea	 eax, DWORD PTR _v3Cross$[esp+152]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0052b	f3 0f 59 64 24
	28		 mulss	 xmm4, DWORD PTR _v3Up$[esp+152]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 388  : 		D3DXVec3Normalize(&v3Cross, &v3Cross);

  00531	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00532	f3 0f 59 74 24
	2c		 mulss	 xmm6, DWORD PTR _v3Up$[esp+156]
  00538	f3 0f 5c d0	 subss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 388  : 		D3DXVec3Normalize(&v3Cross, &v3Cross);

  0053c	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1281 :     *pOut = v;

  0053d	f3 0f 11 54 24
	3c		 movss	 DWORD PTR _v3Cross$[esp+160], xmm2
  00543	0f 28 d5	 movaps	 xmm2, xmm5
  00546	f3 0f 59 54 24
	38		 mulss	 xmm2, DWORD PTR _v3Up$[esp+168]
  0054c	f3 0f 59 6c 24
	34		 mulss	 xmm5, DWORD PTR _v3Up$[esp+164]
  00552	f3 0f 5c d4	 subss	 xmm2, xmm4
  00556	f3 0f 5c f5	 subss	 xmm6, xmm5
  0055a	f3 0f 11 54 24
	40		 movss	 DWORD PTR _v3Cross$[esp+164], xmm2
  00560	f3 0f 11 74 24
	44		 movss	 DWORD PTR _v3Cross$[esp+168], xmm6
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 388  : 		D3DXVec3Normalize(&v3Cross, &v3Cross);

  00566	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
  0056b	f3 0f 10 4c 24
	30		 movss	 xmm1, DWORD PTR _v3Up$[esp+160]
  00571	f3 0f 10 6c 24
	2c		 movss	 xmm5, DWORD PTR _v3Up$[esp+156]
  00577	f3 0f 10 64 24
	28		 movss	 xmm4, DWORD PTR _v3Up$[esp+152]
  0057d	f3 0f 10 54 24
	38		 movss	 xmm2, DWORD PTR _v3Cross$[esp+156]
  00583	f3 0f 10 74 24
	34		 movss	 xmm6, DWORD PTR _v3Cross$[esp+152]
  00589	f3 0f 11 4c 24
	18		 movss	 DWORD PTR _v3Up$14$[esp+152], xmm1
  0058f	f3 0f 11 6c 24
	0c		 movss	 DWORD PTR _v3Up$9$[esp+152], xmm5
  00595	f3 0f 11 64 24
	14		 movss	 DWORD PTR _v3Up$4$[esp+152], xmm4
$LN175@Transform:

; 389  : 
; 390  : 	}
; 391  : 
; 392  : 	if (c_fZRotation)

  0059b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _c_fZRotation$[ebp]
  005a0	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  005a7	f3 0f 11 74 24
	10		 movss	 DWORD PTR _v3Cross$2$[esp+152], xmm6
  005ad	f3 0f 11 54 24
	08		 movss	 DWORD PTR _v3Cross$5$[esp+152], xmm2
  005b3	9f		 lahf
  005b4	f6 c4 44	 test	 ah, 68			; 00000044H
  005b7	0f 8b 85 00 00
	00		 jnp	 $LN19@Transform
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  005bd	0f 5a c0	 cvtps2pd xmm0, xmm0
  005c0	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  005c5	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  005c9	f3 0f 11 44 24
	20		 movss	 DWORD PTR _fCos$1$[esp+152], xmm0
  005cf	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _c_fZRotation$[ebp]

; 798  :             return (float)sin(_X);

  005d4	0f 5a c0	 cvtps2pd xmm0, xmm0
  005d7	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 398  : 		x = v3Up.x;

  005dc	f3 0f 10 5c 24
	20		 movss	 xmm3, DWORD PTR _fCos$1$[esp+152]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  005e2	0f 57 d2	 xorps	 xmm2, xmm2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 398  : 		x = v3Up.x;

  005e5	f3 0f 10 4c 24
	14		 movss	 xmm1, DWORD PTR _v3Up$4$[esp+152]
  005eb	0f 28 e3	 movaps	 xmm4, xmm3

; 399  : 		y = v3Up.y;
; 400  : 		v3Up.x = x * fCos - y * fSin;

  005ee	f3 0f 10 6c 24
	0c		 movss	 xmm5, DWORD PTR _v3Up$9$[esp+152]

; 402  : 
; 403  : 		x = v3Cross.x;

  005f4	0f 28 f3	 movaps	 xmm6, xmm3
  005f7	f3 0f 59 74 24
	10		 mulss	 xmm6, DWORD PTR _v3Cross$2$[esp+152]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  005fd	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 398  : 		x = v3Up.x;

  00601	f3 0f 59 e1	 mulss	 xmm4, xmm1

; 399  : 		y = v3Up.y;
; 400  : 		v3Up.x = x * fCos - y * fSin;

  00605	0f 28 c2	 movaps	 xmm0, xmm2

; 401  : 		v3Up.y = y * fCos + x * fSin;

  00608	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0060c	f3 0f 59 c5	 mulss	 xmm0, xmm5
  00610	f3 0f 5c e0	 subss	 xmm4, xmm0
  00614	0f 28 c3	 movaps	 xmm0, xmm3

; 404  : 		y = v3Cross.y;
; 405  : 		v3Cross.x = x * fCos - y * fSin;
; 406  : 		v3Cross.y = y * fCos + x * fSin;

  00617	f3 0f 59 5c 24
	08		 mulss	 xmm3, DWORD PTR _v3Cross$5$[esp+152]
  0061d	f3 0f 59 e8	 mulss	 xmm5, xmm0
  00621	0f 28 c2	 movaps	 xmm0, xmm2
  00624	f3 0f 59 44 24
	08		 mulss	 xmm0, DWORD PTR _v3Cross$5$[esp+152]
  0062a	f3 0f 59 54 24
	10		 mulss	 xmm2, DWORD PTR _v3Cross$2$[esp+152]
  00630	f3 0f 58 e9	 addss	 xmm5, xmm1
  00634	f3 0f 10 4c 24
	18		 movss	 xmm1, DWORD PTR _v3Up$14$[esp+152]
  0063a	f3 0f 5c f0	 subss	 xmm6, xmm0
  0063e	f3 0f 58 d3	 addss	 xmm2, xmm3
$LN19@Transform:

; 409  : 	v3Cross = -(m_v2HalfSize.x*m_v2Scale.x) * v3Cross;

  00642	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]
  00647	f3 0f 59 46 30	 mulss	 xmm0, DWORD PTR [esi+48]

; 411  : 
; 412  : 	if (c_matLocal && m_pParticleProperty->m_bAttachFlag)

  0064c	8b 4c 24 1c	 mov	 ecx, DWORD PTR _c_matLocal$GSCopy$1$[esp+152]
  00650	f3 0f 10 7e 3c	 movss	 xmm7, DWORD PTR [esi+60]
  00655	f3 0f 59 7e 34	 mulss	 xmm7, DWORD PTR [esi+52]
  0065a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00661	0f 28 d8	 movaps	 xmm3, xmm0
  00664	f3 0f 59 de	 mulss	 xmm3, xmm6
  00668	0f 28 f0	 movaps	 xmm6, xmm0
  0066b	f3 0f 59 44 24
	3c		 mulss	 xmm0, DWORD PTR _v3Cross$[esp+160]
  00671	f3 0f 59 f2	 mulss	 xmm6, xmm2
  00675	f3 0f 11 5c 24
	0c		 movss	 DWORD PTR tv3086[esp+152], xmm3
  0067b	f3 0f 11 44 24
	40		 movss	 DWORD PTR _f$1$[esp+152], xmm0
  00681	f3 0f 11 74 24
	08		 movss	 DWORD PTR tv3087[esp+152], xmm6
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 409  : 	v3Cross = -(m_v2HalfSize.x*m_v2Scale.x) * v3Cross;

  00687	f3 0f 11 74 24
	38		 movss	 DWORD PTR _v3Cross$[esp+156], xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0068d	0f 28 f7	 movaps	 xmm6, xmm7
  00690	f3 0f 59 f4	 mulss	 xmm6, xmm4
  00694	0f 28 e7	 movaps	 xmm4, xmm7
  00697	f3 0f 59 e5	 mulss	 xmm4, xmm5
  0069b	f3 0f 59 f9	 mulss	 xmm7, xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 409  : 	v3Cross = -(m_v2HalfSize.x*m_v2Scale.x) * v3Cross;

  0069f	f3 0f 11 5c 24
	34		 movss	 DWORD PTR _v3Cross$[esp+152], xmm3
  006a5	f3 0f 11 44 24
	3c		 movss	 DWORD PTR _v3Cross$[esp+160], xmm0

; 410  : 	v3Up = (m_v2HalfSize.y*m_v2Scale.y) * v3Up;

  006ab	f3 0f 11 74 24
	28		 movss	 DWORD PTR _v3Up$[esp+152], xmm6
  006b1	f3 0f 11 64 24
	2c		 movss	 DWORD PTR _v3Up$[esp+156], xmm4
  006b7	f3 0f 11 7c 24
	30		 movss	 DWORD PTR _v3Up$[esp+160], xmm7

; 411  : 
; 412  : 	if (c_matLocal && m_pParticleProperty->m_bAttachFlag)

  006bd	85 c9		 test	 ecx, ecx
  006bf	0f 84 5e 01 00
	00		 je	 $LN20@Transform
  006c5	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  006c8	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  006cc	0f 84 51 01 00
	00		 je	 $LN20@Transform

; 413  : 	{
; 414  : 		D3DXVECTOR3 v3Position;
; 415  : 		D3DXVec3TransformCoord(&v3Position, &m_v3Position, c_matLocal);

  006d2	51		 push	 ecx
  006d3	57		 push	 edi
  006d4	8d 44 24 48	 lea	 eax, DWORD PTR _v3Position$5[esp+160]
  006d8	50		 push	 eax
  006d9	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  006de	f3 0f 10 64 24
	44		 movss	 xmm4, DWORD PTR _v3Position$5[esp+156]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 419  : 		m_ParticleMesh[3].position = v3Position + v3Up - v3Cross;

  006e4	8d 86 b0 00 00
	00		 lea	 eax, DWORD PTR [esi+176]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  006ea	f3 0f 10 7c 24
	2c		 movss	 xmm7, DWORD PTR _v3Up$[esp+156]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 419  : 		m_ParticleMesh[3].position = v3Position + v3Up - v3Cross;

  006f0	8b d6		 mov	 edx, esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  006f2	f3 0f 10 44 24
	40		 movss	 xmm0, DWORD PTR _v3Position$5[esp+152]
  006f8	f3 0f 10 5c 24
	48		 movss	 xmm3, DWORD PTR _v3Position$5[esp+160]
  006fe	0f 28 e8	 movaps	 xmm5, xmm0
  00701	f3 0f 10 74 24
	30		 movss	 xmm6, DWORD PTR _v3Up$[esp+160]
  00707	f3 0f 11 44 24
	0c		 movss	 DWORD PTR $T1[esp+152], xmm0
  0070d	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR _v3Up$[esp+152]
  00713	f3 0f 11 64 24
	18		 movss	 DWORD PTR $T2[esp+152], xmm4
  00719	f3 0f 5c e8	 subss	 xmm5, xmm0
  0071d	f3 0f 11 44 24
	20		 movss	 DWORD PTR _v3Up$5$[esp+152], xmm0
  00723	f3 0f 5c e7	 subss	 xmm4, xmm7

; 180  :     x = fx;

  00727	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR _v3Cross$[esp+156]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0072d	f3 0f 11 5c 24
	40		 movss	 DWORD PTR $T6[esp+152], xmm3
  00733	f3 0f 5c de	 subss	 xmm3, xmm6

; 180  :     x = fx;

  00737	f3 0f 11 44 24
	10		 movss	 DWORD PTR _v3Cross$6$[esp+152], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0073d	f3 0f 11 7c 24
	14		 movss	 DWORD PTR _v3Up$10$[esp+152], xmm7

; 182  :     z = fz;

  00743	f3 0f 10 7c 24
	34		 movss	 xmm7, DWORD PTR _v3Cross$[esp+152]

; 180  :     x = fx;

  00749	0f 28 d4	 movaps	 xmm2, xmm4
  0074c	f3 0f 58 d0	 addss	 xmm2, xmm0

; 182  :     z = fz;

  00750	f3 0f 11 7c 24
	1c		 movss	 DWORD PTR _v3Cross$3$[esp+152], xmm7

; 181  :     y = fy;

  00756	f3 0f 10 44 24
	3c		 movss	 xmm0, DWORD PTR _v3Cross$[esp+160]
  0075c	0f 28 cb	 movaps	 xmm1, xmm3
  0075f	f3 0f 11 44 24
	08		 movss	 DWORD PTR _v3Cross$8$[esp+152], xmm0
  00765	f3 0f 58 c8	 addss	 xmm1, xmm0

; 182  :     z = fz;

  00769	0f 28 c5	 movaps	 xmm0, xmm5
  0076c	f3 0f 58 c7	 addss	 xmm0, xmm7
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 416  : 		m_ParticleMesh[0].position = v3Position - v3Up + v3Cross;

  00770	f3 0f 11 46 74	 movss	 DWORD PTR [esi+116], xmm0
  00775	f3 0f 11 56 78	 movss	 DWORD PTR [esi+120], xmm2
  0077a	f3 0f 11 4e 7c	 movss	 DWORD PTR [esi+124], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0077f	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR _v3Cross$6$[esp+152]

; 181  :     y = fy;

  00785	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR _v3Cross$8$[esp+152]
  0078b	f3 0f 5c e1	 subss	 xmm4, xmm1

; 182  :     z = fz;

  0078f	f3 0f 5c 6c 24
	1c		 subss	 xmm5, DWORD PTR _v3Cross$3$[esp+152]

; 181  :     y = fy;

  00795	f3 0f 5c d8	 subss	 xmm3, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 417  : 		m_ParticleMesh[1].position = v3Position - v3Up - v3Cross;

  00799	f3 0f 11 ae 88
	00 00 00	 movss	 DWORD PTR [esi+136], xmm5
  007a1	f3 0f 11 a6 8c
	00 00 00	 movss	 DWORD PTR [esi+140], xmm4
  007a9	f3 0f 11 9e 90
	00 00 00	 movss	 DWORD PTR [esi+144], xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007b1	f3 0f 10 54 24
	0c		 movss	 xmm2, DWORD PTR $T1[esp+152]
  007b7	f3 0f 58 54 24
	20		 addss	 xmm2, DWORD PTR _v3Up$5$[esp+152]
  007bd	f3 0f 10 64 24
	18		 movss	 xmm4, DWORD PTR $T2[esp+152]
  007c3	f3 0f 58 64 24
	14		 addss	 xmm4, DWORD PTR _v3Up$10$[esp+152]
  007c9	f3 0f 10 7c 24
	40		 movss	 xmm7, DWORD PTR $T6[esp+152]

; 182  :     z = fz;

  007cf	f3 0f 10 5c 24
	1c		 movss	 xmm3, DWORD PTR _v3Cross$3$[esp+152]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007d5	f3 0f 58 fe	 addss	 xmm7, xmm6
  007d9	f3 0f 11 54 24
	0c		 movss	 DWORD PTR $T1[esp+152], xmm2

; 182  :     z = fz;

  007df	f3 0f 10 74 24
	0c		 movss	 xmm6, DWORD PTR $T1[esp+152]

; 180  :     x = fx;

  007e5	0f 28 d4	 movaps	 xmm2, xmm4
  007e8	f3 0f 58 d1	 addss	 xmm2, xmm1

; 181  :     y = fy;

  007ec	0f 28 cf	 movaps	 xmm1, xmm7
  007ef	f3 0f 58 c8	 addss	 xmm1, xmm0

; 182  :     z = fz;

  007f3	0f 28 c6	 movaps	 xmm0, xmm6
  007f6	f3 0f 58 c3	 addss	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 418  : 		m_ParticleMesh[2].position = v3Position + v3Up + v3Cross;

  007fa	f3 0f 11 86 9c
	00 00 00	 movss	 DWORD PTR [esi+156], xmm0
  00802	f3 0f 11 96 a0
	00 00 00	 movss	 DWORD PTR [esi+160], xmm2
  0080a	f3 0f 11 8e a4
	00 00 00	 movss	 DWORD PTR [esi+164], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00812	f3 0f 5c 7c 24
	08		 subss	 xmm7, DWORD PTR _v3Cross$8$[esp+152]
  00818	f3 0f 5c 64 24
	10		 subss	 xmm4, DWORD PTR _v3Cross$6$[esp+152]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 420  : 	}

  0081e	e9 e4 00 00 00	 jmp	 $LN176@Transform
$LN20@Transform:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00823	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 426  : 		m_ParticleMesh[3].position = m_v3Position + v3Up - v3Cross;

  00828	8d 86 b0 00 00
	00		 lea	 eax, DWORD PTR [esi+176]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0082e	f3 0f 10 1f	 movss	 xmm3, DWORD PTR [edi]
  00832	f3 0f 5c cf	 subss	 xmm1, xmm7
  00836	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 426  : 		m_ParticleMesh[3].position = m_v3Position + v3Up - v3Cross;

  0083b	8b d6		 mov	 edx, esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0083d	f3 0f 10 6c 24
	08		 movss	 xmm5, DWORD PTR tv3087[esp+152]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00843	f3 0f 5c d4	 subss	 xmm2, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00847	f3 0f 58 c8	 addss	 xmm1, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0084b	0f 28 c3	 movaps	 xmm0, xmm3
  0084e	f3 0f 5c c6	 subss	 xmm0, xmm6

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00852	f3 0f 58 d5	 addss	 xmm2, xmm5
  00856	f3 0f 58 44 24
	0c		 addss	 xmm0, DWORD PTR tv3086[esp+152]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 423  : 		m_ParticleMesh[0].position = m_v3Position - v3Up + v3Cross;

  0085c	f3 0f 11 46 74	 movss	 DWORD PTR [esi+116], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00861	0f 28 c3	 movaps	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 423  : 		m_ParticleMesh[0].position = m_v3Position - v3Up + v3Cross;

  00864	f3 0f 11 56 78	 movss	 DWORD PTR [esi+120], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00869	f3 0f 5c c6	 subss	 xmm0, xmm6
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 423  : 		m_ParticleMesh[0].position = m_v3Position - v3Up + v3Cross;

  0086d	f3 0f 11 4e 7c	 movss	 DWORD PTR [esi+124], xmm1

; 424  : 		m_ParticleMesh[1].position = m_v3Position - v3Up - v3Cross;

  00872	f3 0f 58 f3	 addss	 xmm6, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00876	f3 0f 10 56 10	 movss	 xmm2, DWORD PTR [esi+16]
  0087b	f3 0f 10 4e 14	 movss	 xmm1, DWORD PTR [esi+20]
  00880	f3 0f 5c d4	 subss	 xmm2, xmm4
  00884	f3 0f 5c cf	 subss	 xmm1, xmm7
  00888	f3 0f 5c 44 24
	0c		 subss	 xmm0, DWORD PTR tv3086[esp+152]
  0088e	f3 0f 5c d5	 subss	 xmm2, xmm5
  00892	f3 0f 10 6c 24
	40		 movss	 xmm5, DWORD PTR _f$1$[esp+152]
  00898	f3 0f 5c cd	 subss	 xmm1, xmm5
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 424  : 		m_ParticleMesh[1].position = m_v3Position - v3Up - v3Cross;

  0089c	f3 0f 11 86 88
	00 00 00	 movss	 DWORD PTR [esi+136], xmm0
  008a4	f3 0f 11 96 8c
	00 00 00	 movss	 DWORD PTR [esi+140], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  008ac	0f 28 d4	 movaps	 xmm2, xmm4
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 424  : 		m_ParticleMesh[1].position = m_v3Position - v3Up - v3Cross;

  008af	f3 0f 11 8e 90
	00 00 00	 movss	 DWORD PTR [esi+144], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  008b7	0f 28 cf	 movaps	 xmm1, xmm7
  008ba	f3 0f 58 56 10	 addss	 xmm2, DWORD PTR [esi+16]
  008bf	f3 0f 58 4e 14	 addss	 xmm1, DWORD PTR [esi+20]
  008c4	f3 0f 10 5c 24
	0c		 movss	 xmm3, DWORD PTR tv3086[esp+152]
  008ca	0f 28 c3	 movaps	 xmm0, xmm3
  008cd	f3 0f 58 c6	 addss	 xmm0, xmm6
  008d1	f3 0f 58 54 24
	08		 addss	 xmm2, DWORD PTR tv3087[esp+152]
  008d7	f3 0f 58 cd	 addss	 xmm1, xmm5
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 425  : 		m_ParticleMesh[2].position = m_v3Position + v3Up + v3Cross;

  008db	f3 0f 11 86 9c
	00 00 00	 movss	 DWORD PTR [esi+156], xmm0
  008e3	f3 0f 11 96 a0
	00 00 00	 movss	 DWORD PTR [esi+160], xmm2
  008eb	f3 0f 11 8e a4
	00 00 00	 movss	 DWORD PTR [esi+164], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  008f3	f3 0f 58 7e 14	 addss	 xmm7, DWORD PTR [esi+20]
  008f8	f3 0f 58 66 10	 addss	 xmm4, DWORD PTR [esi+16]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  008fd	f3 0f 5c fd	 subss	 xmm7, xmm5
  00901	f3 0f 5c 64 24
	08		 subss	 xmm4, DWORD PTR tv3087[esp+152]
$LN176@Transform:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 428  : }

  00907	89 44 24 1c	 mov	 DWORD PTR $T3[esp+152], eax
  0090b	f3 0f 5c f3	 subss	 xmm6, xmm3
  0090f	b8 b0 00 00 00	 mov	 eax, 176		; 000000b0H
  00914	bf b4 00 00 00	 mov	 edi, 180		; 000000b4H
  00919	b9 08 00 00 00	 mov	 ecx, 8
  0091e	f3 0f 11 34 06	 movss	 DWORD PTR [esi+eax], xmm6
  00923	f3 0f 11 24 3a	 movss	 DWORD PTR [edx+edi], xmm4
  00928	8b 44 24 1c	 mov	 eax, DWORD PTR $T3[esp+152]
  0092c	5f		 pop	 edi
  0092d	5e		 pop	 esi
  0092e	f3 0f 11 3c 01	 movss	 DWORD PTR [ecx+eax], xmm7
  00933	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+144]
  0093a	33 cc		 xor	 ecx, esp
  0093c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00941	8b e5		 mov	 esp, ebp
  00943	5d		 pop	 ebp
  00944	c2 08 00	 ret	 8
  00947	90		 npad	 1
$LN168@Transform:
  00948	00 00 00 00	 DD	 $LN12@Transform
  0094c	00 00 00 00	 DD	 $LN7@Transform
  00950	00 00 00 00	 DD	 $LN6@Transform
  00954	00 00 00 00	 DD	 $LN7@Transform
  00958	00 00 00 00	 DD	 $LN7@Transform
?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z ENDP ; CParticleInstance::Transform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
tv3071 = -112						; size = 4
_v3Up$7$ = -112						; size = 4
_v3Up$14$ = -112					; size = 4
_v3Cross$6$ = -112					; size = 4
tv3070 = -108						; size = 4
_v3Up$2$ = -108						; size = 4
_v3Cross$2$ = -108					; size = 4
$T1 = -108						; size = 4
tv2967 = -104						; size = 4
_v3Up$4$ = -104						; size = 4
_v3Up$12$ = -104					; size = 4
_v3Cross$5$ = -104					; size = 4
_v3Cross$9$ = -104					; size = 4
$T2 = -100						; size = 4
_c_matLocal$GSCopy$1$ = -100				; size = 4
_v3Cross$3$ = -100					; size = 4
_v3Up$5$ = -96						; size = 4
_v3Cross$8$ = -96					; size = 4
_length$1$ = -96					; size = 4
_v3Up$10$ = -92						; size = 4
$T3 = -88						; size = 4
_q$4 = -80						; size = 16
_qc$5 = -64						; size = 16
_v3Up$ = -48						; size = 12
_v3Cross$ = -36						; size = 12
_qr$6 = -24						; size = 16
_qr$7 = -24						; size = 16
_v3Position$8 = -24					; size = 12
tv3214 = -24						; size = 8
$T9 = -24						; size = 4
__$ArrayPad$ = -4					; size = 4
_c_matLocal$ = 8					; size = 4
?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z PROC ; CParticleInstance::Transform, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 70	 sub	 esp, 112		; 00000070H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 6c	 mov	 DWORD PTR __$ArrayPad$[esp+112], eax
  00014	8b 45 08	 mov	 eax, DWORD PTR _c_matLocal$[ebp]
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	89 44 24 10	 mov	 DWORD PTR _c_matLocal$GSCopy$1$[esp+116], eax

; 126  : #ifdef WORLD_EDITOR
; 127  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, m_Color);
; 128  : #else
; 129  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, m_dcColor);

  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00024	57		 push	 edi
  00025	ff 76 44	 push	 DWORD PTR [esi+68]
  00028	6a 3c		 push	 60			; 0000003cH
  0002a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 130  : #endif
; 131  : 
; 132  : 	/////
; 133  : 
; 134  : 	D3DXVECTOR3 v3Up;
; 135  : 	D3DXVECTOR3 v3Cross;
; 136  : 
; 137  : 	if (!m_pParticleProperty->m_bStretchFlag)

  0002f	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00032	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00036	0f 85 1d 04 00
	00		 jne	 $LN4@Transform

; 138  : 	{
; 139  : 		CCamera * pCurrentCamera = CCameraManager::Instance().GetCurrentCamera();

  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00042	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 140  : 		const D3DXVECTOR3 & c_rv3Up = pCurrentCamera->GetUp();
; 141  : 		const D3DXVECTOR3 & c_rv3Cross = pCurrentCamera->GetCross();
; 142  : 
; 143  : 		D3DXVECTOR3 v3Rotation;
; 144  : 
; 145  : 		switch(m_pParticleProperty->m_byBillboardType) {

  00047	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  0004a	8b f8		 mov	 edi, eax
  0004c	0f b6 49 13	 movzx	 ecx, BYTE PTR [ecx+19]
  00050	49		 dec	 ecx
  00051	83 f9 04	 cmp	 ecx, 4
  00054	0f 87 40 02 00
	00		 ja	 $LN12@Transform
  0005a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN167@Transform[ecx*4]
$LN6@Transform:

; 146  : 		case BILLBOARD_TYPE_LIE:
; 147  : 			{
; 148  : 				float fCos = cosf(D3DXToRadian(m_fRotation)), fSin = sinf(D3DXToRadian(m_fRotation));

  00061	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
  00066	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  0006e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00071	f2 0f 11 44 24
	60		 movsd	 QWORD PTR tv3214[esp+120], xmm0
  00077	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0007c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00080	f3 0f 11 44 24
	10		 movss	 DWORD PTR _v3Up$4$[esp+120], xmm0

; 798  :             return (float)sin(_X);

  00086	f2 0f 10 44 24
	60		 movsd	 xmm0, QWORD PTR tv3214[esp+120]
  0008c	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 153  : 				v3Cross.y = fCos;

  00091	f3 0f 10 64 24
	10		 movss	 xmm4, DWORD PTR _v3Up$4$[esp+120]

; 229  : 	}

  00097	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  0009a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0009e	0f 57 d2	 xorps	 xmm2, xmm2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 153  : 				v3Cross.y = fCos;

  000a1	0f 28 cc	 movaps	 xmm1, xmm4
  000a4	0f 28 d8	 movaps	 xmm3, xmm0
  000a7	0f 57 ed	 xorps	 xmm5, xmm5
  000aa	0f 57 1d 00 00
	00 00		 xorps	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000

; 229  : 	}

  000b1	e9 6d 05 00 00	 jmp	 $LN5@Transform
$LN7@Transform:

; 154  : 				v3Cross.z = 0;
; 155  : 			}
; 156  : 			break;
; 157  : 		case BILLBOARD_TYPE_2FACE:
; 158  : 		case BILLBOARD_TYPE_3FACE:
; 159  : 			// using setting with y, and local rotation at render
; 160  : 		case BILLBOARD_TYPE_Y:
; 161  : 		{
; 162  : 			v3Up = D3DXVECTOR3(0.0f, 0.0f, 1.0f);

  000b6	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@3f800000
  000be	0f 57 ed	 xorps	 xmm5, xmm5
  000c1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR _v3Up$[esp+120], 0
  000c9	0f 57 f6	 xorps	 xmm6, xmm6
  000cc	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR _v3Up$[esp+124], 0
  000d4	c7 44 24 50 00
	00 80 3f	 mov	 DWORD PTR _v3Up$[esp+128], 1065353216 ; 3f800000H

; 163  : 			//v3Up = D3DXVECTOR3(cosf(D3DXToRadian(m_fRotation)),0.0f,-sinf(D3DXToRadian(m_fRotation)));
; 164  : 			const D3DXVECTOR3& c_rv3View = pCurrentCamera->GetView();
; 165  : 			if (v3Up.x * c_rv3View.y - v3Up.y * c_rv3View.x < 0)

  000dc	f3 0f 10 4f 58	 movss	 xmm1, DWORD PTR [edi+88]
  000e1	f3 0f 10 47 54	 movss	 xmm0, DWORD PTR [edi+84]
  000e6	f3 0f 59 cd	 mulss	 xmm1, xmm5
  000ea	f3 0f 59 c5	 mulss	 xmm0, xmm5
  000ee	f3 0f 5c c8	 subss	 xmm1, xmm0
  000f2	0f 2f e9	 comiss	 xmm5, xmm1
  000f5	76 28		 jbe	 SHORT $LN10@Transform
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  000f7	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@80000000

; 224  :     z *= f;

  000ff	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@bf800000
  00107	c7 44 24 48 00
	00 00 80	 mov	 DWORD PTR _v3Up$[esp+120], -2147483648 ; 80000000H
  0010f	c7 44 24 4c 00
	00 00 80	 mov	 DWORD PTR _v3Up$[esp+124], -2147483648 ; 80000000H
  00117	c7 44 24 50 00
	00 80 bf	 mov	 DWORD PTR _v3Up$[esp+128], -1082130432 ; bf800000H
$LN10@Transform:

; 181  :     y = fy;

  0011f	f3 0f 10 5f 58	 movss	 xmm3, DWORD PTR [edi+88]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 169  : 			D3DXVec3Normalize(&v3Cross, &v3Cross);

  00124	8d 44 24 54	 lea	 eax, DWORD PTR _v3Cross$[esp+120]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00128	f3 0f 10 67 54	 movss	 xmm4, DWORD PTR [edi+84]

; 182  :     z = fz;

  0012d	0f 28 d6	 movaps	 xmm2, xmm6

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00130	0f 28 cb	 movaps	 xmm1, xmm3

; 182  :     z = fz;

  00133	f3 0f 59 d5	 mulss	 xmm2, xmm5
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 169  : 			D3DXVec3Normalize(&v3Cross, &v3Cross);

  00137	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00138	f3 0f 59 cf	 mulss	 xmm1, xmm7
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 169  : 			D3DXVec3Normalize(&v3Cross, &v3Cross);

  0013c	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0013d	0f 28 c2	 movaps	 xmm0, xmm2

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00140	f3 0f 59 de	 mulss	 xmm3, xmm6
  00144	f3 0f 5c c1	 subss	 xmm0, xmm1

; 1281 :     *pOut = v;

  00148	f3 0f 11 44 24
	5c		 movss	 DWORD PTR _v3Cross$[esp+128], xmm0
  0014e	0f 28 c4	 movaps	 xmm0, xmm4
  00151	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00155	f3 0f 59 e6	 mulss	 xmm4, xmm6
  00159	f3 0f 5c c2	 subss	 xmm0, xmm2
  0015d	f3 0f 5c dc	 subss	 xmm3, xmm4
  00161	f3 0f 11 44 24
	60		 movss	 DWORD PTR _v3Cross$[esp+132], xmm0
  00167	f3 0f 11 5c 24
	64		 movss	 DWORD PTR _v3Cross$[esp+136], xmm3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 169  : 			D3DXVec3Normalize(&v3Cross, &v3Cross);

  0016d	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 170  : 
; 171  : 			if (m_fRotation)

  00172	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
  00177	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0017e	9f		 lahf
  0017f	f6 c4 44	 test	 ah, 68			; 00000044H
  00182	0f 8b fb 00 00
	00		 jnp	 $LN168@Transform

; 173  : 				float fCos = -sinf(D3DXToRadian(m_fRotation)); // + 90

  00188	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00190	f3 0f 11 44 24
	10		 movss	 DWORD PTR tv2967[esp+120], xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  00196	0f 5a c0	 cvtps2pd xmm0, xmm0
  00199	e8 00 00 00 00	 call	 __libm_sse2_sin_precise

; 692  :             return (float)cos(_X);

  0019e	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR tv2967[esp+120]

; 798  :             return (float)sin(_X);

  001a4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 173  : 				float fCos = -sinf(D3DXToRadian(m_fRotation)); // + 90

  001a8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001af	f3 0f 11 44 24
	08		 movss	 DWORD PTR _v3Up$14$[esp+120], xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  001b5	0f 5a c1	 cvtps2pd xmm0, xmm1
  001b8	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001bd	f3 0f 10 5c 24
	08		 movss	 xmm3, DWORD PTR _v3Up$14$[esp+120]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 229  : 	}

  001c3	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001c6	f3 0f 59 5c 24
	54		 mulss	 xmm3, DWORD PTR _v3Cross$[esp+120]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  001cc	0f 57 e4	 xorps	 xmm4, xmm4
  001cf	f2 0f 5a e0	 cvtsd2ss xmm4, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001d3	f3 0f 11 5c 24
	0c		 movss	 DWORD PTR _v3Cross$2$[esp+120], xmm3
  001d9	0f 28 c4	 movaps	 xmm0, xmm4
  001dc	f3 0f 10 54 24
	08		 movss	 xmm2, DWORD PTR _v3Up$14$[esp+120]
  001e2	f3 0f 59 44 24
	48		 mulss	 xmm0, DWORD PTR _v3Up$[esp+120]
  001e8	0f 28 ec	 movaps	 xmm5, xmm4
  001eb	f3 0f 59 6c 24
	54		 mulss	 xmm5, DWORD PTR _v3Cross$[esp+120]
  001f1	0f 28 f4	 movaps	 xmm6, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001f4	f3 0f 58 d8	 addss	 xmm3, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001f8	f3 0f 59 74 24
	58		 mulss	 xmm6, DWORD PTR _v3Cross$[esp+124]
  001fe	0f 28 c4	 movaps	 xmm0, xmm4
  00201	0f 28 fc	 movaps	 xmm7, xmm4
  00204	f3 0f 59 44 24
	4c		 mulss	 xmm0, DWORD PTR _v3Up$[esp+124]
  0020a	f3 0f 59 64 24
	50		 mulss	 xmm4, DWORD PTR _v3Up$[esp+128]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00210	f3 0f 11 5c 24
	0c		 movss	 DWORD PTR _v3Cross$2$[esp+120], xmm3

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00216	f3 0f 10 5c 24
	08		 movss	 xmm3, DWORD PTR _v3Up$14$[esp+120]
  0021c	f3 0f 59 5c 24
	58		 mulss	 xmm3, DWORD PTR _v3Cross$[esp+124]
  00222	f3 0f 59 7c 24
	5c		 mulss	 xmm7, DWORD PTR _v3Cross$[esp+128]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00228	f3 0f 58 d8	 addss	 xmm3, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 185  : 		break;

  0022c	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR _v3Cross$2$[esp+120]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00232	f3 0f 11 5c 24
	10		 movss	 DWORD PTR _v3Cross$5$[esp+120], xmm3

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00238	f3 0f 10 5c 24
	08		 movss	 xmm3, DWORD PTR _v3Up$14$[esp+120]
  0023e	f3 0f 59 5c 24
	5c		 mulss	 xmm3, DWORD PTR _v3Cross$[esp+128]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 185  : 		break;

  00244	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR _v3Cross$5$[esp+120]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0024a	f3 0f 58 dc	 addss	 xmm3, xmm4

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0024e	0f 28 e2	 movaps	 xmm4, xmm2
  00251	f3 0f 59 64 24
	48		 mulss	 xmm4, DWORD PTR _v3Up$[esp+120]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00257	f3 0f 11 5c 24
	18		 movss	 DWORD PTR _v3Cross$8$[esp+120], xmm3

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0025d	f3 0f 5c e5	 subss	 xmm4, xmm5
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 185  : 		break;

  00261	f3 0f 10 6c 24
	18		 movss	 xmm5, DWORD PTR _v3Cross$8$[esp+120]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00267	0f 28 da	 movaps	 xmm3, xmm2
  0026a	f3 0f 59 5c 24
	4c		 mulss	 xmm3, DWORD PTR _v3Up$[esp+124]
  00270	f3 0f 59 54 24
	50		 mulss	 xmm2, DWORD PTR _v3Up$[esp+128]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00276	f3 0f 5c de	 subss	 xmm3, xmm6
  0027a	f3 0f 5c d7	 subss	 xmm2, xmm7
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 229  : 	}

  0027e	e9 a0 03 00 00	 jmp	 $LN5@Transform
$LN168@Transform:

; 170  : 
; 171  : 			if (m_fRotation)

  00283	f3 0f 10 6c 24
	5c		 movss	 xmm5, DWORD PTR _v3Cross$[esp+128]
  00289	f3 0f 10 4c 24
	58		 movss	 xmm1, DWORD PTR _v3Cross$[esp+124]
  0028f	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR _v3Cross$[esp+120]
  00295	e9 a5 01 00 00	 jmp	 $LN171@Transform
$LN12@Transform:

; 186  : 		case BILLBOARD_TYPE_ALL:
; 187  : 		default:
; 188  : 			{
; 189  : 				if (m_fRotation==0.0f)

  0029a	f3 0f 10 4e 40	 movss	 xmm1, DWORD PTR [esi+64]
  0029f	0f 57 c0	 xorps	 xmm0, xmm0
  002a2	0f 2e c8	 ucomiss xmm1, xmm0
  002a5	9f		 lahf
  002a6	f6 c4 44	 test	 ah, 68			; 00000044H
  002a9	7a 5e		 jp	 SHORT $LN14@Transform
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  002ab	f3 0f 10 5f 64	 movss	 xmm3, DWORD PTR [edi+100]
  002b0	f3 0f 10 57 68	 movss	 xmm2, DWORD PTR [edi+104]
  002b5	f3 0f 10 67 60	 movss	 xmm4, DWORD PTR [edi+96]
  002ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002c2	0f 57 d8	 xorps	 xmm3, xmm0
  002c5	0f 57 d0	 xorps	 xmm2, xmm0
  002c8	0f 57 e0	 xorps	 xmm4, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 191  : 					v3Up = -c_rv3Cross;

  002cb	f3 0f 11 5c 24
	4c		 movss	 DWORD PTR _v3Up$[esp+124], xmm3
  002d1	f3 0f 11 64 24
	48		 movss	 DWORD PTR _v3Up$[esp+120], xmm4
  002d7	f3 0f 11 54 24
	50		 movss	 DWORD PTR _v3Up$[esp+128], xmm2

; 192  : 					v3Cross = c_rv3Up;

  002dd	f3 0f 7e 47 48	 movq	 xmm0, QWORD PTR [edi+72]
  002e2	66 0f d6 44 24
	54		 movq	 QWORD PTR _v3Cross$[esp+120], xmm0
  002e8	8b 47 50	 mov	 eax, DWORD PTR [edi+80]

; 229  : 	}

  002eb	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  002ee	f3 0f 10 4c 24
	58		 movss	 xmm1, DWORD PTR _v3Cross$[esp+124]
  002f4	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR _v3Cross$[esp+120]
  002fa	89 44 24 5c	 mov	 DWORD PTR _v3Cross$[esp+128], eax
  002fe	f3 0f 10 6c 24
	5c		 movss	 xmm5, DWORD PTR _v3Cross$[esp+128]
  00304	e9 1a 03 00 00	 jmp	 $LN5@Transform
$LN14@Transform:

; 193  : 				}
; 194  : 				else
; 195  : 				{
; 196  : 					const D3DXVECTOR3 & c_rv3View = pCurrentCamera->GetView();
; 197  : 					D3DXQUATERNION q,qc;
; 198  : 					D3DXQuaternionRotationAxis(&q, &c_rv3View, D3DXToRadian(m_fRotation));

  00309	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3c8efa35
  00311	8d 47 54	 lea	 eax, DWORD PTR [edi+84]
  00314	51		 push	 ecx
  00315	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0031a	50		 push	 eax
  0031b	8d 44 24 30	 lea	 eax, DWORD PTR _q$4[esp+128]
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1616 :     pOut->x = -pQ->x;

  00325	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 203  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  0032d	8d 44 24 60	 lea	 eax, DWORD PTR _qr$6[esp+120]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1616 :     pOut->x = -pQ->x;

  00331	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR _q$4[esp+120]
  00337	0f 57 c1	 xorps	 xmm0, xmm1

; 670  :     w = fw;

  0033a	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR _qr$6[esp+132], 0

; 1616 :     pOut->x = -pQ->x;

  00342	f3 0f 11 44 24
	38		 movss	 DWORD PTR _qc$5[esp+120], xmm0

; 1617 :     pOut->y = -pQ->y;

  00348	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR _q$4[esp+124]
  0034e	0f 57 c1	 xorps	 xmm0, xmm1
  00351	f3 0f 11 44 24
	3c		 movss	 DWORD PTR _qc$5[esp+124], xmm0

; 1618 :     pOut->z = -pQ->z;

  00357	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR _q$4[esp+128]
  0035d	0f 57 c1	 xorps	 xmm0, xmm1
  00360	f3 0f 11 44 24
	40		 movss	 DWORD PTR _qc$5[esp+128], xmm0

; 1619 :     pOut->w =  pQ->w;

  00366	f3 0f 10 44 24
	34		 movss	 xmm0, DWORD PTR _q$4[esp+132]
  0036c	f3 0f 11 44 24
	44		 movss	 DWORD PTR _qc$5[esp+132], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 202  : 						D3DXQUATERNION qr(-c_rv3Cross.x, -c_rv3Cross.y, -c_rv3Cross.z, 0);

  00372	f3 0f 10 47 60	 movss	 xmm0, DWORD PTR [edi+96]
  00377	0f 57 c1	 xorps	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 667  :     x = fx;

  0037a	f3 0f 11 44 24
	60		 movss	 DWORD PTR _qr$6[esp+120], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 202  : 						D3DXQUATERNION qr(-c_rv3Cross.x, -c_rv3Cross.y, -c_rv3Cross.z, 0);

  00380	f3 0f 10 47 64	 movss	 xmm0, DWORD PTR [edi+100]

; 203  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  00385	50		 push	 eax
  00386	0f 57 c1	 xorps	 xmm0, xmm1
  00389	8d 44 24 3c	 lea	 eax, DWORD PTR _qc$5[esp+124]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 668  :     y = fy;

  0038d	f3 0f 11 44 24
	68		 movss	 DWORD PTR _qr$6[esp+128], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 202  : 						D3DXQUATERNION qr(-c_rv3Cross.x, -c_rv3Cross.y, -c_rv3Cross.z, 0);

  00393	f3 0f 10 47 68	 movss	 xmm0, DWORD PTR [edi+104]

; 203  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  00398	50		 push	 eax
  00399	8d 44 24 68	 lea	 eax, DWORD PTR _qr$6[esp+128]
  0039d	0f 57 c1	 xorps	 xmm0, xmm1
  003a0	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 669  :     z = fz;

  003a1	f3 0f 11 44 24
	74		 movss	 DWORD PTR _qr$6[esp+140], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 203  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  003a7	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 204  : 						D3DXQuaternionMultiply(&qr,&qr,&q);

  003ac	8d 44 24 28	 lea	 eax, DWORD PTR _q$4[esp+120]
  003b0	50		 push	 eax
  003b1	8d 44 24 64	 lea	 eax, DWORD PTR _qr$6[esp+124]
  003b5	50		 push	 eax
  003b6	50		 push	 eax
  003b7	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 205  : 						v3Up.x = qr.x;

  003bc	f3 0f 10 44 24
	60		 movss	 xmm0, DWORD PTR _qr$6[esp+120]

; 211  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  003c2	8d 44 24 60	 lea	 eax, DWORD PTR _qr$7[esp+120]
  003c6	f3 0f 11 44 24
	48		 movss	 DWORD PTR _v3Up$[esp+120], xmm0
  003cc	f3 0f 10 44 24
	64		 movss	 xmm0, DWORD PTR _qr$6[esp+124]
  003d2	f3 0f 11 44 24
	4c		 movss	 DWORD PTR _v3Up$[esp+124], xmm0
  003d8	f3 0f 10 44 24
	68		 movss	 xmm0, DWORD PTR _qr$6[esp+128]
  003de	f3 0f 11 44 24
	50		 movss	 DWORD PTR _v3Up$[esp+128], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 667  :     x = fx;

  003e4	f3 0f 10 47 48	 movss	 xmm0, DWORD PTR [edi+72]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 211  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  003e9	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 667  :     x = fx;

  003ea	f3 0f 11 44 24
	64		 movss	 DWORD PTR _qr$7[esp+124], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 211  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  003f0	8d 44 24 3c	 lea	 eax, DWORD PTR _qc$5[esp+124]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 668  :     y = fy;

  003f4	f3 0f 10 47 4c	 movss	 xmm0, DWORD PTR [edi+76]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 211  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  003f9	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 668  :     y = fy;

  003fa	f3 0f 11 44 24
	6c		 movss	 DWORD PTR _qr$7[esp+132], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 211  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  00400	8d 44 24 68	 lea	 eax, DWORD PTR _qr$7[esp+128]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 669  :     z = fz;

  00404	f3 0f 10 47 50	 movss	 xmm0, DWORD PTR [edi+80]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 211  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  00409	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 669  :     z = fz;

  0040a	f3 0f 11 44 24
	74		 movss	 DWORD PTR _qr$7[esp+140], xmm0

; 670  :     w = fw;

  00410	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR _qr$7[esp+144], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 211  : 						D3DXQuaternionMultiply(&qr,&qc,&qr);

  00418	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 212  : 						D3DXQuaternionMultiply(&qr,&qr,&q);

  0041d	8d 44 24 28	 lea	 eax, DWORD PTR _q$4[esp+120]
  00421	50		 push	 eax
  00422	8d 44 24 64	 lea	 eax, DWORD PTR _qr$7[esp+124]
  00426	50		 push	 eax
  00427	50		 push	 eax
  00428	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 213  : 						v3Cross.x = qr.x;

  0042d	f3 0f 10 44 24
	60		 movss	 xmm0, DWORD PTR _qr$7[esp+120]

; 214  : 						v3Cross.y = qr.y;

  00433	f3 0f 10 4c 24
	64		 movss	 xmm1, DWORD PTR _qr$7[esp+124]

; 215  : 						v3Cross.z = qr.z;

  00439	f3 0f 10 6c 24
	68		 movss	 xmm5, DWORD PTR _qr$7[esp+128]
$LN171@Transform:

; 229  : 	}

  0043f	f3 0f 10 64 24
	48		 movss	 xmm4, DWORD PTR _v3Up$[esp+120]
  00445	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
  00448	f3 0f 10 5c 24
	4c		 movss	 xmm3, DWORD PTR _v3Up$[esp+124]
  0044e	f3 0f 10 54 24
	50		 movss	 xmm2, DWORD PTR _v3Up$[esp+128]
  00454	e9 ca 01 00 00	 jmp	 $LN5@Transform
$LN4@Transform:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00459	f3 0f 10 56 0c	 movss	 xmm2, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 232  : 		v3Up = m_v3Position - m_v3LastPosition;

  0045e	8d 7e 0c	 lea	 edi, DWORD PTR [esi+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00461	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00466	f3 0f 10 5f 08	 movss	 xmm3, DWORD PTR [edi+8]
  0046b	f3 0f 5c 56 18	 subss	 xmm2, DWORD PTR [esi+24]
  00470	f3 0f 5c 46 1c	 subss	 xmm0, DWORD PTR [esi+28]
  00475	f3 0f 5c 5e 20	 subss	 xmm3, DWORD PTR [esi+32]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 234  : 		if (c_matLocal)

  0047a	8b 44 24 14	 mov	 eax, DWORD PTR _c_matLocal$GSCopy$1$[esp+120]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0047e	f3 0f 11 54 24
	0c		 movss	 DWORD PTR _v3Up$2$[esp+120], xmm2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 232  : 		v3Up = m_v3Position - m_v3LastPosition;

  00484	f3 0f 11 54 24
	48		 movss	 DWORD PTR _v3Up$[esp+120], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0048a	f3 0f 11 44 24
	08		 movss	 DWORD PTR _v3Up$7$[esp+120], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 232  : 		v3Up = m_v3Position - m_v3LastPosition;

  00490	f3 0f 11 44 24
	4c		 movss	 DWORD PTR _v3Up$[esp+124], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00496	f3 0f 11 5c 24
	10		 movss	 DWORD PTR _v3Up$12$[esp+120], xmm3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 232  : 		v3Up = m_v3Position - m_v3LastPosition;

  0049c	f3 0f 11 5c 24
	50		 movss	 DWORD PTR _v3Up$[esp+128], xmm3

; 234  : 		if (c_matLocal)

  004a2	85 c0		 test	 eax, eax
  004a4	74 30		 je	 SHORT $LN16@Transform

; 235  : 		{
; 236  : 			//if (!m_pParticleProperty->m_bAttachFlag)
; 237  : 				D3DXVec3TransformNormal(&v3Up, &v3Up, c_matLocal);

  004a6	50		 push	 eax
  004a7	8d 44 24 4c	 lea	 eax, DWORD PTR _v3Up$[esp+124]
  004ab	50		 push	 eax
  004ac	50		 push	 eax
  004ad	e8 00 00 00 00	 call	 _D3DXVec3TransformNormal@12
  004b2	f3 0f 10 5c 24
	50		 movss	 xmm3, DWORD PTR _v3Up$[esp+128]
  004b8	f3 0f 10 44 24
	4c		 movss	 xmm0, DWORD PTR _v3Up$[esp+124]
  004be	f3 0f 10 54 24
	48		 movss	 xmm2, DWORD PTR _v3Up$[esp+120]
  004c4	f3 0f 11 5c 24
	10		 movss	 DWORD PTR _v3Up$12$[esp+120], xmm3
  004ca	f3 0f 11 44 24
	08		 movss	 DWORD PTR _v3Up$7$[esp+120], xmm0
  004d0	f3 0f 11 54 24
	0c		 movss	 DWORD PTR _v3Up$2$[esp+120], xmm2
$LN16@Transform:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  004d6	0f 28 c8	 movaps	 xmm1, xmm0
  004d9	f3 0f 59 c8	 mulss	 xmm1, xmm0
  004dd	0f 28 c2	 movaps	 xmm0, xmm2
  004e0	f3 0f 59 c2	 mulss	 xmm0, xmm2
  004e4	f3 0f 58 c8	 addss	 xmm1, xmm0
  004e8	0f 28 c3	 movaps	 xmm0, xmm3
  004eb	f3 0f 59 c3	 mulss	 xmm0, xmm3
  004ef	f3 0f 58 c8	 addss	 xmm1, xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  004f3	0f 5a c1	 cvtps2pd xmm0, xmm1
  004f6	0f 57 c9	 xorps	 xmm1, xmm1
  004f9	66 0f 2e c8	 ucomisd xmm1, xmm0
  004fd	77 06		 ja	 SHORT $LN169@Transform
  004ff	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00503	eb 05		 jmp	 SHORT $LN170@Transform
$LN169@Transform:
  00505	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN170@Transform:
  0050a	0f 57 c9	 xorps	 xmm1, xmm1
  0050d	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  00511	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 241  : 		if (length == 0.0f)

  00514	0f 2e c8	 ucomiss xmm1, xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00517	f3 0f 11 4c 24
	18		 movss	 DWORD PTR _length$1$[esp+120], xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 241  : 		if (length == 0.0f)

  0051d	9f		 lahf
  0051e	f6 c4 44	 test	 ah, 68			; 00000044H
  00521	7a 1a		 jp	 SHORT $LN17@Transform

; 242  : 		{
; 243  : 			v3Up = D3DXVECTOR3(0.0f,0.0f,1.0f);

  00523	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR _v3Up$[esp+120], 0
  0052b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR _v3Up$[esp+124], 0
  00533	c7 44 24 50 00
	00 80 3f	 mov	 DWORD PTR _v3Up$[esp+128], 1065353216 ; 3f800000H

; 244  : 		}

  0053b	eb 52		 jmp	 SHORT $LN18@Transform
$LN17@Transform:

; 246  : 			v3Up *=(1+log(1+length))/length;

  0053d	0f 28 c1	 movaps	 xmm0, xmm1
  00540	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 780  :             return (float)log(_X);

  00548	0f 5a c0	 cvtps2pd xmm0, xmm0
  0054b	e8 00 00 00 00	 call	 __libm_sse2_log_precise
  00550	0f 57 c9	 xorps	 xmm1, xmm1
  00553	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 246  : 			v3Up *=(1+log(1+length))/length;

  00557	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  0055f	f3 0f 5e 4c 24
	18		 divss	 xmm1, DWORD PTR _length$1$[esp+120]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  00565	0f 28 c1	 movaps	 xmm0, xmm1
  00568	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _v3Up$2$[esp+120]
  0056e	f3 0f 11 44 24
	48		 movss	 DWORD PTR _v3Up$[esp+120], xmm0

; 223  :     y *= f;

  00574	0f 28 c1	 movaps	 xmm0, xmm1
  00577	f3 0f 59 44 24
	08		 mulss	 xmm0, DWORD PTR _v3Up$7$[esp+120]

; 224  :     z *= f;

  0057d	f3 0f 59 4c 24
	10		 mulss	 xmm1, DWORD PTR _v3Up$12$[esp+120]
  00583	f3 0f 11 44 24
	4c		 movss	 DWORD PTR _v3Up$[esp+124], xmm0
  00589	f3 0f 11 4c 24
	50		 movss	 DWORD PTR _v3Up$[esp+128], xmm1
$LN18@Transform:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 248  : 		CCamera * pCurrentCamera = CCameraManager::Instance().GetCurrentCamera();

  0058f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00595	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0059a	f3 0f 10 60 5c	 movss	 xmm4, DWORD PTR [eax+92]
  0059f	f3 0f 10 70 58	 movss	 xmm6, DWORD PTR [eax+88]
  005a4	0f 28 d4	 movaps	 xmm2, xmm4
  005a7	f3 0f 59 54 24
	4c		 mulss	 xmm2, DWORD PTR _v3Up$[esp+124]
  005ad	0f 28 c6	 movaps	 xmm0, xmm6
  005b0	f3 0f 59 44 24
	50		 mulss	 xmm0, DWORD PTR _v3Up$[esp+128]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  005b6	f3 0f 10 68 54	 movss	 xmm5, DWORD PTR [eax+84]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 251  : 		D3DXVec3Normalize(&v3Cross, &v3Cross);

  005bb	8d 44 24 54	 lea	 eax, DWORD PTR _v3Cross$[esp+120]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  005bf	f3 0f 59 64 24
	48		 mulss	 xmm4, DWORD PTR _v3Up$[esp+120]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 251  : 		D3DXVec3Normalize(&v3Cross, &v3Cross);

  005c5	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  005c6	f3 0f 59 74 24
	4c		 mulss	 xmm6, DWORD PTR _v3Up$[esp+124]
  005cc	f3 0f 5c d0	 subss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 251  : 		D3DXVec3Normalize(&v3Cross, &v3Cross);

  005d0	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1281 :     *pOut = v;

  005d1	f3 0f 11 54 24
	5c		 movss	 DWORD PTR _v3Cross$[esp+128], xmm2
  005d7	0f 28 d5	 movaps	 xmm2, xmm5
  005da	f3 0f 59 54 24
	58		 mulss	 xmm2, DWORD PTR _v3Up$[esp+136]
  005e0	f3 0f 59 6c 24
	54		 mulss	 xmm5, DWORD PTR _v3Up$[esp+132]
  005e6	f3 0f 5c d4	 subss	 xmm2, xmm4
  005ea	f3 0f 5c f5	 subss	 xmm6, xmm5
  005ee	f3 0f 11 54 24
	60		 movss	 DWORD PTR _v3Cross$[esp+132], xmm2
  005f4	f3 0f 11 74 24
	64		 movss	 DWORD PTR _v3Cross$[esp+136], xmm6
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 251  : 		D3DXVec3Normalize(&v3Cross, &v3Cross);

  005fa	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
  005ff	f3 0f 10 54 24
	50		 movss	 xmm2, DWORD PTR _v3Up$[esp+128]
  00605	f3 0f 10 5c 24
	4c		 movss	 xmm3, DWORD PTR _v3Up$[esp+124]
  0060b	f3 0f 10 64 24
	48		 movss	 xmm4, DWORD PTR _v3Up$[esp+120]
  00611	f3 0f 10 6c 24
	5c		 movss	 xmm5, DWORD PTR _v3Cross$[esp+128]
  00617	f3 0f 10 4c 24
	58		 movss	 xmm1, DWORD PTR _v3Cross$[esp+124]
  0061d	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR _v3Cross$[esp+120]
$LN5@Transform:

; 255  : 	v3Cross = -(m_v2HalfSize.x*m_v2Scale.x) * v3Cross;

  00623	f3 0f 10 7e 38	 movss	 xmm7, DWORD PTR [esi+56]
  00628	f3 0f 59 7e 30	 mulss	 xmm7, DWORD PTR [esi+48]

; 257  : 
; 258  : 	if (c_matLocal && m_pParticleProperty->m_bAttachFlag)

  0062d	8b 4c 24 14	 mov	 ecx, DWORD PTR _c_matLocal$GSCopy$1$[esp+120]
  00631	0f 57 3d 00 00
	00 00		 xorps	 xmm7, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00638	0f 28 f7	 movaps	 xmm6, xmm7
  0063b	f3 0f 59 f0	 mulss	 xmm6, xmm0
  0063f	0f 28 c7	 movaps	 xmm0, xmm7
  00642	f3 0f 59 fd	 mulss	 xmm7, xmm5
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 256  : 	v3Up = (m_v2HalfSize.y*m_v2Scale.y) * v3Up;

  00646	f3 0f 10 6e 3c	 movss	 xmm5, DWORD PTR [esi+60]
  0064b	f3 0f 59 6e 34	 mulss	 xmm5, DWORD PTR [esi+52]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00650	f3 0f 11 74 24
	0c		 movss	 DWORD PTR tv3070[esp+120], xmm6
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 255  : 	v3Cross = -(m_v2HalfSize.x*m_v2Scale.x) * v3Cross;

  00656	f3 0f 11 74 24
	54		 movss	 DWORD PTR _v3Cross$[esp+120], xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0065c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00660	0f 28 f5	 movaps	 xmm6, xmm5
  00663	f3 0f 59 f4	 mulss	 xmm6, xmm4
  00667	0f 28 e5	 movaps	 xmm4, xmm5
  0066a	f3 0f 59 e3	 mulss	 xmm4, xmm3
  0066e	f3 0f 59 ea	 mulss	 xmm5, xmm2
  00672	f3 0f 11 44 24
	08		 movss	 DWORD PTR tv3071[esp+120], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 255  : 	v3Cross = -(m_v2HalfSize.x*m_v2Scale.x) * v3Cross;

  00678	f3 0f 11 44 24
	58		 movss	 DWORD PTR _v3Cross$[esp+124], xmm0
  0067e	f3 0f 11 7c 24
	5c		 movss	 DWORD PTR _v3Cross$[esp+128], xmm7

; 256  : 	v3Up = (m_v2HalfSize.y*m_v2Scale.y) * v3Up;

  00684	f3 0f 11 74 24
	48		 movss	 DWORD PTR _v3Up$[esp+120], xmm6
  0068a	f3 0f 11 64 24
	4c		 movss	 DWORD PTR _v3Up$[esp+124], xmm4
  00690	f3 0f 11 6c 24
	50		 movss	 DWORD PTR _v3Up$[esp+128], xmm5

; 257  : 
; 258  : 	if (c_matLocal && m_pParticleProperty->m_bAttachFlag)

  00696	85 c9		 test	 ecx, ecx
  00698	0f 84 5e 01 00
	00		 je	 $LN19@Transform
  0069e	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  006a1	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  006a5	0f 84 51 01 00
	00		 je	 $LN19@Transform

; 259  : 	{
; 260  : 		D3DXVECTOR3 v3Position;
; 261  : 		D3DXVec3TransformCoord(&v3Position, &m_v3Position, c_matLocal);

  006ab	51		 push	 ecx
  006ac	57		 push	 edi
  006ad	8d 44 24 68	 lea	 eax, DWORD PTR _v3Position$8[esp+128]
  006b1	50		 push	 eax
  006b2	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  006b7	f3 0f 10 64 24
	64		 movss	 xmm4, DWORD PTR _v3Position$8[esp+124]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 265  : 		m_ParticleMesh[3].position = v3Position + v3Up - v3Cross;

  006bd	8d 86 b0 00 00
	00		 lea	 eax, DWORD PTR [esi+176]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  006c3	f3 0f 10 7c 24
	4c		 movss	 xmm7, DWORD PTR _v3Up$[esp+124]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 265  : 		m_ParticleMesh[3].position = v3Position + v3Up - v3Cross;

  006c9	8b d6		 mov	 edx, esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  006cb	f3 0f 10 44 24
	60		 movss	 xmm0, DWORD PTR _v3Position$8[esp+120]
  006d1	f3 0f 10 5c 24
	68		 movss	 xmm3, DWORD PTR _v3Position$8[esp+128]
  006d7	0f 28 e8	 movaps	 xmm5, xmm0
  006da	f3 0f 10 74 24
	50		 movss	 xmm6, DWORD PTR _v3Up$[esp+128]
  006e0	f3 0f 11 44 24
	0c		 movss	 DWORD PTR $T1[esp+120], xmm0
  006e6	f3 0f 10 44 24
	48		 movss	 xmm0, DWORD PTR _v3Up$[esp+120]
  006ec	f3 0f 11 44 24
	18		 movss	 DWORD PTR _v3Up$5$[esp+120], xmm0
  006f2	f3 0f 5c e8	 subss	 xmm5, xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  006f6	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR _v3Cross$[esp+124]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  006fc	f3 0f 11 5c 24
	60		 movss	 DWORD PTR $T9[esp+120], xmm3
  00702	f3 0f 5c de	 subss	 xmm3, xmm6

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00706	f3 0f 11 44 24
	08		 movss	 DWORD PTR _v3Cross$6$[esp+120], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0070c	f3 0f 11 64 24
	20		 movss	 DWORD PTR $T3[esp+120], xmm4
  00712	f3 0f 5c e7	 subss	 xmm4, xmm7
  00716	f3 0f 11 7c 24
	1c		 movss	 DWORD PTR _v3Up$10$[esp+120], xmm7

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0071c	f3 0f 10 7c 24
	54		 movss	 xmm7, DWORD PTR _v3Cross$[esp+120]
  00722	0f 28 cb	 movaps	 xmm1, xmm3
  00725	f3 0f 11 7c 24
	14		 movss	 DWORD PTR _v3Cross$3$[esp+120], xmm7
  0072b	0f 28 d4	 movaps	 xmm2, xmm4
  0072e	f3 0f 58 d0	 addss	 xmm2, xmm0
  00732	f3 0f 10 44 24
	5c		 movss	 xmm0, DWORD PTR _v3Cross$[esp+128]
  00738	f3 0f 11 44 24
	10		 movss	 DWORD PTR _v3Cross$9$[esp+120], xmm0
  0073e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00742	0f 28 c5	 movaps	 xmm0, xmm5
  00745	f3 0f 58 c7	 addss	 xmm0, xmm7
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 262  : 		m_ParticleMesh[0].position = v3Position - v3Up + v3Cross;

  00749	f3 0f 11 46 74	 movss	 DWORD PTR [esi+116], xmm0
  0074e	f3 0f 11 56 78	 movss	 DWORD PTR [esi+120], xmm2
  00753	f3 0f 11 4e 7c	 movss	 DWORD PTR [esi+124], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00758	f3 0f 10 4c 24
	08		 movss	 xmm1, DWORD PTR _v3Cross$6$[esp+120]

; 181  :     y = fy;

  0075e	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR _v3Cross$9$[esp+120]
  00764	f3 0f 5c e1	 subss	 xmm4, xmm1

; 182  :     z = fz;

  00768	f3 0f 5c 6c 24
	14		 subss	 xmm5, DWORD PTR _v3Cross$3$[esp+120]

; 181  :     y = fy;

  0076e	f3 0f 5c d8	 subss	 xmm3, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 263  : 		m_ParticleMesh[1].position = v3Position - v3Up - v3Cross;

  00772	f3 0f 11 ae 88
	00 00 00	 movss	 DWORD PTR [esi+136], xmm5
  0077a	f3 0f 11 a6 8c
	00 00 00	 movss	 DWORD PTR [esi+140], xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00782	f3 0f 10 64 24
	20		 movss	 xmm4, DWORD PTR $T3[esp+120]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 263  : 		m_ParticleMesh[1].position = v3Position - v3Up - v3Cross;

  00788	f3 0f 11 9e 90
	00 00 00	 movss	 DWORD PTR [esi+144], xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00790	f3 0f 10 54 24
	0c		 movss	 xmm2, DWORD PTR $T1[esp+120]
  00796	f3 0f 58 54 24
	18		 addss	 xmm2, DWORD PTR _v3Up$5$[esp+120]
  0079c	f3 0f 58 64 24
	1c		 addss	 xmm4, DWORD PTR _v3Up$10$[esp+120]
  007a2	f3 0f 10 6c 24
	60		 movss	 xmm5, DWORD PTR $T9[esp+120]

; 182  :     z = fz;

  007a8	f3 0f 10 5c 24
	14		 movss	 xmm3, DWORD PTR _v3Cross$3$[esp+120]

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007ae	f3 0f 58 ee	 addss	 xmm5, xmm6
  007b2	f3 0f 11 54 24
	0c		 movss	 DWORD PTR $T1[esp+120], xmm2

; 182  :     z = fz;

  007b8	f3 0f 10 74 24
	0c		 movss	 xmm6, DWORD PTR $T1[esp+120]

; 180  :     x = fx;

  007be	0f 28 d4	 movaps	 xmm2, xmm4
  007c1	f3 0f 58 d1	 addss	 xmm2, xmm1

; 181  :     y = fy;

  007c5	0f 28 cd	 movaps	 xmm1, xmm5
  007c8	f3 0f 58 c8	 addss	 xmm1, xmm0

; 182  :     z = fz;

  007cc	0f 28 c6	 movaps	 xmm0, xmm6
  007cf	f3 0f 58 c3	 addss	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 264  : 		m_ParticleMesh[2].position = v3Position + v3Up + v3Cross;

  007d3	f3 0f 11 86 9c
	00 00 00	 movss	 DWORD PTR [esi+156], xmm0
  007db	f3 0f 11 96 a0
	00 00 00	 movss	 DWORD PTR [esi+160], xmm2
  007e3	f3 0f 11 8e a4
	00 00 00	 movss	 DWORD PTR [esi+164], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  007eb	f3 0f 5c 6c 24
	10		 subss	 xmm5, DWORD PTR _v3Cross$9$[esp+120]
  007f1	f3 0f 5c 64 24
	08		 subss	 xmm4, DWORD PTR _v3Cross$6$[esp+120]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 266  : 	}

  007f7	e9 da 00 00 00	 jmp	 $LN172@Transform
$LN19@Transform:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  007fc	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 272  : 		m_ParticleMesh[3].position = m_v3Position + v3Up - v3Cross;

  00801	8d 86 b0 00 00
	00		 lea	 eax, DWORD PTR [esi+176]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00807	f3 0f 10 1f	 movss	 xmm3, DWORD PTR [edi]
  0080b	f3 0f 5c d4	 subss	 xmm2, xmm4
  0080f	f3 0f 10 4f 08	 movss	 xmm1, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 272  : 		m_ParticleMesh[3].position = m_v3Position + v3Up - v3Cross;

  00814	8b d6		 mov	 edx, esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00816	f3 0f 5c cd	 subss	 xmm1, xmm5

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0081a	f3 0f 58 d0	 addss	 xmm2, xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0081e	0f 28 c3	 movaps	 xmm0, xmm3
  00821	f3 0f 5c c6	 subss	 xmm0, xmm6

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00825	f3 0f 58 cf	 addss	 xmm1, xmm7
  00829	f3 0f 58 44 24
	0c		 addss	 xmm0, DWORD PTR tv3070[esp+120]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 269  : 		m_ParticleMesh[0].position = m_v3Position - v3Up + v3Cross;

  0082f	f3 0f 11 46 74	 movss	 DWORD PTR [esi+116], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00834	0f 28 c3	 movaps	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 269  : 		m_ParticleMesh[0].position = m_v3Position - v3Up + v3Cross;

  00837	f3 0f 11 56 78	 movss	 DWORD PTR [esi+120], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0083c	f3 0f 5c c6	 subss	 xmm0, xmm6
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 269  : 		m_ParticleMesh[0].position = m_v3Position - v3Up + v3Cross;

  00840	f3 0f 11 4e 7c	 movss	 DWORD PTR [esi+124], xmm1

; 270  : 		m_ParticleMesh[1].position = m_v3Position - v3Up - v3Cross;

  00845	f3 0f 58 f3	 addss	 xmm6, xmm3
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00849	f3 0f 10 56 10	 movss	 xmm2, DWORD PTR [esi+16]
  0084e	f3 0f 10 4e 14	 movss	 xmm1, DWORD PTR [esi+20]
  00853	f3 0f 5c d4	 subss	 xmm2, xmm4
  00857	f3 0f 5c cd	 subss	 xmm1, xmm5
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 270  : 		m_ParticleMesh[1].position = m_v3Position - v3Up - v3Cross;

  0085b	f3 0f 5c 44 24
	0c		 subss	 xmm0, DWORD PTR tv3070[esp+120]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00861	f3 0f 5c 54 24
	08		 subss	 xmm2, DWORD PTR tv3071[esp+120]

; 180  :     x = fx;

  00867	f3 0f 5c cf	 subss	 xmm1, xmm7
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 270  : 		m_ParticleMesh[1].position = m_v3Position - v3Up - v3Cross;

  0086b	f3 0f 11 86 88
	00 00 00	 movss	 DWORD PTR [esi+136], xmm0
  00873	f3 0f 11 96 8c
	00 00 00	 movss	 DWORD PTR [esi+140], xmm2
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0087b	0f 28 d4	 movaps	 xmm2, xmm4
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 270  : 		m_ParticleMesh[1].position = m_v3Position - v3Up - v3Cross;

  0087e	f3 0f 11 8e 90
	00 00 00	 movss	 DWORD PTR [esi+144], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00886	0f 28 cd	 movaps	 xmm1, xmm5
  00889	f3 0f 58 56 10	 addss	 xmm2, DWORD PTR [esi+16]
  0088e	f3 0f 58 4e 14	 addss	 xmm1, DWORD PTR [esi+20]
  00893	f3 0f 10 5c 24
	0c		 movss	 xmm3, DWORD PTR tv3070[esp+120]
  00899	0f 28 c3	 movaps	 xmm0, xmm3
  0089c	f3 0f 58 c6	 addss	 xmm0, xmm6
  008a0	f3 0f 58 54 24
	08		 addss	 xmm2, DWORD PTR tv3071[esp+120]
  008a6	f3 0f 58 cf	 addss	 xmm1, xmm7
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 271  : 		m_ParticleMesh[2].position = m_v3Position + v3Up + v3Cross;

  008aa	f3 0f 11 86 9c
	00 00 00	 movss	 DWORD PTR [esi+156], xmm0
  008b2	f3 0f 11 96 a0
	00 00 00	 movss	 DWORD PTR [esi+160], xmm2
  008ba	f3 0f 11 8e a4
	00 00 00	 movss	 DWORD PTR [esi+164], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  008c2	f3 0f 58 6e 14	 addss	 xmm5, DWORD PTR [esi+20]
  008c7	f3 0f 58 66 10	 addss	 xmm4, DWORD PTR [esi+16]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  008cc	f3 0f 5c ef	 subss	 xmm5, xmm7
  008d0	f3 0f 5c 64 24
	08		 subss	 xmm4, DWORD PTR tv3071[esp+120]
$LN172@Transform:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 274  : }

  008d6	89 44 24 14	 mov	 DWORD PTR $T2[esp+120], eax
  008da	f3 0f 5c f3	 subss	 xmm6, xmm3
  008de	b8 b0 00 00 00	 mov	 eax, 176		; 000000b0H
  008e3	bf b4 00 00 00	 mov	 edi, 180		; 000000b4H
  008e8	b9 08 00 00 00	 mov	 ecx, 8
  008ed	f3 0f 11 34 30	 movss	 DWORD PTR [eax+esi], xmm6
  008f2	f3 0f 11 24 3a	 movss	 DWORD PTR [edx+edi], xmm4
  008f7	8b 44 24 14	 mov	 eax, DWORD PTR $T2[esp+120]
  008fb	5f		 pop	 edi
  008fc	5e		 pop	 esi
  008fd	f3 0f 11 2c 08	 movss	 DWORD PTR [eax+ecx], xmm5
  00902	8b 4c 24 6c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+112]
  00906	33 cc		 xor	 ecx, esp
  00908	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0090d	8b e5		 mov	 esp, ebp
  0090f	5d		 pop	 ebp
  00910	c2 04 00	 ret	 4
  00913	90		 npad	 1
$LN167@Transform:
  00914	00 00 00 00	 DD	 $LN12@Transform
  00918	00 00 00 00	 DD	 $LN7@Transform
  0091c	00 00 00 00	 DD	 $LN6@Transform
  00920	00 00 00 00	 DD	 $LN7@Transform
  00924	00 00 00 00	 DD	 $LN7@Transform
?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z ENDP ; CParticleInstance::Transform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?DestroySystem@CParticleInstance@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CParticleInstance@@SAXXZ PROC		; CParticleInstance::DestroySystem, COMDAT

; 14   : {

  00000	53		 push	 ebx
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00001	8b 1d 08 00 00
	00		 mov	 ebx, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 14   : {

  00007	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00008	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+4
  0000e	3b f3		 cmp	 esi, ebx
  00010	74 3a		 je	 SHORT $LN16@DestroySys
  00012	57		 push	 edi
$LL6@DestroySys:

; 111  : 			delete pkData;

  00013	8b 3e		 mov	 edi, DWORD PTR [esi]
  00015	85 ff		 test	 edi, edi
  00017	74 15		 je	 SHORT $LN4@DestroySys
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ??1CParticleInstance@@QAE@XZ ; CParticleInstance::~CParticleInstance
  00020	68 c4 00 00 00	 push	 196			; 000000c4H
  00025	57		 push	 edi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
$LN4@DestroySys:

; 50   : 			for (auto v : m_kVct_pkData)

  0002e	83 c6 04	 add	 esi, 4
  00031	3b f3		 cmp	 esi, ebx
  00033	75 de		 jne	 SHORT $LL6@DestroySys
  00035	8b 1d 08 00 00
	00		 mov	 ebx, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+8
  0003b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+4
  00041	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00042	3b f3		 cmp	 esi, ebx
  00044	74 06		 je	 SHORT $LN16@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00046	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+8, esi
$LN16@DestroySys:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0004c	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+16
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+20
  00059	74 05		 je	 SHORT $LN20@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0005b	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+20, eax
$LN20@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 16   : }

  00060	c3		 ret	 0
?DestroySystem@CParticleInstance@@SAXXZ ENDP		; CParticleInstance::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?New@CParticleInstance@@SAPAV1@XZ
_TEXT	SEGMENT
_pkNewData$1 = -4					; size = 4
$T2 = -4						; size = 4
?New@CParticleInstance@@SAPAV1@XZ PROC			; CParticleInstance::New, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00004	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+20
  0000a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+16, ecx
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  00010	75 64		 jne	 SHORT $LN4@New
  00012	56		 push	 esi

; 66   : 				T* pkNewData=new T;

  00013	68 c4 00 00 00	 push	 196			; 000000c4H
  00018	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001d	83 c4 04	 add	 esp, 4
  00020	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  00023	85 c0		 test	 eax, eax
  00025	74 0b		 je	 SHORT $LN6@New
  00027	8b c8		 mov	 ecx, eax
  00029	e8 00 00 00 00	 call	 ??0CParticleInstance@@QAE@XZ ; CParticleInstance::CParticleInstance
  0002e	8b f0		 mov	 esi, eax
  00030	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00032	33 f6		 xor	 esi, esi
$LN7@New:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00034	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  00039	89 75 fc	 mov	 DWORD PTR _pkNewData$1[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0003c	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+12
  00042	74 16		 je	 SHORT $LN15@New

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00044	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 20   : 	return ms_kPool.Alloc();

  00046	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00048	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  0004f	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 20   : 	return ms_kPool.Alloc();

  00055	5e		 pop	 esi

; 21   : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN15@New:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0005a	8d 4d fc	 lea	 ecx, DWORD PTR _pkNewData$1[ebp]
  0005d	51		 push	 ecx
  0005e	50		 push	 eax
  0005f	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+4
  00064	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCParticleInstance@@@?$vector@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEPAPAVCParticleInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleInstance *,std::allocator<CParticleInstance *> >::_Emplace_reallocate<CParticleInstance * const &>
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  00069	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 20   : 	return ms_kPool.Alloc();

  0006f	8b c6		 mov	 eax, esi
  00071	5e		 pop	 esi

; 21   : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
$LN4@New:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  00076	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1744 :         --_Mylast;

  00079	83 c1 fc	 add	 ecx, -4			; fffffffcH
  0007c	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+20, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 21   : }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?New@CParticleInstance@@SAPAV1@XZ ENDP			; CParticleInstance::New
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectUpdateDecorator.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectUpdateDecorator.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?Update@CParticleInstance@@QAEHMM@Z
_TEXT	SEGMENT
_qc$1 = -52						; size = 16
_q$2 = -36						; size = 16
_qr$3 = -20						; size = 16
$T4 = -16						; size = 12
_fCos$1$ = -4						; size = 4
_fElapsedTime$ = 8					; size = 4
_fAngle$ = 12						; size = 4
?Update@CParticleInstance@@QAEHMM@Z PROC		; CParticleInstance::Update, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   : 	m_fLastLifeTime -= fElapsedTime;

  00003	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _fElapsedTime$[ebp]
  00008	83 ec 34	 sub	 esp, 52			; 00000034H
  0000b	0f 57 c0	 xorps	 xmm0, xmm0
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	f3 0f 10 5f 58	 movss	 xmm3, DWORD PTR [edi+88]
  00016	f3 0f 5c da	 subss	 xmm3, xmm2

; 74   : 	if (m_fLastLifeTime < 0.0f)

  0001a	0f 2f c3	 comiss	 xmm0, xmm3
  0001d	f3 0f 11 5f 58	 movss	 DWORD PTR [edi+88], xmm3
  00022	76 09		 jbe	 SHORT $LN2@Update

; 75   : 		return FALSE;

  00024	33 c0		 xor	 eax, eax
  00026	5f		 pop	 edi

; 122  : }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
$LN2@Update:

; 77   : 	float fLifePercentage = (m_fLifeTime - m_fLastLifeTime) / m_fLifeTime;

  0002d	f3 0f 10 47 54	 movss	 xmm0, DWORD PTR [edi+84]
  00032	f3 0f 5c c3	 subss	 xmm0, xmm3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectUpdateDecorator.h

; 29   : 			CBaseDecorator* pd = this;

  00036	8b 4f 70	 mov	 ecx, DWORD PTR [edi+112]

; 17   : 			: fTime(fTime), fElapsedTime(fElapsedTime), pInstance(pInstance)

  00039	f3 0f 11 55 f4	 movss	 DWORD PTR $T4[ebp+4], xmm2
  0003e	89 7d f8	 mov	 DWORD PTR $T4[ebp+8], edi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 77   : 	float fLifePercentage = (m_fLifeTime - m_fLastLifeTime) / m_fLifeTime;

  00041	f3 0f 5e 47 54	 divss	 xmm0, DWORD PTR [edi+84]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectUpdateDecorator.h

; 17   : 			: fTime(fTime), fElapsedTime(fElapsedTime), pInstance(pInstance)

  00046	f3 0f 11 45 f0	 movss	 DWORD PTR $T4[ebp], xmm0

; 30   : 			while(pd)

  0004b	85 c9		 test	 ecx, ecx
  0004d	74 19		 je	 SHORT $LN11@Update
  0004f	56		 push	 esi
$LL10@Update:

; 31   : 			{
; 32   : 				CBaseDecorator* pNextDecorator = pd->m_NextDecorator;
; 33   : 				pd->__Excute(d);

  00050	8b 01		 mov	 eax, DWORD PTR [ecx]
  00052	8d 55 f0	 lea	 edx, DWORD PTR $T4[ebp]
  00055	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00058	52		 push	 edx
  00059	ff 50 04	 call	 DWORD PTR [eax+4]

; 34   : 				pd = pNextDecorator;

  0005c	8b ce		 mov	 ecx, esi
  0005e	85 f6		 test	 esi, esi
  00060	75 ee		 jne	 SHORT $LL10@Update
  00062	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _fElapsedTime$[ebp]

; 30   : 			while(pd)

  00067	5e		 pop	 esi
$LN11@Update:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 81   : 	m_v3LastPosition = m_v3Position;

  00068	f3 0f 7e 47 0c	 movq	 xmm0, QWORD PTR [edi+12]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0006d	0f 28 ca	 movaps	 xmm1, xmm2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 81   : 	m_v3LastPosition = m_v3Position;

  00070	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00073	66 0f d6 47 18	 movq	 QWORD PTR [edi+24], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00078	0f 28 c2	 movaps	 xmm0, xmm2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 81   : 	m_v3LastPosition = m_v3Position;

  0007b	89 47 20	 mov	 DWORD PTR [edi+32], eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0007e	f3 0f 59 47 28	 mulss	 xmm0, DWORD PTR [edi+40]
  00083	f3 0f 59 4f 2c	 mulss	 xmm1, DWORD PTR [edi+44]

; 205  :     y += v.y;

  00088	f3 0f 58 47 10	 addss	 xmm0, DWORD PTR [edi+16]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0008d	f3 0f 59 57 24	 mulss	 xmm2, DWORD PTR [edi+36]

; 206  :     z += v.z;

  00092	f3 0f 58 4f 14	 addss	 xmm1, DWORD PTR [edi+20]
  00097	f3 0f 58 57 0c	 addss	 xmm2, DWORD PTR [edi+12]
  0009c	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 84   : 	if (fAngle)

  000a1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fAngle$[ebp]
  000a6	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  000ad	f3 0f 11 55 08	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm2
  000b2	f3 0f 11 57 0c	 movss	 DWORD PTR [edi+12], xmm2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 84   : 	if (fAngle)

  000b7	9f		 lahf
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 206  :     z += v.z;

  000b8	f3 0f 11 4f 14	 movss	 DWORD PTR [edi+20], xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 84   : 	if (fAngle)

  000bd	f6 c4 44	 test	 ah, 68			; 00000044H
  000c0	0f 8b 6b 01 00
	00		 jnp	 $LN5@Update

; 85   : 	{
; 86   : 		if (m_pParticleProperty->m_bAttachFlag)

  000c6	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  000c9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  000d1	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  000d5	f3 0f 11 45 0c	 movss	 DWORD PTR _fAngle$[ebp], xmm0
  000da	74 77		 je	 SHORT $LN4@Update
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 692  :             return (float)cos(_X);

  000dc	0f 5a c0	 cvtps2pd xmm0, xmm0
  000df	e8 00 00 00 00	 call	 __libm_sse2_cos_precise

; 798  :             return (float)sin(_X);

  000e4	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fAngle$[ebp]

; 692  :             return (float)cos(_X);

  000e9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000ed	f3 0f 11 45 fc	 movss	 DWORD PTR _fCos$1$[ebp], xmm0

; 798  :             return (float)sin(_X);

  000f2	0f 5a c1	 cvtps2pd xmm0, xmm1
  000f5	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 94   : 			float ry = m_v3Position.y - m_v3StartPosition.y;

  000fa	f3 0f 10 5f 10	 movss	 xmm3, DWORD PTR [edi+16]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  000ff	0f 57 ed	 xorps	 xmm5, xmm5
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 94   : 			float ry = m_v3Position.y - m_v3StartPosition.y;

  00102	f3 0f 5c 5f 04	 subss	 xmm3, DWORD PTR [edi+4]
  00107	f3 0f 10 7d 08	 movss	 xmm7, DWORD PTR _fElapsedTime$[ebp]

; 121  : 	return TRUE;

  0010c	b8 01 00 00 00	 mov	 eax, 1
  00111	f3 0f 5c 3f	 subss	 xmm7, DWORD PTR [edi]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 798  :             return (float)sin(_X);

  00115	f2 0f 5a e8	 cvtsd2ss xmm5, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 96   : 			m_v3Position.x =   fCos * rx + fSin * ry + m_v3StartPosition.x;

  00119	0f 28 cb	 movaps	 xmm1, xmm3

; 97   : 			m_v3Position.y = - fSin * rx + fCos * ry + m_v3StartPosition.y;

  0011c	f3 0f 59 5d fc	 mulss	 xmm3, DWORD PTR _fCos$1$[ebp]
  00121	0f 28 c7	 movaps	 xmm0, xmm7
  00124	f3 0f 59 cd	 mulss	 xmm1, xmm5
  00128	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _fCos$1$[ebp]
  0012d	f3 0f 59 fd	 mulss	 xmm7, xmm5
  00131	f3 0f 58 c8	 addss	 xmm1, xmm0
  00135	f3 0f 5c df	 subss	 xmm3, xmm7
  00139	f3 0f 58 0f	 addss	 xmm1, DWORD PTR [edi]
  0013d	f3 0f 58 5f 04	 addss	 xmm3, DWORD PTR [edi+4]
  00142	f3 0f 11 4f 0c	 movss	 DWORD PTR [edi+12], xmm1
  00147	f3 0f 11 5f 10	 movss	 DWORD PTR [edi+16], xmm3
  0014c	5f		 pop	 edi

; 122  : }

  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c2 08 00	 ret	 8
$LN4@Update:

; 98   : 		}
; 99   : 		else
; 100  : 		{
; 101  : 			D3DXQUATERNION q,qc;
; 102  : 			D3DXQuaternionRotationAxis(&q,&m_pParticleProperty->m_v3ZAxis,D3DXToRadian(fAngle));

  00153	51		 push	 ecx
  00154	83 c0 7c	 add	 eax, 124		; 0000007cH
  00157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015c	50		 push	 eax
  0015d	8d 45 dc	 lea	 eax, DWORD PTR _q$2[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1616 :     pOut->x = -pQ->x;

  00166	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 110  : 			D3DXQuaternionMultiply(&qr,&q,&qr);

  0016e	8d 45 ec	 lea	 eax, DWORD PTR _qr$3[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1616 :     pOut->x = -pQ->x;

  00171	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _q$2[ebp]
  00176	0f 57 c1	 xorps	 xmm0, xmm1

; 670  :     w = fw;

  00179	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _qr$3[ebp+12], 0

; 1616 :     pOut->x = -pQ->x;

  00180	f3 0f 11 45 cc	 movss	 DWORD PTR _qc$1[ebp], xmm0

; 1617 :     pOut->y = -pQ->y;

  00185	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _q$2[ebp+4]
  0018a	0f 57 c1	 xorps	 xmm0, xmm1
  0018d	f3 0f 11 45 d0	 movss	 DWORD PTR _qc$1[ebp+4], xmm0

; 1618 :     pOut->z = -pQ->z;

  00192	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _q$2[ebp+8]
  00197	0f 57 c1	 xorps	 xmm0, xmm1
  0019a	f3 0f 11 45 d4	 movss	 DWORD PTR _qc$1[ebp+8], xmm0

; 1619 :     pOut->w =  pQ->w;

  0019f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _q$2[ebp+12]
  001a4	f3 0f 11 45 d8	 movss	 DWORD PTR _qc$1[ebp+12], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 105  : 			D3DXQUATERNION qr(

  001a9	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  001ae	f3 0f 5c 07	 subss	 xmm0, DWORD PTR [edi]

; 110  : 			D3DXQuaternionMultiply(&qr,&q,&qr);

  001b2	50		 push	 eax
  001b3	8d 45 dc	 lea	 eax, DWORD PTR _q$2[ebp]
  001b6	50		 push	 eax
  001b7	8d 45 ec	 lea	 eax, DWORD PTR _qr$3[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 667  :     x = fx;

  001ba	f3 0f 11 45 ec	 movss	 DWORD PTR _qr$3[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 105  : 			D3DXQUATERNION qr(

  001bf	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  001c4	f3 0f 5c 47 04	 subss	 xmm0, DWORD PTR [edi+4]

; 110  : 			D3DXQuaternionMultiply(&qr,&q,&qr);

  001c9	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 668  :     y = fy;

  001ca	f3 0f 11 45 f0	 movss	 DWORD PTR _qr$3[ebp+4], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 105  : 			D3DXQUATERNION qr(

  001cf	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  001d4	f3 0f 5c 47 08	 subss	 xmm0, DWORD PTR [edi+8]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 669  :     z = fz;

  001d9	f3 0f 11 45 f4	 movss	 DWORD PTR _qr$3[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 110  : 			D3DXQuaternionMultiply(&qr,&q,&qr);

  001de	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 111  : 			D3DXQuaternionMultiply(&qr,&qr,&qc);

  001e3	8d 45 cc	 lea	 eax, DWORD PTR _qc$1[ebp]
  001e6	50		 push	 eax
  001e7	8d 45 ec	 lea	 eax, DWORD PTR _qr$3[ebp]
  001ea	50		 push	 eax
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 112  : 
; 113  : 			m_v3Position.x = qr.x;
; 114  : 			m_v3Position.y = qr.y;

  001f1	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _qr$3[ebp+4]
  001f6	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0

; 115  : 			m_v3Position.z = qr.z;

  001fb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _qr$3[ebp+8]
  00200	f3 0f 11 47 14	 movss	 DWORD PTR [edi+20], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  00205	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _qr$3[ebp]
  0020a	f3 0f 58 07	 addss	 xmm0, DWORD PTR [edi]
  0020e	f3 0f 11 47 0c	 movss	 DWORD PTR [edi+12], xmm0

; 205  :     y += v.y;

  00213	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00218	f3 0f 58 47 04	 addss	 xmm0, DWORD PTR [edi+4]
  0021d	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0

; 206  :     z += v.z;

  00222	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  00227	f3 0f 58 47 08	 addss	 xmm0, DWORD PTR [edi+8]
  0022c	f3 0f 11 47 14	 movss	 DWORD PTR [edi+20], xmm0
$LN5@Update:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp

; 121  : 	return TRUE;

  00231	b8 01 00 00 00	 mov	 eax, 1
  00236	5f		 pop	 edi

; 122  : }

  00237	8b e5		 mov	 esp, ebp
  00239	5d		 pop	 ebp
  0023a	c2 08 00	 ret	 8
?Update@CParticleInstance@@QAEHMM@Z ENDP		; CParticleInstance::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?GetRadiusApproximation@CParticleInstance@@QAEMXZ
_TEXT	SEGMENT
?GetRadiusApproximation@CParticleInstance@@QAEMXZ PROC	; CParticleInstance::GetRadiusApproximation, COMDAT
; _this$ = ecx

; 58   : 	return m_v2HalfSize.y*m_v2Scale.y + m_v2HalfSize.x*m_v2Scale.x;

  00000	d9 41 3c	 fld	 DWORD PTR [ecx+60]
  00003	d8 49 34	 fmul	 DWORD PTR [ecx+52]
  00006	d9 41 38	 fld	 DWORD PTR [ecx+56]
  00009	d8 49 30	 fmul	 DWORD PTR [ecx+48]
  0000c	de c1		 faddp	 ST(1), ST(0)

; 59   : }

  0000e	c3		 ret	 0
?GetRadiusApproximation@CParticleInstance@@QAEMXZ ENDP	; CParticleInstance::GetRadiusApproximation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ??1CParticleInstance@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CParticleInstance@@QAE@XZ PROC			; CParticleInstance::~CParticleInstance, COMDAT
; _this$ = ecx

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CParticleInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 469  : 	Destroy();

  00022	e8 00 00 00 00	 call	 ?Destroy@CParticleInstance@@QAEXXZ ; CParticleInstance::Destroy

; 470  : }

  00027	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0002a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00031	59		 pop	 ecx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
  00036	cc		 int	 3
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CParticleInstance@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CParticleInstance@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CParticleInstance@@QAE@XZ ENDP			; CParticleInstance::~CParticleInstance
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ??0CParticleInstance@@QAE@XZ
_TEXT	SEGMENT
??0CParticleInstance@@QAE@XZ PROC			; CParticleInstance::CParticleInstance, COMDAT
; _this$ = ecx

; 463  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 464  : 	__Initialize();

  00003	e8 00 00 00 00	 call	 ?__Initialize@CParticleInstance@@IAEXXZ ; CParticleInstance::__Initialize

; 465  : }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0CParticleInstance@@QAE@XZ ENDP			; CParticleInstance::CParticleInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectUpdateDecorator.h
;	COMDAT ?DeleteThis@CBaseDecorator@NEffectUpdateDecorator@@QAEXXZ
_TEXT	SEGMENT
?DeleteThis@CBaseDecorator@NEffectUpdateDecorator@@QAEXXZ PROC ; NEffectUpdateDecorator::CBaseDecorator::DeleteThis, COMDAT
; _this$ = ecx

; 44   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 45   : 			//return;
; 46   : 			if (m_NextDecorator)

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 05		 je	 SHORT $LN2@DeleteThis

; 47   : 				m_NextDecorator->DeleteThis();

  0000a	e8 00 00 00 00	 call	 ?DeleteThis@CBaseDecorator@NEffectUpdateDecorator@@QAEXXZ ; NEffectUpdateDecorator::CBaseDecorator::DeleteThis
$LN2@DeleteThis:

; 48   : 			delete this;

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	8b ce		 mov	 ecx, esi
  00013	6a 01		 push	 1
  00015	ff 10		 call	 DWORD PTR [eax]
  00017	5e		 pop	 esi

; 49   : 		}

  00018	c3		 ret	 0
?DeleteThis@CBaseDecorator@NEffectUpdateDecorator@@QAEXXZ ENDP ; NEffectUpdateDecorator::CBaseDecorator::DeleteThis
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SPTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPTVertex@@QAE@XZ PROC				; SPTVertex::SPTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPTVertex@@QAE@XZ ENDP				; SPTVertex::SPTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
