; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EffectLib\Distribute\Type.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z ; GetTokenTimeEventFloat
PUBLIC	?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
PUBLIC	?_Xrange@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xrange
PUBLIC	?InsertItemTimeEventFloat@@YAXPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@MM@Z ; InsertItemTimeEventFloat
PUBLIC	??$emplace@ABV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@1@ABV?$CTimeEvent@M@@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::emplace<CTimeEvent<float> const &>
PUBLIC	??$_Copy_backward_memmove@PAV?$CTimeEvent@M@@PAV1@@std@@YAPAV?$CTimeEvent@M@@PAV1@00@Z ; std::_Copy_backward_memmove<CTimeEvent<float> *,CTimeEvent<float> *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z:PROC ; CTextFileLoader::GetTokenVector
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z$0
__ehfuncinfo$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAV?$CTimeEvent@M@@PAV1@@std@@YAPAV?$CTimeEvent@M@@PAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAV?$CTimeEvent@M@@PAV1@@std@@YAPAV?$CTimeEvent@M@@PAV1@00@Z PROC ; std::_Copy_backward_memmove<CTimeEvent<float> *,CTimeEvent<float> *>, COMDAT

; 5099 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5100 :     // implement copy_backward-like function as memmove
; 5101 :     const auto _First_ptr = _STD _To_address(_First);
; 5102 :     const auto _Last_ptr  = _STD _To_address(_Last);
; 5103 :     const auto _Dest_ptr  = _STD _To_address(_Dest);
; 5104 :     const auto _First_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 5105 :     const auto _Last_ch   = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 5106 :     const auto _Dest_ch   = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 5107 :     const auto _Count     = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 5108 :     const auto _Result    = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5109 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 5110 :         return static_cast<_CtgIt2>(_Result);
; 5111 :     } else {
; 5112 :         return _Dest - static_cast<_Iter_diff_t<_CtgIt2>>(_Last_ptr - _First_ptr);
; 5113 :     }
; 5114 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAV?$CTimeEvent@M@@PAV1@@std@@YAPAV?$CTimeEvent@M@@PAV1@00@Z ENDP ; std::_Copy_backward_memmove<CTimeEvent<float> *,CTimeEvent<float> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$emplace@ABV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@1@ABV?$CTimeEvent@M@@@Z
_TEXT	SEGMENT
__Whereoff$1$ = -16					; size = 4
__Obj$1$sroa$297$2$ = -16				; size = 4
tv754 = -16						; size = 4
__Newsize$1$ = -12					; size = 4
$T6 = -8						; size = 4
$T7 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
__Obj$1$sroa$297$1$ = 16				; size = 4
??$emplace@ABV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@1@ABV?$CTimeEvent@M@@@Z PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::emplace<CTimeEvent<float> const &>, COMDAT
; _this$ = ecx

; 1011 :     _CONSTEXPR20 iterator emplace(const_iterator _Where, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi

; 1012 :         // insert by perfectly forwarding _Val at _Where
; 1013 :         const pointer _Whereptr = _Where._Ptr;

  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Where$[ebp]
  0000d	57		 push	 edi

; 1014 :         auto& _My_data          = _Mypair._Myval2;
; 1015 :         const pointer _Oldlast  = _My_data._Mylast;

  0000e	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 1016 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1017 :         _STL_VERIFY(
; 1018 :             _Where._Getcont() == _STD addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Oldlast >= _Whereptr,
; 1019 :             "vector emplace iterator outside range");
; 1020 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1021 : 
; 1022 :         if (_Oldlast != _My_data._Myend) {

  00011	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00014	3b f9		 cmp	 edi, ecx
  00016	74 5f		 je	 SHORT $LN2@emplace

; 1023 :             if (_Whereptr == _Oldlast) { // at back, provide strong guarantee

  00018	8b 45 10	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00020	89 4d 10	 mov	 DWORD PTR __Obj$1$sroa$297$1$[ebp], ecx
  00023	89 45 f0	 mov	 DWORD PTR __Obj$1$sroa$297$2$[ebp], eax
  00026	3b f7		 cmp	 esi, edi
  00028	75 17		 jne	 SHORT $LN3@emplace

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	89 0f		 mov	 DWORD PTR [edi], ecx
  0002c	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 854  :         ++_Mylast;

  00032	83 43 04 08	 add	 DWORD PTR [ebx+4], 8
  00036	5f		 pop	 edi

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00037	89 30		 mov	 DWORD PTR [eax], esi

; 1042 :     }

  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
$LN3@emplace:

; 1031 :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));

  00041	8b 47 f8	 mov	 eax, DWORD PTR [edi-8]
  00044	8d 57 f8	 lea	 edx, DWORD PTR [edi-8]
  00047	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  0004a	57		 push	 edi
  0004b	52		 push	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1031 :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));

  0004c	89 07		 mov	 DWORD PTR [edi], eax
  0004e	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1032 :                 _ASAN_VECTOR_RELEASE_GUARD;
; 1033 :                 ++_My_data._Mylast;

  00051	83 43 04 08	 add	 DWORD PTR [ebx+4], 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAV?$CTimeEvent@M@@PAV1@@std@@YAPAV?$CTimeEvent@M@@PAV1@00@Z ; std::_Copy_backward_memmove<CTimeEvent<float> *,CTimeEvent<float> *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1035 :                 *_Whereptr = _STD move(_Obj._Get_value());

  0005b	8b 45 10	 mov	 eax, DWORD PTR __Obj$1$sroa$297$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1035 :                 *_Whereptr = _STD move(_Obj._Get_value());

  00061	89 06		 mov	 DWORD PTR [esi], eax
  00063	8b 45 f0	 mov	 eax, DWORD PTR __Obj$1$sroa$297$2$[ebp]
  00066	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00069	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0006c	5f		 pop	 edi
  0006d	89 30		 mov	 DWORD PTR [eax], esi

; 1042 :     }

  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 0c 00	 ret	 12			; 0000000cH
$LN2@emplace:

; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00077	8b 13		 mov	 edx, DWORD PTR [ebx]
  00079	8b c6		 mov	 eax, esi

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0007b	2b fa		 sub	 edi, edx
  0007d	2b c2		 sub	 eax, edx
  0007f	c1 f8 03	 sar	 eax, 3
  00082	c1 ff 03	 sar	 edi, 3
  00085	89 45 f0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00088	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  0008e	0f 84 08 01 00
	00		 je	 $LN147@emplace

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00094	2b ca		 sub	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00096	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0009b	c1 f9 03	 sar	 ecx, 3

; 876  :         const size_type _Newsize = _Oldsize + 1;

  0009e	47		 inc	 edi

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0009f	8b d1		 mov	 edx, ecx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  000a1	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  000a4	d1 ea		 shr	 edx, 1
  000a6	2b c2		 sub	 eax, edx
  000a8	3b c8		 cmp	 ecx, eax
  000aa	76 14		 jbe	 SHORT $LN22@emplace

; 1997 :             return _Max; // geometric growth would overflow

  000ac	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  000b1	c7 45 f8 ff ff
	ff 1f		 mov	 DWORD PTR $T6[ebp], 536870911 ; 1fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000be	eb 3c		 jmp	 SHORT $LN145@emplace
$LN22@emplace:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000c0	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  000c3	3b c7		 cmp	 eax, edi
  000c5	0f 43 f8	 cmovae	 edi, eax
  000c8	89 7d f8	 mov	 DWORD PTR $T6[ebp], edi
  000cb	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  000d1	0f 87 ca 00 00
	00		 ja	 $LN148@emplace

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  000d7	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]

; 227  :     if (_Bytes == 0) {

  000de	85 c0		 test	 eax, eax
  000e0	75 05		 jne	 SHORT $LN37@emplace

; 228  :         return nullptr;

  000e2	89 7d f8	 mov	 DWORD PTR $T6[ebp], edi
  000e5	eb 18		 jmp	 SHORT $LN144@emplace
$LN37@emplace:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000e7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ec	72 08		 jb	 SHORT $LN38@emplace

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000f4	eb 06		 jmp	 SHORT $LN145@emplace
$LN38@emplace:

; 136  :         return ::operator new(_Bytes);

  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN145@emplace:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000fc	83 c4 04	 add	 esp, 4
$LN144@emplace:
  000ff	8b 4d f0	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]
  00102	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  00105	89 45 fc	 mov	 DWORD PTR $T7[ebp], eax
  00108	8b 4d 10	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
  0010b	89 55 f0	 mov	 DWORD PTR tv754[ebp], edx
  0010e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00110	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00113	89 02		 mov	 DWORD PTR [edx], eax
  00115	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00118	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0011b	8b 13		 mov	 edx, DWORD PTR [ebx]
  0011d	3b f7		 cmp	 esi, edi
  0011f	75 1e		 jne	 SHORT $LN17@emplace
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00121	8b 75 fc	 mov	 esi, DWORD PTR $T7[ebp]

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00124	3b d7		 cmp	 edx, edi
  00126	74 53		 je	 SHORT $LN68@emplace
$LL47@emplace:

; 1807 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00128	8b 02		 mov	 eax, DWORD PTR [edx]

; 1808 :         ++_Last;

  0012a	8d 76 08	 lea	 esi, DWORD PTR [esi+8]
  0012d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00130	83 c2 08	 add	 edx, 8

; 1807 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00133	89 46 f8	 mov	 DWORD PTR [esi-8], eax
  00136	89 4e fc	 mov	 DWORD PTR [esi-4], ecx

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00139	3b d7		 cmp	 edx, edi
  0013b	75 eb		 jne	 SHORT $LL47@emplace
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  0013d	eb 3c		 jmp	 SHORT $LN68@emplace
$LN17@emplace:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0013f	8b 7d fc	 mov	 edi, DWORD PTR $T7[ebp]

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00142	3b d6		 cmp	 edx, esi
  00144	74 15		 je	 SHORT $LN57@emplace
$LL58@emplace:

; 1807 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00146	8b 02		 mov	 eax, DWORD PTR [edx]

; 1808 :         ++_Last;

  00148	8d 7f 08	 lea	 edi, DWORD PTR [edi+8]
  0014b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0014e	83 c2 08	 add	 edx, 8

; 1807 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00151	89 47 f8	 mov	 DWORD PTR [edi-8], eax
  00154	89 4f fc	 mov	 DWORD PTR [edi-4], ecx

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00157	3b d6		 cmp	 edx, esi
  00159	75 eb		 jne	 SHORT $LL58@emplace
$LN57@emplace:

; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);

  0015b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 1949 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1950 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1951 : #if _HAS_CXX20
; 1952 :         if (!_STD is_constant_evaluated())
; 1953 : #endif // _HAS_CXX20
; 1954 :         {
; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));
; 1956 :             return _Dest + (_ULast - _UFirst);
; 1957 :         }
; 1958 :     }
; 1959 : 
; 1960 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0015e	3b f7		 cmp	 esi, edi
  00160	74 19		 je	 SHORT $LN68@emplace
  00162	8b 55 f0	 mov	 edx, DWORD PTR tv754[ebp]
  00165	2b d6		 sub	 edx, esi
$LL69@emplace:

; 1807 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00167	8b 06		 mov	 eax, DWORD PTR [esi]
  00169	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0016c	89 44 32 08	 mov	 DWORD PTR [edx+esi+8], eax
  00170	89 4c 32 0c	 mov	 DWORD PTR [edx+esi+12], ecx

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00174	83 c6 08	 add	 esi, 8
  00177	3b f7		 cmp	 esi, edi
  00179	75 ec		 jne	 SHORT $LL69@emplace
$LN68@emplace:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0017b	ff 75 f8	 push	 DWORD PTR $T6[ebp]
  0017e	8b cb		 mov	 ecx, ebx
  00180	ff 75 f4	 push	 DWORD PTR __Newsize$1$[ebp]
  00183	ff 75 fc	 push	 DWORD PTR $T7[ebp]
  00186	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Change_array

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0018b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0018e	8b 4d f0	 mov	 ecx, DWORD PTR tv754[ebp]
  00191	5f		 pop	 edi

; 1042 :     }

  00192	5e		 pop	 esi

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00193	89 08		 mov	 DWORD PTR [eax], ecx

; 1042 :     }

  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 0c 00	 ret	 12			; 0000000cH
$LN147@emplace:

; 873  :             _Xlength();

  0019c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
$LN148@emplace:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  001a1	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN143@emplace:
  001a6	cc		 int	 3
??$emplace@ABV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@1@ABV?$CTimeEvent@M@@@Z ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::emplace<CTimeEvent<float> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
;	COMDAT ?InsertItemTimeEventFloat@@YAXPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@MM@Z
_TEXT	SEGMENT
_TimeEvent$ = -8					; size = 8
_pTable$ = 8						; size = 4
$T1 = 8							; size = 4
_fTime$ = 12						; size = 4
_fValue$ = 16						; size = 4
?InsertItemTimeEventFloat@@YAXPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@MM@Z PROC ; InsertItemTimeEventFloat, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00003	8b 55 08	 mov	 edx, DWORD PTR _pTable$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 24   : {

  00006	83 ec 08	 sub	 esp, 8

; 26   : 	for (; itor != pTable->end(); ++itor)

  00009	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000e	8b 02		 mov	 eax, DWORD PTR [edx]
  00010	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00013	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 26   : 	for (; itor != pTable->end(); ++itor)

  00015	74 10		 je	 SHORT $LN44@InsertItem
$LL4@InsertItem:

; 27   : 	{
; 28   : 		TTimeEventTypeFloat & rTimeEvent = *itor;
; 29   : 		if (rTimeEvent.m_fTime > fTime)

  00017	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0001b	0f 2f c1	 comiss	 xmm0, xmm1
  0001e	77 07		 ja	 SHORT $LN44@InsertItem
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  00020	83 c0 08	 add	 eax, 8

; 166  :         return _Ptr == _Right._Ptr;

  00023	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 26   : 	for (; itor != pTable->end(); ++itor)

  00025	75 f0		 jne	 SHORT $LL4@InsertItem
$LN44@InsertItem:

; 35   : 	TimeEvent.m_Value = fValue;

  00027	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fValue$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1045 :         return emplace(_Where, _Val);

  0002c	8d 4d f8	 lea	 ecx, DWORD PTR _TimeEvent$[ebp]
  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	8d 45 08	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 34   : 	TimeEvent.m_fTime = fTime;

  00034	f3 0f 11 4d f8	 movss	 DWORD PTR _TimeEvent$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1045 :         return emplace(_Where, _Val);

  00039	50		 push	 eax
  0003a	8b ca		 mov	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 35   : 	TimeEvent.m_Value = fValue;

  0003c	f3 0f 11 45 fc	 movss	 DWORD PTR _TimeEvent$[ebp+4], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1045 :         return emplace(_Where, _Val);

  00041	e8 00 00 00 00	 call	 ??$emplace@ABV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@1@ABV?$CTimeEvent@M@@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::emplace<CTimeEvent<float> const &>
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 38   : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?InsertItemTimeEventFloat@@YAXPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@MM@Z ENDP ; InsertItemTimeEventFloat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xrange@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xrange, COMDAT

; 2173 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2064 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp
;	COMDAT ?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z
_TEXT	SEGMENT
_pTokenVector$ = -64					; size = 4
__Count$1$ = -60					; size = 4
tv1259 = -60						; size = 4
_c_szKey$GSCopy$1$ = -60				; size = 4
tv1272 = -56						; size = 4
tv1273 = -56						; size = 4
tv1282 = -56						; size = 4
_pTimeEventTableFloat$GSCopy$1$ = -56			; size = 4
__Oldsize$1$ = -52					; size = 4
tv1274 = -52						; size = 4
_rTextFileLoader$GSCopy$1$ = -52			; size = 4
$T5 = -48						; size = 4
tv1283 = -48						; size = 4
$T6 = -48						; size = 4
_i$1$ = -44						; size = 4
$T7 = -44						; size = 4
$T8 = -44						; size = 4
$T9 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
_c_szKey$ = 12						; size = 4
_pTimeEventTableFloat$ = 16				; size = 4
?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z PROC ; GetTokenTimeEventFloat, COMDAT

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _c_szKey$[ebp]
  0002d	0f 57 c0	 xorps	 xmm0, xmm0
  00030	8b 45 08	 mov	 eax, DWORD PTR _rTextFileLoader$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00033	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 5    : {

  00035	8b 7d 10	 mov	 edi, DWORD PTR _pTimeEventTableFloat$[ebp]
  00038	89 45 cc	 mov	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp], eax
  0003b	89 4d c4	 mov	 DWORD PTR _c_szKey$GSCopy$1$[ebp], ecx
  0003e	89 7d c8	 mov	 DWORD PTR _pTimeEventTableFloat$GSCopy$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00041	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00044	0f 11 45 d8	 movups	 XMMWORD PTR $T9[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00048	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0004f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 0
$LL252@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00056	8a 06		 mov	 al, BYTE PTR [esi]
  00058	46		 inc	 esi
  00059	84 c0		 test	 al, al
  0005b	75 f9		 jne	 SHORT $LL252@GetTokenTi
  0005d	2b f2		 sub	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 857  :         if (_Count > max_size()) {

  0005f	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00065	0f 87 32 03 00
	00		 ja	 $LN260@GetTokenTi

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0006b	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0006e	77 1c		 ja	 SHORT $LN28@GetTokenTi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00070	56		 push	 esi
  00071	51		 push	 ecx
  00072	8d 45 d8	 lea	 eax, DWORD PTR $T9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00075	89 75 e8	 mov	 DWORD PTR $T9[ebp+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00078	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00079	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00080	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00085	c6 44 35 d8 00	 mov	 BYTE PTR $T9[ebp+esi], 0

; 875  :             } else { // _Strat == _Construct_strategy::_From_string
; 876  : #ifdef _INSERT_STRING_ANNOTATION
; 877  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 878  : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 879  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 880  : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 881  :             }
; 882  : 
; 883  :             _Proxy._Release();
; 884  :             return;

  0008a	eb 6f		 jmp	 SHORT $LN255@GetTokenTi
$LN28@GetTokenTi:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0008c	8b c6		 mov	 eax, esi
  0008e	83 c8 0f	 or	 eax, 15			; 0000000fH
  00091	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00096	76 14		 jbe	 SHORT $LN34@GetTokenTi

; 2944 :             return _Max;

  00098	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  0009d	c7 45 d0 ff ff
	ff 7f		 mov	 DWORD PTR $T5[ebp], 2147483647 ; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a4	51		 push	 ecx
  000a5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000aa	eb 2a		 jmp	 SHORT $LN257@GetTokenTi
$LN34@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000ac	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  000b1	3b c1		 cmp	 eax, ecx
  000b3	0f 42 c1	 cmovb	 eax, ecx
  000b6	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b9	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000bc	85 c9		 test	 ecx, ecx
  000be	74 1e		 je	 SHORT $LN256@GetTokenTi
$LN48@GetTokenTi:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000c0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c6	72 08		 jb	 SHORT $LN49@GetTokenTi

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c8	51		 push	 ecx
  000c9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ce	eb 06		 jmp	 SHORT $LN257@GetTokenTi
$LN49@GetTokenTi:

; 136  :         return ::operator new(_Bytes);

  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN257@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000d6	8b c8		 mov	 ecx, eax
  000d8	83 c4 04	 add	 esp, 4
  000db	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
$LN256@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000de	56		 push	 esi
  000df	ff 75 c4	 push	 DWORD PTR _c_szKey$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000e2	89 4d d4	 mov	 DWORD PTR $T7[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e5	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000e6	89 4d d8	 mov	 DWORD PTR $T9[ebp], ecx

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  000e9	89 75 e8	 mov	 DWORD PTR $T9[ebp+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  000ec	89 45 ec	 mov	 DWORD PTR $T9[ebp+20], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ef	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000f4	8b 45 d4	 mov	 eax, DWORD PTR $T7[ebp]
  000f7	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
$LN255@GetTokenTi:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 7    : 	if (!rTextFileLoader.GetTokenVector(c_szKey, &pTokenVector))

  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fe	8b 4d cc	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00101	8d 45 c0	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  00104	50		 push	 eax
  00105	8d 45 d8	 lea	 eax, DWORD PTR $T9[ebp]
  00108	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00115	8b 4d ec	 mov	 ecx, DWORD PTR $T9[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 7    : 	if (!rTextFileLoader.GetTokenVector(c_szKey, &pTokenVector))

  00118	8b f0		 mov	 esi, eax
  0011a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00121	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00124	76 2c		 jbe	 SHORT $LN78@GetTokenTi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00126	8b 55 d8	 mov	 edx, DWORD PTR $T9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00129	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012a	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0012c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00132	72 14		 jb	 SHORT $LN89@GetTokenTi

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00134	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00137	83 c1 23	 add	 ecx, 35			; 00000023H
  0013a	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0013f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00142	0f 87 5a 02 00
	00		 ja	 $LN261@GetTokenTi
$LN89@GetTokenTi:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00148	51		 push	 ecx
  00149	52		 push	 edx
  0014a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0014f	83 c4 08	 add	 esp, 8
$LN78@GetTokenTi:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 7    : 	if (!rTextFileLoader.GetTokenVector(c_szKey, &pTokenVector))

  00152	85 f6		 test	 esi, esi
  00154	75 07		 jne	 SHORT $LN5@GetTokenTi

; 8    : 		return FALSE;

  00156	33 c0		 xor	 eax, eax
  00158	e9 20 02 00 00	 jmp	 $LN1@GetTokenTi
$LN5@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0015d	8b 07		 mov	 eax, DWORD PTR [edi]
  0015f	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00162	3b c6		 cmp	 eax, esi
  00164	74 05		 je	 SHORT $LN95@GetTokenTi

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00166	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00169	8b f0		 mov	 esi, eax
$LN95@GetTokenTi:

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0016b	8b 45 c0	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  0016e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00171	2b 08		 sub	 ecx, DWORD PTR [eax]
  00173	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00178	f7 e9		 imul	 ecx

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0017a	8b 07		 mov	 eax, DWORD PTR [edi]

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0017c	c1 fa 02	 sar	 edx, 2
  0017f	8b ca		 mov	 ecx, edx
  00181	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00184	03 ca		 add	 ecx, edx

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00186	8b d6		 mov	 edx, esi
  00188	2b d0		 sub	 edx, eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 11   : 	pTimeEventTableFloat->resize(pTokenVector->size() / 2);

  0018a	d1 e9		 shr	 ecx, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0018c	c1 fa 03	 sar	 edx, 3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 11   : 	pTimeEventTableFloat->resize(pTokenVector->size() / 2);

  0018f	89 4d c4	 mov	 DWORD PTR __Count$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00192	89 55 cc	 mov	 DWORD PTR __Oldsize$1$[ebp], edx

; 1581 :         if (_Newsize < _Oldsize) { // trim

  00195	3b ca		 cmp	 ecx, edx
  00197	73 0b		 jae	 SHORT $LN105@GetTokenTi

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  00199	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;

  0019c	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1587 :             return;

  0019f	e9 da 00 00 00	 jmp	 $LN106@GetTokenTi
$LN105@GetTokenTi:

; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  001a4	0f 86 d4 00 00
	00		 jbe	 $LN106@GetTokenTi

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  001aa	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  001ad	2b d0		 sub	 edx, eax
  001af	c1 fa 03	 sar	 edx, 3

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  001b2	3b ca		 cmp	 ecx, edx
  001b4	0f 86 b9 00 00
	00		 jbe	 $LN107@GetTokenTi

; 1538 :         if (_Newsize > max_size()) {

  001ba	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  001c0	0f 87 e1 01 00
	00		 ja	 $LN262@GetTokenTi

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  001c6	8b f2		 mov	 esi, edx
  001c8	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  001cd	d1 ee		 shr	 esi, 1
  001cf	2b c6		 sub	 eax, esi
  001d1	3b d0		 cmp	 edx, eax
  001d3	76 19		 jbe	 SHORT $LN114@GetTokenTi

; 1997 :             return _Max; // geometric growth would overflow

  001d5	be f8 ff ff ff	 mov	 esi, -8			; fffffff8H
  001da	c7 45 d4 ff ff
	ff 1f		 mov	 DWORD PTR $T8[ebp], 536870911 ; 1fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001e1	56		 push	 esi
  001e2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001e7	8b c8		 mov	 ecx, eax
  001e9	89 4d d0	 mov	 DWORD PTR $T6[ebp], ecx
  001ec	eb 4a		 jmp	 SHORT $LN258@GetTokenTi
$LN114@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  001ee	03 f2		 add	 esi, edx
  001f0	89 75 d4	 mov	 DWORD PTR $T8[ebp], esi

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  001f3	3b f1		 cmp	 esi, ecx
  001f5	73 13		 jae	 SHORT $LN115@GetTokenTi

; 2003 :             return _Newsize; // geometric growth would be insufficient

  001f7	8b f1		 mov	 esi, ecx
  001f9	89 75 d4	 mov	 DWORD PTR $T8[ebp], esi
$LN125@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  001fc	c1 e6 03	 shl	 esi, 3

; 227  :     if (_Bytes == 0) {

  001ff	85 f6		 test	 esi, esi
  00201	75 15		 jne	 SHORT $LN129@GetTokenTi

; 228  :         return nullptr;

  00203	33 c9		 xor	 ecx, ecx
  00205	89 4d d0	 mov	 DWORD PTR $T6[ebp], ecx
  00208	eb 31		 jmp	 SHORT $LN139@GetTokenTi
$LN115@GetTokenTi:

; 117  :         if (_Count > _Max_possible) {

  0020a	81 fe ff ff ff
	1f		 cmp	 esi, 536870911		; 1fffffffH
  00210	0f 87 96 01 00
	00		 ja	 $LN263@GetTokenTi
  00216	eb e4		 jmp	 SHORT $LN125@GetTokenTi
$LN129@GetTokenTi:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00218	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0021e	72 0d		 jb	 SHORT $LN130@GetTokenTi

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00220	56		 push	 esi
  00221	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00226	8b c8		 mov	 ecx, eax
  00228	89 4d d0	 mov	 DWORD PTR $T6[ebp], ecx
  0022b	eb 0b		 jmp	 SHORT $LN258@GetTokenTi
$LN130@GetTokenTi:

; 136  :         return ::operator new(_Bytes);

  0022d	56		 push	 esi
  0022e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  00233	8b c8		 mov	 ecx, eax
  00235	89 45 d0	 mov	 DWORD PTR $T6[ebp], eax
$LN258@GetTokenTi:

; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);

  00238	83 c4 04	 add	 esp, 4
$LN139@GetTokenTi:
  0023b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0023e	8b f1		 mov	 esi, ecx

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00240	8b 17		 mov	 edx, DWORD PTR [edi]
  00242	3b d0		 cmp	 edx, eax
  00244	74 1d		 je	 SHORT $LN149@GetTokenTi
  00246	8b f8		 mov	 edi, eax
$LL150@GetTokenTi:

; 1807 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00248	8b 02		 mov	 eax, DWORD PTR [edx]

; 1808 :         ++_Last;

  0024a	8d 76 08	 lea	 esi, DWORD PTR [esi+8]
  0024d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00250	83 c2 08	 add	 edx, 8

; 1807 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00253	89 46 f8	 mov	 DWORD PTR [esi-8], eax
  00256	89 4e fc	 mov	 DWORD PTR [esi-4], ecx

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00259	3b d7		 cmp	 edx, edi
  0025b	75 eb		 jne	 SHORT $LL150@GetTokenTi
  0025d	8b 7d c8	 mov	 edi, DWORD PTR _pTimeEventTableFloat$GSCopy$1$[ebp]
  00260	8b 4d d0	 mov	 ecx, DWORD PTR $T6[ebp]
$LN149@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1570 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00263	ff 75 d4	 push	 DWORD PTR $T8[ebp]
  00266	ff 75 c4	 push	 DWORD PTR __Count$1$[ebp]
  00269	51		 push	 ecx
  0026a	8b cf		 mov	 ecx, edi
  0026c	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Change_array

; 1594 :                 return;

  00271	eb 0b		 jmp	 SHORT $LN106@GetTokenTi
$LN107@GetTokenTi:

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00273	2b 4d cc	 sub	 ecx, DWORD PTR __Oldsize$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 2056 :     for (; 0 < _Count; --_Count) {

  00276	74 03		 je	 SHORT $LN186@GetTokenTi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00278	8d 34 ce	 lea	 esi, DWORD PTR [esi+ecx*8]
$LN186@GetTokenTi:
  0027b	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN106@GetTokenTi:

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0027e	8b 4d c0	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 13   : 	DWORD dwIndex = 0;

  00281	33 f6		 xor	 esi, esi

; 14   : 	for (DWORD i = 0; i < pTokenVector->size(); i+=2, ++dwIndex)

  00283	89 75 d4	 mov	 DWORD PTR _i$1$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00286	8b 01		 mov	 eax, DWORD PTR [ecx]
  00288	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0028b	89 45 c4	 mov	 DWORD PTR tv1259[ebp], eax
  0028e	2b c8		 sub	 ecx, eax
  00290	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00295	f7 e9		 imul	 ecx
  00297	c1 fa 02	 sar	 edx, 2
  0029a	8b c2		 mov	 eax, edx
  0029c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0029f	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 14   : 	for (DWORD i = 0; i < pTokenVector->size(); i+=2, ++dwIndex)

  002a1	0f 84 d1 00 00
	00		 je	 $LN3@GetTokenTi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1933 :         auto& _My_data = _Mypair._Myval2;

  002a7	33 c9		 xor	 ecx, ecx
  002a9	33 d2		 xor	 edx, edx
  002ab	89 4d d0	 mov	 DWORD PTR tv1283[ebp], ecx
  002ae	66 90		 npad	 2
$LL4@GetTokenTi:

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002b0	3b c2		 cmp	 eax, edx
  002b2	0f 86 e0 00 00
	00		 jbe	 $LN234@GetTokenTi

; 1936 :         }
; 1937 : 
; 1938 :         return _My_data._Myfirst[_Pos];

  002b8	03 4d c4	 add	 ecx, DWORD PTR tv1259[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002bb	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  002bf	76 02		 jbe	 SHORT $LN205@GetTokenTi

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  002c1	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN205@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002c3	8b 17		 mov	 edx, DWORD PTR [edi]
  002c5	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  002c8	2b c2		 sub	 eax, edx
  002ca	89 55 c8	 mov	 DWORD PTR tv1272[ebp], edx
  002cd	c1 f8 03	 sar	 eax, 3
  002d0	3b c6		 cmp	 eax, esi
  002d2	0f 86 d9 00 00
	00		 jbe	 $LN235@GetTokenTi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 16   : 		pTimeEventTableFloat->at(dwIndex).m_fTime = atof(pTokenVector->at(i).c_str());

  002d8	51		 push	 ecx
  002d9	e8 00 00 00 00	 call	 _atof
  002de	8b 45 c8	 mov	 eax, DWORD PTR tv1272[ebp]
  002e1	83 c4 04	 add	 esp, 4
  002e4	d9 1c f0	 fstp	 DWORD PTR [eax+esi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002e7	8b 45 c0	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  002ea	8b 10		 mov	 edx, DWORD PTR [eax]
  002ec	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002ef	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002f4	2b ca		 sub	 ecx, edx
  002f6	89 55 c8	 mov	 DWORD PTR tv1282[ebp], edx
  002f9	f7 e9		 imul	 ecx
  002fb	8b 45 d4	 mov	 eax, DWORD PTR _i$1$[ebp]
  002fe	c1 fa 02	 sar	 edx, 2
  00301	40		 inc	 eax
  00302	8b ca		 mov	 ecx, edx
  00304	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00307	03 ca		 add	 ecx, edx
  00309	3b c8		 cmp	 ecx, eax
  0030b	0f 86 87 00 00
	00		 jbe	 $LN234@GetTokenTi

; 1936 :         }
; 1937 : 
; 1938 :         return _My_data._Myfirst[_Pos];

  00311	8b 4d c8	 mov	 ecx, DWORD PTR tv1282[ebp]
  00314	83 c1 18	 add	 ecx, 24			; 00000018H
  00317	03 4d d0	 add	 ecx, DWORD PTR tv1283[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0031a	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0031e	76 02		 jbe	 SHORT $LN221@GetTokenTi

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00320	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN221@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00322	8b 17		 mov	 edx, DWORD PTR [edi]
  00324	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00327	2b c2		 sub	 eax, edx
  00329	89 55 c8	 mov	 DWORD PTR tv1273[ebp], edx
  0032c	c1 f8 03	 sar	 eax, 3
  0032f	3b c6		 cmp	 eax, esi
  00331	76 7e		 jbe	 SHORT $LN235@GetTokenTi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 17   : 		pTimeEventTableFloat->at(dwIndex).m_Value = atof(pTokenVector->at(i+1).c_str());

  00333	51		 push	 ecx
  00334	e8 00 00 00 00	 call	 _atof
  00339	8b 45 c8	 mov	 eax, DWORD PTR tv1273[ebp]
  0033c	83 c4 04	 add	 esp, 4
  0033f	83 45 d4 02	 add	 DWORD PTR _i$1$[ebp], 2
  00343	83 45 d0 30	 add	 DWORD PTR tv1283[ebp], 48 ; 00000030H
  00347	d9 5c f0 04	 fstp	 DWORD PTR [eax+esi*8+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0034b	8b 45 c0	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 14   : 	for (DWORD i = 0; i < pTokenVector->size(); i+=2, ++dwIndex)

  0034e	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0034f	8b 10		 mov	 edx, DWORD PTR [eax]
  00351	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00354	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00359	2b ca		 sub	 ecx, edx
  0035b	89 55 c4	 mov	 DWORD PTR tv1259[ebp], edx
  0035e	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 14   : 	for (DWORD i = 0; i < pTokenVector->size(); i+=2, ++dwIndex)

  00360	8b 4d d0	 mov	 ecx, DWORD PTR tv1283[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00363	c1 fa 02	 sar	 edx, 2
  00366	8b c2		 mov	 eax, edx
  00368	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0036b	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.cpp

; 14   : 	for (DWORD i = 0; i < pTokenVector->size(); i+=2, ++dwIndex)

  0036d	8b 55 d4	 mov	 edx, DWORD PTR _i$1$[ebp]
  00370	3b d0		 cmp	 edx, eax
  00372	0f 82 38 ff ff
	ff		 jb	 $LL4@GetTokenTi
$LN3@GetTokenTi:

; 18   : 	}
; 19   : 
; 20   : 	return TRUE;

  00378	b8 01 00 00 00	 mov	 eax, 1
$LN1@GetTokenTi:

; 21   : }

  0037d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00380	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00387	59		 pop	 ecx
  00388	5f		 pop	 edi
  00389	5e		 pop	 esi
  0038a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0038d	33 cd		 xor	 ecx, ebp
  0038f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00394	8b e5		 mov	 esp, ebp
  00396	5d		 pop	 ebp
  00397	c3		 ret	 0
$LN234@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  00398	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN260@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  0039d	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN261@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003a2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN262@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1539 :             _Xlength();

  003a7	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
$LN263@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  003ac	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN235@GetTokenTi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  003b1	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xrange
$LN254@GetTokenTi:
  003b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z ENDP ; GetTokenTimeEventFloat
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 2173 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
