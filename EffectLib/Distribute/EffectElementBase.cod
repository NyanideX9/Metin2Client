; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EffectLib\Distribute\EffectElementBase.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CEffectElementBase@@QAE@XZ			; CEffectElementBase::CEffectElementBase
PUBLIC	??1CEffectElementBase@@UAE@XZ			; CEffectElementBase::~CEffectElementBase
PUBLIC	?Clear@CEffectElementBase@@QAEXXZ		; CEffectElementBase::Clear
PUBLIC	?isData@CEffectElementBase@@QAE_NXZ		; CEffectElementBase::isData
PUBLIC	?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z ; CEffectElementBase::LoadScript
PUBLIC	?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ; CEffectElementBase::GetPosition
PUBLIC	?GetStartTime@CEffectElementBase@@QAEMXZ	; CEffectElementBase::GetStartTime
PUBLIC	?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
PUBLIC	??_GCEffectElementBase@@UAEPAXI@Z		; CEffectElementBase::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEPAUSEffectPosition@@QAU2@ABU2@@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
PUBLIC	??$_Copy_memmove@PAUSEffectPosition@@PAU1@@std@@YAPAUSEffectPosition@@PAU1@00@Z ; std::_Copy_memmove<SEffectPosition *,SEffectPosition *>
PUBLIC	??$_Copy_memmove_tail@PAUSEffectPosition@@@std@@YAPAUSEffectPosition@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<SEffectPosition *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_7CEffectElementBase@@6B@			; CEffectElementBase::`vftable'
PUBLIC	??_C@_09EJLICMCM@starttime@			; `string'
PUBLIC	??_C@_0BC@KPMBIEBE@timeeventposition@		; `string'
PUBLIC	??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@	; `string'
PUBLIC	??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@		; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CEffectElementBase@@6B@			; CEffectElementBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEffectElementBase@@@8			; CEffectElementBase `RTTI Type Descriptor'
PUBLIC	??_R3CEffectElementBase@@8			; CEffectElementBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEffectElementBase@@8			; CEffectElementBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEffectElementBase@@8		; CEffectElementBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z:PROC ; CTextFileLoader::GetTokenVector
EXTRN	?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z:PROC ; CTextFileLoader::GetTokenFloat
EXTRN	??_ECEffectElementBase@@UAEPAXI@Z:PROC		; CEffectElementBase::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CEffectElementBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEffectElementBase@@8 DD FLAT:??_R0?AVCEffectElementBase@@@8 ; CEffectElementBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CEffectElementBase@@8
rdata$r	SEGMENT
??_R2CEffectElementBase@@8 DD FLAT:??_R1A@?0A@EA@CEffectElementBase@@8 ; CEffectElementBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEffectElementBase@@8
rdata$r	SEGMENT
??_R3CEffectElementBase@@8 DD 00H			; CEffectElementBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEffectElementBase@@@8
data$rs	SEGMENT
??_R0?AVCEffectElementBase@@@8 DD FLAT:??_7type_info@@6B@ ; CEffectElementBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEffectElementBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CEffectElementBase@@6B@
rdata$r	SEGMENT
??_R4CEffectElementBase@@6B@ DD 00H			; CEffectElementBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEffectElementBase@@@8
	DD	FLAT:??_R3CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@
CONST	SEGMENT
??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@ DB 'MOVING_TYPE_DIRECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@
CONST	SEGMENT
??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@ DB 'MOVING_TYPE_BEZIER_CURVE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPMBIEBE@timeeventposition@
CONST	SEGMENT
??_C@_0BC@KPMBIEBE@timeeventposition@ DB 'timeeventposition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJLICMCM@starttime@
CONST	SEGMENT
??_C@_09EJLICMCM@starttime@ DB 'starttime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CEffectElementBase@@6B@
CONST	SEGMENT
??_7CEffectElementBase@@6B@ DD FLAT:??_R4CEffectElementBase@@6B@ ; CEffectElementBase::`vftable'
	DD	FLAT:??_ECEffectElementBase@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$1
__ehfuncinfo$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAUSEffectPosition@@@std@@YAPAUSEffectPosition@@QBDQAU1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAUSEffectPosition@@@std@@YAPAUSEffectPosition@@QBDQAU1@II@Z PROC ; std::_Copy_memmove_tail<SEffectPosition *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAUSEffectPosition@@@std@@YAPAUSEffectPosition@@QBDQAU1@II@Z ENDP ; std::_Copy_memmove_tail<SEffectPosition *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSEffectPosition@@PAU1@@std@@YAPAUSEffectPosition@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSEffectPosition@@PAU1@@std@@YAPAUSEffectPosition@@PAU1@00@Z PROC ; std::_Copy_memmove<SEffectPosition *,SEffectPosition *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 05	 sar	 eax, 5

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAUSEffectPosition@@@std@@YAPAUSEffectPosition@@QBDQAU1@II@Z ; std::_Copy_memmove_tail<SEffectPosition *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAUSEffectPosition@@PAU1@@std@@YAPAUSEffectPosition@@PAU1@00@Z ENDP ; std::_Copy_memmove<SEffectPosition *,SEffectPosition *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEPAUSEffectPosition@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
$T1 = -8						; size = 4
tv678 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEPAUSEffectPosition@@QAU2@ABU2@@Z PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 f8 05	 sar	 eax, 5

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001a	3d ff ff ff 07	 cmp	 eax, 134217727		; 07ffffffH
  0001f	0f 84 16 01 00
	00		 je	 $LN131@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00025	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00028	8d 50 01	 lea	 edx, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	2b f9		 sub	 edi, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002d	89 55 f4	 mov	 DWORD PTR __Newsize$1$[ebp], edx

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00030	c1 ff 05	 sar	 edi, 5

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00033	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH
  00038	8b cf		 mov	 ecx, edi
  0003a	d1 e9		 shr	 ecx, 1
  0003c	2b c1		 sub	 eax, ecx
  0003e	3b f8		 cmp	 edi, eax
  00040	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00042	b8 e0 ff ff ff	 mov	 eax, -32		; ffffffe0H
  00047	c7 45 f8 e0 ff
	ff ff		 mov	 DWORD PTR $T1[ebp], -32	; ffffffe0H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00054	eb 3b		 jmp	 SHORT $LN129@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00056	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00059	8b ca		 mov	 ecx, edx
  0005b	3b c2		 cmp	 eax, edx
  0005d	0f 43 c8	 cmovae	 ecx, eax
  00060	81 f9 ff ff ff
	07		 cmp	 ecx, 134217727		; 07ffffffH
  00066	0f 87 d4 00 00
	00		 ja	 $LN132@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006c	c1 e1 05	 shl	 ecx, 5

; 986  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006f	8b c1		 mov	 eax, ecx

; 122  :     return _Count * _Ty_size;

  00071	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx

; 227  :     if (_Bytes == 0) {

  00074	85 c0		 test	 eax, eax
  00076	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  00078	33 ff		 xor	 edi, edi
  0007a	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	eb 06		 jmp	 SHORT $LN129@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN129@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00091	8b f8		 mov	 edi, eax
  00093	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00096	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00099	83 e3 e0	 and	 ebx, -32		; ffffffe0H
  0009c	8d 0c 3b	 lea	 ecx, DWORD PTR [ebx+edi]

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0009f	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a2	89 4d fc	 mov	 DWORD PTR tv678[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000a5	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000a8	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000ab	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  000af	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b6	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b8	3b da		 cmp	 ebx, edx
  000ba	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000bc	8b 5d fc	 mov	 ebx, DWORD PTR tv678[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000c1	eb 16		 jmp	 SHORT $LN58@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	53		 push	 ebx
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSEffectPosition@@PAU1@@std@@YAPAUSEffectPosition@@PAU1@00@Z ; std::_Copy_memmove<SEffectPosition *,SEffectPosition *>
  000cb	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000ce	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d0	8b 5d fc	 mov	 ebx, DWORD PTR tv678[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d6	8d 43 20	 lea	 eax, DWORD PTR [ebx+32]
$LN58@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d9	50		 push	 eax
  000da	52		 push	 edx
  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSEffectPosition@@PAU1@@std@@YAPAUSEffectPosition@@PAU1@00@Z ; std::_Copy_memmove<SEffectPosition *,SEffectPosition *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e1	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e6	85 c0		 test	 eax, eax
  000e8	74 2c		 je	 SHORT $LN80@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ea	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ed	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ef	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000f2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f8	72 12		 jb	 SHORT $LN91@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fa	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fd	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00100	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00102	83 c0 fc	 add	 eax, -4			; fffffffcH
  00105	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00108	77 2c		 ja	 SHORT $LN88@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010a	8b c2		 mov	 eax, edx
$LN91@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0010c	51		 push	 ecx
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00113	83 c4 08	 add	 esp, 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00116	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00119	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0011c	c1 e0 05	 shl	 eax, 5
  0011f	03 c7		 add	 eax, edi
  00121	89 3e		 mov	 DWORD PTR [esi], edi
  00123	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00126	03 cf		 add	 ecx, edi

; 903  :     }

  00128	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00129	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  0012c	8b c3		 mov	 eax, ebx

; 903  :     }

  0012e	5e		 pop	 esi
  0012f	5b		 pop	 ebx
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c2 08 00	 ret	 8
$LN88@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00136	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN131@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  0013b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
$LN132@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00140	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN128@Emplace_re:
  00145	cc		 int	 3
??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEPAUSEffectPosition@@QAU2@ABU2@@Z ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEffectElementBase@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEffectElementBase@@UAEPAXI@Z PROC			; CEffectElementBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEffectElementBase@@UAE@XZ ; CEffectElementBase::~CEffectElementBase
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 14		 push	 20			; 00000014H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCEffectElementBase@@UAEPAXI@Z ENDP			; CEffectElementBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?GetStartTime@CEffectElementBase@@QAEMXZ
_TEXT	SEGMENT
?GetStartTime@CEffectElementBase@@QAEMXZ PROC		; CEffectElementBase::GetStartTime, COMDAT
; _this$ = ecx

; 159  : 	return m_fStartTime;

  00000	d9 41 04	 fld	 DWORD PTR [ecx+4]

; 160  : }

  00003	c3		 ret	 0
?GetStartTime@CEffectElementBase@@QAEMXZ ENDP		; CEffectElementBase::GetStartTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv1581 = -12						; size = 4
tv1577 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fTime$ = 8						; size = 4
_rPosition$ = 12					; size = 4
?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z PROC ; CEffectElementBase::GetPosition, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00014	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00017	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0001a	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 7    : 	if (m_TimeEventTablePosition.empty())

  0001c	75 29		 jne	 SHORT $LN2@GetPositio

; 8    : 	{
; 9    : 		rPosition = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _rPosition$[ebp]
  00021	5f		 pop	 edi

; 59   : }

  00022	5e		 pop	 esi
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00029	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00030	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00037	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003a	33 cd		 xor	 ecx, ebp
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN2@GetPositio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00047	2b c6		 sub	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 12   : 	if (m_TimeEventTablePosition.size()==1)

  00049	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0004c	83 f8 20	 cmp	 eax, 32			; 00000020H
  0004f	0f 84 08 02 00
	00		 je	 $LN167@GetPositio

; 13   : 	{
; 14   : 		rPosition = m_TimeEventTablePosition[0].m_vecPosition;
; 15   : 		return;
; 16   : 	}
; 17   : 	if (m_TimeEventTablePosition.front().m_fTime > fTime)

  00055	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00059	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fTime$[ebp]
  0005e	0f 2f c4	 comiss	 xmm0, xmm4
  00061	0f 87 f6 01 00
	00		 ja	 $LN167@GetPositio

; 18   : 	{
; 19   : 		rPosition = m_TimeEventTablePosition.front().m_vecPosition;
; 20   : 		return;
; 21   : 	}
; 22   : 	if (m_TimeEventTablePosition.back().m_fTime < fTime)

  00067	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  0006a	0f 2f 62 e0	 comiss	 xmm4, DWORD PTR [edx-32]
  0006e	76 14		 jbe	 SHORT $LN5@GetPositio

; 23   : 	{
; 24   : 		rPosition = m_TimeEventTablePosition.back().m_vecPosition;

  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _rPosition$[ebp]
  00073	f3 0f 7e 42 e4	 movq	 xmm0, QWORD PTR [edx-28]
  00078	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0007c	8b 42 ec	 mov	 eax, DWORD PTR [edx-20]

; 25   : 		return;

  0007f	e9 e8 01 00 00	 jmp	 $LN178@GetPositio
$LN5@GetPositio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7456 :     auto _UFirst                = _STD _Get_unwrapped(_First);

  00084	2b d6		 sub	 edx, esi

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  00086	c1 fa 05	 sar	 edx, 5

; 7459 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  00089	85 d2		 test	 edx, edx
  0008b	7e 26		 jle	 SHORT $LN51@GetPositio
  0008d	0f 1f 00	 npad	 3
$LL50@GetPositio:

; 7460 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00090	8b ca		 mov	 ecx, edx
  00092	d1 e9		 shr	 ecx, 1

; 1664 :         _Where += _Off;

  00094	8b c1		 mov	 eax, ecx
  00096	c1 e0 05	 shl	 eax, 5
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 112  : 	return lhs.m_fTime < rhs;

  00099	0f 2f 24 30	 comiss	 xmm4, DWORD PTR [eax+esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7462 :         if (_Pred(*_UMid, _Val)) { // try top half

  0009d	76 0e		 jbe	 SHORT $LN52@GetPositio

; 7463 :             _UFirst = _STD _Next_iter(_UMid);

  0009f	83 c0 20	 add	 eax, 32			; 00000020H
  000a2	03 f0		 add	 esi, eax

; 7464 :             _Count -= _Count2 + 1;

  000a4	83 c8 ff	 or	 eax, -1
  000a7	2b c1		 sub	 eax, ecx
  000a9	03 d0		 add	 edx, eax

; 7465 :         } else {

  000ab	eb 02		 jmp	 SHORT $LN53@GetPositio
$LN52@GetPositio:

; 7466 :             _Count = _Count2;

  000ad	8b d1		 mov	 edx, ecx
$LN53@GetPositio:

; 7457 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _STD _Get_unwrapped(_Last));
; 7458 : 
; 7459 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  000af	85 d2		 test	 edx, edx
  000b1	7f dd		 jg	 SHORT $LL50@GetPositio
$LN51@GetPositio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000b3	39 77 08	 cmp	 DWORD PTR [edi+8], esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 33   : 	if (m_TimeEventTablePosition.begin() != result)

  000b6	0f 84 a1 01 00
	00		 je	 $LN167@GetPositio

; 34   : 	{
; 35   : 		rPrev = result-1;
; 36   : 	}
; 37   : 	else
; 38   : 	{
; 39   : 		rPosition = result->m_vecPosition;
; 40   : 		return;
; 41   : 	}
; 42   : 	TEffectPosition & rPrevEffectPosition = *rPrev;
; 43   : 	int iMovingType = rPrevEffectPosition.m_iMovingType;

  000bc	8b 46 f0	 mov	 eax, DWORD PTR [esi-16]

; 44   : 
; 45   : 	if (MOVING_TYPE_DIRECT == iMovingType)

  000bf	85 c0		 test	 eax, eax
  000c1	0f 85 87 00 00
	00		 jne	 $LN8@GetPositio

; 47   : 		float Head = fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  000c7	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  000cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 47   : 		float Head = fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  000d3	0f 28 e9	 movaps	 xmm5, xmm1
  000d6	f3 0f 5c 4e e0	 subss	 xmm1, DWORD PTR [esi-32]
  000db	f3 0f 5c ec	 subss	 xmm5, xmm4

; 48   : 		float Tail = 1.0f - fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  000df	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000

; 49   : 		rPosition = (rPrevEffectPosition.m_vecPosition*Head) + (rEffectPosition.m_vecPosition*Tail);

  000e7	8b 45 0c	 mov	 eax, DWORD PTR _rPosition$[ebp]
  000ea	5f		 pop	 edi
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 720  :             return (float)fabs(_X);

  000eb	0f 54 c8	 andps	 xmm1, xmm0
  000ee	0f 54 e8	 andps	 xmm5, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 47   : 		float Head = fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  000f1	f3 0f 5e e9	 divss	 xmm5, xmm1

; 48   : 		float Tail = 1.0f - fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  000f5	f3 0f 5c d5	 subss	 xmm2, xmm5
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  000f9	0f 28 c5	 movaps	 xmm0, xmm5
  000fc	f3 0f 59 46 e8	 mulss	 xmm0, DWORD PTR [esi-24]
  00101	0f 28 cd	 movaps	 xmm1, xmm5
  00104	f3 0f 59 6e e4	 mulss	 xmm5, DWORD PTR [esi-28]
  00109	f3 0f 59 4e ec	 mulss	 xmm1, DWORD PTR [esi-20]
  0010e	0f 28 da	 movaps	 xmm3, xmm2
  00111	f3 0f 59 5e 08	 mulss	 xmm3, DWORD PTR [esi+8]
  00116	0f 28 e2	 movaps	 xmm4, xmm2
  00119	f3 0f 59 56 04	 mulss	 xmm2, DWORD PTR [esi+4]
  0011e	f3 0f 59 66 0c	 mulss	 xmm4, DWORD PTR [esi+12]

; 180  :     x = fx;

  00123	f3 0f 58 d8	 addss	 xmm3, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 59   : }

  00127	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00128	f3 0f 58 ea	 addss	 xmm5, xmm2

; 181  :     y = fy;

  0012c	f3 0f 58 e1	 addss	 xmm4, xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 49   : 		rPosition = (rPrevEffectPosition.m_vecPosition*Head) + (rEffectPosition.m_vecPosition*Tail);

  00130	f3 0f 11 28	 movss	 DWORD PTR [eax], xmm5
  00134	f3 0f 11 58 04	 movss	 DWORD PTR [eax+4], xmm3
  00139	f3 0f 11 60 08	 movss	 DWORD PTR [eax+8], xmm4

; 59   : }

  0013e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00141	33 cd		 xor	 ecx, ebp
  00143	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
$LN8@GetPositio:

; 50   : 	}
; 51   : 	else if (MOVING_TYPE_BEZIER_CURVE == iMovingType)

  0014e	83 f8 01	 cmp	 eax, 1
  00151	0f 85 18 01 00
	00		 jne	 $LN10@GetPositio

; 53   : 		float ft = (fTime - rPrevEffectPosition.m_fTime) / (rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  00157	f3 0f 5c 66 e0	 subss	 xmm4, DWORD PTR [esi-32]
  0015c	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00160	f3 0f 5c 46 e0	 subss	 xmm0, DWORD PTR [esi-32]

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00165	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0016d	f3 0f 10 6e e8	 movss	 xmm5, DWORD PTR [esi-24]
  00172	f3 0f 10 7e ec	 movss	 xmm7, DWORD PTR [esi-20]
  00177	0f 28 dd	 movaps	 xmm3, xmm5
  0017a	f3 0f 58 5e f8	 addss	 xmm3, DWORD PTR [esi-8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 53   : 		float ft = (fTime - rPrevEffectPosition.m_fTime) / (rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  0017f	f3 0f 5e e0	 divss	 xmm4, xmm0

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00183	8b 45 0c	 mov	 eax, DWORD PTR _rPosition$[ebp]
  00186	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00187	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 53   : 		float ft = (fTime - rPrevEffectPosition.m_fTime) / (rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  0018a	f3 0f 11 65 08	 movss	 DWORD PTR _fTime$[ebp], xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0018f	f3 0f 59 46 08	 mulss	 xmm0, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00194	f3 0f 5c f4	 subss	 xmm6, xmm4
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00198	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _fTime$[ebp]
  0019d	f3 0f 11 45 f8	 movss	 DWORD PTR tv1577[ebp], xmm0
  001a2	0f 28 c4	 movaps	 xmm0, xmm4
  001a5	f3 0f 59 46 0c	 mulss	 xmm0, DWORD PTR [esi+12]
  001aa	0f 28 ce	 movaps	 xmm1, xmm6
  001ad	f3 0f 59 4e e4	 mulss	 xmm1, DWORD PTR [esi-28]
  001b2	f3 0f 11 45 f4	 movss	 DWORD PTR tv1581[ebp], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001b7	f3 0f 10 46 e4	 movss	 xmm0, DWORD PTR [esi-28]
  001bc	f3 0f 58 46 f4	 addss	 xmm0, DWORD PTR [esi-12]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  001c1	f3 0f 59 ce	 mulss	 xmm1, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  001c5	f3 0f 59 de	 mulss	 xmm3, xmm6
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  001c9	f3 0f 59 c6	 mulss	 xmm0, xmm6
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  001cd	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 182  :     z = fz;

  001d1	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001d5	0f 28 e7	 movaps	 xmm4, xmm7
  001d8	f3 0f 58 66 fc	 addss	 xmm4, DWORD PTR [esi-4]

; 180  :     x = fx;

  001dd	f3 0f 58 db	 addss	 xmm3, xmm3

; 182  :     z = fz;

  001e1	f3 0f 58 c0	 addss	 xmm0, xmm0

; 181  :     y = fy;

  001e5	f3 0f 59 e6	 mulss	 xmm4, xmm6

; 182  :     z = fz;

  001e9	f3 0f 58 c8	 addss	 xmm1, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  001ed	0f 28 c2	 movaps	 xmm0, xmm2
  001f0	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 59   : }

  001f5	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  001f6	f3 0f 59 65 08	 mulss	 xmm4, DWORD PTR _fTime$[ebp]

; 182  :     z = fz;

  001fb	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 181  :     y = fy;

  001ff	f3 0f 58 e4	 addss	 xmm4, xmm4

; 182  :     z = fz;

  00203	f3 0f 58 c8	 addss	 xmm1, xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00207	0f 28 c6	 movaps	 xmm0, xmm6
  0020a	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 180  :     x = fx;

  0020e	f3 0f 59 c6	 mulss	 xmm0, xmm6
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00212	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00216	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR tv1577[ebp]
  0021b	f3 0f 58 c3	 addss	 xmm0, xmm3
  0021f	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00223	f3 0f 58 c1	 addss	 xmm0, xmm1

; 181  :     y = fy;

  00227	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR tv1581[ebp]
  0022c	f3 0f 59 ca	 mulss	 xmm1, xmm2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00230	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00235	0f 28 c6	 movaps	 xmm0, xmm6
  00238	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 181  :     y = fy;

  0023c	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00240	f3 0f 58 c4	 addss	 xmm0, xmm4
  00244	f3 0f 58 c1	 addss	 xmm0, xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00248	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 59   : }

  0024d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00250	33 cd		 xor	 ecx, ebp
  00252	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00257	8b e5		 mov	 esp, ebp
  00259	5d		 pop	 ebp
  0025a	c2 08 00	 ret	 8
$LN167@GetPositio:
  0025d	8b 4d 0c	 mov	 ecx, DWORD PTR _rPosition$[ebp]
  00260	f3 0f 7e 46 04	 movq	 xmm0, QWORD PTR [esi+4]
  00265	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00269	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$LN178@GetPositio:
  0026c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN10@GetPositio:
  0026f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00272	5f		 pop	 edi
  00273	33 cd		 xor	 ecx, ebp
  00275	5e		 pop	 esi
  00276	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	c2 08 00	 ret	 8
?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ENDP ; CEffectElementBase::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
_rTextFileLoader$GSCopy$1$ = -76			; size = 4
tv1471 = -72						; size = 4
_this$GSCopy$1$ = -68					; size = 4
tv1447 = -64						; size = 4
$T2 = -64						; size = 4
__Left_size$1$ = -64					; size = 4
tv1441 = -60						; size = 4
tv1445 = -60						; size = 4
tv1451 = -60						; size = 4
tv1444 = -56						; size = 4
tv1448 = -56						; size = 4
tv1450 = -56						; size = 4
tv1452 = -56						; size = 4
tv1453 = -56						; size = 4
tv1454 = -56						; size = 4
$T3 = -56						; size = 4
_pTokenVector$ = -52					; size = 4
_EffectPosition$4 = -48					; size = 32
$T5 = -40						; size = 24
$T6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z PROC ; CEffectElementBase::LoadScript, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 bc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  0002f	8b 7d 08	 mov	 edi, DWORD PTR _rTextFileLoader$[ebp]

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  00032	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_09EJLICMCM@starttime@
  0003a	89 7d b4	 mov	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp], edi
  0003d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00042	83 c6 04	 add	 esi, 4
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	56		 push	 esi
  0004d	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  00050	8b cf		 mov	 ecx, edi
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00058	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  0005b	8b f8		 mov	 edi, eax
  0005d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00064	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00067	76 2c		 jbe	 SHORT $LN193@LoadScript
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00069	8b 55 d8	 mov	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0006c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006d	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0006f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00075	72 14		 jb	 SHORT $LN204@LoadScript

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00077	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0007a	83 c1 23	 add	 ecx, 35			; 00000023H
  0007d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00082	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00085	0f 87 ed 04 00
	00		 ja	 $LN332@LoadScript
$LN204@LoadScript:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0008b	51		 push	 ecx
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
$LN193@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  00095	85 ff		 test	 edi, edi
  00097	75 02		 jne	 SHORT $LN5@LoadScript

; 107  : 	{
; 108  : 		m_fStartTime = 0.0f;

  00099	89 3e		 mov	 DWORD PTR [esi], edi
$LN5@LoadScript:

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KPMBIEBE@timeeventposition@
  000a0	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  000a3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a8	8b 4d b4	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  000ab	8d 45 cc	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  000ae	50		 push	 eax
  000af	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  000b2	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000bf	8b 4d ec	 mov	 ecx, DWORD PTR $T6[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  000c2	8b f0		 mov	 esi, eax
  000c4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000cb	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000ce	76 2c		 jbe	 SHORT $LN230@LoadScript
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d0	8b 55 d8	 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d3	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d4	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000d6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000dc	72 14		 jb	 SHORT $LN241@LoadScript

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000de	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000e1	83 c1 23	 add	 ecx, 35			; 00000023H
  000e4	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e6	83 c0 fc	 add	 eax, -4			; fffffffcH
  000e9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ec	0f 87 8b 04 00
	00		 ja	 $LN333@LoadScript
$LN241@LoadScript:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f2	51		 push	 ecx
  000f3	52		 push	 edx
  000f4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f9	83 c4 08	 add	 esp, 8
$LN230@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  000fc	85 f6		 test	 esi, esi
  000fe	0f 84 4a 04 00
	00		 je	 $LN3@LoadScript
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00104	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00107	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0010a	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  0010d	74 03		 je	 SHORT $LN288@LoadScript

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0010f	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN288@LoadScript:

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00112	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  00115	33 f6		 xor	 esi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00117	8b 10		 mov	 edx, DWORD PTR [eax]
  00119	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0011c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00121	2b ca		 sub	 ecx, edx
  00123	89 55 c4	 mov	 DWORD PTR tv1445[ebp], edx
  00126	f7 e9		 imul	 ecx
  00128	c1 fa 02	 sar	 edx, 2
  0012b	8b c2		 mov	 eax, edx
  0012d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00130	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  00132	0f 84 16 04 00
	00		 je	 $LN3@LoadScript
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00138	33 ff		 xor	 edi, edi
  0013a	33 c9		 xor	 ecx, ecx
  0013c	0f 1f 40 00	 npad	 4
$LL4@LoadScript:

; 1938 :         return _My_data._Myfirst[_Pos];

  00140	8b 45 c4	 mov	 eax, DWORD PTR tv1445[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00143	83 c7 18	 add	 edi, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00146	03 c1		 add	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00148	89 7d b8	 mov	 DWORD PTR tv1471[ebp], edi
  0014b	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0014c	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00150	76 02		 jbe	 SHORT $LN18@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00152	8b 00		 mov	 eax, DWORD PTR [eax]
$LN18@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 _atof
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0015a	8b 4d cc	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  0015d	83 c4 04	 add	 esp, 4
  00160	d9 5d d0	 fstp	 DWORD PTR _EffectPosition$4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00163	8b 01		 mov	 eax, DWORD PTR [ecx]
  00165	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00168	2b c8		 sub	 ecx, eax
  0016a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0016f	f7 e9		 imul	 ecx
  00171	c1 fa 02	 sar	 edx, 2
  00174	8b c2		 mov	 eax, edx
  00176	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00179	03 c2		 add	 eax, edx
  0017b	89 45 c8	 mov	 DWORD PTR tv1444[ebp], eax
  0017e	3b c6		 cmp	 eax, esi
  00180	0f 86 fc 03 00
	00		 jbe	 $LN293@LoadScript

; 1938 :         return _My_data._Myfirst[_Pos];

  00186	8b 4d cc	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  00189	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0018b	03 cf		 add	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  0018d	8b d1		 mov	 edx, ecx

; 434  :         return _Myres > _Small_string_capacity;

  0018f	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00193	76 02		 jbe	 SHORT $LN315@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00195	8b 11		 mov	 edx, DWORD PTR [ecx]
$LN315@LoadScript:

; 2818 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00197	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0019a	89 45 c0	 mov	 DWORD PTR __Left_size$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 578  :     if (_Left_size != _Right_size) {

  0019d	83 f8 18	 cmp	 eax, 24			; 00000018H
  001a0	0f 85 f4 01 00
	00		 jne	 $LN316@LoadScript

; 413  :         return _CSTD memcmp(_First1, _First2, _Count);

  001a6	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@
  001ab	c7 45 c4 14 00
	00 00		 mov	 DWORD PTR tv1441[ebp], 20 ; 00000014H
$LL319@LoadScript:
  001b2	8b 02		 mov	 eax, DWORD PTR [edx]
  001b4	3b 07		 cmp	 eax, DWORD PTR [edi]
  001b6	75 10		 jne	 SHORT $LN318@LoadScript
  001b8	83 c2 04	 add	 edx, 4
  001bb	83 c7 04	 add	 edi, 4
  001be	83 6d c4 04	 sub	 DWORD PTR tv1441[ebp], 4
  001c2	73 ee		 jae	 SHORT $LL319@LoadScript
  001c4	33 c0		 xor	 eax, eax
  001c6	eb 27		 jmp	 SHORT $LN321@LoadScript
$LN318@LoadScript:
  001c8	8a 02		 mov	 al, BYTE PTR [edx]
  001ca	3a 07		 cmp	 al, BYTE PTR [edi]
  001cc	75 1c		 jne	 SHORT $LN320@LoadScript
  001ce	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  001d1	3a 47 01	 cmp	 al, BYTE PTR [edi+1]
  001d4	75 14		 jne	 SHORT $LN320@LoadScript
  001d6	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  001d9	3a 47 02	 cmp	 al, BYTE PTR [edi+2]
  001dc	75 0c		 jne	 SHORT $LN320@LoadScript
  001de	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  001e1	3a 47 03	 cmp	 al, BYTE PTR [edi+3]
  001e4	75 04		 jne	 SHORT $LN320@LoadScript
  001e6	33 c0		 xor	 eax, eax
  001e8	eb 05		 jmp	 SHORT $LN321@LoadScript
$LN320@LoadScript:
  001ea	1b c0		 sbb	 eax, eax
  001ec	83 c8 01	 or	 eax, 1
$LN321@LoadScript:

; 586  :     return _Traits::compare(_Left, _Right, _Left_size) == 0;

  001ef	85 c0		 test	 eax, eax
  001f1	0f 94 c0	 sete	 al
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 119  : 			if (pTokenVector->at(i)=="MOVING_TYPE_BEZIER_CURVE")

  001f4	84 c0		 test	 al, al
  001f6	0f 84 9b 01 00
	00		 je	 $LN327@LoadScript

; 120  : 			{
; 121  : 				i++;

  001fc	46		 inc	 esi

; 122  : 
; 123  : 				EffectPosition.m_iMovingType = MOVING_TYPE_BEZIER_CURVE;

  001fd	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _EffectPosition$4[ebp+16], 1

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00204	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00206	39 75 c8	 cmp	 DWORD PTR tv1444[ebp], esi
  00209	0f 86 73 03 00
	00		 jbe	 $LN293@LoadScript

; 1938 :         return _My_data._Myfirst[_Pos];

  0020f	8b 55 cc	 mov	 edx, DWORD PTR _pTokenVector$[ebp]
  00212	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00215	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00216	8b 0a		 mov	 ecx, DWORD PTR [edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00218	83 7c c1 14 0f	 cmp	 DWORD PTR [ecx+eax*8+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  0021d	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00220	76 02		 jbe	 SHORT $LN112@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00222	8b 00		 mov	 eax, DWORD PTR [eax]
$LN112@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 _atof
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0022a	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0022d	83 c4 04	 add	 esp, 4
  00230	d9 5d d4	 fstp	 DWORD PTR _EffectPosition$4[ebp+4]

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00233	8b fe		 mov	 edi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00235	8b 10		 mov	 edx, DWORD PTR [eax]
  00237	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0023a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0023f	2b ca		 sub	 ecx, edx
  00241	89 55 c8	 mov	 DWORD PTR tv1454[ebp], edx
  00244	f7 e9		 imul	 ecx
  00246	c1 fa 02	 sar	 edx, 2
  00249	8b c2		 mov	 eax, edx
  0024b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0024e	03 c2		 add	 eax, edx
  00250	3b c6		 cmp	 eax, esi
  00252	0f 86 2a 03 00
	00		 jbe	 $LN293@LoadScript

; 1938 :         return _My_data._Myfirst[_Pos];

  00258	8b 4d c8	 mov	 ecx, DWORD PTR tv1454[ebp]
  0025b	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0025e	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00261	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00262	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00266	76 02		 jbe	 SHORT $LN125@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00268	8b 00		 mov	 eax, DWORD PTR [eax]
$LN125@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  0026a	50		 push	 eax
  0026b	e8 00 00 00 00	 call	 _atof
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00270	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00273	83 c4 04	 add	 esp, 4
  00276	d9 5d d8	 fstp	 DWORD PTR _EffectPosition$4[ebp+8]

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  00279	8b fe		 mov	 edi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0027b	8b 10		 mov	 edx, DWORD PTR [eax]
  0027d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00280	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00285	2b ca		 sub	 ecx, edx
  00287	89 55 c8	 mov	 DWORD PTR tv1453[ebp], edx
  0028a	f7 e9		 imul	 ecx
  0028c	c1 fa 02	 sar	 edx, 2
  0028f	8b c2		 mov	 eax, edx
  00291	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00294	03 c2		 add	 eax, edx
  00296	3b c6		 cmp	 eax, esi
  00298	0f 86 e4 02 00
	00		 jbe	 $LN293@LoadScript

; 1938 :         return _My_data._Myfirst[_Pos];

  0029e	8b 4d c8	 mov	 ecx, DWORD PTR tv1453[ebp]
  002a1	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  002a4	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  002a7	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002a8	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  002ac	76 02		 jbe	 SHORT $LN138@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  002ae	8b 00		 mov	 eax, DWORD PTR [eax]
$LN138@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 _atof
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002b6	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  002b9	83 c4 04	 add	 esp, 4
  002bc	d9 5d dc	 fstp	 DWORD PTR _EffectPosition$4[ebp+12]

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  002bf	8b fe		 mov	 edi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002c1	8b 10		 mov	 edx, DWORD PTR [eax]
  002c3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002c6	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002cb	2b ca		 sub	 ecx, edx
  002cd	89 55 c8	 mov	 DWORD PTR tv1452[ebp], edx
  002d0	f7 e9		 imul	 ecx
  002d2	c1 fa 02	 sar	 edx, 2
  002d5	8b c2		 mov	 eax, edx
  002d7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002da	03 c2		 add	 eax, edx
  002dc	3b c6		 cmp	 eax, esi
  002de	0f 86 9e 02 00
	00		 jbe	 $LN293@LoadScript

; 1938 :         return _My_data._Myfirst[_Pos];

  002e4	8b 4d c8	 mov	 ecx, DWORD PTR tv1452[ebp]
  002e7	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  002ea	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  002ed	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002ee	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  002f2	76 02		 jbe	 SHORT $LN151@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  002f4	8b 00		 mov	 eax, DWORD PTR [eax]
$LN151@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 _atof
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002fc	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  002ff	83 c4 04	 add	 esp, 4
  00302	d9 5d e4	 fstp	 DWORD PTR _EffectPosition$4[ebp+20]

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  00305	89 75 c8	 mov	 DWORD PTR $T3[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00308	8b 10		 mov	 edx, DWORD PTR [eax]
  0030a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0030d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00312	2b ca		 sub	 ecx, edx
  00314	89 55 c4	 mov	 DWORD PTR tv1451[ebp], edx
  00317	f7 e9		 imul	 ecx
  00319	c1 fa 02	 sar	 edx, 2
  0031c	8b c2		 mov	 eax, edx
  0031e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00321	03 c2		 add	 eax, edx
  00323	3b c6		 cmp	 eax, esi
  00325	0f 86 57 02 00
	00		 jbe	 $LN293@LoadScript

; 1938 :         return _My_data._Myfirst[_Pos];

  0032b	8b 45 c8	 mov	 eax, DWORD PTR $T3[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  0032e	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  0032f	8b 4d c4	 mov	 ecx, DWORD PTR tv1451[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  00332	8b 7d b8	 mov	 edi, DWORD PTR tv1471[ebp]
  00335	81 c7 90 00 00
	00		 add	 edi, 144		; 00000090H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  0033b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0033e	83 7c c1 14 0f	 cmp	 DWORD PTR [ecx+eax*8+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00343	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00346	76 02		 jbe	 SHORT $LN164@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00348	8b 00		 mov	 eax, DWORD PTR [eax]
$LN164@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  0034a	50		 push	 eax
  0034b	e8 00 00 00 00	 call	 _atof
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00350	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  00353	83 c4 04	 add	 esp, 4
  00356	d9 5d e8	 fstp	 DWORD PTR _EffectPosition$4[ebp+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00359	8b 10		 mov	 edx, DWORD PTR [eax]
  0035b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0035e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00363	2b ca		 sub	 ecx, edx
  00365	89 55 c8	 mov	 DWORD PTR tv1450[ebp], edx
  00368	f7 e9		 imul	 ecx
  0036a	c1 fa 02	 sar	 edx, 2
  0036d	8b c2		 mov	 eax, edx
  0036f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00372	03 c2		 add	 eax, edx
  00374	3b c6		 cmp	 eax, esi
  00376	0f 86 06 02 00
	00		 jbe	 $LN293@LoadScript

; 1938 :         return _My_data._Myfirst[_Pos];

  0037c	8b 45 c8	 mov	 eax, DWORD PTR tv1450[ebp]
  0037f	03 c7		 add	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00381	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00385	76 02		 jbe	 SHORT $LN72@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00387	8b 00		 mov	 eax, DWORD PTR [eax]
$LN72@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 131  : 				EffectPosition.m_vecControlPoint.z = atof(pTokenVector->at(i++).c_str());

  00389	50		 push	 eax
  0038a	e8 00 00 00 00	 call	 _atof
  0038f	d9 5d ec	 fstp	 DWORD PTR _EffectPosition$4[ebp+28]

; 132  : 			}

  00392	e9 56 01 00 00	 jmp	 $LN330@LoadScript
$LN327@LoadScript:

; 119  : 			if (pTokenVector->at(i)=="MOVING_TYPE_BEZIER_CURVE")

  00397	8b 45 c0	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
$LN316@LoadScript:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0039a	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0039e	76 02		 jbe	 SHORT $LN91@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  003a0	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN91@LoadScript:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 578  :     if (_Left_size != _Right_size) {

  003a2	83 f8 12	 cmp	 eax, 18			; 00000012H
  003a5	0f 85 9f 01 00
	00		 jne	 $LN9@LoadScript

; 413  :         return _CSTD memcmp(_First1, _First2, _Count);

  003ab	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@
  003b0	8d 78 fc	 lea	 edi, DWORD PTR [eax-4]
$LL324@LoadScript:
  003b3	8b 01		 mov	 eax, DWORD PTR [ecx]
  003b5	3b 02		 cmp	 eax, DWORD PTR [edx]
  003b7	75 0b		 jne	 SHORT $LN323@LoadScript
  003b9	83 c1 04	 add	 ecx, 4
  003bc	83 c2 04	 add	 edx, 4
  003bf	83 ef 04	 sub	 edi, 4
  003c2	73 ef		 jae	 SHORT $LL324@LoadScript
$LN323@LoadScript:
  003c4	8a 01		 mov	 al, BYTE PTR [ecx]
  003c6	3a 02		 cmp	 al, BYTE PTR [edx]
  003c8	75 21		 jne	 SHORT $LN325@LoadScript
  003ca	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  003cd	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  003d0	75 19		 jne	 SHORT $LN325@LoadScript
  003d2	83 ff fe	 cmp	 edi, -2			; fffffffeH
  003d5	74 10		 je	 SHORT $LN322@LoadScript
  003d7	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  003da	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  003dd	75 0c		 jne	 SHORT $LN325@LoadScript
  003df	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  003e2	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  003e5	75 04		 jne	 SHORT $LN325@LoadScript
$LN322@LoadScript:
  003e7	33 c0		 xor	 eax, eax
  003e9	eb 05		 jmp	 SHORT $LN326@LoadScript
$LN325@LoadScript:
  003eb	1b c0		 sbb	 eax, eax
  003ed	83 c8 01	 or	 eax, 1
$LN326@LoadScript:

; 586  :     return _Traits::compare(_Left, _Right, _Left_size) == 0;

  003f0	85 c0		 test	 eax, eax
  003f2	0f 94 c0	 sete	 al
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 133  : 			else if (pTokenVector->at(i) == "MOVING_TYPE_DIRECT")

  003f5	84 c0		 test	 al, al
  003f7	0f 84 4d 01 00
	00		 je	 $LN9@LoadScript
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  003fd	8b 4d cc	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 135  : 				i++;

  00400	46		 inc	 esi

; 136  : 
; 137  : 				EffectPosition.m_iMovingType = MOVING_TYPE_DIRECT;

  00401	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$4[ebp+16], 0

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00408	8b fe		 mov	 edi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0040a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0040c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0040f	2b c8		 sub	 ecx, eax
  00411	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00416	f7 e9		 imul	 ecx
  00418	c1 fa 02	 sar	 edx, 2
  0041b	8b c2		 mov	 eax, edx
  0041d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00420	03 c2		 add	 eax, edx
  00422	3b c6		 cmp	 eax, esi
  00424	0f 86 58 01 00
	00		 jbe	 $LN293@LoadScript

; 1938 :         return _My_data._Myfirst[_Pos];

  0042a	8b 55 cc	 mov	 edx, DWORD PTR _pTokenVector$[ebp]
  0042d	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00430	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00431	8b 0a		 mov	 ecx, DWORD PTR [edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00433	83 7c c1 14 0f	 cmp	 DWORD PTR [ecx+eax*8+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00438	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0043b	76 02		 jbe	 SHORT $LN254@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0043d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN254@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0043f	50		 push	 eax
  00440	e8 00 00 00 00	 call	 _atof
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00445	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00448	83 c4 04	 add	 esp, 4
  0044b	d9 5d d4	 fstp	 DWORD PTR _EffectPosition$4[ebp+4]

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  0044e	89 75 c0	 mov	 DWORD PTR $T2[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00451	8b 10		 mov	 edx, DWORD PTR [eax]
  00453	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00456	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0045b	2b ca		 sub	 ecx, edx
  0045d	89 55 c8	 mov	 DWORD PTR tv1448[ebp], edx
  00460	f7 e9		 imul	 ecx
  00462	c1 fa 02	 sar	 edx, 2
  00465	8b c2		 mov	 eax, edx
  00467	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0046a	03 c2		 add	 eax, edx
  0046c	3b c6		 cmp	 eax, esi
  0046e	0f 86 0e 01 00
	00		 jbe	 $LN293@LoadScript

; 1938 :         return _My_data._Myfirst[_Pos];

  00474	8b 45 c0	 mov	 eax, DWORD PTR $T2[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00477	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00478	8b 4d c8	 mov	 ecx, DWORD PTR tv1448[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  0047b	8b 7d b8	 mov	 edi, DWORD PTR tv1471[ebp]
  0047e	83 c7 48	 add	 edi, 72			; 00000048H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00481	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00484	83 7c c1 14 0f	 cmp	 DWORD PTR [ecx+eax*8+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00489	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0048c	76 02		 jbe	 SHORT $LN267@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0048e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN267@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00490	50		 push	 eax
  00491	e8 00 00 00 00	 call	 _atof
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00496	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  00499	83 c4 04	 add	 esp, 4
  0049c	d9 5d d8	 fstp	 DWORD PTR _EffectPosition$4[ebp+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0049f	8b 10		 mov	 edx, DWORD PTR [eax]
  004a1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004a4	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  004a9	2b ca		 sub	 ecx, edx
  004ab	89 55 c0	 mov	 DWORD PTR tv1447[ebp], edx
  004ae	f7 e9		 imul	 ecx
  004b0	c1 fa 02	 sar	 edx, 2
  004b3	8b c2		 mov	 eax, edx
  004b5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004b8	03 c2		 add	 eax, edx
  004ba	3b c6		 cmp	 eax, esi
  004bc	0f 86 c0 00 00
	00		 jbe	 $LN293@LoadScript

; 1938 :         return _My_data._Myfirst[_Pos];

  004c2	8b 45 c0	 mov	 eax, DWORD PTR tv1447[ebp]
  004c5	03 c7		 add	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004c7	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  004cb	76 02		 jbe	 SHORT $LN280@LoadScript

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  004cd	8b 00		 mov	 eax, DWORD PTR [eax]
$LN280@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 141  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  004cf	50		 push	 eax
  004d0	e8 00 00 00 00	 call	 _atof
  004d5	d9 5d dc	 fstp	 DWORD PTR _EffectPosition$4[ebp+12]

; 142  : 
; 143  : 				EffectPosition.m_vecControlPoint = D3DXVECTOR3(0.0f,0.0f,0.0f);

  004d8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$4[ebp+20], 0
  004df	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$4[ebp+24], 0
  004e6	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _EffectPosition$4[ebp+28], 0
$LN330@LoadScript:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  004ed	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 150  : 			m_TimeEventTablePosition.push_back(EffectPosition);

  004f0	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  004f3	83 c1 08	 add	 ecx, 8
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 150  : 			m_TimeEventTablePosition.push_back(EffectPosition);

  004f6	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  004f7	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  004fa	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  004fd	74 15		 je	 SHORT $LN61@LoadScript
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 506  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  004ff	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR _EffectPosition$4[ebp]
  00503	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00506	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR _EffectPosition$4[ebp+16]
  0050a	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  0050e	83 41 04 20	 add	 DWORD PTR [ecx+4], 32	; 00000020H

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00512	eb 0a		 jmp	 SHORT $LN2@LoadScript
$LN61@LoadScript:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00514	8d 55 d0	 lea	 edx, DWORD PTR _EffectPosition$4[ebp]
  00517	52		 push	 edx
  00518	50		 push	 eax
  00519	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEPAUSEffectPosition@@QAU2@ABU2@@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
$LN2@LoadScript:

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0051e	8b 45 cc	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00521	8b 10		 mov	 edx, DWORD PTR [eax]
  00523	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00526	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0052b	2b ca		 sub	 ecx, edx
  0052d	89 55 c4	 mov	 DWORD PTR tv1445[ebp], edx
  00530	f7 e9		 imul	 ecx
  00532	c1 fa 02	 sar	 edx, 2
  00535	8b c2		 mov	 eax, edx
  00537	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0053a	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  0053c	3b f0		 cmp	 esi, eax
  0053e	73 0e		 jae	 SHORT $LN3@LoadScript
  00540	83 c7 18	 add	 edi, 24			; 00000018H

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00543	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00545	e9 f6 fb ff ff	 jmp	 $LL4@LoadScript
$LN9@LoadScript:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 147  : 				return FALSE;

  0054a	33 c0		 xor	 eax, eax
  0054c	eb 0d		 jmp	 SHORT $LN1@LoadScript
$LN3@LoadScript:

; 151  : 		}
; 152  : 	}
; 153  : 
; 154  : 	return OnLoadScript(rTextFileLoader);

  0054e	8b 4d bc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00551	ff 75 b4	 push	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00554	8b 01		 mov	 eax, DWORD PTR [ecx]
  00556	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00559	ff d0		 call	 eax
$LN1@LoadScript:

; 155  : }

  0055b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0055e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00565	59		 pop	 ecx
  00566	5f		 pop	 edi
  00567	5e		 pop	 esi
  00568	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0056b	33 cd		 xor	 ecx, ebp
  0056d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00572	8b e5		 mov	 esp, ebp
  00574	5d		 pop	 ebp
  00575	c2 04 00	 ret	 4
$LN332@LoadScript:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00578	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN333@LoadScript:
  0057d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN293@LoadScript:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  00582	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN329@LoadScript:
  00587	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z ENDP ; CEffectElementBase::LoadScript
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?isData@CEffectElementBase@@QAE_NXZ
_TEXT	SEGMENT
?isData@CEffectElementBase@@QAE_NXZ PROC		; CEffectElementBase::isData, COMDAT
; _this$ = ecx

; 93   : 	return OnIsData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00005	ff e0		 jmp	 eax
?isData@CEffectElementBase@@QAE_NXZ ENDP		; CEffectElementBase::isData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?Clear@CEffectElementBase@@QAEXXZ
_TEXT	SEGMENT
?Clear@CEffectElementBase@@QAEXXZ PROC			; CEffectElementBase::Clear, COMDAT
; _this$ = ecx

; 98   : 	m_fStartTime = 0.0f;
; 99   : 
; 100  : 	OnClear();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00009	ff 60 04	 jmp	 DWORD PTR [eax+4]
?Clear@CEffectElementBase@@QAEXXZ ENDP			; CEffectElementBase::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ??1CEffectElementBase@@UAE@XZ
_TEXT	SEGMENT
??1CEffectElementBase@@UAE@XZ PROC			; CEffectElementBase::~CEffectElementBase, COMDAT
; _this$ = ecx

; 167  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEffectElementBase@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CEffectEle

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CEffectEle

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 23		 ja	 SHORT $LN24@CEffectEle

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CEffectEle:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN8@CEffectEle:
  00051	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 168  : }

  00052	c3		 ret	 0
$LN24@CEffectEle:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@CEffectEle:
  00058	cc		 int	 3
??1CEffectElementBase@@UAE@XZ ENDP			; CEffectElementBase::~CEffectElementBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp
;	COMDAT ??0CEffectElementBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CEffectElementBase@@QAE@XZ PROC			; CEffectElementBase::CEffectElementBase, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CEffectElementBase@@6B@

; 165  : }

  0000a	8b c1		 mov	 eax, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000c	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00013	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001a	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectElementBase.cpp

; 163  : {

  00021	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 	m_fStartTime = 0.0f;

  00024	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 165  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??0CEffectElementBase@@QAE@XZ ENDP			; CEffectElementBase::CEffectElementBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 2173 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 744  :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL51@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL51@basic_stri
  0002c	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 857  :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 9b 00 00
	00		 ja	 $LN62@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0003a	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0003d	77 24		 ja	 SHORT $LN21@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00042	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00045	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00051	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN21@basic_stri:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 12		 jbe	 SHORT $LN27@basic_stri

; 2944 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	eb 26		 jmp	 SHORT $LN60@basic_stri
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00082	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00087	3b f8		 cmp	 edi, eax
  00089	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0008c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0008f	85 c0		 test	 eax, eax
  00091	74 18		 je	 SHORT $LN59@basic_stri
$LN41@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00093	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00098	72 08		 jb	 SHORT $LN42@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	eb 06		 jmp	 SHORT $LN60@basic_stri
$LN42@basic_stri:

; 136  :         return ::operator new(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN60@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000a8	83 c4 04	 add	 esp, 4
$LN59@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ab	56		 push	 esi
  000ac	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000af	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b2	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b3	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  000b5	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  000b8	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bb	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c0	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	5f		 pop	 edi

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c7	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000cb	8b c3		 mov	 eax, ebx
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
$LN62@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000d5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN57@basic_stri:
  000da	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
