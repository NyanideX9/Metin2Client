; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EffectLib\Distribute\EffectMeshInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCEffectMeshInstance@@@@6B@	; CDynamicPool<CEffectMeshInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCEffectMeshInstance@@@@UAEPAXI@Z ; CDynamicPool<CEffectMeshInstance>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCEffectMeshInstance@@@@6B@	; CDynamicPool<CEffectMeshInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCEffectMeshInstance@@@@@8 ; CDynamicPool<CEffectMeshInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCEffectMeshInstance@@@@8	; CDynamicPool<CEffectMeshInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCEffectMeshInstance@@@@8	; CDynamicPool<CEffectMeshInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCEffectMeshInstance@@@@8 ; CDynamicPool<CEffectMeshInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPool@VCEffectMeshInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CEffectMeshInstance>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCEffectMeshInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCEffectMeshInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCEffectMeshInstance@@@@@8 ; CDynamicPool<CEffectMeshInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCEffectMeshInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCEffectMeshInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCEffectMeshInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCEffectMeshInstance@@@@8 ; CDynamicPool<CEffectMeshInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCEffectMeshInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCEffectMeshInstance@@@@8 DD 00H	; CDynamicPool<CEffectMeshInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCEffectMeshInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCEffectMeshInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCEffectMeshInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CEffectMeshInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCEffectMeshInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCEffectMeshInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCEffectMeshInstance@@@@6B@ DD 00H	; CDynamicPool<CEffectMeshInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCEffectMeshInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCEffectMeshInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPool@VCEffectMeshInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCEffectMeshInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCEffectMeshInstance@@@@6B@ ; CDynamicPool<CEffectMeshInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCEffectMeshInstance@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??_GCFrameController@@UAEPAXI@Z			; CFrameController::`scalar deleting destructor'
PUBLIC	?push_back@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEXABQAVCGraphicImageInstance@@@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::push_back
PUBLIC	?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
PUBLIC	??0CEffectMeshInstance@@QAE@XZ			; CEffectMeshInstance::CEffectMeshInstance
PUBLIC	??1CEffectMeshInstance@@UAE@XZ			; CEffectMeshInstance::~CEffectMeshInstance
PUBLIC	?DestroySystem@CEffectMeshInstance@@SAXXZ	; CEffectMeshInstance::DestroySystem
PUBLIC	?New@CEffectMeshInstance@@SAPAV1@XZ		; CEffectMeshInstance::New
PUBLIC	?Delete@CEffectMeshInstance@@SAXPAV1@@Z		; CEffectMeshInstance::Delete
PUBLIC	?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z ; CEffectMeshInstance::OnSetDataPointer
PUBLIC	?OnInitialize@CEffectMeshInstance@@MAEXXZ	; CEffectMeshInstance::OnInitialize
PUBLIC	?OnDestroy@CEffectMeshInstance@@MAEXXZ		; CEffectMeshInstance::OnDestroy
PUBLIC	?OnUpdate@CEffectMeshInstance@@MAE_NM@Z		; CEffectMeshInstance::OnUpdate
PUBLIC	?OnRender@CEffectMeshInstance@@MAEXXZ		; CEffectMeshInstance::OnRender
PUBLIC	?isActive@CEffectMeshInstance@@IAEHXZ		; CEffectMeshInstance::isActive
PUBLIC	??1?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::~vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >
PUBLIC	?_Xlength@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@CAXXZ ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Xlength
PUBLIC	??1?$CRef@VCEffectMesh@@@@QAE@XZ		; CRef<CEffectMesh>::~CRef<CEffectMesh>
PUBLIC	??_GCEffectMeshInstance@@UAEPAXI@Z		; CEffectMeshInstance::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCEffectMeshInstance@@@@UAE@XZ ; CDynamicPool<CEffectMeshInstance>::~CDynamicPool<CEffectMeshInstance>
PUBLIC	?_Xlength@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@CAXXZ ; std::vector<CEffectMeshInstance *,std::allocator<CEffectMeshInstance *> >::_Xlength
PUBLIC	?CEffectMeshInstance_DeleteImageInstance@@YAXPAVCGraphicImageInstance@@@Z ; CEffectMeshInstance_DeleteImageInstance
PUBLIC	?CEffectMeshInstance_DeleteTextureInstance@@YAXAAUSTextureInstance@CEffectMeshInstance@@@Z ; CEffectMeshInstance_DeleteTextureInstance
PUBLIC	??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >
PUBLIC	??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CEffectMeshInstance::STextureInstance> >
PUBLIC	??$_Emplace_reallocate@ABQAVCEffectMeshInstance@@@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@AAEPAPAVCEffectMeshInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectMeshInstance *,std::allocator<CEffectMeshInstance *> >::_Emplace_reallocate<CEffectMeshInstance * const &>
PUBLIC	??1_Reallocation_guard@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Reallocation_guard::~_Reallocation_guard
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CEffectMeshInstance::STextureInstance> >::~_Uninitialized_backout_al<std::allocator<CEffectMeshInstance::STextureInstance> >
PUBLIC	??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCGraphicImageInstance@@@std@@YAPAPAVCGraphicImageInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CGraphicImageInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCEffectMeshInstance@@PAPAV1@@std@@YAPAPAVCEffectMeshInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectMeshInstance * *,CEffectMeshInstance * *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCEffectMeshInstance@@@std@@YAPAPAVCEffectMeshInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CEffectMeshInstance * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_7CFrameController@@6B@			; CFrameController::`vftable'
PUBLIC	?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A ; CEffectMeshInstance::ms_kPool
PUBLIC	??_7CEffectMeshInstance@@6B@			; CEffectMeshInstance::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CFrameController@@6B@			; CFrameController::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFrameController@@@8			; CFrameController `RTTI Type Descriptor'
PUBLIC	??_R3CFrameController@@8			; CFrameController::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFrameController@@8			; CFrameController::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFrameController@@8		; CFrameController::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CEffectMeshInstance@@6B@			; CEffectMeshInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEffectMeshInstance@@@8			; CEffectMeshInstance `RTTI Type Descriptor'
PUBLIC	??_R3CEffectMeshInstance@@8			; CEffectMeshInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEffectMeshInstance@@8			; CEffectMeshInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEffectMeshInstance@@8		; CEffectMeshInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CEffectElementBaseInstance@@8	; CEffectElementBaseInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCEffectElementBaseInstance@@@8		; CEffectElementBaseInstance `RTTI Type Descriptor'
PUBLIC	??_R3CEffectElementBaseInstance@@8		; CEffectElementBaseInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEffectElementBaseInstance@@8		; CEffectElementBaseInstance::`RTTI Base Class Array'
PUBLIC	__real@3a83126f
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@437f0000
PUBLIC	__real@bf800000
PUBLIC	__xmm@000000003f8000000000000000000000
PUBLIC	__xmm@3f800000000000000000000000000000
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?GetElapsedSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetElapsedSecond
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixInverse@12:PROC
EXTRN	_D3DXMatrixRotationX@8:PROC
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?GetViewMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ:PROC ; CGraphicBase::GetViewMatrix
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTexturePointer
EXTRN	?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z:PROC ; CEffectElementBase::GetPosition
EXTRN	??0CEffectElementBaseInstance@@QAE@XZ:PROC	; CEffectElementBaseInstance::CEffectElementBaseInstance
EXTRN	??1CEffectElementBaseInstance@@UAE@XZ:PROC	; CEffectElementBaseInstance::~CEffectElementBaseInstance
EXTRN	?Initialize@CEffectElementBaseInstance@@QAEXXZ:PROC ; CEffectElementBaseInstance::Initialize
EXTRN	?Destroy@CEffectElementBaseInstance@@QAEXXZ:PROC ; CEffectElementBaseInstance::Destroy
EXTRN	?isActive@CEffectElementBaseInstance@@QAE_NXZ:PROC ; CEffectElementBaseInstance::isActive
EXTRN	??0CFrameController@@QAE@XZ:PROC		; CFrameController::CFrameController
EXTRN	??1CFrameController@@UAE@XZ:PROC		; CFrameController::~CFrameController
EXTRN	?Clear@CFrameController@@QAEXXZ:PROC		; CFrameController::Clear
EXTRN	?Update@CFrameController@@QAEXM@Z:PROC		; CFrameController::Update
EXTRN	?GetCurrentFrame@CFrameController@@QAEEXZ:PROC	; CFrameController::GetCurrentFrame
EXTRN	?SetMaxFrame@CFrameController@@QAEXK@Z:PROC	; CFrameController::SetMaxFrame
EXTRN	?SetFrameTime@CFrameController@@QAEXM@Z:PROC	; CFrameController::SetFrameTime
EXTRN	?SetStartFrame@CFrameController@@QAEXK@Z:PROC	; CFrameController::SetStartFrame
EXTRN	?SetLoopFlag@CFrameController@@QAEXH@Z:PROC	; CFrameController::SetLoopFlag
EXTRN	?SetLoopCount@CFrameController@@QAEXH@Z:PROC	; CFrameController::SetLoopCount
EXTRN	?isActive@CFrameController@@QAEHK@Z:PROC	; CFrameController::isActive
EXTRN	??_ECFrameController@@UAEPAXI@Z:PROC		; CFrameController::`vector deleting destructor'
EXTRN	?GetFrameCount@CEffectMesh@@QAEKXZ:PROC		; CEffectMesh::GetFrameCount
EXTRN	?GetMeshCount@CEffectMesh@@QAEKXZ:PROC		; CEffectMesh::GetMeshCount
EXTRN	?GetMeshDataPointer@CEffectMesh@@QAEPAUSEffectMeshData@1@K@Z:PROC ; CEffectMesh::GetMeshDataPointer
EXTRN	?GetTextureVectorPointer@CEffectMesh@@QAEPAV?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@K@Z:PROC ; CEffectMesh::GetTextureVectorPointer
EXTRN	?GetMeshFileName@CEffectMeshScript@@QAEPBDXZ:PROC ; CEffectMeshScript::GetMeshFileName
EXTRN	?GetMeshDataPointer@CEffectMeshScript@@QAE_NKPAPAUSMeshData@1@@Z:PROC ; CEffectMeshScript::GetMeshDataPointer
EXTRN	?GetBillboardType@CEffectMeshScript@@QAEHK@Z:PROC ; CEffectMeshScript::GetBillboardType
EXTRN	?isBlendingEnable@CEffectMeshScript@@QAEHK@Z:PROC ; CEffectMeshScript::isBlendingEnable
EXTRN	?GetBlendingSrcType@CEffectMeshScript@@QAEEK@Z:PROC ; CEffectMeshScript::GetBlendingSrcType
EXTRN	?GetBlendingDestType@CEffectMeshScript@@QAEEK@Z:PROC ; CEffectMeshScript::GetBlendingDestType
EXTRN	?GetColorOperationType@CEffectMeshScript@@QAEHKPAE@Z:PROC ; CEffectMeshScript::GetColorOperationType
EXTRN	?GetColorFactor@CEffectMeshScript@@QAEHKPAUD3DXCOLOR@@@Z:PROC ; CEffectMeshScript::GetColorFactor
EXTRN	?GetTimeTableAlphaPointer@CEffectMeshScript@@QAEHKPAPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z:PROC ; CEffectMeshScript::GetTimeTableAlphaPointer
EXTRN	?isMeshAnimationLoop@CEffectMeshScript@@QAEHXZ:PROC ; CEffectMeshScript::isMeshAnimationLoop
EXTRN	?GetMeshAnimationLoopCount@CEffectMeshScript@@QAEHXZ:PROC ; CEffectMeshScript::GetMeshAnimationLoopCount
EXTRN	?GetMeshAnimationFrameDelay@CEffectMeshScript@@QAEMXZ:PROC ; CEffectMeshScript::GetMeshAnimationFrameDelay
EXTRN	??_ECEffectMeshInstance@@UAEPAXI@Z:PROC		; CEffectMeshInstance::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A:BYTE ; CGraphicImageInstance::ms_kPool
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CEffectMeshInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CEffectMeshInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f800000000000000000000000000000
CONST	SEGMENT
__xmm@3f800000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@000000003f8000000000000000000000
CONST	SEGMENT
__xmm@000000003f8000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 080H, '?', 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT ??_R2CEffectElementBaseInstance@@8
rdata$r	SEGMENT
??_R2CEffectElementBaseInstance@@8 DD FLAT:??_R1A@?0A@EA@CEffectElementBaseInstance@@8 ; CEffectElementBaseInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEffectElementBaseInstance@@8
rdata$r	SEGMENT
??_R3CEffectElementBaseInstance@@8 DD 00H		; CEffectElementBaseInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEffectElementBaseInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEffectElementBaseInstance@@@8
data$rs	SEGMENT
??_R0?AVCEffectElementBaseInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CEffectElementBaseInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEffectElementBaseInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CEffectElementBaseInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEffectElementBaseInstance@@8 DD FLAT:??_R0?AVCEffectElementBaseInstance@@@8 ; CEffectElementBaseInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEffectElementBaseInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEffectMeshInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEffectMeshInstance@@8 DD FLAT:??_R0?AVCEffectMeshInstance@@@8 ; CEffectMeshInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEffectMeshInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CEffectMeshInstance@@8
rdata$r	SEGMENT
??_R2CEffectMeshInstance@@8 DD FLAT:??_R1A@?0A@EA@CEffectMeshInstance@@8 ; CEffectMeshInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CEffectElementBaseInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CEffectMeshInstance@@8
rdata$r	SEGMENT
??_R3CEffectMeshInstance@@8 DD 00H			; CEffectMeshInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CEffectMeshInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEffectMeshInstance@@@8
data$rs	SEGMENT
??_R0?AVCEffectMeshInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CEffectMeshInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEffectMeshInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CEffectMeshInstance@@6B@
rdata$r	SEGMENT
??_R4CEffectMeshInstance@@6B@ DD 00H			; CEffectMeshInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEffectMeshInstance@@@8
	DD	FLAT:??_R3CEffectMeshInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFrameController@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFrameController@@8 DD FLAT:??_R0?AVCFrameController@@@8 ; CFrameController::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFrameController@@8
rdata$r	ENDS
;	COMDAT ??_R2CFrameController@@8
rdata$r	SEGMENT
??_R2CFrameController@@8 DD FLAT:??_R1A@?0A@EA@CFrameController@@8 ; CFrameController::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFrameController@@8
rdata$r	SEGMENT
??_R3CFrameController@@8 DD 00H				; CFrameController::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFrameController@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFrameController@@@8
data$rs	SEGMENT
??_R0?AVCFrameController@@@8 DD FLAT:??_7type_info@@6B@	; CFrameController `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFrameController@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFrameController@@6B@
rdata$r	SEGMENT
??_R4CFrameController@@6B@ DD 00H			; CFrameController::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFrameController@@@8
	DD	FLAT:??_R3CFrameController@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CEffectMeshInstance@@6B@
CONST	SEGMENT
??_7CEffectMeshInstance@@6B@ DD FLAT:??_R4CEffectMeshInstance@@6B@ ; CEffectMeshInstance::`vftable'
	DD	FLAT:??_ECEffectMeshInstance@@UAEPAXI@Z
	DD	FLAT:?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z
	DD	FLAT:?OnInitialize@CEffectMeshInstance@@MAEXXZ
	DD	FLAT:?OnDestroy@CEffectMeshInstance@@MAEXXZ
	DD	FLAT:?OnUpdate@CEffectMeshInstance@@MAE_NM@Z
	DD	FLAT:?OnRender@CEffectMeshInstance@@MAEXXZ
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCEffectMeshInstance@@@@6B@ ; CEffectMeshInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7CFrameController@@6B@
CONST	SEGMENT
??_7CFrameController@@6B@ DD FLAT:??_R4CFrameController@@6B@ ; CFrameController::`vftable'
	DD	FLAT:??_ECFrameController@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCGraphicImageInstance@@@@QAEPAVCGraphicImageInstance@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCGraphicImageInstance@@@@QAEPAVCGraphicImageInstance@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCGraphicImageInstance@@@@QAEPAVCGraphicImageInstance@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCGraphicImageInstance@@@@QAEPAVCGraphicImageInstance@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCEffectMeshInstance@@@@QAEPAVCEffectMeshInstance@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCEffectMeshInstance@@@@QAEPAVCEffectMeshInstance@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCEffectMeshInstance@@@@QAEPAVCEffectMeshInstance@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCEffectMeshInstance@@@@QAEPAVCEffectMeshInstance@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CRef@VCEffectMesh@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z$0
__ehfuncinfo$?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CEffectMeshInstance@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CEffectMeshInstance@@SAPAV1@XZ$0
__ehfuncinfo$?New@CEffectMeshInstance@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CEffectMeshInstance@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CEffectMeshInstance@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CEffectMeshInstance@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CEffectMeshInstance@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CEffectMeshInstance@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CEffectMeshInstance@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CEffectMeshInstance@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CEffectMeshInstance@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CEffectMeshInstance@@QAE@XZ$3
__ehfuncinfo$??0CEffectMeshInstance@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CEffectMeshInstance@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCEffectMeshInstance@@@std@@YAPAPAVCEffectMeshInstance@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCEffectMeshInstance@@@std@@YAPAPAVCEffectMeshInstance@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CEffectMeshInstance * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCEffectMeshInstance@@@std@@YAPAPAVCEffectMeshInstance@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CEffectMeshInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCEffectMeshInstance@@PAPAV1@@std@@YAPAPAVCEffectMeshInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCEffectMeshInstance@@PAPAV1@@std@@YAPAPAVCEffectMeshInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CEffectMeshInstance * *,CEffectMeshInstance * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCEffectMeshInstance@@@std@@YAPAPAVCEffectMeshInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CEffectMeshInstance * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCEffectMeshInstance@@PAPAV1@@std@@YAPAPAVCEffectMeshInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CEffectMeshInstance * *,CEffectMeshInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCGraphicImageInstance@@@std@@YAPAPAVCGraphicImageInstance@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCGraphicImageInstance@@@std@@YAPAPAVCGraphicImageInstance@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CGraphicImageInstance * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCGraphicImageInstance@@@std@@YAPAPAVCGraphicImageInstance@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CGraphicImageInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCGraphicImageInstance@@@std@@YAPAPAVCGraphicImageInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CGraphicImageInstance * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CEffectMeshInstance::STextureInstance> >::~_Uninitialized_backout_al<std::allocator<CEffectMeshInstance::STextureInstance> >, COMDAT
; _this$ = ecx

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	ff 71 04	 push	 DWORD PTR [ecx+4]
  00006	ff 31		 push	 DWORD PTR [ecx]
  00008	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >
  0000d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1803 :     }

  00010	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CEffectMeshInstance::STextureInstance> >::~_Uninitialized_backout_al<std::allocator<CEffectMeshInstance::STextureInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1_Reallocation_guard@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Reallocation_guard@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Reallocation_guard::~_Reallocation_guard, COMDAT
; _this$ = ecx

; 605  :         _CONSTEXPR20 ~_Reallocation_guard() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 606  :             if (_New_begin != nullptr) {

  00003	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00007	74 40		 je	 SHORT $LN10@Reallocati

; 607  :                 _STD _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00009	ff 36		 push	 DWORD PTR [esi]
  0000b	ff 76 10	 push	 DWORD PTR [esi+16]
  0000e	ff 76 0c	 push	 DWORD PTR [esi+12]
  00011	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 607  :                 _STD _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001c	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	c1 e1 04	 shl	 ecx, 4

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN21@Reallocati

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	83 c0 fc	 add	 eax, -4			; fffffffcH
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 0e		 ja	 SHORT $LN18@Reallocati

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b c2		 mov	 eax, edx
$LN21@Reallocati:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00046	83 c4 08	 add	 esp, 8
$LN10@Reallocati:
  00049	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 610  :         }

  0004a	c3		 ret	 0
$LN18@Reallocati:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Reallocati:
  00050	cc		 int	 3
??1_Reallocation_guard@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Reallocation_guard::~_Reallocation_guard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCEffectMeshInstance@@@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@AAEPAPAVCEffectMeshInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCEffectMeshInstance@@@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@AAEPAPAVCEffectMeshInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CEffectMeshInstance *,std::allocator<CEffectMeshInstance *> >::_Emplace_reallocate<CEffectMeshInstance * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCEffectMeshInstance@@PAPAV1@@std@@YAPAPAVCEffectMeshInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectMeshInstance * *,CEffectMeshInstance * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCEffectMeshInstance@@PAPAV1@@std@@YAPAPAVCEffectMeshInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectMeshInstance * *,CEffectMeshInstance * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@CAXXZ ; std::vector<CEffectMeshInstance *,std::allocator<CEffectMeshInstance *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCEffectMeshInstance@@@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@AAEPAPAVCEffectMeshInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CEffectMeshInstance *,std::allocator<CEffectMeshInstance *> >::_Emplace_reallocate<CEffectMeshInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z
_TEXT	SEGMENT
__Backout$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<CEffectMeshInstance::STextureInstance> >, COMDAT

; 2041 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00028	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0002b	8b 5d 10	 mov	 ebx, DWORD PTR __Al$[ebp]
  0002e	89 7d e8	 mov	 DWORD PTR __Backout$[ebp], edi
  00031	89 7d ec	 mov	 DWORD PTR __Backout$[ebp+4], edi
  00034	89 5d f0	 mov	 DWORD PTR __Backout$[ebp+8], ebx

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00037	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	85 f6		 test	 esi, esi
  00043	74 34		 je	 SHORT $LN3@Uninitiali
$LL4@Uninitiali:

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00045	6a 30		 push	 48			; 00000030H
  00047	6a 00		 push	 0
  00049	57		 push	 edi
  0004a	e8 00 00 00 00	 call	 _memset
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00052	8b cf		 mov	 ecx, edi
  00054	e8 00 00 00 00	 call	 ??0CFrameController@@QAE@XZ ; CFrameController::CFrameController
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00059	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
  00060	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  00067	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  0006e	83 c7 30	 add	 edi, 48			; 00000030H
  00071	89 7d ec	 mov	 DWORD PTR __Backout$[ebp+4], edi

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00074	83 ee 01	 sub	 esi, 1
  00077	75 cc		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00079	53		 push	 ebx
  0007a	57		 push	 edi
  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2057 :         _Backout._Emplace_back();
; 2058 :     }
; 2059 : 
; 2060 :     return _Backout._Release();

  00084	8b c7		 mov	 eax, edi

; 2061 : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CEffectMeshInstance::STextureInstance> >::~_Uninitialized_backout_al<std::allocator<CEffectMeshInstance::STextureInstance> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<CEffectMeshInstance::STextureInstance> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Guard$ = -56						; size = 20
_this$1$ = -36						; size = 4
__ULast$1$ = -32					; size = 4
tv1502 = -28						; size = 4
__Oldsize$1$ = -24					; size = 4
__UFirst$1$ = -24					; size = 4
__Backout$1$sroa$268$1$ = -20				; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1537 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d dc	 mov	 DWORD PTR _this$1$[ebp], ebx

; 1538 :         if (_Newsize > max_size()) {

  0002d	81 7d 08 55 55
	55 05		 cmp	 DWORD PTR __Newsize$[ebp], 89478485 ; 05555555H
  00034	0f 87 17 02 00
	00		 ja	 $LN127@Resize_rea

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00042	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00044	f7 e9		 imul	 ecx

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00046	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00049	2b 0b		 sub	 ecx, DWORD PTR [ebx]

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  0004b	c1 fa 03	 sar	 edx, 3
  0004e	8b c2		 mov	 eax, edx
  00050	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00053	03 c2		 add	 eax, edx
  00055	89 45 e8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00058	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0005d	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005f	b8 55 55 55 05	 mov	 eax, 89478485		; 05555555H

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00064	c1 fa 03	 sar	 edx, 3
  00067	8b ca		 mov	 ecx, edx
  00069	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0006c	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006e	8b d1		 mov	 edx, ecx
  00070	d1 ea		 shr	 edx, 1
  00072	2b c2		 sub	 eax, edx
  00074	3b c8		 cmp	 ecx, eax
  00076	76 1e		 jbe	 SHORT $LN6@Resize_rea

; 1997 :             return _Max; // geometric growth would overflow

  00078	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0007d	c7 45 e4 f0 ff
	ff ff		 mov	 DWORD PTR tv1502[ebp], -16 ; fffffff0H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00084	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1997 :             return _Max; // geometric growth would overflow

  00085	bf 55 55 55 05	 mov	 edi, 89478485		; 05555555H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0008a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008f	8b f0		 mov	 esi, eax
  00091	89 75 f0	 mov	 DWORD PTR $T3[ebp], esi
  00094	eb 4d		 jmp	 SHORT $LN125@Resize_rea
$LN6@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00096	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 2001 : 
; 2002 :         if (_Geometric < _Newsize) {

  00099	8b 4d 08	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  0009c	3b f9		 cmp	 edi, ecx
  0009e	73 16		 jae	 SHORT $LN7@Resize_rea

; 2003 :             return _Newsize; // geometric growth would be insufficient

  000a0	8b f9		 mov	 edi, ecx
$LN17@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  000a2	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000a5	c1 e0 04	 shl	 eax, 4
  000a8	89 45 e4	 mov	 DWORD PTR tv1502[ebp], eax

; 227  :     if (_Bytes == 0) {

  000ab	85 c0		 test	 eax, eax
  000ad	75 15		 jne	 SHORT $LN21@Resize_rea

; 228  :         return nullptr;

  000af	33 f6		 xor	 esi, esi
  000b1	89 75 f0	 mov	 DWORD PTR $T3[ebp], esi
  000b4	eb 30		 jmp	 SHORT $LN20@Resize_rea
$LN7@Resize_rea:

; 117  :         if (_Count > _Max_possible) {

  000b6	81 ff 55 55 55
	05		 cmp	 edi, 89478485		; 05555555H
  000bc	0f 87 94 01 00
	00		 ja	 $LN128@Resize_rea
  000c2	eb de		 jmp	 SHORT $LN17@Resize_rea
$LN21@Resize_rea:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000c4	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c9	72 0d		 jb	 SHORT $LN22@Resize_rea

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000d1	8b f0		 mov	 esi, eax
  000d3	89 75 f0	 mov	 DWORD PTR $T3[ebp], esi
  000d6	eb 0b		 jmp	 SHORT $LN125@Resize_rea
$LN22@Resize_rea:

; 136  :         return ::operator new(_Bytes);

  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  000de	8b f0		 mov	 esi, eax
  000e0	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
$LN125@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000e3	83 c4 04	 add	 esp, 4
$LN20@Resize_rea:
  000e6	8b 55 e8	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]

; 1552 : 
; 1553 :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Appended_first, _Appended_first};

  000e9	89 5d c8	 mov	 DWORD PTR __Guard$[ebp], ebx
  000ec	89 75 cc	 mov	 DWORD PTR __Guard$[ebp+4], esi
  000ef	89 7d d0	 mov	 DWORD PTR __Guard$[ebp+8], edi
  000f2	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  000f5	c1 e1 04	 shl	 ecx, 4
  000f8	03 ce		 add	 ecx, esi
  000fa	89 4d d4	 mov	 DWORD PTR __Guard$[ebp+12], ecx
  000fd	89 4d d8	 mov	 DWORD PTR __Guard$[ebp+16], ecx

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  00100	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00103	53		 push	 ebx
  00104	2b c2		 sub	 eax, edx
  00106	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0010d	50		 push	 eax
  0010e	51		 push	 ecx
  0010f	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CEffectMeshInstance::STextureInstance> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);

  00114	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0011c	8b c6		 mov	 eax, esi

; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);

  0011e	89 55 e0	 mov	 DWORD PTR __ULast$1$[ebp], edx

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00121	89 45 ec	 mov	 DWORD PTR __Backout$1$sroa$268$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1550 :         const pointer _Newvec         = _Allocate_at_least_helper(_Al, _Newcapacity);

  00124	89 4d e8	 mov	 DWORD PTR __UFirst$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00127	3b ca		 cmp	 ecx, edx
  00129	0f 84 91 00 00
	00		 je	 $LN30@Resize_rea
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  0012f	8d 7e 2c	 lea	 edi, DWORD PTR [esi+44]
  00132	8b d8		 mov	 ebx, eax
  00134	8d 71 28	 lea	 esi, DWORD PTR [ecx+40]
  00137	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL31@Resize_rea:
  00140	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CFrameController@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00146	8d 7f 30	 lea	 edi, DWORD PTR [edi+48]
  00149	8b 46 dc	 mov	 eax, DWORD PTR [esi-36]

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0014c	8d 76 30	 lea	 esi, DWORD PTR [esi+48]
  0014f	89 47 a8	 mov	 DWORD PTR [edi-88], eax

; 1808 :         ++_Last;

  00152	83 c3 30	 add	 ebx, 48			; 00000030H
  00155	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00158	89 47 ac	 mov	 DWORD PTR [edi-84], eax
  0015b	8b 46 b4	 mov	 eax, DWORD PTR [esi-76]
  0015e	89 47 b0	 mov	 DWORD PTR [edi-80], eax
  00161	8b 46 b8	 mov	 eax, DWORD PTR [esi-72]
  00164	89 47 b4	 mov	 DWORD PTR [edi-76], eax
  00167	8b 46 bc	 mov	 eax, DWORD PTR [esi-68]
  0016a	89 47 b8	 mov	 DWORD PTR [edi-72], eax
  0016d	8b 46 c0	 mov	 eax, DWORD PTR [esi-64]
  00170	89 47 bc	 mov	 DWORD PTR [edi-68], eax
  00173	8b 46 c4	 mov	 eax, DWORD PTR [esi-60]
  00176	89 47 c0	 mov	 DWORD PTR [edi-64], eax
  00179	8b 46 c8	 mov	 eax, DWORD PTR [esi-56]
  0017c	89 47 c4	 mov	 DWORD PTR [edi-60], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0017f	8b 46 cc	 mov	 eax, DWORD PTR [esi-52]
  00182	8b 56 d4	 mov	 edx, DWORD PTR [esi-44]
  00185	8b 4e d0	 mov	 ecx, DWORD PTR [esi-48]

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00188	c7 46 d4 00 00
	00 00		 mov	 DWORD PTR [esi-44], 0
  0018f	c7 46 d0 00 00
	00 00		 mov	 DWORD PTR [esi-48], 0
  00196	c7 46 cc 00 00
	00 00		 mov	 DWORD PTR [esi-52], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 403  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  0019d	89 47 c8	 mov	 DWORD PTR [edi-56], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  001a0	8b 45 e8	 mov	 eax, DWORD PTR __UFirst$1$[ebp]
  001a3	83 c0 30	 add	 eax, 48			; 00000030H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 403  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  001a6	89 4f cc	 mov	 DWORD PTR [edi-52], ecx
  001a9	89 57 d0	 mov	 DWORD PTR [edi-48], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  001ac	89 45 e8	 mov	 DWORD PTR __UFirst$1$[ebp], eax
  001af	3b 45 e0	 cmp	 eax, DWORD PTR __ULast$1$[ebp]
  001b2	75 8c		 jne	 SHORT $LL31@Resize_rea
  001b4	8b 75 f0	 mov	 esi, DWORD PTR $T3[ebp]
  001b7	89 5d ec	 mov	 DWORD PTR __Backout$1$sroa$268$1$[ebp], ebx
  001ba	8b 5d dc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  001bd	8b 45 ec	 mov	 eax, DWORD PTR __Backout$1$sroa$268$1$[ebp]
$LN30@Resize_rea:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  001c0	53		 push	 ebx
  001c1	50		 push	 eax
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  001c8	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  001ca	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  001cd	85 c9		 test	 ecx, ecx
  001cf	74 4f		 je	 SHORT $LN79@Resize_rea

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  001d1	53		 push	 ebx
  001d2	ff 73 04	 push	 DWORD PTR [ebx+4]
  001d5	51		 push	 ecx
  001d6	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >

; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001db	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  001de	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001e3	8b 3b		 mov	 edi, DWORD PTR [ebx]
  001e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e8	2b cf		 sub	 ecx, edi
  001ea	f7 e9		 imul	 ecx
  001ec	c1 fa 03	 sar	 edx, 3
  001ef	8b c2		 mov	 eax, edx
  001f1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001f4	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001f6	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  001f9	c1 e1 04	 shl	 ecx, 4

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001fc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00202	72 12		 jb	 SHORT $LN90@Resize_rea

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00204	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00207	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0020a	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0020c	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  0020f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00212	77 38		 ja	 SHORT $LN87@Resize_rea

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00214	8b fa		 mov	 edi, edx
$LN90@Resize_rea:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00216	51		 push	 ecx
  00217	57		 push	 edi
  00218	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0021d	83 c4 08	 add	 esp, 8
$LN79@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00220	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00223	89 33		 mov	 DWORD PTR [ebx], esi
  00225	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00228	c1 e0 04	 shl	 eax, 4
  0022b	03 c6		 add	 eax, esi
  0022d	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00230	8b 45 e4	 mov	 eax, DWORD PTR tv1502[ebp]
  00233	03 c6		 add	 eax, esi
  00235	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 1571 :     }

  00238	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0023b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00242	59		 pop	 ecx
  00243	5f		 pop	 edi
  00244	5e		 pop	 esi
  00245	5b		 pop	 ebx
  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c2 08 00	 ret	 8
$LN87@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0024c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN127@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1539 :             _Xlength();

  00251	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@CAXXZ ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Xlength
$LN128@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00256	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN124@Resize_rea:
  0025b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Guard$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Reallocation_guard@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Reallocation_guard::~_Reallocation_guard
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z
_TEXT	SEGMENT
__UMid$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z PROC ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>, COMDAT

; 7327 : _NODISCARD _CONSTEXPR20 pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 7293 :     auto _UFirst      = _STD _Get_unwrapped(_First);

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]

; 7327 : _NODISCARD _CONSTEXPR20 pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {

  00008	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  00009	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000c	2b f3		 sub	 esi, ebx
  0000e	c1 fe 03	 sar	 esi, 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7300 :         if (_Count <= 0) {

  00011	85 f6		 test	 esi, esi
  00013	7e 3d		 jle	 SHORT $LN67@equal_rang
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  00015	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  00018	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0001c	0f 1f 40 00	 npad	 4
$LL6@equal_rang:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7306 :         _Diff _Count2    = _Count / 2;

  00020	8b ce		 mov	 ecx, esi
  00022	d1 e9		 shr	 ecx, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00024	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  0002b	f3 0f 10 04 1a	 movss	 xmm0, DWORD PTR [edx+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00030	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  00033	0f 2f c8	 comiss	 xmm1, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00036	89 45 fc	 mov	 DWORD PTR __UMid$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7308 :         if (_DEBUG_LT_PRED(_Pred, *_UMid, _Val)) { // range begins above _UMid, loop

  00039	76 0c		 jbe	 SHORT $LN8@equal_rang

; 7309 :             _UFirst = _STD _Next_iter(_UMid);

  0003b	8d 58 08	 lea	 ebx, DWORD PTR [eax+8]

; 7310 :             _Count -= _Count2 + 1;

  0003e	83 c8 ff	 or	 eax, -1
  00041	2b c1		 sub	 eax, ecx
  00043	03 f0		 add	 esi, eax

; 7311 :         } else if (_Pred(_Val, *_UMid)) {

  00045	eb 07		 jmp	 SHORT $LN4@equal_rang
$LN8@equal_rang:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 198  : 	return lhs < rhs.m_fTime;

  00047	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7311 :         } else if (_Pred(_Val, *_UMid)) {

  0004a	76 1a		 jbe	 SHORT $LN10@equal_rang

; 7312 :             _Count = _Count2; // range in first half, loop

  0004c	8b f1		 mov	 esi, ecx
$LN4@equal_rang:

; 7300 :         if (_Count <= 0) {

  0004e	85 f6		 test	 esi, esi
  00050	7f ce		 jg	 SHORT $LL6@equal_rang
$LN67@equal_rang:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00052	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7301 :             _STD _Seek_wrapped(_Last, _UFirst); // empty range

  00055	8b c3		 mov	 eax, ebx

; 7302 :             _STD _Seek_wrapped(_First, _UFirst);

  00057	8b cb		 mov	 ecx, ebx

; 7329 :     return _STD equal_range(_First, _Last, _Val, less<>{});

  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0005b	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7329 :     return _STD equal_range(_First, _Last, _Val, less<>{});

  0005e	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00060	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7330 : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN10@equal_rang:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  00066	c1 fa 03	 sar	 edx, 3

; 7456 :     auto _UFirst                = _STD _Get_unwrapped(_First);

  00069	8b cb		 mov	 ecx, ebx
  0006b	57		 push	 edi

; 7457 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _STD _Get_unwrapped(_Last));
; 7458 : 
; 7459 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0006c	85 d2		 test	 edx, edx
  0006e	7e 22		 jle	 SHORT $LN30@equal_rang
$LL29@equal_rang:

; 7460 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00070	8b fa		 mov	 edi, edx
  00072	d1 ef		 shr	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  00074	0f 2f 0c f9	 comiss	 xmm1, DWORD PTR [ecx+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00078	8d 04 f9	 lea	 eax, DWORD PTR [ecx+edi*8]

; 7462 :         if (_Pred(*_UMid, _Val)) { // try top half

  0007b	76 0c		 jbe	 SHORT $LN31@equal_rang

; 7463 :             _UFirst = _STD _Next_iter(_UMid);

  0007d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]

; 7464 :             _Count -= _Count2 + 1;

  00080	83 c8 ff	 or	 eax, -1
  00083	2b c7		 sub	 eax, edi
  00085	03 d0		 add	 edx, eax

; 7465 :         } else {

  00087	eb 02		 jmp	 SHORT $LN32@equal_rang
$LN31@equal_rang:

; 7466 :             _Count = _Count2;

  00089	8b d7		 mov	 edx, edi
$LN32@equal_rang:

; 7457 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _STD _Get_unwrapped(_Last));
; 7458 : 
; 7459 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0008b	85 d2		 test	 edx, edx
  0008d	7f e1		 jg	 SHORT $LL29@equal_rang
  0008f	8b 45 fc	 mov	 eax, DWORD PTR __UMid$1$[ebp]
$LN30@equal_rang:

; 1664 :         _Where += _Off;

  00092	c1 e6 03	 shl	 esi, 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7316 :             auto _ULast2 = _STD upper_bound(_STD _Next_iter(_UMid), _UFirst, _Val, _STD _Pass_fn(_Pred));

  00095	83 c0 08	 add	 eax, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7485 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _STD _Get_unwrapped(_Last));

  00098	2b f0		 sub	 esi, eax

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  0009a	03 f3		 add	 esi, ebx
  0009c	c1 fe 03	 sar	 esi, 3

; 7487 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0009f	85 f6		 test	 esi, esi
  000a1	7e 23		 jle	 SHORT $LN48@equal_rang
$LL47@equal_rang:

; 7488 :         _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  000a3	8b fe		 mov	 edi, esi
  000a5	d1 ef		 shr	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 198  : 	return lhs < rhs.m_fTime;

  000a7	f3 0f 10 04 f8	 movss	 xmm0, DWORD PTR [eax+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  000ac	8d 14 f8	 lea	 edx, DWORD PTR [eax+edi*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 198  : 	return lhs < rhs.m_fTime;

  000af	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7490 :         if (_Pred(_Val, *_UMid)) {

  000b2	76 04		 jbe	 SHORT $LN49@equal_rang

; 7491 :             _Count = _Count2;

  000b4	8b f7		 mov	 esi, edi

; 7492 :         } else { // try top half

  000b6	eb 0a		 jmp	 SHORT $LN50@equal_rang
$LN49@equal_rang:

; 7493 :             _UFirst = _STD _Next_iter(_UMid);

  000b8	8d 42 08	 lea	 eax, DWORD PTR [edx+8]

; 7494 :             _Count -= _Count2 + 1;

  000bb	83 ca ff	 or	 edx, -1
  000be	2b d7		 sub	 edx, edi
  000c0	03 f2		 add	 esi, edx
$LN50@equal_rang:

; 7486 : 
; 7487 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  000c2	85 f6		 test	 esi, esi
  000c4	7f dd		 jg	 SHORT $LL47@equal_rang
$LN48@equal_rang:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000c6	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  000c9	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7329 :     return _STD equal_range(_First, _Last, _Val, less<>{});

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000cc	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7329 :     return _STD equal_range(_First, _Last, _Val, less<>{});

  000cf	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000d1	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7330 : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ENDP ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >, COMDAT

; 1094 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1098 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 5b		 je	 SHORT $LN52@Destroy_ra
  0000f	83 c6 2c	 add	 esi, 44			; 0000002cH
$LL4@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00012	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  00015	85 c0		 test	 eax, eax
  00017	74 3f		 je	 SHORT $LN22@Destroy_ra

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00019	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00020	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00026	72 12		 jb	 SHORT $LN41@Destroy_ra

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00028	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00030	83 c0 fc	 add	 eax, -4			; fffffffcH
  00033	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00036	77 36		 ja	 SHORT $LN38@Destroy_ra

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00038	8b c2		 mov	 eax, edx
$LN41@Destroy_ra:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003a	51		 push	 ecx
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00041	c7 46 f8 00 00
	00 00		 mov	 DWORD PTR [esi-8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00048	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0004b	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 2082 :             _Myend   = nullptr;

  00052	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN22@Destroy_ra:
  00058	8d 4e d4	 lea	 ecx, DWORD PTR [esi-44]
  0005b	e8 00 00 00 00	 call	 ??1CFrameController@@UAE@XZ ; CFrameController::~CFrameController
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00060	83 c6 30	 add	 esi, 48			; 00000030H
  00063	8d 46 d4	 lea	 eax, DWORD PTR [esi-44]
  00066	3b c7		 cmp	 eax, edi
  00068	75 a8		 jne	 SHORT $LL4@Destroy_ra
$LN52@Destroy_ra:
  0006a	5f		 pop	 edi

; 1099 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1100 :         }
; 1101 :     }
; 1102 : }

  0006b	5e		 pop	 esi
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN38@Destroy_ra:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN59@Destroy_ra:
  00073	cc		 int	 3
??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?CEffectMeshInstance_DeleteTextureInstance@@YAXAAUSTextureInstance@CEffectMeshInstance@@@Z
_TEXT	SEGMENT
_rkInstance$ = 8					; size = 4
?CEffectMeshInstance_DeleteTextureInstance@@YAXAAUSTextureInstance@CEffectMeshInstance@@@Z PROC ; CEffectMeshInstance_DeleteTextureInstance, COMDAT

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 248  : 	std::vector<CGraphicImageInstance*> & rVector = rkInstance.TextureInstanceVector;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _rkInstance$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00009	8b 7b 28	 mov	 edi, DWORD PTR [ebx+40]
  0000c	8b 73 24	 mov	 esi, DWORD PTR [ebx+36]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000f	3b f7		 cmp	 esi, edi
  00011	74 11		 je	 SHORT $LN23@CEffectMes
$LL24@CEffectMes:

; 372  :         _Func(*_UFirst);

  00013	ff 36		 push	 DWORD PTR [esi]
  00015	e8 00 00 00 00	 call	 ?CEffectMeshInstance_DeleteImageInstance@@YAXPAVCGraphicImageInstance@@@Z ; CEffectMeshInstance_DeleteImageInstance
  0001a	83 c6 04	 add	 esi, 4
  0001d	83 c4 04	 add	 esp, 4
  00020	3b f7		 cmp	 esi, edi
  00022	75 ef		 jne	 SHORT $LL24@CEffectMes
$LN23@CEffectMes:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00024	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  00027	3b 43 28	 cmp	 eax, DWORD PTR [ebx+40]
  0002a	74 03		 je	 SHORT $LN26@CEffectMes

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002c	89 43 28	 mov	 DWORD PTR [ebx+40], eax
$LN26@CEffectMes:
  0002f	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 251  : }

  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?CEffectMeshInstance_DeleteTextureInstance@@YAXAAUSTextureInstance@CEffectMeshInstance@@@Z ENDP ; CEffectMeshInstance_DeleteTextureInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?CEffectMeshInstance_DeleteImageInstance@@YAXPAVCGraphicImageInstance@@@Z
_TEXT	SEGMENT
_pkInstance$ = 8					; size = 4
_pkData$ = 8						; size = 4
?CEffectMeshInstance_DeleteImageInstance@@YAXPAVCGraphicImageInstance@@@Z PROC ; CEffectMeshInstance_DeleteImageInstance, COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 	CGraphicImageInstance::ms_kPool.Free(pkInstance);

  00003	8b 45 08	 mov	 eax, DWORD PTR _pkInstance$[ebp]
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  00006	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+16
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 243  : 	CGraphicImageInstance::ms_kPool.Free(pkInstance);

  0000b	89 45 08	 mov	 DWORD PTR _pkData$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  0000e	8d 45 08	 lea	 eax, DWORD PTR _pkData$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEXABQAVCGraphicImageInstance@@@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::push_back
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 244  : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?CEffectMeshInstance_DeleteImageInstance@@YAXPAVCGraphicImageInstance@@@Z ENDP ; CEffectMeshInstance_DeleteImageInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CEffectMeshInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A ; CEffectMeshInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCEffectMeshInstance@@@@UAE@XZ ; CDynamicPool<CEffectMeshInstance>::~CDynamicPool<CEffectMeshInstance>
??__F?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CEffectMeshInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ??__E?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CEffectMeshInstance::ms_kPool'', COMDAT

; 7    : CDynamicPool<CEffectMeshInstance>		CEffectMeshInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CEffectMeshInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CEffectMeshInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCEffectMeshInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCEffectMeshInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CEffectMeshInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCEffectMeshInstance@@@@UAE@XZ ; CDynamicPool<CEffectMeshInstance>::~CDynamicPool<CEffectMeshInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCEffectMeshInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CEffectMeshInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CEffectMeshInstance *,std::allocator<CEffectMeshInstance *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CEffectMeshInstance *,std::allocator<CEffectMeshInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCEffectMeshInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCEffectMeshInstance@@@@UAE@XZ PROC	; CDynamicPool<CEffectMeshInstance>::~CDynamicPool<CEffectMeshInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCEffectMeshInstance@@@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN37@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN56@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN56@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN37@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN53@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN67@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCEffectMeshInstance@@@@UAE@XZ ENDP	; CDynamicPool<CEffectMeshInstance>::~CDynamicPool<CEffectMeshInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEffectMeshInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEffectMeshInstance@@UAEPAXI@Z PROC			; CEffectMeshInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEffectMeshInstance@@UAE@XZ ; CEffectMeshInstance::~CEffectMeshInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 60		 push	 96			; 00000060H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCEffectMeshInstance@@UAEPAXI@Z ENDP			; CEffectMeshInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterlib\Ref.h
;	COMDAT ??1?$CRef@VCEffectMesh@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CRef@VCEffectMesh@@@@QAE@XZ PROC			; CRef<CEffectMesh>::~CRef<CEffectMesh>, COMDAT
; _this$ = ecx

; 37   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CRef@VCEffectMesh@@@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 53   : 			if (m_pObject)

  00025	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00027	85 c9		 test	 ecx, ecx
  00029	74 0b		 je	 SHORT $LN5@CRef

; 54   : 			{
; 55   : 				m_pObject->Release();

  0002b	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 56   : 				m_pObject = NULL;

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN5@CRef:

; 38   : 			Clear();
; 39   : 		}

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	5e		 pop	 esi
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CRef@VCEffectMesh@@@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CRef@VCEffectMesh@@@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CRef@VCEffectMesh@@@@QAE@XZ ENDP			; CRef<CEffectMesh>::~CRef<CEffectMesh>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::~vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 65		 je	 SHORT $LN5@vector
  00009	57		 push	 edi

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >

; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	c1 fa 03	 sar	 edx, 3
  00028	8b c2		 mov	 eax, edx
  0002a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002d	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00032	c1 e1 04	 shl	 ecx, 4

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00035	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003b	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003d	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00040	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00043	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00048	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004b	77 23		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004d	8b fa		 mov	 edi, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004f	51		 push	 ecx
  00050	57		 push	 edi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2081 :             _Mylast  = nullptr;

  0005f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00066	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006d	5f		 pop	 edi
$LN5@vector:
  0006e	5e		 pop	 esi

; 820  :     }

  0006f	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00075	cc		 int	 3
??1?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::~vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?isActive@CEffectMeshInstance@@IAEHXZ
_TEXT	SEGMENT
?isActive@CEffectMeshInstance@@IAEHXZ PROC		; CEffectMeshInstance::isActive, COMDAT
; _this$ = ecx

; 26   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 27   : 	if (!CEffectElementBaseInstance::isActive())

  00005	e8 00 00 00 00	 call	 ?isActive@CEffectElementBaseInstance@@QAE_NXZ ; CEffectElementBaseInstance::isActive
  0000a	84 c0		 test	 al, al
  0000c	74 6b		 je	 SHORT $LN3@isActive

; 28   : 		return FALSE;
; 29   : 
; 30   : 	if (!m_MeshFrameController.isActive())

  0000e	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00011	6a 00		 push	 0
  00013	e8 00 00 00 00	 call	 ?isActive@CFrameController@@QAEHK@Z ; CFrameController::isActive
  00018	85 c0		 test	 eax, eax
  0001a	74 5d		 je	 SHORT $LN3@isActive
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001c	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0001f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00024	2b 4e 50	 sub	 ecx, DWORD PTR [esi+80]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 33   : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00027	33 db		 xor	 ebx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00029	f7 e9		 imul	 ecx
  0002b	c1 fa 03	 sar	 edx, 3
  0002e	8b c2		 mov	 eax, edx
  00030	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00033	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 33   : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00035	74 42		 je	 SHORT $LN3@isActive
  00037	33 ff		 xor	 edi, edi
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@isActive:

; 35   : 		int iCurrentFrame = m_MeshFrameController.GetCurrentFrame();

  00040	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00043	e8 00 00 00 00	 call	 ?GetCurrentFrame@CFrameController@@QAEEXZ ; CFrameController::GetCurrentFrame
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00048	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 35   : 		int iCurrentFrame = m_MeshFrameController.GetCurrentFrame();

  0004b	0f b6 c0	 movzx	 eax, al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0004e	03 cf		 add	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 36   : 		if (m_TextureInstanceVector[j].TextureFrameController.isActive(iCurrentFrame))

  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?isActive@CFrameController@@QAEHK@Z ; CFrameController::isActive
  00056	85 c0		 test	 eax, eax
  00058	75 25		 jne	 SHORT $LN16@isActive
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0005a	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0005d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00062	2b 4e 50	 sub	 ecx, DWORD PTR [esi+80]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 33   : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00065	43		 inc	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00066	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 33   : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00068	83 c7 30	 add	 edi, 48			; 00000030H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0006b	c1 fa 03	 sar	 edx, 3
  0006e	8b c2		 mov	 eax, edx
  00070	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00073	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 33   : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00075	3b d8		 cmp	 ebx, eax
  00077	72 c7		 jb	 SHORT $LL4@isActive
$LN3@isActive:
  00079	5f		 pop	 edi

; 37   : 			return TRUE;
; 38   : 	}
; 39   : 
; 40   : 	return FALSE;
; 41   : }

  0007a	5e		 pop	 esi
  0007b	33 c0		 xor	 eax, eax
  0007d	5b		 pop	 ebx
  0007e	c3		 ret	 0
$LN16@isActive:
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	b8 01 00 00 00	 mov	 eax, 1
  00086	5b		 pop	 ebx
  00087	c3		 ret	 0
?isActive@CEffectMeshInstance@@IAEHXZ ENDP		; CEffectMeshInstance::isActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterlib\GrpMath.h
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterlib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\eterlib\GrpMath.h
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?OnRender@CEffectMeshInstance@@MAEXXZ
_TEXT	SEGMENT
_Color$1$ = -328					; size = 4
tv1876 = -328						; size = 4
_i$1$ = -324						; size = 4
_dwR$1$ = -324						; size = 4
tv1379 = -320						; size = 4
_rFrameData$1$ = -320					; size = 4
_Position$3$ = -320					; size = 4
tv1376 = -320						; size = 4
_byType$1 = -313					; size = 1
tv1978 = -312						; size = 4
_dwG$1$ = -312						; size = 4
_rTextureFrameController$1$ = -308			; size = 4
_dwB$1$ = -308						; size = 4
_this$GSCopy$1$ = -304					; size = 4
_fElapsedTime$ = -300					; size = 4
_Position$1$ = -300					; size = 4
_pEffectMesh$1$ = -296					; size = 4
tv1874 = -292						; size = 4
tv1961 = -288						; size = 4
_TableAlpha$2 = -284					; size = 4
tv1975 = -280						; size = 4
_result$3 = -276					; size = 8
_q$4 = -268						; size = 16
_Color$5 = -252						; size = 16
_Position$6 = -236					; size = 12
_m_matWorld$7 = -224					; size = 64
$T8 = -160						; size = 64
_matTemp$9 = -160					; size = 64
$T10 = -160						; size = 64
_LastPosition$11 = -96					; size = 12
_Position$12 = -84					; size = 12
_matTemp$13 = -72					; size = 64
__$ArrayPad$ = -4					; size = 4
?OnRender@CEffectMeshInstance@@MAEXXZ PROC		; CEffectMeshInstance::OnRender, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	33 c4		 xor	 eax, esp
  00013	89 84 24 44 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+328], eax
  0001a	56		 push	 esi
  0001b	8b f1		 mov	 esi, ecx
  0001d	57		 push	 edi
  0001e	89 74 24 20	 mov	 DWORD PTR _this$GSCopy$1$[esp+336], esi

; 63   : 	if (!isActive())

  00022	e8 00 00 00 00	 call	 ?isActive@CEffectMeshInstance@@IAEHXZ ; CEffectMeshInstance::isActive
  00027	85 c0		 test	 eax, eax
  00029	0f 84 3d 09 00
	00		 je	 $LN3@OnRender

; 64   : 		return;
; 65   : 
; 66   : 	CEffectMesh * pEffectMesh = m_roMesh.GetPointer();

  0002f	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]

; 67   : 
; 68   : 	for (DWORD i = 0; i < pEffectMesh->GetMeshCount(); ++i)

  00032	33 ff		 xor	 edi, edi
  00034	8b c8		 mov	 ecx, eax
  00036	89 44 24 28	 mov	 DWORD PTR _pEffectMesh$1$[esp+336], eax
  0003a	89 7c 24 0c	 mov	 DWORD PTR _i$1$[esp+336], edi
  0003e	e8 00 00 00 00	 call	 ?GetMeshCount@CEffectMesh@@QAEKXZ ; CEffectMesh::GetMeshCount
  00043	85 c0		 test	 eax, eax
  00045	0f 84 21 09 00
	00		 je	 $LN3@OnRender
  0004b	8d 56 2c	 lea	 edx, DWORD PTR [esi+44]
  0004e	89 54 24 38	 mov	 DWORD PTR tv1975[esp+336], edx
$LL4@OnRender:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00052	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00055	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00058	c1 e0 04	 shl	 eax, 4
  0005b	03 c8		 add	 ecx, eax
  0005d	89 44 24 18	 mov	 DWORD PTR tv1978[esp+336], eax
  00061	89 4c 24 1c	 mov	 DWORD PTR _rTextureFrameController$1$[esp+336], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 73   : 		if (!rTextureFrameController.isActive(m_MeshFrameController.GetCurrentFrame()))

  00065	8b ca		 mov	 ecx, edx
  00067	e8 00 00 00 00	 call	 ?GetCurrentFrame@CFrameController@@QAEEXZ ; CFrameController::GetCurrentFrame
  0006c	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rTextureFrameController$1$[esp+336]
  00070	0f b6 c0	 movzx	 eax, al
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?isActive@CFrameController@@QAEHK@Z ; CFrameController::isActive
  00079	85 c0		 test	 eax, eax
  0007b	0f 84 d2 08 00
	00		 je	 $LN2@OnRender

; 74   : 			continue;
; 75   : 
; 76   : 		int iBillboardType = m_pMeshScript->GetBillboardType(i);

  00081	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00084	57		 push	 edi
  00085	e8 00 00 00 00	 call	 ?GetBillboardType@CEffectMeshScript@@QAEHK@Z ; CEffectMeshScript::GetBillboardType
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0008a	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _m_matWorld$7[esp+392], 0
  00095	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _m_matWorld$7[esp+388], 0
  000a0	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _m_matWorld$7[esp+384], 0
  000ab	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _m_matWorld$7[esp+380], 0
  000b6	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _m_matWorld$7[esp+372], 0
  000c1	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _m_matWorld$7[esp+368], 0
  000cc	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _m_matWorld$7[esp+364], 0
  000d7	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _m_matWorld$7[esp+360], 0
  000e2	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _m_matWorld$7[esp+352], 0
  000ed	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR _m_matWorld$7[esp+348], 0
  000f5	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR _m_matWorld$7[esp+344], 0
  000fd	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR _m_matWorld$7[esp+340], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00105	c7 84 24 ac 00
	00 00 00 00 80
	3f		 mov	 DWORD PTR _m_matWorld$7[esp+396], 1065353216 ; 3f800000H
  00110	c7 84 24 98 00
	00 00 00 00 80
	3f		 mov	 DWORD PTR _m_matWorld$7[esp+376], 1065353216 ; 3f800000H
  0011b	c7 84 24 84 00
	00 00 00 00 80
	3f		 mov	 DWORD PTR _m_matWorld$7[esp+356], 1065353216 ; 3f800000H
  00126	c7 44 24 70 00
	00 80 3f	 mov	 DWORD PTR _m_matWorld$7[esp+336], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 81   : 		switch(iBillboardType)

  0012e	83 e8 01	 sub	 eax, 1
  00131	0f 84 69 03 00
	00		 je	 $LN9@OnRender
  00137	83 e8 01	 sub	 eax, 1
  0013a	0f 84 54 02 00
	00		 je	 $LN10@OnRender
  00140	83 e8 01	 sub	 eax, 1
  00143	0f 85 d5 03 00
	00		 jne	 $LN12@OnRender

; 105  : 
; 106  : 			case MESH_BILLBOARD_TYPE_MOVE:
; 107  : 				{
; 108  : 					D3DXVECTOR3 Position;
; 109  : 					m_pMeshScript->GetPosition(m_fLocalTime, Position);

  00149	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0014e	8d 44 24 64	 lea	 eax, DWORD PTR _Position$6[esp+336]
  00152	50		 push	 eax
  00153	51		 push	 ecx
  00154	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015c	e8 00 00 00 00	 call	 ?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ; CEffectElementBase::GetPosition

; 110  : 					D3DXVECTOR3 LastPosition;
; 111  : 					m_pMeshScript->GetPosition(m_fLocalTime-CTimer::Instance().GetElapsedSecond(), LastPosition);

  00161	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00166	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0016c	f3 0f 11 44 24
	10		 movss	 DWORD PTR tv1376[esp+336], xmm0
  00172	e8 00 00 00 00	 call	 ?GetElapsedSecond@CTimer@@QAEMXZ ; CTimer::GetElapsedSecond
  00177	d8 6c 24 10	 fsubr	 DWORD PTR tv1376[esp+336]
  0017b	8d 84 24 f0 00
	00 00		 lea	 eax, DWORD PTR _LastPosition$11[esp+336]
  00182	50		 push	 eax
  00183	51		 push	 ecx
  00184	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00187	d9 5c 24 18	 fstp	 DWORD PTR tv1379[esp+344]
  0018b	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR tv1379[esp+344]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	e8 00 00 00 00	 call	 ?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ; CEffectElementBase::GetPosition
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 213  :     x -= v.x;

  0019b	f3 0f 10 54 24
	64		 movss	 xmm2, DWORD PTR _Position$6[esp+336]

; 214  :     y -= v.y;

  001a1	f3 0f 10 4c 24
	68		 movss	 xmm1, DWORD PTR _Position$6[esp+340]
  001a7	f3 0f 5c 8c 24
	f4 00 00 00	 subss	 xmm1, DWORD PTR _LastPosition$11[esp+340]
  001b0	f3 0f 5c 94 24
	f0 00 00 00	 subss	 xmm2, DWORD PTR _LastPosition$11[esp+336]

; 215  :     z -= v.z;

  001b9	f3 0f 10 44 24
	6c		 movss	 xmm0, DWORD PTR _Position$6[esp+344]
  001bf	f3 0f 5c 84 24
	f8 00 00 00	 subss	 xmm0, DWORD PTR _LastPosition$11[esp+344]
  001c8	f3 0f 11 4c 24
	68		 movss	 DWORD PTR _Position$6[esp+340], xmm1
  001ce	f3 0f 11 54 24
	64		 movss	 DWORD PTR _Position$6[esp+336], xmm2
  001d4	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001d8	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 215  :     z -= v.z;

  001dc	f3 0f 11 44 24
	6c		 movss	 DWORD PTR _Position$6[esp+344], xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  001e2	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001e6	f3 0f 58 ca	 addss	 xmm1, xmm2
  001ea	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 113  : 					if (D3DXVec3LengthSq(&Position)>0.001f)

  001ee	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3a83126f
  001f5	0f 86 23 03 00
	00		 jbe	 $LN12@OnRender

; 114  : 					{
; 115  : 						D3DXVec3Normalize(&Position,&Position);

  001fb	8d 44 24 64	 lea	 eax, DWORD PTR _Position$6[esp+336]
  001ff	50		 push	 eax
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 290  :     return x == v.x && y == v.y && z == v.z;

  00206	f3 0f 10 64 24
	64		 movss	 xmm4, DWORD PTR _Position$6[esp+336]
  0020c	0f 57 d2	 xorps	 xmm2, xmm2
  0020f	f3 0f 10 4c 24
	6c		 movss	 xmm1, DWORD PTR _Position$6[esp+344]
  00215	f3 0f 10 5c 24
	68		 movss	 xmm3, DWORD PTR _Position$6[esp+340]
  0021b	f3 0f 10 3d 00
	00 00 00	 movss	 xmm7, DWORD PTR __real@bf800000
  00223	0f 2e d4	 ucomiss xmm2, xmm4
  00226	f3 0f 11 64 24
	24		 movss	 DWORD PTR _Position$1$[esp+336], xmm4
  0022c	f3 0f 11 4c 24
	10		 movss	 DWORD PTR _Position$3$[esp+336], xmm1
  00232	9f		 lahf
  00233	f6 c4 44	 test	 ah, 68			; 00000044H
  00236	7a 32		 jp	 SHORT $LN168@OnRender
  00238	0f 2e fb	 ucomiss xmm7, xmm3
  0023b	9f		 lahf
  0023c	f6 c4 44	 test	 ah, 68			; 00000044H
  0023f	7a 29		 jp	 SHORT $LN168@OnRender
  00241	0f 2e d1	 ucomiss xmm2, xmm1
  00244	9f		 lahf
  00245	f6 c4 44	 test	 ah, 68			; 00000044H
  00248	7a 20		 jp	 SHORT $LN168@OnRender

; 667  :     x = fx;

  0024a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 117  : 						D3DXMatrixRotationQuaternion(&m_matWorld,&q);

  00251	8d 44 24 44	 lea	 eax, DWORD PTR _q$4[esp+336]
  00255	50		 push	 eax
  00256	8d 44 24 74	 lea	 eax, DWORD PTR _m_matWorld$7[esp+340]
  0025a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 667  :     x = fx;

  0025b	0f 11 44 24 4c	 movups	 XMMWORD PTR _q$4[esp+344], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 117  : 						D3DXMatrixRotationQuaternion(&m_matWorld,&q);

  00260	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8
  00265	e9 b4 02 00 00	 jmp	 $LN12@OnRender
$LN168@OnRender:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  0026a	0f 28 c4	 movaps	 xmm0, xmm4
  0026d	0f 28 eb	 movaps	 xmm5, xmm3
  00270	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00277	0f 28 f1	 movaps	 xmm6, xmm1
  0027a	0f 57 2d 00 00
	00 00		 xorps	 xmm5, DWORD PTR __xmm@80000000800000008000000080000000
  00281	0f 57 35 00 00
	00 00		 xorps	 xmm6, DWORD PTR __xmm@80000000800000008000000080000000

; 290  :     return x == v.x && y == v.y && z == v.z;

  00288	0f 2e d0	 ucomiss xmm2, xmm0
  0028b	9f		 lahf
  0028c	f6 c4 44	 test	 ah, 68			; 00000044H
  0028f	7a 32		 jp	 SHORT $LN169@OnRender
  00291	0f 2e fd	 ucomiss xmm7, xmm5
  00294	9f		 lahf
  00295	f6 c4 44	 test	 ah, 68			; 00000044H
  00298	7a 29		 jp	 SHORT $LN169@OnRender
  0029a	0f 2e d6	 ucomiss xmm2, xmm6
  0029d	9f		 lahf
  0029e	f6 c4 44	 test	 ah, 68			; 00000044H
  002a1	7a 20		 jp	 SHORT $LN169@OnRender

; 667  :     x = fx;

  002a3	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 117  : 						D3DXMatrixRotationQuaternion(&m_matWorld,&q);

  002aa	8d 44 24 44	 lea	 eax, DWORD PTR _q$4[esp+336]
  002ae	50		 push	 eax
  002af	8d 44 24 74	 lea	 eax, DWORD PTR _m_matWorld$7[esp+340]
  002b3	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 667  :     x = fx;

  002b4	0f 11 44 24 4c	 movups	 XMMWORD PTR _q$4[esp+344], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 117  : 						D3DXMatrixRotationQuaternion(&m_matWorld,&q);

  002b9	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8
  002be	e9 5b 02 00 00	 jmp	 $LN12@OnRender
$LN169@OnRender:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  002c3	0f 28 c3	 movaps	 xmm0, xmm3

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  002c6	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 1280 : 
; 1281 :     *pOut = v;

  002ca	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f800000
  002d2	f3 0f 59 c2	 mulss	 xmm0, xmm2
  002d6	f3 0f 11 4c 24
	30		 movss	 DWORD PTR tv1961[esp+336], xmm1
  002dc	f3 0f 11 44 24
	08		 movss	 DWORD PTR tv1876[esp+336], xmm0
  002e2	0f 28 c4	 movaps	 xmm0, xmm4
  002e5	f3 0f 59 c2	 mulss	 xmm0, xmm2
  002e9	f3 0f 11 44 24
	2c		 movss	 DWORD PTR tv1874[esp+336], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  002ef	f3 0f 5c c3	 subss	 xmm0, xmm3
  002f3	f3 0f 58 c1	 addss	 xmm0, xmm1
  002f7	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\eterlib\GrpMath.h

; 56   : 	float s = sqrtf((1+d)*2);

  002fa	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00302	f3 0f 58 c0	 addss	 xmm0, xmm0
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00306	0f 5a c0	 cvtps2pd xmm0, xmm0
  00309	66 0f 2e c8	 ucomisd xmm1, xmm0
  0030d	77 06		 ja	 SHORT $LN204@OnRender
  0030f	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00313	eb 05		 jmp	 SHORT $LN205@OnRender
$LN204@OnRender:
  00315	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN205@OnRender:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0031a	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR _Position$3$[esp+336]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 117  : 						D3DXMatrixRotationQuaternion(&m_matWorld,&q);

  00320	8d 44 24 44	 lea	 eax, DWORD PTR _q$4[esp+336]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00324	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@bf800000
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 117  : 						D3DXMatrixRotationQuaternion(&m_matWorld,&q);

  0032c	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0032d	f3 0f 10 54 24
	0c		 movss	 xmm2, DWORD PTR tv1876[esp+340]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 117  : 						D3DXMatrixRotationQuaternion(&m_matWorld,&q);

  00333	8d 44 24 74	 lea	 eax, DWORD PTR _m_matWorld$7[esp+340]
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  00337	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 117  : 						D3DXMatrixRotationQuaternion(&m_matWorld,&q);

  0033b	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0033c	f3 0f 5c ca	 subss	 xmm1, xmm2
; File C:\Marty 5.5\Src-Client\Client\eterlib\GrpMath.h

; 56   : 	float s = sqrtf((1+d)*2);

  00340	f3 0f 5e c8	 divss	 xmm1, xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 667  :     x = fx;

  00344	f3 0f 11 4c 24
	4c		 movss	 DWORD PTR _q$4[esp+344], xmm1

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0034a	f3 0f 10 4c 24
	34		 movss	 xmm1, DWORD PTR tv1874[esp+344]
  00350	f3 0f 5c 4c 24
	38		 subss	 xmm1, DWORD PTR tv1961[esp+344]

; 667  :     x = fx;

  00356	f3 0f 5e c8	 divss	 xmm1, xmm0

; 668  :     y = fy;

  0035a	f3 0f 11 4c 24
	50		 movss	 DWORD PTR _q$4[esp+348], xmm1

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00360	f3 0f 10 4c 24
	2c		 movss	 xmm1, DWORD PTR _Position$1$[esp+344]
  00366	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@bf800000
  0036e	f3 0f 5c d1	 subss	 xmm2, xmm1

; 668  :     y = fy;

  00372	f3 0f 5e d0	 divss	 xmm2, xmm0
; File C:\Marty 5.5\Src-Client\Client\eterlib\GrpMath.h

; 58   : 	return D3DXQUATERNION(c.x/s,c.y/s,c.z/s,s*0.5f);

  00376	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 669  :     z = fz;

  0037e	f3 0f 11 54 24
	54		 movss	 DWORD PTR _q$4[esp+352], xmm2

; 670  :     w = fw;

  00384	f3 0f 11 44 24
	58		 movss	 DWORD PTR _q$4[esp+356], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 117  : 						D3DXMatrixRotationQuaternion(&m_matWorld,&q);

  0038a	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8
  0038f	e9 8a 01 00 00	 jmp	 $LN12@OnRender
$LN10@OnRender:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00394	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+392], 0
  0039f	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+388], 0
  003aa	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+384], 0
  003b5	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+380], 0
  003c0	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+372], 0
  003cb	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+368], 0
  003d6	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+364], 0
  003e1	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+360], 0
  003ec	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+352], 0
  003f7	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+348], 0
  00402	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+344], 0
  0040d	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _matTemp$9[esp+340], 0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00418	c7 84 24 ec 00
	00 00 00 00 80
	3f		 mov	 DWORD PTR _matTemp$9[esp+396], 1065353216 ; 3f800000H
  00423	c7 84 24 d8 00
	00 00 00 00 80
	3f		 mov	 DWORD PTR _matTemp$9[esp+376], 1065353216 ; 3f800000H
  0042e	c7 84 24 c4 00
	00 00 00 00 80
	3f		 mov	 DWORD PTR _matTemp$9[esp+356], 1065353216 ; 3f800000H
  00439	c7 84 24 b0 00
	00 00 00 00 80
	3f		 mov	 DWORD PTR _matTemp$9[esp+336], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 98   : 					D3DXMatrixInverse(&matTemp, NULL, &CScreen::GetViewMatrix());

  00444	e8 00 00 00 00	 call	 ?GetViewMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ ; CGraphicBase::GetViewMatrix
  00449	50		 push	 eax
  0044a	6a 00		 push	 0
  0044c	8d 84 24 b8 00
	00 00		 lea	 eax, DWORD PTR _matTemp$9[esp+344]
  00453	50		 push	 eax
  00454	e8 00 00 00 00	 call	 _D3DXMatrixInverse@12

; 99   : 					m_matWorld._11 = matTemp._11;

  00459	f3 0f 10 84 24
	b0 00 00 00	 movss	 xmm0, DWORD PTR _matTemp$9[esp+336]
  00462	f3 0f 11 44 24
	70		 movss	 DWORD PTR _m_matWorld$7[esp+336], xmm0

; 100  : 					m_matWorld._12 = matTemp._12;

  00468	f3 0f 10 84 24
	b4 00 00 00	 movss	 xmm0, DWORD PTR _matTemp$9[esp+340]
  00471	f3 0f 11 44 24
	74		 movss	 DWORD PTR _m_matWorld$7[esp+340], xmm0

; 101  : 					m_matWorld._21 = matTemp._21;

  00477	f3 0f 10 84 24
	c0 00 00 00	 movss	 xmm0, DWORD PTR _matTemp$9[esp+352]
  00480	f3 0f 11 84 24
	80 00 00 00	 movss	 DWORD PTR _m_matWorld$7[esp+352], xmm0

; 102  : 					m_matWorld._22 = matTemp._22;

  00489	f3 0f 10 84 24
	c4 00 00 00	 movss	 xmm0, DWORD PTR _matTemp$9[esp+356]
  00492	f3 0f 11 84 24
	84 00 00 00	 movss	 DWORD PTR _m_matWorld$7[esp+356], xmm0

; 103  : 				}
; 104  : 				break;

  0049b	e9 7e 00 00 00	 jmp	 $LN12@OnRender
$LN9@OnRender:

; 82   : 		{
; 83   : 			case MESH_BILLBOARD_TYPE_ALL:
; 84   : 				{
; 85   : 					D3DXMATRIX matTemp;
; 86   : 					D3DXMatrixRotationX(&matTemp, 90.0f);

  004a0	51		 push	 ecx
  004a1	8d 84 24 0c 01
	00 00		 lea	 eax, DWORD PTR _matTemp$13[esp+340]
  004a8	c7 04 24 00 00
	b4 42		 mov	 DWORD PTR [esp], 1119092736 ; 42b40000H
  004af	50		 push	 eax
  004b0	e8 00 00 00 00	 call	 _D3DXMatrixRotationX@8

; 87   : 					D3DXMatrixInverse(&m_matWorld, NULL, &CScreen::GetViewMatrix());

  004b5	e8 00 00 00 00	 call	 ?GetViewMatrix@CGraphicBase@@SAABUD3DXMATRIX@@XZ ; CGraphicBase::GetViewMatrix
  004ba	50		 push	 eax
  004bb	6a 00		 push	 0
  004bd	8d 44 24 78	 lea	 eax, DWORD PTR _m_matWorld$7[esp+344]
  004c1	50		 push	 eax
  004c2	e8 00 00 00 00	 call	 _D3DXMatrixInverse@12
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  004c7	8d 44 24 70	 lea	 eax, DWORD PTR _m_matWorld$7[esp+336]
  004cb	50		 push	 eax
  004cc	8d 84 24 0c 01
	00 00		 lea	 eax, DWORD PTR _matTemp$13[esp+340]
  004d3	50		 push	 eax
  004d4	8d 84 24 b8 00
	00 00		 lea	 eax, DWORD PTR $T8[esp+344]
  004db	50		 push	 eax
  004dc	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 89   : 					m_matWorld = matTemp * m_matWorld;

  004e1	0f 10 84 24 b0
	00 00 00	 movups	 xmm0, XMMWORD PTR $T8[esp+336]
  004e9	0f 11 44 24 70	 movups	 XMMWORD PTR _m_matWorld$7[esp+336], xmm0
  004ee	0f 10 84 24 c0
	00 00 00	 movups	 xmm0, XMMWORD PTR $T8[esp+352]
  004f6	0f 11 84 24 80
	00 00 00	 movups	 XMMWORD PTR _m_matWorld$7[esp+352], xmm0
  004fe	0f 10 84 24 d0
	00 00 00	 movups	 xmm0, XMMWORD PTR $T8[esp+368]
  00506	0f 11 84 24 90
	00 00 00	 movups	 XMMWORD PTR _m_matWorld$7[esp+368], xmm0
  0050e	0f 10 84 24 e0
	00 00 00	 movups	 xmm0, XMMWORD PTR $T8[esp+384]
  00516	0f 11 84 24 a0
	00 00 00	 movups	 XMMWORD PTR _m_matWorld$7[esp+384], xmm0
$LN12@OnRender:

; 118  : 					}
; 119  : 				}
; 120  : 				break;
; 121  : 		}
; 122  : 
; 123  : 		if (!m_pMeshScript->isBlendingEnable(i))

  0051e	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00521	57		 push	 edi
  00522	e8 00 00 00 00	 call	 ?isBlendingEnable@CEffectMeshScript@@QAEHK@Z ; CEffectMeshScript::isBlendingEnable
  00527	85 c0		 test	 eax, eax
  00529	75 10		 jne	 SHORT $LN13@OnRender

; 124  : 		{
; 125  : 			STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

  0052b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00531	50		 push	 eax
  00532	6a 1b		 push	 27			; 0000001bH
  00534	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 126  : 		}

  00539	eb 4e		 jmp	 SHORT $LN14@OnRender
$LN13@OnRender:

; 127  : 		else
; 128  : 		{
; 129  : 			int iBlendingSrcType = m_pMeshScript->GetBlendingSrcType(i);

  0053b	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0053e	57		 push	 edi
  0053f	e8 00 00 00 00	 call	 ?GetBlendingSrcType@CEffectMeshScript@@QAEEK@Z ; CEffectMeshScript::GetBlendingSrcType

; 130  : 			int iBlendingDestType = m_pMeshScript->GetBlendingDestType(i);

  00544	ff 74 24 0c	 push	 DWORD PTR _i$1$[esp+336]
  00548	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0054b	0f b6 f8	 movzx	 edi, al
  0054e	e8 00 00 00 00	 call	 ?GetBlendingDestType@CEffectMeshScript@@QAEEK@Z ; CEffectMeshScript::GetBlendingDestType

; 131  : 			STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  00553	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00559	6a 01		 push	 1
  0055b	6a 1b		 push	 27			; 0000001bH
  0055d	0f b6 f0	 movzx	 esi, al
  00560	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 132  : 			STATEMANAGER.SetRenderState(D3DRS_SRCBLEND, iBlendingSrcType);

  00565	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0056b	57		 push	 edi
  0056c	6a 13		 push	 19			; 00000013H
  0056e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 133  : 			STATEMANAGER.SetRenderState(D3DRS_DESTBLEND, iBlendingDestType);

  00573	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00579	56		 push	 esi
  0057a	6a 14		 push	 20			; 00000014H
  0057c	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
  00581	8b 7c 24 0c	 mov	 edi, DWORD PTR _i$1$[esp+336]
  00585	8b 74 24 20	 mov	 esi, DWORD PTR _this$GSCopy$1$[esp+336]
$LN14@OnRender:

; 134  : 		}
; 135  : 
; 136  : 		D3DXVECTOR3 Position;
; 137  : 		m_pMeshScript->GetPosition(m_fLocalTime, Position);

  00589	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0058e	8d 84 24 fc 00
	00 00		 lea	 eax, DWORD PTR _Position$12[esp+336]
  00595	50		 push	 eax
  00596	51		 push	 ecx
  00597	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0059a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059f	e8 00 00 00 00	 call	 ?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ; CEffectElementBase::GetPosition

; 138  : 		m_matWorld._41 = Position.x;

  005a4	f3 0f 10 84 24
	fc 00 00 00	 movss	 xmm0, DWORD PTR _Position$12[esp+336]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  005ad	8d 44 24 70	 lea	 eax, DWORD PTR _m_matWorld$7[esp+336]
  005b1	ff 76 04	 push	 DWORD PTR [esi+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 138  : 		m_matWorld._41 = Position.x;

  005b4	f3 0f 11 84 24
	a4 00 00 00	 movss	 DWORD PTR _m_matWorld$7[esp+388], xmm0

; 139  : 		m_matWorld._42 = Position.y;

  005bd	f3 0f 10 84 24
	04 01 00 00	 movss	 xmm0, DWORD PTR _Position$12[esp+344]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  005c6	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 139  : 		m_matWorld._42 = Position.y;

  005c7	f3 0f 11 84 24
	ac 00 00 00	 movss	 DWORD PTR _m_matWorld$7[esp+396], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  005d0	8d 84 24 b8 00
	00 00		 lea	 eax, DWORD PTR $T10[esp+344]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 140  : 		m_matWorld._43 = Position.z;

  005d7	f3 0f 10 84 24
	0c 01 00 00	 movss	 xmm0, DWORD PTR _Position$12[esp+352]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  005e0	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 140  : 		m_matWorld._43 = Position.z;

  005e1	f3 0f 11 84 24
	b4 00 00 00	 movss	 DWORD PTR _m_matWorld$7[esp+404], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  005ea	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 141  : 		m_matWorld = m_matWorld * *mc_pmatLocal;

  005ef	0f 10 84 24 b0
	00 00 00	 movups	 xmm0, XMMWORD PTR $T10[esp+336]

; 142  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, &m_matWorld);

  005f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  005fd	8d 44 24 70	 lea	 eax, DWORD PTR _m_matWorld$7[esp+336]
  00601	50		 push	 eax
  00602	0f 11 44 24 74	 movups	 XMMWORD PTR _m_matWorld$7[esp+340], xmm0
  00607	68 00 01 00 00	 push	 256			; 00000100H
  0060c	0f 10 84 24 c8
	00 00 00	 movups	 xmm0, XMMWORD PTR $T10[esp+360]
  00614	0f 11 84 24 88
	00 00 00	 movups	 XMMWORD PTR _m_matWorld$7[esp+360], xmm0
  0061c	0f 10 84 24 d8
	00 00 00	 movups	 xmm0, XMMWORD PTR $T10[esp+376]
  00624	0f 11 84 24 98
	00 00 00	 movups	 XMMWORD PTR _m_matWorld$7[esp+376], xmm0
  0062c	0f 10 84 24 e8
	00 00 00	 movups	 xmm0, XMMWORD PTR $T10[esp+392]
  00634	0f 11 84 24 a8
	00 00 00	 movups	 XMMWORD PTR _m_matWorld$7[esp+392], xmm0
  0063c	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 920  :     r = fr;

  00641	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 146  : 		if (m_pMeshScript->GetColorOperationType(i, &byType))

  00648	8d 44 24 17	 lea	 eax, DWORD PTR _byType$1[esp+336]
  0064c	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0064f	50		 push	 eax
  00650	57		 push	 edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 920  :     r = fr;

  00651	0f 11 44 24 5c	 movups	 XMMWORD PTR _Color$5[esp+344], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 146  : 		if (m_pMeshScript->GetColorOperationType(i, &byType))

  00656	e8 00 00 00 00	 call	 ?GetColorOperationType@CEffectMeshScript@@QAEHKPAE@Z ; CEffectMeshScript::GetColorOperationType
  0065b	85 c0		 test	 eax, eax
  0065d	74 15		 je	 SHORT $LN15@OnRender

; 147  : 			STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, byType);

  0065f	0f b6 44 24 17	 movzx	 eax, BYTE PTR _byType$1[esp+336]
  00664	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0066a	50		 push	 eax
  0066b	6a 01		 push	 1
  0066d	6a 00		 push	 0
  0066f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
$LN15@OnRender:

; 148  : 		m_pMeshScript->GetColorFactor(i, &Color);

  00674	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00677	8d 44 24 54	 lea	 eax, DWORD PTR _Color$5[esp+336]
  0067b	50		 push	 eax
  0067c	57		 push	 edi
  0067d	e8 00 00 00 00	 call	 ?GetColorFactor@CEffectMeshScript@@QAEHKPAUD3DXCOLOR@@@Z ; CEffectMeshScript::GetColorFactor

; 149  : 
; 150  : 		TTimeEventTableFloat * TableAlpha;
; 151  : 
; 152  : 		float fAlpha = 1.0f;

  00682	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000

; 153  : 		if (m_pMeshScript->GetTimeTableAlphaPointer(i, &TableAlpha) && !TableAlpha->empty())

  0068a	8d 44 24 34	 lea	 eax, DWORD PTR _TableAlpha$2[esp+336]
  0068e	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00691	50		 push	 eax
  00692	57		 push	 edi
  00693	f3 0f 11 44 24
	10		 movss	 DWORD PTR _Color$1$[esp+344], xmm0
  00699	e8 00 00 00 00	 call	 ?GetTimeTableAlphaPointer@CEffectMeshScript@@QAEHKPAPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z ; CEffectMeshScript::GetTimeTableAlphaPointer
  0069e	85 c0		 test	 eax, eax
  006a0	0f 84 bd 00 00
	00		 je	 $LN84@OnRender
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  006a6	8b 4c 24 34	 mov	 ecx, DWORD PTR _TableAlpha$2[esp+336]
  006aa	8b 01		 mov	 eax, DWORD PTR [ecx]
  006ac	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  006af	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 153  : 		if (m_pMeshScript->GetTimeTableAlphaPointer(i, &TableAlpha) && !TableAlpha->empty())

  006b1	0f 84 ac 00 00
	00		 je	 $LN84@OnRender

; 154  : 			GetTimeEventBlendValue(m_fLocalTime,*TableAlpha, &fAlpha);

  006b7	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  006bc	8d 50 08	 lea	 edx, DWORD PTR [eax+8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 154  : 			GetTimeEventBlendValue(m_fLocalTime,*TableAlpha, &fAlpha);

  006bf	f3 0f 11 4c 24
	24		 movss	 DWORD PTR _fElapsedTime$[esp+336], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 129  :         _Ptr += _Off;

  006c5	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  006c7	75 10		 jne	 SHORT $LN80@OnRender

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;

  006c9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  006ce	f3 0f 11 44 24
	08		 movss	 DWORD PTR _Color$1$[esp+336], xmm0

; 235  : 		return;

  006d4	e9 8a 00 00 00	 jmp	 $LN84@OnRender
$LN80@OnRender:

; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  006d9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006dd	0f 2f c1	 comiss	 xmm0, xmm1
  006e0	76 0d		 jbe	 SHORT $LN81@OnRender

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;

  006e2	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  006e7	f3 0f 11 44 24
	08		 movss	 DWORD PTR _Color$1$[esp+336], xmm0

; 241  : 		return;

  006ed	eb 74		 jmp	 SHORT $LN84@OnRender
$LN81@OnRender:

; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  006ef	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  006f3	76 0d		 jbe	 SHORT $LN82@OnRender

; 245  : 	{
; 246  : 		*pReturnValue = rVector.back().m_Value;

  006f5	f3 0f 10 41 fc	 movss	 xmm0, DWORD PTR [ecx-4]
  006fa	f3 0f 11 44 24
	08		 movss	 DWORD PTR _Color$1$[esp+336], xmm0

; 247  : 		return;

  00700	eb 61		 jmp	 SHORT $LN84@OnRender
$LN82@OnRender:

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00702	8d 54 24 24	 lea	 edx, DWORD PTR _fElapsedTime$[esp+336]
  00706	52		 push	 edx
  00707	51		 push	 ecx
  00708	50		 push	 eax
  00709	8d 44 24 48	 lea	 eax, DWORD PTR _result$3[esp+348]
  0070d	50		 push	 eax
  0070e	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00713	8b 44 24 4c	 mov	 eax, DWORD PTR _result$3[esp+352]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00717	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  0071a	8b 4c 24 40	 mov	 ecx, DWORD PTR _result$3[esp+340]
  0071e	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  00720	74 0d		 je	 SHORT $LN83@OnRender

; 255  : 		*pReturnValue = result.first->m_Value;

  00722	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00727	f3 0f 11 44 24
	08		 movss	 DWORD PTR _Color$1$[esp+336], xmm0
  0072d	eb 34		 jmp	 SHORT $LN84@OnRender
$LN83@OnRender:

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  0072f	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 100  :         --_Ptr;

  00733	83 e8 08	 sub	 eax, 8
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00736	0f 28 d0	 movaps	 xmm2, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 100  :         --_Ptr;

  00739	89 44 24 3c	 mov	 DWORD PTR _result$3[esp+336], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  0073d	f3 0f 5c 56 0c	 subss	 xmm2, DWORD PTR [esi+12]
  00742	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00746	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  0074a	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0074f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00754	f3 0f 59 d0	 mulss	 xmm2, xmm0
  00758	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
  0075d	f3 0f 11 54 24
	08		 movss	 DWORD PTR _Color$1$[esp+336], xmm2
$LN84@OnRender:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 157  : 		CEffectMesh::TEffectMeshData * pMeshData = pEffectMesh->GetMeshDataPointer(i);

  00763	8b 4c 24 28	 mov	 ecx, DWORD PTR _pEffectMesh$1$[esp+336]
  00767	57		 push	 edi
  00768	e8 00 00 00 00	 call	 ?GetMeshDataPointer@CEffectMesh@@QAEPAUSEffectMeshData@1@K@Z ; CEffectMesh::GetMeshDataPointer

; 158  : 
; 159  : 		assert(m_MeshFrameController.GetCurrentFrame() < pMeshData->EffectFrameDataVector.size());
; 160  : 		CEffectMesh::TEffectFrameData & rFrameData = pMeshData->EffectFrameDataVector[m_MeshFrameController.GetCurrentFrame()];

  0076d	8b 4c 24 38	 mov	 ecx, DWORD PTR tv1975[esp+336]
  00771	8b f0		 mov	 esi, eax
  00773	e8 00 00 00 00	 call	 ?GetCurrentFrame@CFrameController@@QAEEXZ ; CFrameController::GetCurrentFrame

; 162  : 		DWORD dwcurTextureFrame = rTextureFrameController.GetCurrentFrame();

  00778	8b 4c 24 1c	 mov	 ecx, DWORD PTR _rTextureFrameController$1$[esp+336]
  0077c	0f b6 c0	 movzx	 eax, al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0077f	c1 e0 05	 shl	 eax, 5
  00782	03 86 a0 00 00
	00		 add	 eax, DWORD PTR [esi+160]
  00788	89 44 24 10	 mov	 DWORD PTR _rFrameData$1$[esp+336], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 162  : 		DWORD dwcurTextureFrame = rTextureFrameController.GetCurrentFrame();

  0078c	e8 00 00 00 00	 call	 ?GetCurrentFrame@CFrameController@@QAEEXZ ; CFrameController::GetCurrentFrame

; 163  : 		if (dwcurTextureFrame < m_TextureInstanceVector[i].TextureInstanceVector.size())

  00791	8b 74 24 20	 mov	 esi, DWORD PTR _this$GSCopy$1$[esp+336]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00795	8b 54 24 18	 mov	 edx, DWORD PTR tv1978[esp+336]
  00799	8b 7c 24 18	 mov	 edi, DWORD PTR tv1978[esp+336]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 162  : 		DWORD dwcurTextureFrame = rTextureFrameController.GetCurrentFrame();

  0079d	0f b6 c8	 movzx	 ecx, al

; 163  : 		if (dwcurTextureFrame < m_TextureInstanceVector[i].TextureInstanceVector.size())

  007a0	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  007a3	8b 54 02 24	 mov	 edx, DWORD PTR [edx+eax+36]
  007a7	8b 44 07 28	 mov	 eax, DWORD PTR [edi+eax+40]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 163  : 		if (dwcurTextureFrame < m_TextureInstanceVector[i].TextureInstanceVector.size())

  007ab	8b 7c 24 0c	 mov	 edi, DWORD PTR _i$1$[esp+336]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  007af	2b c2		 sub	 eax, edx
  007b1	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 163  : 		if (dwcurTextureFrame < m_TextureInstanceVector[i].TextureInstanceVector.size())

  007b4	3b c8		 cmp	 ecx, eax
  007b6	73 23		 jae	 SHORT $LN17@OnRender

; 166  : 			STATEMANAGER.SetTexture(0, pImageInstance->GetTexturePointer()->GetD3DTexture());

  007b8	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  007bb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 166  : 			STATEMANAGER.SetTexture(0, pImageInstance->GetTexturePointer()->GetD3DTexture());

  007c1	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  007c6	8b c8		 mov	 ecx, eax
  007c8	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  007cd	50		 push	 eax
  007ce	6a 00		 push	 0
  007d0	8b ce		 mov	 ecx, esi
  007d2	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
  007d7	8b 74 24 20	 mov	 esi, DWORD PTR _this$GSCopy$1$[esp+336]
$LN17@OnRender:

; 169  : 		Color.a = fAlpha * rFrameData.fVisibility;

  007db	8b 44 24 10	 mov	 eax, DWORD PTR _rFrameData$1$[esp+336]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  007df	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 169  : 		Color.a = fAlpha * rFrameData.fVisibility;

  007e2	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR _Color$1$[esp+336]
  007e8	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  007ed	f3 0f 11 44 24
	08		 movss	 DWORD PTR _Color$1$[esp+336], xmm0
  007f3	f3 0f 11 44 24
	60		 movss	 DWORD PTR _Color$5[esp+348], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  007f9	f3 0f 10 44 24
	54		 movss	 xmm0, DWORD PTR _Color$5[esp+336]
  007ff	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00806	72 0a		 jb	 SHORT $LN35@OnRender
  00808	c7 44 24 0c ff
	00 00 00	 mov	 DWORD PTR _dwR$1$[esp+336], 255 ; 000000ffH
  00810	eb 2b		 jmp	 SHORT $LN34@OnRender
$LN35@OnRender:
  00812	0f 2f c8	 comiss	 xmm1, xmm0
  00815	72 0a		 jb	 SHORT $LN33@OnRender
  00817	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _dwR$1$[esp+336], 0
  0081f	eb 1c		 jmp	 SHORT $LN34@OnRender
$LN33@OnRender:
  00821	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00829	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00831	e8 00 00 00 00	 call	 __ftol3
  00836	89 44 24 0c	 mov	 DWORD PTR _dwR$1$[esp+336], eax
  0083a	0f 57 c9	 xorps	 xmm1, xmm1
$LN34@OnRender:

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0083d	f3 0f 10 44 24
	58		 movss	 xmm0, DWORD PTR _Color$5[esp+340]
  00843	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0084a	72 0a		 jb	 SHORT $LN39@OnRender
  0084c	c7 44 24 18 ff
	00 00 00	 mov	 DWORD PTR _dwG$1$[esp+336], 255 ; 000000ffH
  00854	eb 28		 jmp	 SHORT $LN38@OnRender
$LN39@OnRender:
  00856	0f 2f c8	 comiss	 xmm1, xmm0
  00859	72 0a		 jb	 SHORT $LN37@OnRender
  0085b	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _dwG$1$[esp+336], 0
  00863	eb 19		 jmp	 SHORT $LN38@OnRender
$LN37@OnRender:
  00865	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0086d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00875	e8 00 00 00 00	 call	 __ftol3
  0087a	89 44 24 18	 mov	 DWORD PTR _dwG$1$[esp+336], eax
$LN38@OnRender:

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0087e	f3 0f 10 44 24
	5c		 movss	 xmm0, DWORD PTR _Color$5[esp+344]
  00884	0f 57 c9	 xorps	 xmm1, xmm1
  00887	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0088e	72 0a		 jb	 SHORT $LN43@OnRender
  00890	c7 44 24 1c ff
	00 00 00	 mov	 DWORD PTR _dwB$1$[esp+336], 255 ; 000000ffH
  00898	eb 2b		 jmp	 SHORT $LN42@OnRender
$LN43@OnRender:
  0089a	0f 2f c8	 comiss	 xmm1, xmm0
  0089d	72 0a		 jb	 SHORT $LN41@OnRender
  0089f	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _dwB$1$[esp+336], 0
  008a7	eb 1c		 jmp	 SHORT $LN42@OnRender
$LN41@OnRender:
  008a9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  008b1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  008b9	e8 00 00 00 00	 call	 __ftol3
  008be	89 44 24 1c	 mov	 DWORD PTR _dwB$1$[esp+336], eax
  008c2	0f 57 c9	 xorps	 xmm1, xmm1
$LN42@OnRender:

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  008c5	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR _Color$1$[esp+336]
  008cb	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  008d2	72 07		 jb	 SHORT $LN47@OnRender
  008d4	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  008d9	eb 1e		 jmp	 SHORT $LN46@OnRender
$LN47@OnRender:
  008db	0f 2f c8	 comiss	 xmm1, xmm0
  008de	72 04		 jb	 SHORT $LN45@OnRender
  008e0	33 c0		 xor	 eax, eax
  008e2	eb 15		 jmp	 SHORT $LN46@OnRender
$LN45@OnRender:
  008e4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  008ec	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  008f4	e8 00 00 00 00	 call	 __ftol3
$LN46@OnRender:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 170  : 		STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, DWORD(Color));

  008f9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  008ff	c1 e0 08	 shl	 eax, 8
  00902	0b 44 24 0c	 or	 eax, DWORD PTR _dwR$1$[esp+336]
  00906	c1 e0 08	 shl	 eax, 8
  00909	0b 44 24 18	 or	 eax, DWORD PTR _dwG$1$[esp+336]
  0090d	c1 e0 08	 shl	 eax, 8
  00910	0b 44 24 1c	 or	 eax, DWORD PTR _dwB$1$[esp+336]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 170  : 		STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, DWORD(Color));

  00914	50		 push	 eax
  00915	6a 3c		 push	 60			; 0000003cH
  00917	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 171  : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ | D3DFVF_TEX1);

  0091c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00922	68 02 01 00 00	 push	 258			; 00000102H
  00927	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 172  : 		if (rFrameData.dwIndexCount) // @fixme027

  0092c	8b 44 24 10	 mov	 eax, DWORD PTR _rFrameData$1$[esp+336]
  00930	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00933	85 c9		 test	 ecx, ecx
  00935	74 1c		 je	 SHORT $LN2@OnRender

; 173  : 			STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLELIST,

  00937	6a 14		 push	 20			; 00000014H
  00939	ff 70 14	 push	 DWORD PTR [eax+20]
  0093c	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00941	f7 e1		 mul	 ecx
  00943	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00949	d1 ea		 shr	 edx, 1
  0094b	52		 push	 edx
  0094c	6a 04		 push	 4
  0094e	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
$LN2@OnRender:

; 67   : 
; 68   : 	for (DWORD i = 0; i < pEffectMesh->GetMeshCount(); ++i)

  00953	8b 4c 24 28	 mov	 ecx, DWORD PTR _pEffectMesh$1$[esp+336]
  00957	47		 inc	 edi
  00958	89 7c 24 0c	 mov	 DWORD PTR _i$1$[esp+336], edi
  0095c	e8 00 00 00 00	 call	 ?GetMeshCount@CEffectMesh@@QAEKXZ ; CEffectMesh::GetMeshCount
  00961	8d 56 2c	 lea	 edx, DWORD PTR [esi+44]
  00964	3b f8		 cmp	 edi, eax
  00966	0f 82 e6 f6 ff
	ff		 jb	 $LL4@OnRender
$LN3@OnRender:

; 174  : 									 rFrameData.dwIndexCount/3,
; 175  : 									 &rFrameData.PDTVertexVector[0],
; 176  : 									 sizeof(TPTVertex));
; 177  : 		// Render //
; 178  : 	}
; 179  : }

  0096c	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+336]
  00973	5f		 pop	 edi
  00974	5e		 pop	 esi
  00975	33 cc		 xor	 ecx, esp
  00977	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0097c	8b e5		 mov	 esp, ebp
  0097e	5d		 pop	 ebp
  0097f	c3		 ret	 0
?OnRender@CEffectMeshInstance@@MAEXXZ ENDP		; CEffectMeshInstance::OnRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?OnUpdate@CEffectMeshInstance@@MAE_NM@Z
_TEXT	SEGMENT
_fElapsedTime$ = 8					; size = 4
?OnUpdate@CEffectMeshInstance@@MAE_NM@Z PROC		; CEffectMeshInstance::OnUpdate, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 45   : 	if (!isActive())

  00006	e8 00 00 00 00	 call	 ?isActive@CEffectMeshInstance@@IAEHXZ ; CEffectMeshInstance::isActive
  0000b	85 c0		 test	 eax, eax
  0000d	75 07		 jne	 SHORT $LN5@OnUpdate

; 46   : 		return false;

  0000f	32 c0		 xor	 al, al
  00011	5e		 pop	 esi

; 59   : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN5@OnUpdate:
  00016	53		 push	 ebx

; 47   : 
; 48   : 	if (m_MeshFrameController.isActive())

  00017	6a 00		 push	 0
  00019	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  0001c	e8 00 00 00 00	 call	 ?isActive@CFrameController@@QAEHK@Z ; CFrameController::isActive
  00021	85 c0		 test	 eax, eax
  00023	74 13		 je	 SHORT $LN6@OnUpdate

; 49   : 		m_MeshFrameController.Update(fElapsedTime);

  00025	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  0002a	51		 push	 ecx
  0002b	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 ?Update@CFrameController@@QAEXM@Z ; CFrameController::Update
$LN6@OnUpdate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00038	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0003b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00040	2b 4e 50	 sub	 ecx, DWORD PTR [esi+80]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 51   : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00043	33 db		 xor	 ebx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00045	f7 e9		 imul	 ecx
  00047	c1 fa 03	 sar	 edx, 3
  0004a	8b c2		 mov	 eax, edx
  0004c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004f	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 51   : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00051	74 52		 je	 SHORT $LN3@OnUpdate
  00053	57		 push	 edi
  00054	33 ff		 xor	 edi, edi
$LL4@OnUpdate:

; 53   : 		int iCurrentFrame = m_MeshFrameController.GetCurrentFrame();

  00056	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00059	e8 00 00 00 00	 call	 ?GetCurrentFrame@CFrameController@@QAEEXZ ; CFrameController::GetCurrentFrame
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0005e	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 53   : 		int iCurrentFrame = m_MeshFrameController.GetCurrentFrame();

  00061	0f b6 c0	 movzx	 eax, al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00064	03 cf		 add	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 54   : 		if (m_TextureInstanceVector[j].TextureFrameController.isActive(iCurrentFrame))

  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?isActive@CFrameController@@QAEHK@Z ; CFrameController::isActive
  0006c	85 c0		 test	 eax, eax
  0006e	74 15		 je	 SHORT $LN2@OnUpdate

; 55   : 			m_TextureInstanceVector[j].TextureFrameController.Update(fElapsedTime);

  00070	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  00075	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00076	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00079	03 cf		 add	 ecx, edi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 55   : 			m_TextureInstanceVector[j].TextureFrameController.Update(fElapsedTime);

  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 ?Update@CFrameController@@QAEXM@Z ; CFrameController::Update
$LN2@OnUpdate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00085	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00088	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0008d	2b 4e 50	 sub	 ecx, DWORD PTR [esi+80]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 51   : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00090	43		 inc	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00091	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 51   : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00093	83 c7 30	 add	 edi, 48			; 00000030H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00096	c1 fa 03	 sar	 edx, 3
  00099	8b c2		 mov	 eax, edx
  0009b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009e	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 51   : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  000a0	3b d8		 cmp	 ebx, eax
  000a2	72 b2		 jb	 SHORT $LL4@OnUpdate
  000a4	5f		 pop	 edi
$LN3@OnUpdate:

; 56   : 	}
; 57   : 
; 58   : 	return true;

  000a5	5b		 pop	 ebx
  000a6	b0 01		 mov	 al, 1
  000a8	5e		 pop	 esi

; 59   : }

  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
?OnUpdate@CEffectMeshInstance@@MAE_NM@Z ENDP		; CEffectMeshInstance::OnUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterlib\Ref.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?OnDestroy@CEffectMeshInstance@@MAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?OnDestroy@CEffectMeshInstance@@MAEXXZ PROC		; CEffectMeshInstance::OnDestroy, COMDAT
; _this$ = ecx

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	53		 push	 ebx
  00007	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 70 50	 mov	 esi, DWORD PTR [eax+80]

; 1827 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  0000b	8d 58 50	 lea	 ebx, DWORD PTR [eax+80]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 258  : {

  0000e	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000f	8b 78 54	 mov	 edi, DWORD PTR [eax+84]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 258  : {

  00012	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  00015	3b f7		 cmp	 esi, edi
  00017	74 17		 je	 SHORT $LN23@OnDestroy
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL24@OnDestroy:

; 372  :         _Func(*_UFirst);

  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?CEffectMeshInstance_DeleteTextureInstance@@YAXAAUSTextureInstance@CEffectMeshInstance@@@Z ; CEffectMeshInstance_DeleteTextureInstance
  00026	83 c6 30	 add	 esi, 48			; 00000030H
  00029	83 c4 04	 add	 esp, 4
  0002c	3b f7		 cmp	 esi, edi
  0002e	75 f0		 jne	 SHORT $LL24@OnDestroy
$LN23@OnDestroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00030	8b 03		 mov	 eax, DWORD PTR [ebx]
  00032	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00035	3b c1		 cmp	 eax, ecx
  00037	74 10		 je	 SHORT $LN26@OnDestroy

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  00039	53		 push	 ebx
  0003a	51		 push	 ecx
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00041	8b 03		 mov	 eax, DWORD PTR [ebx]
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN26@OnDestroy:
; File C:\Marty 5.5\Src-Client\Client\eterlib\Ref.h

; 67   : 			CReferenceObject* pOldObject = m_pObject;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 68   : 
; 69   : 			m_pObject = pObject;

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b 48 5c	 mov	 ecx, DWORD PTR [eax+92]
  00052	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0

; 70   : 
; 71   : 			if (m_pObject)
; 72   : 				m_pObject->AddReference();
; 73   : 
; 74   : 			if (pOldObject)

  00059	85 c9		 test	 ecx, ecx
  0005b	74 05		 je	 SHORT $LN32@OnDestroy

; 75   : 				pOldObject->Release();

  0005d	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN32@OnDestroy:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 262  : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?OnDestroy@CEffectMeshInstance@@MAEXXZ ENDP		; CEffectMeshInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?OnInitialize@CEffectMeshInstance@@MAEXXZ
_TEXT	SEGMENT
?OnInitialize@CEffectMeshInstance@@MAEXXZ PROC		; CEffectMeshInstance::OnInitialize, COMDAT
; _this$ = ecx

; 255  : }

  00000	c2 00 00	 ret	 0
?OnInitialize@CEffectMeshInstance@@MAEXXZ ENDP		; CEffectMeshInstance::OnInitialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\Ref.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z
_TEXT	SEGMENT
$T3 = -56						; size = 4
__Newsize$1$ = -52					; size = 4
_pTextureVector$1$ = -48				; size = 4
_pkNewData$4 = -44					; size = 4
__Oldsize$1$ = -44					; size = 4
__Ptr_container$1$ = -44				; size = 4
_pImage$1$ = -40					; size = 4
__Whereptr$1$ = -40					; size = 4
__Size$1$ = -40						; size = 4
_j$1$ = -36						; size = 4
$T5 = -32						; size = 4
$T6 = -28						; size = 4
_pMeshData$7 = -24					; size = 4
_this$1$ = -20						; size = 4
__My_data$2$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pElement$ = 8						; size = 4
tv1556 = 8						; size = 4
$T8 = 11						; size = 1
?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z PROC ; CEffectMeshInstance::OnSetDataPointer, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 183  : 	CEffectMeshScript * pMesh = (CEffectMeshScript *)pElement;
; 184  : 	m_pMeshScript = pMesh;

  0002d	8b 7d 08	 mov	 edi, DWORD PTR _pElement$[ebp]

; 185  : 
; 186  : 	const char * c_szMeshFileName = pMesh->GetMeshFileName();

  00030	8b cf		 mov	 ecx, edi
  00032	89 7b 24	 mov	 DWORD PTR [ebx+36], edi
  00035	e8 00 00 00 00	 call	 ?GetMeshFileName@CEffectMeshScript@@QAEPBDXZ ; CEffectMeshScript::GetMeshFileName

; 187  : 
; 188  : 	m_pEffectMesh = (CEffectMesh *) CResourceManager::Instance().GetResourcePointer(c_szMeshFileName);

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00046	89 43 28	 mov	 DWORD PTR [ebx+40], eax

; 189  : 
; 190  : 	if (!m_pEffectMesh)

  00049	85 c0		 test	 eax, eax
  0004b	0f 84 3f 04 00
	00		 je	 $LN285@OnSetDataP
; File C:\Marty 5.5\Src-Client\Client\eterlib\Ref.h

; 67   : 			CReferenceObject* pOldObject = m_pObject;

  00051	8b 73 5c	 mov	 esi, DWORD PTR [ebx+92]

; 68   : 
; 69   : 			m_pObject = pObject;
; 70   : 
; 71   : 			if (m_pObject)
; 72   : 				m_pObject->AddReference();

  00054	8b c8		 mov	 ecx, eax
  00056	89 43 5c	 mov	 DWORD PTR [ebx+92], eax
  00059	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference

; 73   : 
; 74   : 			if (pOldObject)

  0005e	85 f6		 test	 esi, esi
  00060	74 07		 je	 SHORT $LN150@OnSetDataP

; 75   : 				pOldObject->Release();

  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN150@OnSetDataP:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 195  : 	m_MeshFrameController.Clear();

  00069	8d 4b 2c	 lea	 ecx, DWORD PTR [ebx+44]
  0006c	e8 00 00 00 00	 call	 ?Clear@CFrameController@@QAEXXZ ; CFrameController::Clear

; 196  : 	m_MeshFrameController.SetMaxFrame(m_roMesh.GetPointer()->GetFrameCount());

  00071	8b 4b 5c	 mov	 ecx, DWORD PTR [ebx+92]
  00074	e8 00 00 00 00	 call	 ?GetFrameCount@CEffectMesh@@QAEKXZ ; CEffectMesh::GetFrameCount
  00079	50		 push	 eax
  0007a	8d 4b 2c	 lea	 ecx, DWORD PTR [ebx+44]
  0007d	e8 00 00 00 00	 call	 ?SetMaxFrame@CFrameController@@QAEXK@Z ; CFrameController::SetMaxFrame

; 197  : 	m_MeshFrameController.SetFrameTime(pMesh->GetMeshAnimationFrameDelay());

  00082	8b cf		 mov	 ecx, edi
  00084	e8 00 00 00 00	 call	 ?GetMeshAnimationFrameDelay@CEffectMeshScript@@QAEMXZ ; CEffectMeshScript::GetMeshAnimationFrameDelay
  00089	51		 push	 ecx
  0008a	8d 4b 2c	 lea	 ecx, DWORD PTR [ebx+44]
  0008d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00090	e8 00 00 00 00	 call	 ?SetFrameTime@CFrameController@@QAEXM@Z ; CFrameController::SetFrameTime

; 198  : 	m_MeshFrameController.SetLoopFlag(pMesh->isMeshAnimationLoop());

  00095	8b cf		 mov	 ecx, edi
  00097	e8 00 00 00 00	 call	 ?isMeshAnimationLoop@CEffectMeshScript@@QAEHXZ ; CEffectMeshScript::isMeshAnimationLoop
  0009c	50		 push	 eax
  0009d	8d 4b 2c	 lea	 ecx, DWORD PTR [ebx+44]
  000a0	e8 00 00 00 00	 call	 ?SetLoopFlag@CFrameController@@QAEXH@Z ; CFrameController::SetLoopFlag

; 199  : 	m_MeshFrameController.SetLoopCount(pMesh->GetMeshAnimationLoopCount());

  000a5	8b cf		 mov	 ecx, edi
  000a7	e8 00 00 00 00	 call	 ?GetMeshAnimationLoopCount@CEffectMeshScript@@QAEHXZ ; CEffectMeshScript::GetMeshAnimationLoopCount
  000ac	50		 push	 eax
  000ad	8d 4b 2c	 lea	 ecx, DWORD PTR [ebx+44]
  000b0	e8 00 00 00 00	 call	 ?SetLoopCount@CFrameController@@QAEXH@Z ; CFrameController::SetLoopCount

; 200  : 	m_MeshFrameController.SetStartFrame(0);

  000b5	6a 00		 push	 0
  000b7	8d 4b 2c	 lea	 ecx, DWORD PTR [ebx+44]
  000ba	e8 00 00 00 00	 call	 ?SetStartFrame@CFrameController@@QAEXK@Z ; CFrameController::SetStartFrame
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000bf	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 202  : 	m_TextureInstanceVector.clear();

  000c2	8d 7b 50	 lea	 edi, DWORD PTR [ebx+80]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000c5	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 202  : 	m_TextureInstanceVector.clear();

  000c8	89 7d f0	 mov	 DWORD PTR __My_data$2$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000cb	3b c1		 cmp	 eax, ecx
  000cd	74 10		 je	 SHORT $LN154@OnSetDataP

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  000cf	57		 push	 edi
  000d0	51		 push	 ecx
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000dc	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN154@OnSetDataP:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 203  : 	m_TextureInstanceVector.resize(m_pEffectMesh->GetMeshCount());

  000df	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  000e2	e8 00 00 00 00	 call	 ?GetMeshCount@CEffectMesh@@QAEKXZ ; CEffectMesh::GetMeshCount
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000e7	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 203  : 	m_TextureInstanceVector.resize(m_pEffectMesh->GetMeshCount());

  000ea	8b f0		 mov	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000ec	8b cb		 mov	 ecx, ebx
  000ee	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000f3	2b 0f		 sub	 ecx, DWORD PTR [edi]
  000f5	f7 e9		 imul	 ecx
  000f7	c1 fa 03	 sar	 edx, 3
  000fa	8b fa		 mov	 edi, edx
  000fc	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  000ff	03 fa		 add	 edi, edx

; 1581 :         if (_Newsize < _Oldsize) { // trim

  00101	3b f7		 cmp	 esi, edi
  00103	73 1b		 jae	 SHORT $LN161@OnSetDataP

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;

  00105	8b 7d f0	 mov	 edi, DWORD PTR __My_data$2$[ebp]
  00108	8d 34 76	 lea	 esi, DWORD PTR [esi+esi*2]

; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);

  0010b	57		 push	 edi
  0010c	c1 e6 04	 shl	 esi, 4
  0010f	53		 push	 ebx
  00110	03 37		 add	 esi, DWORD PTR [edi]
  00112	56		 push	 esi
  00113	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAXPAUSTextureInstance@CEffectMeshInstance@@QAU12@AAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Destroy_range<std::allocator<CEffectMeshInstance::STextureInstance> >
  00118	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;

  0011b	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 1587 :             return;

  0011e	eb 4a		 jmp	 SHORT $LN162@OnSetDataP
$LN161@OnSetDataP:

; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  00120	76 45		 jbe	 SHORT $LN294@OnSetDataP

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00122	8b 55 f0	 mov	 edx, DWORD PTR __My_data$2$[ebp]
  00125	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0012a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0012d	2b 0a		 sub	 ecx, DWORD PTR [edx]
  0012f	f7 e9		 imul	 ecx
  00131	c1 fa 03	 sar	 edx, 3
  00134	8b c2		 mov	 eax, edx
  00136	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00139	03 c2		 add	 eax, edx

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  0013b	3b f0		 cmp	 esi, eax
  0013d	76 11		 jbe	 SHORT $LN163@OnSetDataP

; 1593 :                 _Resize_reallocate(_Newsize, _Val);

  0013f	8b 7d f0	 mov	 edi, DWORD PTR __My_data$2$[ebp]
  00142	8d 45 0b	 lea	 eax, DWORD PTR $T8[ebp]
  00145	50		 push	 eax
  00146	56		 push	 esi
  00147	8b cf		 mov	 ecx, edi
  00149	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::_Resize_reallocate<std::_Value_init_tag>

; 1594 :                 return;

  0014e	eb 1a		 jmp	 SHORT $LN162@OnSetDataP
$LN163@OnSetDataP:

; 1595 :             }
; 1596 : 
; 1597 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1598 :             const pointer _Oldlast = _Mylast;
; 1599 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1600 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1601 :             } else {
; 1602 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00150	ff 75 f0	 push	 DWORD PTR __My_data$2$[ebp]
  00153	2b f7		 sub	 esi, edi
  00155	56		 push	 esi
  00156	53		 push	 ebx
  00157	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@YAPAUSTextureInstance@CEffectMeshInstance@@PAU12@IAAV?$allocator@USTextureInstance@CEffectMeshInstance@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CEffectMeshInstance::STextureInstance> >
  0015c	8b 7d f0	 mov	 edi, DWORD PTR __My_data$2$[ebp]
  0015f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00162	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00165	eb 03		 jmp	 SHORT $LN162@OnSetDataP
$LN294@OnSetDataP:

; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  00167	8b 7d f0	 mov	 edi, DWORD PTR __My_data$2$[ebp]
$LN162@OnSetDataP:

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0016a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0016d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00172	2b 0f		 sub	 ecx, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 204  : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00174	33 f6		 xor	 esi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00176	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 204  : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00178	89 75 dc	 mov	 DWORD PTR _j$1$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0017b	c1 fa 03	 sar	 edx, 3
  0017e	8b c2		 mov	 eax, edx
  00180	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00183	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 204  : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00185	0f 84 05 03 00
	00		 je	 $LN285@OnSetDataP
  0018b	8b 5d ec	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0018e	89 75 08	 mov	 DWORD PTR tv1556[ebp], esi
$LL4@OnSetDataP:

; 205  : 	{
; 206  : 		CEffectMeshScript::TMeshData * pMeshData;
; 207  : 		if (!m_pMeshScript->GetMeshDataPointer(j, &pMeshData))

  00191	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00194	8d 45 e8	 lea	 eax, DWORD PTR _pMeshData$7[ebp]
  00197	50		 push	 eax
  00198	56		 push	 esi
  00199	e8 00 00 00 00	 call	 ?GetMeshDataPointer@CEffectMeshScript@@QAE_NKPAPAUSMeshData@1@@Z ; CEffectMeshScript::GetMeshDataPointer
  0019e	84 c0		 test	 al, al
  001a0	0f 84 c4 02 00
	00		 je	 $LN2@OnSetDataP

; 208  : 			continue;
; 209  : 
; 210  : 		CEffectMesh* pkEftMesh=m_roMesh.GetPointer();

  001a6	8b 4b 5c	 mov	 ecx, DWORD PTR [ebx+92]

; 211  : 
; 212  : 		if (!pkEftMesh)

  001a9	85 c9		 test	 ecx, ecx
  001ab	0f 84 b9 02 00
	00		 je	 $LN2@OnSetDataP

; 213  : 			continue;
; 214  : 
; 215  : 		std::vector<CGraphicImage*>* pTextureVector = pkEftMesh->GetTextureVectorPointer(j);

  001b1	56		 push	 esi
  001b2	e8 00 00 00 00	 call	 ?GetTextureVectorPointer@CEffectMesh@@QAEPAV?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@K@Z ; CEffectMesh::GetTextureVectorPointer
  001b7	8b d8		 mov	 ebx, eax
  001b9	89 5d d0	 mov	 DWORD PTR _pTextureVector$1$[ebp], ebx

; 216  : 		if (!pTextureVector)

  001bc	85 db		 test	 ebx, ebx
  001be	0f 84 a3 02 00
	00		 je	 $LN295@OnSetDataP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  001c4	8b 37		 mov	 esi, DWORD PTR [edi]
  001c6	03 75 08	 add	 esi, DWORD PTR tv1556[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 222  : 		rFrameController.Clear();

  001c9	8b ce		 mov	 ecx, esi
  001cb	e8 00 00 00 00	 call	 ?Clear@CFrameController@@QAEXXZ ; CFrameController::Clear
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001d0	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 223  : 		rFrameController.SetMaxFrame(rTextureVector.size());

  001d3	8b ce		 mov	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001d5	2b 03		 sub	 eax, DWORD PTR [ebx]
  001d7	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 223  : 		rFrameController.SetMaxFrame(rTextureVector.size());

  001da	50		 push	 eax
  001db	e8 00 00 00 00	 call	 ?SetMaxFrame@CFrameController@@QAEXK@Z ; CFrameController::SetMaxFrame

; 224  : 		rFrameController.SetFrameTime(pMeshData->fTextureAnimationFrameDelay);

  001e0	8b 45 e8	 mov	 eax, DWORD PTR _pMeshData$7[ebp]
  001e3	51		 push	 ecx
  001e4	8b ce		 mov	 ecx, esi
  001e6	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  001eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f0	e8 00 00 00 00	 call	 ?SetFrameTime@CFrameController@@QAEXM@Z ; CFrameController::SetFrameTime

; 225  : 		rFrameController.SetLoopFlag(pMeshData->bTextureAnimationLoopEnable);

  001f5	8b 45 e8	 mov	 eax, DWORD PTR _pMeshData$7[ebp]
  001f8	8b ce		 mov	 ecx, esi
  001fa	ff 70 24	 push	 DWORD PTR [eax+36]
  001fd	e8 00 00 00 00	 call	 ?SetLoopFlag@CFrameController@@QAEXH@Z ; CFrameController::SetLoopFlag

; 226  : 		rFrameController.SetStartFrame(pMeshData->dwTextureAnimationStartFrame);

  00202	8b 45 e8	 mov	 eax, DWORD PTR _pMeshData$7[ebp]
  00205	8b ce		 mov	 ecx, esi
  00207	ff 70 2c	 push	 DWORD PTR [eax+44]
  0020a	e8 00 00 00 00	 call	 ?SetStartFrame@CFrameController@@QAEXK@Z ; CFrameController::SetStartFrame

; 227  : 
; 228  : 		std::vector<CGraphicImageInstance*> & rImageInstanceVector = m_TextureInstanceVector[j].TextureInstanceVector;

  0020f	8b 3f		 mov	 edi, DWORD PTR [edi]
  00211	03 7d 08	 add	 edi, DWORD PTR tv1556[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00214	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  00217	8b 57 28	 mov	 edx, DWORD PTR [edi+40]
  0021a	3b c2		 cmp	 eax, edx
  0021c	74 05		 je	 SHORT $LN174@OnSetDataP

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0021e	89 47 28	 mov	 DWORD PTR [edi+40], eax
  00221	8b d0		 mov	 edx, eax
$LN174@OnSetDataP:

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00223	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00226	8b f0		 mov	 esi, eax
  00228	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0022b	2b 0b		 sub	 ecx, DWORD PTR [ebx]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0022d	2b c6		 sub	 eax, esi

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0022f	c1 f9 02	 sar	 ecx, 2

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00232	c1 f8 02	 sar	 eax, 2

; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00235	3b c8		 cmp	 ecx, eax
  00237	0f 86 a3 00 00
	00		 jbe	 $LN251@OnSetDataP

; 1711 :             if (_Newcapacity > max_size()) {

  0023d	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00243	0f 87 5b 02 00
	00		 ja	 $LN278@OnSetDataP

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00249	2b d6		 sub	 edx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0024b	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00252	c1 fa 02	 sar	 edx, 2
  00255	89 55 d8	 mov	 DWORD PTR __Size$1$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00258	85 db		 test	 ebx, ebx
  0025a	75 04		 jne	 SHORT $LN200@OnSetDataP

; 228  :         return nullptr;

  0025c	33 f6		 xor	 esi, esi
  0025e	eb 1a		 jmp	 SHORT $LN199@OnSetDataP
$LN200@OnSetDataP:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00260	53		 push	 ebx
  00261	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00267	72 07		 jb	 SHORT $LN201@OnSetDataP

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00269	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0026e	eb 05		 jmp	 SHORT $LN298@OnSetDataP
$LN201@OnSetDataP:

; 136  :         return ::operator new(_Bytes);

  00270	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN298@OnSetDataP:

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00275	8b f0		 mov	 esi, eax
  00277	83 c4 04	 add	 esp, 4
$LN199@OnSetDataP:
  0027a	56		 push	 esi
  0027b	ff 77 28	 push	 DWORD PTR [edi+40]
  0027e	ff 77 24	 push	 DWORD PTR [edi+36]
  00281	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00286	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00289	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0028c	85 c9		 test	 ecx, ecx
  0028e	74 3b		 je	 SHORT $LN227@OnSetDataP

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00290	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00293	2b c1		 sub	 eax, ecx
  00295	c1 f8 02	 sar	 eax, 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00298	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0029f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  002a5	72 1a		 jb	 SHORT $LN238@OnSetDataP

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002a7	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  002aa	83 c2 23	 add	 edx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  002ad	2b c8		 sub	 ecx, eax
  002af	89 45 d4	 mov	 DWORD PTR __Ptr_container$1$[ebp], eax

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002b2	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  002b5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002b8	0f 87 eb 01 00
	00		 ja	 $LN235@OnSetDataP

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  002be	8b 4d d4	 mov	 ecx, DWORD PTR __Ptr_container$1$[ebp]
$LN238@OnSetDataP:

; 289  :         ::operator delete(_Ptr, _Bytes);

  002c1	52		 push	 edx
  002c2	51		 push	 ecx
  002c3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002c8	83 c4 08	 add	 esp, 8
$LN227@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  002cb	8b 45 d8	 mov	 eax, DWORD PTR __Size$1$[ebp]
  002ce	89 77 24	 mov	 DWORD PTR [edi+36], esi
  002d1	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  002d4	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  002d7	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  002da	8b 5d d0	 mov	 ebx, DWORD PTR _pTextureVector$1$[ebp]
  002dd	89 47 2c	 mov	 DWORD PTR [edi+44], eax
$LN251@OnSetDataP:

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  002e0	8b 33		 mov	 esi, DWORD PTR [ebx]
  002e2	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 231  : 		for (std::vector<CGraphicImage*>::iterator itor = rTextureVector.begin(); itor != rTextureVector.end(); ++itor)

  002e5	0f 84 76 01 00
	00		 je	 $LN293@OnSetDataP
  002eb	0f 1f 44 00 00	 npad	 5
$LL7@OnSetDataP:

; 232  : 		{
; 233  : 			CGraphicImage * pImage = *itor;

  002f0	8b 06		 mov	 eax, DWORD PTR [esi]
  002f2	89 45 d8	 mov	 DWORD PTR _pImage$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  002f5	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+20
  002fa	39 05 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+16, eax
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  00300	75 4b		 jne	 SHORT $LN38@OnSetDataP

; 65   : 			{
; 66   : 				T* pkNewData=new T;

  00302	6a 28		 push	 40			; 00000028H
  00304	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00309	83 c4 04	 add	 esp, 4
  0030c	89 45 c8	 mov	 DWORD PTR $T3[ebp], eax
  0030f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00316	85 c0		 test	 eax, eax
  00318	74 0e		 je	 SHORT $LN40@OnSetDataP
  0031a	8b c8		 mov	 ecx, eax
  0031c	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  00321	8b d8		 mov	 ebx, eax
  00323	89 45 e4	 mov	 DWORD PTR $T6[ebp], eax
  00326	eb 05		 jmp	 SHORT $LN41@OnSetDataP
$LN40@OnSetDataP:
  00328	33 db		 xor	 ebx, ebx
  0032a	89 5d e4	 mov	 DWORD PTR $T6[ebp], ebx
$LN41@OnSetDataP:

; 67   : 				m_kVct_pkData.push_back(pkNewData);

  0032d	8d 45 d4	 lea	 eax, DWORD PTR _pkNewData$4[ebp]
  00330	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00337	50		 push	 eax
  00338	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+4
  0033d	89 5d d4	 mov	 DWORD PTR _pkNewData$4[ebp], ebx
  00340	e8 00 00 00 00	 call	 ?push_back@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEXABQAVCGraphicImageInstance@@@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::push_back

; 68   : 				++m_uUsedCapacity;

  00345	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+32

; 69   : 				return pkNewData;

  0034b	eb 0e		 jmp	 SHORT $LN37@OnSetDataP
$LN38@OnSetDataP:

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  0034d	8b 58 fc	 mov	 ebx, DWORD PTR [eax-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1974 :         return _My_data._Mylast[-1];

  00350	83 c0 fc	 add	 eax, -4			; fffffffcH
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  00353	89 5d e4	 mov	 DWORD PTR $T6[ebp], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1744 :         --_Mylast;

  00356	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CGraphicImageInstance@@2V?$CDynamicPool@VCGraphicImageInstance@@@@A+20, eax
$LN37@OnSetDataP:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 235  : 			pImageInstance->SetImagePointer(pImage);

  0035b	ff 75 d8	 push	 DWORD PTR _pImage$1$[ebp]
  0035e	8b cb		 mov	 ecx, ebx
  00360	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00365	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00368	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  0036b	89 45 d8	 mov	 DWORD PTR __Whereptr$1$[ebp], eax
  0036e	3b c1		 cmp	 eax, ecx
  00370	74 0b		 je	 SHORT $LN55@OnSetDataP

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00372	89 18		 mov	 DWORD PTR [eax], ebx

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00374	83 47 28 04	 add	 DWORD PTR [edi+40], 4

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00378	e9 d5 00 00 00	 jmp	 $LN5@OnSetDataP
$LN55@OnSetDataP:

; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0037d	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
  00380	2b c2		 sub	 eax, edx
  00382	c1 f8 02	 sar	 eax, 2
  00385	89 45 d4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00388	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0038d	0f 84 11 01 00
	00		 je	 $LN278@OnSetDataP

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00393	2b ca		 sub	 ecx, edx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00395	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00398	c1 f9 02	 sar	 ecx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0039b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  003a0	8b d1		 mov	 edx, ecx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  003a2	89 5d cc	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  003a5	d1 ea		 shr	 edx, 1
  003a7	2b c2		 sub	 eax, edx
  003a9	3b c8		 cmp	 ecx, eax
  003ab	76 14		 jbe	 SHORT $LN66@OnSetDataP

; 1997 :             return _Max; // geometric growth would overflow

  003ad	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  003b2	c7 45 e0 ff ff
	ff 3f		 mov	 DWORD PTR $T5[ebp], 1073741823 ; 3fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  003b9	50		 push	 eax
  003ba	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  003bf	eb 40		 jmp	 SHORT $LN299@OnSetDataP
$LN66@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  003c1	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  003c4	8b cb		 mov	 ecx, ebx
  003c6	3b c3		 cmp	 eax, ebx
  003c8	0f 43 c8	 cmovae	 ecx, eax
  003cb	89 4d e0	 mov	 DWORD PTR $T5[ebp], ecx
  003ce	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  003d4	0f 87 d4 00 00
	00		 ja	 $LN279@OnSetDataP

; 122  :     return _Count * _Ty_size;

  003da	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 227  :     if (_Bytes == 0) {

  003e1	85 c0		 test	 eax, eax
  003e3	75 07		 jne	 SHORT $LN81@OnSetDataP

; 228  :         return nullptr;

  003e5	33 db		 xor	 ebx, ebx
  003e7	89 4d e0	 mov	 DWORD PTR $T5[ebp], ecx
  003ea	eb 1a		 jmp	 SHORT $LN80@OnSetDataP
$LN81@OnSetDataP:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  003ec	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  003f1	72 08		 jb	 SHORT $LN82@OnSetDataP

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  003f3	50		 push	 eax
  003f4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  003f9	eb 06		 jmp	 SHORT $LN299@OnSetDataP
$LN82@OnSetDataP:

; 136  :         return ::operator new(_Bytes);

  003fb	50		 push	 eax
  003fc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN299@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00401	8b d8		 mov	 ebx, eax
  00403	83 c4 04	 add	 esp, 4
$LN80@OnSetDataP:
  00406	8b 45 d4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00409	8b 4d e4	 mov	 ecx, DWORD PTR $T6[ebp]
  0040c	89 0c 83	 mov	 DWORD PTR [ebx+eax*4], ecx

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0040f	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  00412	8b 45 d8	 mov	 eax, DWORD PTR __Whereptr$1$[ebp]
  00415	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
  00418	3b c1		 cmp	 eax, ecx
  0041a	75 04		 jne	 SHORT $LN61@OnSetDataP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0041c	8b c3		 mov	 eax, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  0041e	eb 18		 jmp	 SHORT $LN110@OnSetDataP
$LN61@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00420	53		 push	 ebx
  00421	50		 push	 eax
  00422	52		 push	 edx
  00423	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00428	8b 45 d4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0042b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0042e	8b 55 d8	 mov	 edx, DWORD PTR __Whereptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00431	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00432	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00435	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
$LN110@OnSetDataP:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00438	50		 push	 eax
  00439	51		 push	 ecx
  0043a	52		 push	 edx
  0043b	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
  00440	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00443	8d 4f 24	 lea	 ecx, DWORD PTR [edi+36]
  00446	ff 75 e0	 push	 DWORD PTR $T5[ebp]
  00449	ff 75 cc	 push	 DWORD PTR __Newsize$1$[ebp]
  0044c	53		 push	 ebx
  0044d	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array
$LN5@OnSetDataP:

; 166  :         return _Ptr == _Right._Ptr;

  00452	8b 45 d0	 mov	 eax, DWORD PTR _pTextureVector$1$[ebp]

; 82   :         ++_Ptr;

  00455	83 c6 04	 add	 esi, 4

; 166  :         return _Ptr == _Right._Ptr;

  00458	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 231  : 		for (std::vector<CGraphicImage*>::iterator itor = rTextureVector.begin(); itor != rTextureVector.end(); ++itor)

  0045b	0f 85 8f fe ff
	ff		 jne	 $LL7@OnSetDataP
$LN293@OnSetDataP:

; 204  : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00461	8b 75 dc	 mov	 esi, DWORD PTR _j$1$[ebp]
  00464	8b 7d f0	 mov	 edi, DWORD PTR __My_data$2$[ebp]
$LN295@OnSetDataP:
  00467	8b 5d ec	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN2@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0046a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0046d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00472	2b 0f		 sub	 ecx, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 204  : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00474	46		 inc	 esi
  00475	83 45 08 30	 add	 DWORD PTR tv1556[ebp], 48 ; 00000030H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00479	f7 e9		 imul	 ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 204  : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  0047b	89 75 dc	 mov	 DWORD PTR _j$1$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0047e	c1 fa 03	 sar	 edx, 3
  00481	8b c2		 mov	 eax, edx
  00483	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00486	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 204  : 	for (DWORD j = 0; j < m_TextureInstanceVector.size(); ++j)

  00488	3b f0		 cmp	 esi, eax
  0048a	0f 82 01 fd ff
	ff		 jb	 $LL4@OnSetDataP
$LN285@OnSetDataP:

; 239  : }

  00490	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00493	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0049a	59		 pop	 ecx
  0049b	5f		 pop	 edi
  0049c	5e		 pop	 esi
  0049d	5b		 pop	 ebx
  0049e	8b e5		 mov	 esp, ebp
  004a0	5d		 pop	 ebp
  004a1	c2 04 00	 ret	 4
$LN278@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  004a4	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
$LN235@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004a9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN279@OnSetDataP:

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  004ae	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN297@OnSetDataP:
  004b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z$0:
  00000	6a 28		 push	 40			; 00000028H
  00002	8b 45 c8	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnSetDataPointer@CEffectMeshInstance@@MAEXPAVCEffectElementBase@@@Z ENDP ; CEffectMeshInstance::OnSetDataPointer
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?Delete@CEffectMeshInstance@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkMeshInstance$ = 8					; size = 4
_pkData$ = 8						; size = 4
?Delete@CEffectMeshInstance@@SAXPAV1@@Z PROC		; CEffectMeshInstance::Delete, COMDAT

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 21   : 	pkMeshInstance->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkMeshInstance$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CEffectElementBaseInstance@@QAEXXZ ; CEffectElementBaseInstance::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 22   : 	ms_kPool.Free(pkMeshInstance);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 23   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCEffectMeshInstance@@@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@AAEPAPAVCEffectMeshInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectMeshInstance *,std::allocator<CEffectMeshInstance *> >::_Emplace_reallocate<CEffectMeshInstance * const &>
  00039	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 23   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CEffectMeshInstance@@SAXPAV1@@Z ENDP		; CEffectMeshInstance::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?New@CEffectMeshInstance@@SAPAV1@XZ
_TEXT	SEGMENT
_pkNewData$2 = -16					; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?New@CEffectMeshInstance@@SAPAV1@XZ PROC		; CEffectMeshInstance::New, COMDAT

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CEffectMeshInstance@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+20
  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+16, ecx
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  00030	0f 85 84 00 00
	00		 jne	 $LN4@New

; 66   : 				T* pkNewData=new T;

  00036	6a 60		 push	 96			; 00000060H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN6@New
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ??0CEffectMeshInstance@@QAE@XZ ; CEffectMeshInstance::CEffectMeshInstance
  00055	8b f0		 mov	 esi, eax
  00057	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00059	33 f6		 xor	 esi, esi
$LN7@New:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0005b	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	89 75 f0	 mov	 DWORD PTR _pkNewData$2[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0006a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+12
  00070	74 21		 je	 SHORT $LN15@New

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00072	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 16   : 	return ms_kPool.Alloc();

  00074	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00076	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  0007d	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 17   : }

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN15@New:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00093	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$2[ebp]
  00096	51		 push	 ecx
  00097	50		 push	 eax
  00098	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+4
  0009d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCEffectMeshInstance@@@?$vector@PAVCEffectMeshInstance@@V?$allocator@PAVCEffectMeshInstance@@@std@@@std@@AAEPAPAVCEffectMeshInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectMeshInstance *,std::allocator<CEffectMeshInstance *> >::_Emplace_reallocate<CEffectMeshInstance * const &>
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  000a2	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 16   : 	return ms_kPool.Alloc();

  000a8	8b c6		 mov	 eax, esi

; 17   : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5e		 pop	 esi
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
$LN4@New:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  000ba	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1744 :         --_Mylast;

  000bd	83 c1 fc	 add	 ecx, -4			; fffffffcH
  000c0	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+20, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 17   : }

  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	5e		 pop	 esi
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CEffectMeshInstance@@SAPAV1@XZ$0:
  00000	6a 60		 push	 96			; 00000060H
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?New@CEffectMeshInstance@@SAPAV1@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CEffectMeshInstance@@SAPAV1@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CEffectMeshInstance@@SAPAV1@XZ ENDP		; CEffectMeshInstance::New
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ?DestroySystem@CEffectMeshInstance@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CEffectMeshInstance@@SAXXZ PROC		; CEffectMeshInstance::DestroySystem, COMDAT

; 10   : {

  00000	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+4
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 10   : {

  00007	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+8
  0000e	3b f7		 cmp	 esi, edi
  00010	74 29		 je	 SHORT $LN12@DestroySys
$LL6@DestroySys:

; 111  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN4@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN4@DestroySys:

; 50   : 			for (auto v : m_kVct_pkData)

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL6@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
  00033	74 06		 je	 SHORT $LN12@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00035	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+8, esi
$LN12@DestroySys:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+16
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+20
  00048	74 05		 je	 SHORT $LN16@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0004a	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+20, eax
$LN16@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 12   : }

  0004f	c3		 ret	 0
?DestroySystem@CEffectMeshInstance@@SAXXZ ENDP		; CEffectMeshInstance::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterlib\Ref.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ??1CEffectMeshInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CEffectMeshInstance@@UAE@XZ PROC			; CEffectMeshInstance::~CEffectMeshInstance, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CEffectMeshInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEffectMeshInstance@@6B@

; 271  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CEffectElementBaseInstance@@QAEXXZ ; CEffectElementBaseInstance::Destroy
; File C:\Marty 5.5\Src-Client\Client\eterlib\Ref.h

; 53   : 			if (m_pObject)

  00030	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]

; 37   : 		{

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 53   : 			if (m_pObject)

  0003a	85 c9		 test	 ecx, ecx
  0003c	74 0c		 je	 SHORT $LN10@CEffectMes

; 54   : 			{
; 55   : 				m_pObject->Release();

  0003e	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 56   : 				m_pObject = NULL;

  00043	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
$LN10@CEffectMes:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 272  : }

  0004a	8d 4e 50	 lea	 ecx, DWORD PTR [esi+80]
  0004d	e8 00 00 00 00	 call	 ??1?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::~vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >
  00052	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00055	e8 00 00 00 00	 call	 ??1CFrameController@@UAE@XZ ; CFrameController::~CFrameController
  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ??1CEffectElementBaseInstance@@UAE@XZ ; CEffectElementBaseInstance::~CEffectElementBaseInstance
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5e		 pop	 esi
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
  00071	cc		 int	 3
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CEffectMeshInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CEffectMeshInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CEffectMeshInstance@@UAE@XZ ENDP			; CEffectMeshInstance::~CEffectMeshInstance
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterlib\Ref.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp
;	COMDAT ??0CEffectMeshInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CEffectMeshInstance@@QAE@XZ PROC			; CEffectMeshInstance::CEffectMeshInstance, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CEffectMeshInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CEffectElementBaseInstance@@QAE@XZ ; CEffectElementBaseInstance::CEffectElementBaseInstance
  0002e	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEffectMeshInstance@@6B@
  0003e	e8 00 00 00 00	 call	 ??0CFrameController@@QAE@XZ ; CFrameController::CFrameController
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00043	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  0004a	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  00051	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
; File C:\Marty 5.5\Src-Client\Client\eterlib\Ref.h

; 20   : 		CRef() : m_pObject(NULL)

  00058	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectMeshInstance.cpp

; 266  : 	Initialize();

  0005f	8b ce		 mov	 ecx, esi
  00061	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00065	e8 00 00 00 00	 call	 ?Initialize@CEffectElementBaseInstance@@QAEXXZ ; CEffectElementBaseInstance::Initialize

; 267  : }

  0006a	8b c6		 mov	 eax, esi
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00076	59		 pop	 ecx
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CEffectMeshInstance@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CEffectElementBaseInstance@@UAE@XZ ; CEffectElementBaseInstance::~CEffectElementBaseInstance
__unwindfunclet$??0CEffectMeshInstance@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0000e	e9 00 00 00 00	 jmp	 ??1CFrameController@@UAE@XZ ; CFrameController::~CFrameController
__unwindfunclet$??0CEffectMeshInstance@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 50	 add	 ecx, 80			; 00000050H
  00019	e9 00 00 00 00	 jmp	 ??1?$vector@USTextureInstance@CEffectMeshInstance@@V?$allocator@USTextureInstance@CEffectMeshInstance@@@std@@@std@@QAE@XZ ; std::vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >::~vector<CEffectMeshInstance::STextureInstance,std::allocator<CEffectMeshInstance::STextureInstance> >
__unwindfunclet$??0CEffectMeshInstance@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 5c	 add	 ecx, 92			; 0000005cH
  00024	e9 00 00 00 00	 jmp	 ??1?$CRef@VCEffectMesh@@@@QAE@XZ ; CRef<CEffectMesh>::~CRef<CEffectMesh>
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
__ehhandler$??0CEffectMeshInstance@@QAE@XZ:
  0002e	90		 npad	 1
  0002f	90		 npad	 1
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CEffectMeshInstance@@QAE@XZ
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CEffectMeshInstance@@QAE@XZ ENDP			; CEffectMeshInstance::CEffectMeshInstance
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2064 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?push_back@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEXABQAVCGraphicImageInstance@@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv583 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
__Whereptr$1$ = -4					; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEXABQAVCGraphicImageInstance@@@Z PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::push_back, COMDAT
; _this$ = ecx

; 917  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 829  :         if (_Mylast != _My_data._Myend) {

  0000b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00011	89 4d fc	 mov	 DWORD PTR __Whereptr$1$[ebp], ecx
  00014	3b ca		 cmp	 ecx, edx
  00016	74 14		 je	 SHORT $LN4@push_back

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00018	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  0001f	83 46 04 04	 add	 DWORD PTR [esi+4], 4

; 919  :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN4@push_back:

; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0002c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002e	8b c1		 mov	 eax, ecx
  00030	2b c7		 sub	 eax, edi
  00032	c1 f8 02	 sar	 eax, 2
  00035	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00038	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0003d	0f 84 c0 00 00
	00		 je	 $LN106@push_back

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00043	2b d7		 sub	 edx, edi

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00045	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00050	8b fa		 mov	 edi, edx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00052	89 5d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00055	d1 ef		 shr	 edi, 1
  00057	2b c7		 sub	 eax, edi
  00059	3b d0		 cmp	 edx, eax
  0005b	76 12		 jbe	 SHORT $LN15@push_back

; 1997 :             return _Max; // geometric growth would overflow

  0005d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00062	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006d	eb 38		 jmp	 SHORT $LN104@push_back
$LN15@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0006f	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00072	3b c3		 cmp	 eax, ebx
  00074	0f 43 d8	 cmovae	 ebx, eax
  00077	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0007d	0f 87 85 00 00
	00		 ja	 $LN107@push_back

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00083	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]

; 227  :     if (_Bytes == 0) {

  0008a	85 c0		 test	 eax, eax
  0008c	75 04		 jne	 SHORT $LN30@push_back

; 228  :         return nullptr;

  0008e	33 ff		 xor	 edi, edi
  00090	eb 1d		 jmp	 SHORT $LN29@push_back
$LN30@push_back:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 08		 jb	 SHORT $LN31@push_back

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	eb 06		 jmp	 SHORT $LN104@push_back
$LN31@push_back:

; 136  :         return ::operator new(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN104@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR __Whereptr$1$[ebp]
  000aa	8b f8		 mov	 edi, eax
  000ac	83 c4 04	 add	 esp, 4
$LN29@push_back:
  000af	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  000b2	8d 14 87	 lea	 edx, DWORD PTR [edi+eax*4]
  000b5	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000b8	89 55 f4	 mov	 DWORD PTR tv583[ebp], edx
  000bb	8b 00		 mov	 eax, DWORD PTR [eax]
  000bd	89 02		 mov	 DWORD PTR [edx], eax

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	8b 16		 mov	 edx, DWORD PTR [esi]
  000c4	3b c8		 cmp	 ecx, eax
  000c6	75 04		 jne	 SHORT $LN10@push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000c8	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000ca	eb 17		 jmp	 SHORT $LN59@push_back
$LN10@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cc	57		 push	 edi
  000cd	51		 push	 ecx
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8b 4d f4	 mov	 ecx, DWORD PTR tv583[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	8b 55 fc	 mov	 edx, DWORD PTR __Whereptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000dd	83 c1 04	 add	 ecx, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000e0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
$LN59@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 900  :         _Guard._New_begin = nullptr;

  000e3	51		 push	 ecx
  000e4	50		 push	 eax
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000ee	8b ce		 mov	 ecx, esi
  000f0	53		 push	 ebx
  000f1	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000f4	57		 push	 edi
  000f5	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array

; 919  :     }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
$LN106@push_back:

; 873  :             _Xlength();

  00103	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
$LN107@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00108	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN103@push_back:
  0010d	cc		 int	 3
?push_back@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAEXABQAVCGraphicImageInstance@@@Z ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCFrameController@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFrameController@@UAEPAXI@Z PROC			; CFrameController::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFrameController@@UAE@XZ ; CFrameController::~CFrameController
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCFrameController@@UAEPAXI@Z ENDP			; CFrameController::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
