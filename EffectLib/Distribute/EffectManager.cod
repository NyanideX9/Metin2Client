; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EffectLib\Distribute\EffectManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$CSingleton@VCEffectManager@@@@UAE@XZ	; CSingleton<CEffectManager>::~CSingleton<CEffectManager>
PUBLIC	??_G?$CSingleton@VCEffectManager@@@@UAEPAXI@Z	; CSingleton<CEffectManager>::`scalar deleting destructor'
PUBLIC	??0CEffectManager@@QAE@XZ			; CEffectManager::CEffectManager
PUBLIC	??1CEffectManager@@UAE@XZ			; CEffectManager::~CEffectManager
PUBLIC	?Destroy@CEffectManager@@QAEXXZ			; CEffectManager::Destroy
PUBLIC	?UpdateSound@CEffectManager@@QAEXXZ		; CEffectManager::UpdateSound
PUBLIC	?Update@CEffectManager@@QAEXXZ			; CEffectManager::Update
PUBLIC	?Render@CEffectManager@@QAEXXZ			; CEffectManager::Render
PUBLIC	?GetInfo@CEffectManager@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CEffectManager::GetInfo
PUBLIC	?IsAliveEffect@CEffectManager@@QAE_NK@Z		; CEffectManager::IsAliveEffect
PUBLIC	?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z	; CEffectManager::RegisterEffect
PUBLIC	?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z	; CEffectManager::RegisterEffect2
PUBLIC	?DeleteAllInstances@CEffectManager@@QAEXXZ	; CEffectManager::DeleteAllInstances
PUBLIC	?CreateEffect@CEffectManager@@QAEHKABUD3DXVECTOR3@@0@Z ; CEffectManager::CreateEffect
PUBLIC	?CreateEffect@CEffectManager@@QAEHPBDABUD3DXVECTOR3@@1@Z ; CEffectManager::CreateEffect
PUBLIC	?CreateEffectInstance@CEffectManager@@QAEXKK@Z	; CEffectManager::CreateEffectInstance
PUBLIC	?SelectEffectInstance@CEffectManager@@QAEHK@Z	; CEffectManager::SelectEffectInstance
PUBLIC	?DestroyEffectInstance@CEffectManager@@QAE_NK@Z	; CEffectManager::DestroyEffectInstance
PUBLIC	?DeactiveEffectInstance@CEffectManager@@QAEXK@Z	; CEffectManager::DeactiveEffectInstance
PUBLIC	?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; CEffectManager::SetEffectTextures
PUBLIC	?SetEffectInstancePosition@CEffectManager@@QAEXABUD3DXVECTOR3@@@Z ; CEffectManager::SetEffectInstancePosition
PUBLIC	?SetEffectInstanceRotation@CEffectManager@@QAEXABUD3DXVECTOR3@@@Z ; CEffectManager::SetEffectInstanceRotation
PUBLIC	?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z ; CEffectManager::SetEffectInstanceGlobalMatrix
PUBLIC	?ShowEffect@CEffectManager@@QAEXXZ		; CEffectManager::ShowEffect
PUBLIC	?HideEffect@CEffectManager@@QAEXXZ		; CEffectManager::HideEffect
PUBLIC	?ApplyAlwaysHidden@CEffectManager@@QAEXXZ	; CEffectManager::ApplyAlwaysHidden
PUBLIC	?ReleaseAlwaysHidden@CEffectManager@@QAEXXZ	; CEffectManager::ReleaseAlwaysHidden
PUBLIC	?GetRandomEffect@CEffectManager@@QAEKXZ		; CEffectManager::GetRandomEffect
PUBLIC	?GetEmptyIndex@CEffectManager@@QAEHXZ		; CEffectManager::GetEmptyIndex
PUBLIC	?GetEffectData@CEffectManager@@QAE_NKPAPAVCEffectData@@@Z ; CEffectManager::GetEffectData
PUBLIC	?GetEffectData@CEffectManager@@QAE_NKPAPBVCEffectData@@@Z ; CEffectManager::GetEffectData
PUBLIC	?CreateUnsafeEffectInstance@CEffectManager@@QAEXKPAPAVCEffectInstance@@@Z ; CEffectManager::CreateUnsafeEffectInstance
PUBLIC	?DestroyUnsafeEffectInstance@CEffectManager@@QAE_NPAVCEffectInstance@@@Z ; CEffectManager::DestroyUnsafeEffectInstance
PUBLIC	?__Initialize@CEffectManager@@IAEXXZ		; CEffectManager::__Initialize
PUBLIC	?__DestroyEffectInstanceMap@CEffectManager@@IAEXXZ ; CEffectManager::__DestroyEffectInstanceMap
PUBLIC	?__DestroyEffectCacheMap@CEffectManager@@IAEXXZ	; CEffectManager::__DestroyEffectCacheMap
PUBLIC	?__DestroyEffectDataMap@CEffectManager@@IAEXXZ	; CEffectManager::__DestroyEffectDataMap
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Insert_node
PUBLIC	??1?$map@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> > >::~map<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::clear
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Insert_node
PUBLIC	??1?$map@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >::~map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >
PUBLIC	??_GCEffectManager@@UAEPAXI@Z			; CEffectManager::`scalar deleting destructor'
PUBLIC	?_Xlength@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@CAXXZ ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Xlength
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >,std::_Iterator_base0>::operator++
PUBLIC	??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::insert<0,0>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	??$_Sort_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ; std::_Sort_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>
PUBLIC	??$_Emplace_reallocate@ABQAVCEffectInstance@@@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@AAEPAPAVCEffectInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Emplace_reallocate<CEffectInstance * const &>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YA?AU?$pair@PAPAVCEffectInstance@@PAPAV1@@0@PAPAVCEffectInstance@@0UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ; std::_Partition_by_median_guess_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
PUBLIC	??$_Pop_heap_hole_by_index@PAPAVCEffectInstance@@PAV1@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@HH$$QAPAV1@UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ; std::_Pop_heap_hole_by_index<CEffectInstance * *,CEffectInstance *,CEffectManager_LessEffectInstancePtrRenderOrder>
PUBLIC	??$_Guess_median_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@00UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ; std::_Guess_median_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>
PUBLIC	??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectInstance * *,CEffectInstance * *>
PUBLIC	??$_Copy_backward_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ; std::_Copy_backward_memmove<CEffectInstance * *,CEffectInstance * *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCEffectInstance@@@std@@YAPAPAVCEffectInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CEffectInstance * *>
PUBLIC	??_ECEffectManager@@W3AEPAXI@Z			; [thunk]:CEffectManager::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCEffectManager@@@@6B@		; CSingleton<CEffectManager>::`vftable'
PUBLIC	??_7CEffectManager@@6BCScreen@@@		; CEffectManager::`vftable'
PUBLIC	??_7CEffectManager@@6B?$CSingleton@VCEffectManager@@@@@ ; CEffectManager::`vftable'
PUBLIC	??_C@_0GD@GOKDKBKN@Effect?3?5Inst?5?9?5ED?5?$CFd?0?5EI?5?$CFd?5Poo@ ; `string'
PUBLIC	??_C@_0DG@OFGFHJOI@CEffectManager?3?3RegisterEffect?5@ ; `string'
PUBLIC	??_C@_0DE@BDEGLFKP@CEffectManager?3?3CreateEffectIns@ ; `string'
PUBLIC	??_C@_0DK@NJGMADIE@CEffectManager?3?3CreateUnsafeEff@ ; `string'
PUBLIC	??_C@_0DB@KHLBHCOC@CEffectManager?3?3SetEffectTextur@ ; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CEffectManager@@6BCScreen@@@		; CEffectManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEffectManager@@@8			; CEffectManager `RTTI Type Descriptor'
PUBLIC	??_R3CEffectManager@@8				; CEffectManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEffectManager@@8				; CEffectManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEffectManager@@8			; CEffectManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@?$CSingleton@VCEffectManager@@@@8	; CSingleton<CEffectManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCEffectManager@@@@@8	; CSingleton<CEffectManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCEffectManager@@@@8		; CSingleton<CEffectManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCEffectManager@@@@8		; CSingleton<CEffectManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCEffectManager@@@@8	; CSingleton<CEffectManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CEffectManager@@6B?$CSingleton@VCEffectManager@@@@@ ; CEffectManager::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CSingleton@VCEffectManager@@@@6B@	; CSingleton<CEffectManager>::`RTTI Complete Object Locator'
PUBLIC	__real@3c8efa35
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; StringPath
EXTRN	?GetCaseCRC32@@YAKPBDI@Z:PROC			; GetCaseCRC32
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	_D3DXMatrixRotationYawPitchRoll@16:PROC
EXTRN	?random@@YAKXZ:PROC				; random
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z:PROC ; CGraphicObjectInstance::SetPosition
EXTRN	?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z:PROC ; CGraphicObjectInstance::SetRotation
EXTRN	?Update@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Update
EXTRN	?Render@CGraphicObjectInstance@@QAE_NXZ:PROC	; CGraphicObjectInstance::Render
EXTRN	?Show@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Show
EXTRN	?Hide@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Hide
EXTRN	?ApplyAlwaysHidden@CGraphicObjectInstance@@QAEXXZ:PROC ; CGraphicObjectInstance::ApplyAlwaysHidden
EXTRN	?ReleaseAlwaysHidden@CGraphicObjectInstance@@QAEXXZ:PROC ; CGraphicObjectInstance::ReleaseAlwaysHidden
EXTRN	?ChangeTexture@CParticleSystemData@@QAEXPBD@Z:PROC ; CParticleSystemData::ChangeTexture
EXTRN	?LoadScript@CEffectData@@QAE_NPBD@Z:PROC	; CEffectData::LoadScript
EXTRN	?GetParticlePointer@CEffectData@@QAEPAVCParticleSystemData@@K@Z:PROC ; CEffectData::GetParticlePointer
EXTRN	?New@CEffectData@@SAPAV1@XZ:PROC		; CEffectData::New
EXTRN	?Delete@CEffectData@@SAXPAV1@@Z:PROC		; CEffectData::Delete
EXTRN	?New@CEffectInstance@@SAPAV1@XZ:PROC		; CEffectInstance::New
EXTRN	?Delete@CEffectInstance@@SAXPAV1@@Z:PROC	; CEffectInstance::Delete
EXTRN	?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z:PROC ; CEffectInstance::LessRenderOrder
EXTRN	?SetEffectDataPointer@CEffectInstance@@QAEXPAVCEffectData@@@Z:PROC ; CEffectInstance::SetEffectDataPointer
EXTRN	?isAlive@CEffectInstance@@QAEHXZ:PROC		; CEffectInstance::isAlive
EXTRN	?SetDeactive@CEffectInstance@@QAEXXZ:PROC	; CEffectInstance::SetDeactive
EXTRN	?SetGlobalMatrix@CEffectInstance@@QAEXABUD3DXMATRIX@@@Z:PROC ; CEffectInstance::SetGlobalMatrix
EXTRN	?UpdateSound@CEffectInstance@@QAEXXZ:PROC	; CEffectInstance::UpdateSound
EXTRN	??_E?$CSingleton@VCEffectManager@@@@UAEPAXI@Z:PROC ; CSingleton<CEffectManager>::`vector deleting destructor'
EXTRN	??_ECEffectManager@@UAEPAXI@Z:PROC		; CEffectManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?ms_kPool@CParticleSystemData@@2V?$CDynamicPool@VCParticleSystemData@@@@A:BYTE ; CParticleSystemData::ms_kPool
EXTRN	?ms_kPool@CEffectMeshScript@@2V?$CDynamicPool@VCEffectMeshScript@@@@A:BYTE ; CEffectMeshScript::ms_kPool
EXTRN	?ms_kPool@CLightData@@2V?$CDynamicPool@VCLightData@@@@A:BYTE ; CLightData::ms_kPool
EXTRN	?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A:BYTE ; CEffectData::ms_kPool
EXTRN	?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A:BYTE ; CEffectMeshInstance::ms_kPool
EXTRN	?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A:BYTE ; CParticleInstance::ms_kPool
EXTRN	?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A:BYTE ; CParticleSystemInstance::ms_kPool
EXTRN	?ms_kPool@CLightInstance@@2V?$CDynamicPool@VCLightInstance@@@@A:BYTE ; CLightInstance::ms_kPool
EXTRN	?ms_kPool@CEffectInstance@@2V?$CDynamicPool@VCEffectInstance@@@@A:BYTE ; CEffectInstance::ms_kPool
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A DD 01H DUP (?) ; CSingleton<CEffectManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
_BSS	SEGMENT
?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A DB 0cH DUP (?) ; `CEffectManager::Render'::`9'::s_kVct_pkEftInstSort
_BSS	ENDS
;	COMDAT ?$TSS0@?8??Render@CEffectManager@@QAEXXZ@4HA
_BSS	SEGMENT
?$TSS0@?8??Render@CEffectManager@@QAEXXZ@4HA DD 01H DUP (?) ; `CEffectManager::Render'::`9'::$TSS0
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCEffectManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCEffectManager@@@@6B@ DD 00H		; CSingleton<CEffectManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCEffectManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCEffectManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R4CEffectManager@@6B?$CSingleton@VCEffectManager@@@@@
rdata$r	SEGMENT
??_R4CEffectManager@@6B?$CSingleton@VCEffectManager@@@@@ DD 00H ; CEffectManager::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCEffectManager@@@8
	DD	FLAT:??_R3CEffectManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCEffectManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCEffectManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCEffectManager@@@@@8 ; CSingleton<CEffectManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCEffectManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCEffectManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCEffectManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCEffectManager@@@@8 ; CSingleton<CEffectManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCEffectManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCEffectManager@@@@8 DD 00H		; CSingleton<CEffectManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCEffectManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCEffectManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCEffectManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CEffectManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCEffectManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@?$CSingleton@VCEffectManager@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$CSingleton@VCEffectManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCEffectManager@@@@@8 ; CSingleton<CEffectManager>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCEffectManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEffectManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEffectManager@@8 DD FLAT:??_R0?AVCEffectManager@@@8 ; CEffectManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEffectManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CEffectManager@@8
rdata$r	SEGMENT
??_R2CEffectManager@@8 DD FLAT:??_R1A@?0A@EA@CEffectManager@@8 ; CEffectManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@?$CSingleton@VCEffectManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CEffectManager@@8
rdata$r	SEGMENT
??_R3CEffectManager@@8 DD 00H				; CEffectManager::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CEffectManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEffectManager@@@8
data$rs	SEGMENT
??_R0?AVCEffectManager@@@8 DD FLAT:??_7type_info@@6B@	; CEffectManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEffectManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CEffectManager@@6BCScreen@@@
rdata$r	SEGMENT
??_R4CEffectManager@@6BCScreen@@@ DD 00H		; CEffectManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEffectManager@@@8
	DD	FLAT:??_R3CEffectManager@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ?iMaxIndex@?1??GetEmptyIndex@CEffectManager@@QAEHXZ@4HA
_DATA	SEGMENT
?iMaxIndex@?1??GetEmptyIndex@CEffectManager@@QAEHXZ@4HA DD 01H ; `CEffectManager::GetEmptyIndex'::`2'::iMaxIndex
_DATA	ENDS
;	COMDAT ??_C@_0DB@KHLBHCOC@CEffectManager?3?3SetEffectTextur@
CONST	SEGMENT
??_C@_0DB@KHLBHCOC@CEffectManager?3?3SetEffectTextur@ DB 'CEffectManager:'
	DB	':SetEffectTextures - NO DATA :%d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@NJGMADIE@CEffectManager?3?3CreateUnsafeEff@
CONST	SEGMENT
??_C@_0DK@NJGMADIE@CEffectManager?3?3CreateUnsafeEff@ DB 'CEffectManager:'
	DB	':CreateUnsafeEffectInstance - NO DATA :%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@BDEGLFKP@CEffectManager?3?3CreateEffectIns@
CONST	SEGMENT
??_C@_0DE@BDEGLFKP@CEffectManager?3?3CreateEffectIns@ DB 'CEffectManager:'
	DB	':CreateEffectInstance - NO DATA :%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@OFGFHJOI@CEffectManager?3?3RegisterEffect?5@
CONST	SEGMENT
??_C@_0DG@OFGFHJOI@CEffectManager?3?3RegisterEffect?5@ DB 'CEffectManager'
	DB	'::RegisterEffect - LoadScript(%s) Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@GOKDKBKN@Effect?3?5Inst?5?9?5ED?5?$CFd?0?5EI?5?$CFd?5Poo@
CONST	SEGMENT
??_C@_0GD@GOKDKBKN@Effect?3?5Inst?5?9?5ED?5?$CFd?0?5EI?5?$CFd?5Poo@ DB 'E'
	DB	'ffect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d'
	DB	', EI %d, ED %d, PSD %d, EM %d, LD %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CEffectManager@@6B?$CSingleton@VCEffectManager@@@@@
CONST	SEGMENT
??_7CEffectManager@@6B?$CSingleton@VCEffectManager@@@@@ DD FLAT:??_R4CEffectManager@@6B?$CSingleton@VCEffectManager@@@@@ ; CEffectManager::`vftable'
	DD	FLAT:??_ECEffectManager@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CEffectManager@@6BCScreen@@@
CONST	SEGMENT
??_7CEffectManager@@6BCScreen@@@ DD FLAT:??_R4CEffectManager@@6BCScreen@@@ ; CEffectManager::`vftable'
	DD	FLAT:??_ECEffectManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCEffectManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCEffectManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCEffectManager@@@@6B@ ; CSingleton<CEffectManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCEffectManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKPAVCEffectData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAVCEffectData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKPAVCEffectData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAVCEffectData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCEffectInstance@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCEffectData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAVCEffectData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAVCEffectData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAVCEffectData@@@std@@@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0
__ehfuncinfo$?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z$0
__ehfuncinfo$?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z$7
__ehfuncinfo$?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CEffectManager@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CEffectManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CEffectManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CEffectManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CEffectManager@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CEffectManager@@QAE@XZ$3
__ehfuncinfo$??0CEffectManager@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CEffectManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECEffectManager@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECEffectManager@@W3AEPAXI@Z PROC			; [thunk]:CEffectManager::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECEffectManager@@UAEPAXI@Z
??_ECEffectManager@@W3AEPAXI@Z ENDP			; [thunk]:CEffectManager::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCEffectInstance@@@std@@YAPAPAVCEffectInstance@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCEffectInstance@@@std@@YAPAPAVCEffectInstance@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CEffectInstance * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCEffectInstance@@@std@@YAPAPAVCEffectInstance@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CEffectInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z PROC ; std::_Copy_backward_memmove<CEffectInstance * *,CEffectInstance * *>, COMDAT

; 5099 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5100 :     // implement copy_backward-like function as memmove
; 5101 :     const auto _First_ptr = _STD _To_address(_First);
; 5102 :     const auto _Last_ptr  = _STD _To_address(_Last);
; 5103 :     const auto _Dest_ptr  = _STD _To_address(_Dest);
; 5104 :     const auto _First_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 5105 :     const auto _Last_ch   = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 5106 :     const auto _Dest_ch   = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 5107 :     const auto _Count     = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 5108 :     const auto _Result    = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5109 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 5110 :         return static_cast<_CtgIt2>(_Result);
; 5111 :     } else {
; 5112 :         return _Dest - static_cast<_Iter_diff_t<_CtgIt2>>(_Last_ptr - _First_ptr);
; 5113 :     }
; 5114 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ENDP ; std::_Copy_backward_memmove<CEffectInstance * *,CEffectInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CEffectInstance * *,CEffectInstance * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCEffectInstance@@@std@@YAPAPAVCEffectInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CEffectInstance * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CEffectInstance * *,CEffectInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@00UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z
_TEXT	SEGMENT
__First$1$ = -8						; size = 4
__Step$1$ = -4						; size = 4
__First$ = 8						; size = 4
tv499 = 8						; size = 4
__First$1$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@00UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z PROC ; std::_Guess_median_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>, COMDAT

; 8251 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 8252 :     // sort median element to middle
; 8253 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 8254 :     const _Diff _Count = _Last - _First;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00011	2b c7		 sub	 eax, edi
  00013	c1 f8 02	 sar	 eax, 2
  00016	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 8255 :     if (40 < _Count) { // Tukey's ninther

  00018	51		 push	 ecx
  00019	83 f8 28	 cmp	 eax, 40			; 00000028H
  0001c	0f 8e 7e 01 00
	00		 jle	 $LN2@Guess_medi

; 8256 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  00022	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00025	c1 fe 03	 sar	 esi, 3
  00028	89 75 fc	 mov	 DWORD PTR __Step$1$[ebp], esi

; 8258 :         _STD _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  0002b	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00032	8b 0c 38	 mov	 ecx, DWORD PTR [eax+edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8258 :         _STD _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00035	89 45 08	 mov	 DWORD PTR tv499[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00038	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0003d	8d 14 b5 00 00
	00 00		 lea	 edx, DWORD PTR [esi*4]
  00044	84 c0		 test	 al, al
  00046	74 0a		 je	 SHORT $LN110@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00048	8b 0c 3a	 mov	 ecx, DWORD PTR [edx+edi]

; 140  :     _Left    = _STD move(_Right);

  0004b	8b 07		 mov	 eax, DWORD PTR [edi]
  0004d	89 04 3a	 mov	 DWORD PTR [edx+edi], eax

; 141  :     _Right   = _STD move(_Tmp);

  00050	89 0f		 mov	 DWORD PTR [edi], ecx
$LN110@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00052	ff 34 3a	 push	 DWORD PTR [edx+edi]
  00055	8b 0c f7	 mov	 ecx, DWORD PTR [edi+esi*8]
  00058	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0005d	84 c0		 test	 al, al
  0005f	74 2b		 je	 SHORT $LN23@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00061	8b 0c f7	 mov	 ecx, DWORD PTR [edi+esi*8]

; 140  :     _Left    = _STD move(_Right);

  00064	8d 14 b5 00 00
	00 00		 lea	 edx, DWORD PTR [esi*4]
  0006b	8b 04 3a	 mov	 eax, DWORD PTR [edx+edi]
  0006e	89 04 f7	 mov	 DWORD PTR [edi+esi*8], eax

; 141  :     _Right   = _STD move(_Tmp);

  00071	8b 75 08	 mov	 esi, DWORD PTR tv499[ebp]
  00074	89 0c 3e	 mov	 DWORD PTR [esi+edi], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00077	ff 37		 push	 DWORD PTR [edi]
  00079	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0007e	84 c0		 test	 al, al
  00080	74 0a		 je	 SHORT $LN23@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00082	8b 0c 3e	 mov	 ecx, DWORD PTR [esi+edi]

; 140  :     _Left    = _STD move(_Right);

  00085	8b 07		 mov	 eax, DWORD PTR [edi]
  00087	89 04 3e	 mov	 DWORD PTR [esi+edi], eax

; 141  :     _Right   = _STD move(_Tmp);

  0008a	89 0f		 mov	 DWORD PTR [edi], ecx
$LN23@Guess_medi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8259 :         _STD _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  0008c	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
  0008f	8b c6		 mov	 eax, esi
  00091	2b 45 08	 sub	 eax, DWORD PTR tv499[ebp]
  00094	89 45 f8	 mov	 DWORD PTR __First$1$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00097	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00099	ff 30		 push	 DWORD PTR [eax]
  0009b	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000a0	84 c0		 test	 al, al
  000a2	74 0b		 je	 SHORT $LN111@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  000a4	8b 55 f8	 mov	 edx, DWORD PTR __First$1$[ebp]
  000a7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000a9	8b 02		 mov	 eax, DWORD PTR [edx]
  000ab	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  000ad	89 0a		 mov	 DWORD PTR [edx], ecx
$LN111@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  000af	8b 45 08	 mov	 eax, DWORD PTR tv499[ebp]
  000b2	ff 36		 push	 DWORD PTR [esi]
  000b4	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
  000b7	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  000bc	84 c0		 test	 al, al
  000be	74 26		 je	 SHORT $LN43@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  000c0	8b 55 08	 mov	 edx, DWORD PTR tv499[ebp]

; 140  :     _Left    = _STD move(_Right);

  000c3	8b 06		 mov	 eax, DWORD PTR [esi]
  000c5	8b 0c 32	 mov	 ecx, DWORD PTR [edx+esi]
  000c8	89 04 32	 mov	 DWORD PTR [edx+esi], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  000cb	8b 45 f8	 mov	 eax, DWORD PTR __First$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  000ce	89 0e		 mov	 DWORD PTR [esi], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  000d0	ff 30		 push	 DWORD PTR [eax]
  000d2	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000d7	84 c0		 test	 al, al
  000d9	74 0b		 je	 SHORT $LN43@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  000db	8b 55 f8	 mov	 edx, DWORD PTR __First$1$[ebp]
  000de	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000e0	8b 02		 mov	 eax, DWORD PTR [edx]
  000e2	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  000e4	89 0a		 mov	 DWORD PTR [edx], ecx
$LN43@Guess_medi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8260 :         _STD _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  000e6	8b 4d fc	 mov	 ecx, DWORD PTR __Step$1$[ebp]
  000e9	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  000f0	2b d8		 sub	 ebx, eax
  000f2	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000f9	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  000fc	2b c8		 sub	 ecx, eax
  000fe	89 4d 08	 mov	 DWORD PTR __First$1$[ebp], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00101	ff 31		 push	 DWORD PTR [ecx]
  00103	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00105	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0010a	84 c0		 test	 al, al
  0010c	74 0b		 je	 SHORT $LN112@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0010e	8b 55 08	 mov	 edx, DWORD PTR __First$1$[ebp]
  00111	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00113	8b 02		 mov	 eax, DWORD PTR [edx]
  00115	89 03		 mov	 DWORD PTR [ebx], eax

; 141  :     _Right   = _STD move(_Tmp);

  00117	89 0a		 mov	 DWORD PTR [edx], ecx
$LN112@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00119	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0011c	ff 33		 push	 DWORD PTR [ebx]
  0011e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00120	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00125	84 c0		 test	 al, al
  00127	74 24		 je	 SHORT $LN63@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00129	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]

; 140  :     _Left    = _STD move(_Right);

  0012c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0012e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00130	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00132	8b 45 08	 mov	 eax, DWORD PTR __First$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  00135	89 0b		 mov	 DWORD PTR [ebx], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00137	ff 30		 push	 DWORD PTR [eax]
  00139	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0013e	84 c0		 test	 al, al
  00140	74 0b		 je	 SHORT $LN63@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00142	8b 55 08	 mov	 edx, DWORD PTR __First$1$[ebp]
  00145	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00147	8b 02		 mov	 eax, DWORD PTR [edx]
  00149	89 03		 mov	 DWORD PTR [ebx], eax

; 141  :     _Right   = _STD move(_Tmp);

  0014b	89 0a		 mov	 DWORD PTR [edx], ecx
$LN63@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  0014d	8b 45 fc	 mov	 eax, DWORD PTR __Step$1$[ebp]
  00150	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00152	ff 34 87	 push	 DWORD PTR [edi+eax*4]
  00155	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0015a	84 c0		 test	 al, al
  0015c	74 0d		 je	 SHORT $LN113@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0015e	8b 55 fc	 mov	 edx, DWORD PTR __Step$1$[ebp]
  00161	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00163	8b 04 97	 mov	 eax, DWORD PTR [edi+edx*4]
  00166	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  00168	89 0c 97	 mov	 DWORD PTR [edi+edx*4], ecx
$LN113@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  0016b	ff 36		 push	 DWORD PTR [esi]
  0016d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0016f	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00174	84 c0		 test	 al, al
  00176	74 66		 je	 SHORT $LN103@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00178	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 140  :     _Left    = _STD move(_Right);

  0017a	8b 06		 mov	 eax, DWORD PTR [esi]
  0017c	89 03		 mov	 DWORD PTR [ebx], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  0017e	8b 5d fc	 mov	 ebx, DWORD PTR __Step$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  00181	89 0e		 mov	 DWORD PTR [esi], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00183	ff 34 9f	 push	 DWORD PTR [edi+ebx*4]
  00186	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0018b	84 c0		 test	 al, al
  0018d	74 4f		 je	 SHORT $LN103@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0018f	8b 04 9f	 mov	 eax, DWORD PTR [edi+ebx*4]
  00192	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00194	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  00196	89 0c 9f	 mov	 DWORD PTR [edi+ebx*4], ecx
  00199	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8265 : }

  0019a	5e		 pop	 esi
  0019b	5b		 pop	 ebx
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c3		 ret	 0
$LN2@Guess_medi:

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  001a0	8b 75 0c	 mov	 esi, DWORD PTR __Mid$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  001a3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001a5	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8237 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  001aa	84 c0		 test	 al, al
  001ac	74 08		 je	 SHORT $LN114@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  001ae	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 140  :     _Left    = _STD move(_Right);

  001b0	8b 07		 mov	 eax, DWORD PTR [edi]
  001b2	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  001b4	89 0f		 mov	 DWORD PTR [edi], ecx
$LN114@Guess_medi:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  001b6	ff 36		 push	 DWORD PTR [esi]
  001b8	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001ba	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8241 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  001bf	84 c0		 test	 al, al
  001c1	74 1b		 je	 SHORT $LN103@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  001c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 140  :     _Left    = _STD move(_Right);

  001c5	8b 06		 mov	 eax, DWORD PTR [esi]
  001c7	89 03		 mov	 DWORD PTR [ebx], eax

; 141  :     _Right   = _STD move(_Tmp);

  001c9	89 0e		 mov	 DWORD PTR [esi], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  001cb	ff 37		 push	 DWORD PTR [edi]
  001cd	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8244 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  001d2	84 c0		 test	 al, al
  001d4	74 08		 je	 SHORT $LN103@Guess_medi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  001d6	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 140  :     _Left    = _STD move(_Right);

  001d8	8b 07		 mov	 eax, DWORD PTR [edi]
  001da	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  001dc	89 0f		 mov	 DWORD PTR [edi], ecx
$LN103@Guess_medi:
  001de	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8265 : }

  001df	5e		 pop	 esi
  001e0	5b		 pop	 ebx
  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c3		 ret	 0
??$_Guess_median_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@00UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ENDP ; std::_Guess_median_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAVCEffectInstance@@PAV1@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@HH$$QAPAV1@UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z
_TEXT	SEGMENT
tv389 = -8						; size = 4
__Max_sequence_non_leaf$1$ = -4				; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$1$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAPAVCEffectInstance@@PAV1@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@HH$$QAPAV1@UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z PROC ; std::_Pop_heap_hole_by_index<CEffectInstance * *,CEffectInstance *,CEffectManager_LessEffectInstancePtrRenderOrder>, COMDAT

; 58   :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 59   :     // percolate _Hole to _Bottom, then push _Val
; 60   :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 61   : 
; 62   :     using _Diff      = _Iter_diff_t<_RanIt>;
; 63   :     const _Diff _Top = _Hole;
; 64   :     _Diff _Idx       = _Hole;
; 65   : 
; 66   :     // Check whether _Idx can have a child before calculating that child's index, since
; 67   :     // calculating the child's index can trigger integer overflows
; 68   :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR __Hole$[ebp]
  0000e	8b d6		 mov	 edx, esi
  00010	57		 push	 edi
  00011	8b 7d 10	 mov	 edi, DWORD PTR __Bottom$[ebp]
  00014	8b ce		 mov	 ecx, esi
  00016	4f		 dec	 edi
  00017	89 55 0c	 mov	 DWORD PTR __Top$1$[ebp], edx
  0001a	8b c7		 mov	 eax, edi
  0001c	89 7d f8	 mov	 DWORD PTR tv389[ebp], edi
  0001f	d1 f8		 sar	 eax, 1
  00021	89 45 fc	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
  00024	3b f0		 cmp	 esi, eax
  00026	7d 36		 jge	 SHORT $LN3@Pop_heap_h
  00028	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@Pop_heap_h:

; 70   :         _Idx = 2 * _Idx + 2;

  00030	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00033	ff 74 bb 04	 push	 DWORD PTR [ebx+edi*4+4]
  00037	8b 4c bb 08	 mov	 ecx, DWORD PTR [ebx+edi*4+8]
  0003b	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00040	0f b6 c8	 movzx	 ecx, al
  00043	83 f1 01	 xor	 ecx, 1
  00046	41		 inc	 ecx
  00047	03 cf		 add	 ecx, edi
  00049	8b 04 8b	 mov	 eax, DWORD PTR [ebx+ecx*4]
  0004c	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 75   :         _Hole             = _Idx;

  0004f	8b f1		 mov	 esi, ecx
  00051	8b 45 fc	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  00054	3b c8		 cmp	 ecx, eax
  00056	7c d8		 jl	 SHORT $LL2@Pop_heap_h
  00058	8b 55 0c	 mov	 edx, DWORD PTR __Top$1$[ebp]
  0005b	8b 7d f8	 mov	 edi, DWORD PTR tv389[ebp]
$LN3@Pop_heap_h:

; 76   :     }
; 77   : 
; 78   :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  0005e	3b c8		 cmp	 ecx, eax
  00060	75 10		 jne	 SHORT $LN5@Pop_heap_h
  00062	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00065	a8 01		 test	 al, 1
  00067	75 09		 jne	 SHORT $LN5@Pop_heap_h

; 79   :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  00069	8b 44 83 fc	 mov	 eax, DWORD PTR [ebx+eax*4-4]
  0006d	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 80   :         _Hole             = _Bottom - 1;

  00070	8b f7		 mov	 esi, edi
$LN5@Pop_heap_h:

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00072	3b d6		 cmp	 edx, esi
  00074	7d 23		 jge	 SHORT $LN24@Pop_heap_h
$LL12@Pop_heap_h:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00076	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 26   :     for (_Diff _Idx                                                          = (_Hole - 1) >> 1; // shift for codegen

  00079	8d 7e ff	 lea	 edi, DWORD PTR [esi-1]
  0007c	d1 ff		 sar	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  0007e	ff 30		 push	 DWORD PTR [eax]
  00080	8b 0c bb	 mov	 ecx, DWORD PTR [ebx+edi*4]
  00083	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00088	84 c0		 test	 al, al
  0008a	74 0d		 je	 SHORT $LN24@Pop_heap_h

; 28   :         // move _Hole up to parent
; 29   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0008c	8b 04 bb	 mov	 eax, DWORD PTR [ebx+edi*4]
  0008f	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 30   :         _Hole             = _Idx;

  00092	8b f7		 mov	 esi, edi
  00094	39 7d 0c	 cmp	 DWORD PTR __Top$1$[ebp], edi
  00097	7c dd		 jl	 SHORT $LL12@Pop_heap_h
$LN24@Pop_heap_h:

; 81   :     }
; 82   : 
; 83   :     _STD _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 84   : }

  00099	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0009c	5f		 pop	 edi
  0009d	8b 00		 mov	 eax, DWORD PTR [eax]
  0009f	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAPAVCEffectInstance@@PAV1@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@HH$$QAPAV1@UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ENDP ; std::_Pop_heap_hole_by_index<CEffectInstance * *,CEffectInstance *,CEffectManager_LessEffectInstancePtrRenderOrder>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YA?AU?$pair@PAPAVCEffectInstance@@PAPAV1@@0@PAPAVCEffectInstance@@0UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z
_TEXT	SEGMENT
__Gfirst$1$ = -12					; size = 4
__Glast$1$ = -8						; size = 4
__Plast$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YA?AU?$pair@PAPAVCEffectInstance@@PAPAV1@@0@PAPAVCEffectInstance@@0UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z PROC ; std::_Partition_by_median_guess_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>, COMDAT

; 8268 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 8269 :     // partition [_First, _Last)
; 8270 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000f	8b c7		 mov	 eax, edi

; 8271 :     _STD _Guess_median_unchecked(_First, _Mid, _STD _Prev_iter(_Last), _Pred);

  00011	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00014	2b c1		 sub	 eax, ecx
  00016	c1 f8 03	 sar	 eax, 3
  00019	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  0001c	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  0001f	50		 push	 eax
  00020	56		 push	 esi
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@00UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ; std::_Guess_median_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 8272 :     _RanIt _Pfirst = _Mid;
; 8273 :     _RanIt _Plast  = _STD _Next_iter(_Pfirst);

  0002a	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0002d	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx

; 8276 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  00030	39 75 0c	 cmp	 DWORD PTR __First$[ebp], esi
  00033	73 31		 jae	 SHORT $LN76@Partition_
  00035	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@Partition_:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00040	ff 36		 push	 DWORD PTR [esi]
  00042	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00045	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8276 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  0004a	84 c0		 test	 al, al
  0004c	75 15		 jne	 SHORT $LN103@Partition_
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  0004e	ff 76 fc	 push	 DWORD PTR [esi-4]
  00051	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00053	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8276 :            && !_Pred(*_Pfirst, *_STD _Prev_iter(_Pfirst))) {

  00058	84 c0		 test	 al, al
  0005a	75 07		 jne	 SHORT $LN103@Partition_

; 8277 :         --_Pfirst;

  0005c	83 c6 fc	 add	 esi, -4			; fffffffcH
  0005f	3b de		 cmp	 ebx, esi
  00061	72 dd		 jb	 SHORT $LL2@Partition_
$LN103@Partition_:
  00063	8b 5d fc	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
$LN76@Partition_:

; 8280 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00066	3b df		 cmp	 ebx, edi
  00068	73 2a		 jae	 SHORT $LN5@Partition_
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Partition_:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00070	ff 36		 push	 DWORD PTR [esi]
  00072	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00074	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8280 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00079	84 c0		 test	 al, al
  0007b	75 14		 jne	 SHORT $LN104@Partition_
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  0007d	ff 33		 push	 DWORD PTR [ebx]
  0007f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00081	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8280 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00086	84 c0		 test	 al, al
  00088	75 07		 jne	 SHORT $LN104@Partition_

; 8281 :         ++_Plast;

  0008a	83 c3 04	 add	 ebx, 4
  0008d	3b df		 cmp	 ebx, edi
  0008f	72 df		 jb	 SHORT $LL4@Partition_
$LN104@Partition_:
  00091	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
$LN5@Partition_:

; 8282 :     }
; 8283 : 
; 8284 :     _RanIt _Gfirst = _Plast;

  00094	8b fb		 mov	 edi, ebx

; 8285 :     _RanIt _Glast  = _Pfirst;

  00096	8b d6		 mov	 edx, esi
$LN131@Partition_:

; 8288 :         for (; _Gfirst < _Last; ++_Gfirst) {

  00098	89 55 f8	 mov	 DWORD PTR __Glast$1$[ebp], edx
$LN130@Partition_:
  0009b	89 7d f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
  0009e	66 90		 npad	 2
$LL8@Partition_:
  000a0	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  000a3	73 3a		 jae	 SHORT $LN80@Partition_
$LL11@Partition_:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  000a5	ff 37		 push	 DWORD PTR [edi]
  000a7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000a9	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8289 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  000ae	84 c0		 test	 al, al
  000b0	75 1c		 jne	 SHORT $LN9@Partition_
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  000b2	ff 36		 push	 DWORD PTR [esi]
  000b4	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000b6	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8291 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  000bb	84 c0		 test	 al, al
  000bd	75 17		 jne	 SHORT $LN105@Partition_

; 8292 :                 break;
; 8293 :             } else if (_Plast != _Gfirst) {

  000bf	3b df		 cmp	 ebx, edi
  000c1	74 08		 je	 SHORT $LN19@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  000c3	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 140  :     _Left    = _STD move(_Right);

  000c5	8b 07		 mov	 eax, DWORD PTR [edi]
  000c7	89 03		 mov	 DWORD PTR [ebx], eax

; 141  :     _Right   = _STD move(_Tmp);

  000c9	89 0f		 mov	 DWORD PTR [edi], ecx
$LN19@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8288 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000cb	83 c3 04	 add	 ebx, 4
$LN9@Partition_:
  000ce	83 c7 04	 add	 edi, 4
  000d1	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  000d4	72 cf		 jb	 SHORT $LL11@Partition_
$LN105@Partition_:
  000d6	8b 55 f8	 mov	 edx, DWORD PTR __Glast$1$[ebp]
  000d9	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  000dc	89 7d f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edi
$LN80@Partition_:

; 8301 :         for (; _First < _Glast; --_Glast) {

  000df	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  000e2	3b d0		 cmp	 edx, eax
  000e4	76 53		 jbe	 SHORT $LN129@Partition_
  000e6	8b 5d f8	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  000e9	8d 7b fc	 lea	 edi, DWORD PTR [ebx-4]
  000ec	0f 1f 40 00	 npad	 4
$LL14@Partition_:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  000f0	ff 36		 push	 DWORD PTR [esi]
  000f2	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000f4	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8303 :             if (_DEBUG_LT_PRED(_Pred, *_Glast_prev, *_Pfirst)) {

  000f9	84 c0		 test	 al, al
  000fb	75 1c		 jne	 SHORT $LN12@Partition_
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  000fd	ff 37		 push	 DWORD PTR [edi]
  000ff	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00101	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8305 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  00106	84 c0		 test	 al, al
  00108	75 1e		 jne	 SHORT $LN107@Partition_

; 8306 :                 break;
; 8307 :             } else if (--_Pfirst != _Glast_prev) {

  0010a	83 ee 04	 sub	 esi, 4
  0010d	3b f7		 cmp	 esi, edi
  0010f	74 08		 je	 SHORT $LN12@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00111	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 140  :     _Left    = _STD move(_Right);

  00113	8b 07		 mov	 eax, DWORD PTR [edi]
  00115	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  00117	89 0f		 mov	 DWORD PTR [edi], ecx
$LN12@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8301 :         for (; _First < _Glast; --_Glast) {

  00119	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0011c	83 eb 04	 sub	 ebx, 4
  0011f	83 ef 04	 sub	 edi, 4
  00122	3b c3		 cmp	 eax, ebx
  00124	72 ca		 jb	 SHORT $LL14@Partition_

; 8305 :             } else if (_Pred(*_Pfirst, *_Glast_prev)) {

  00126	eb 03		 jmp	 SHORT $LN106@Partition_
$LN107@Partition_:
  00128	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
$LN106@Partition_:
  0012b	8b 7d f4	 mov	 edi, DWORD PTR __Gfirst$1$[ebp]
  0012e	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  00131	8b 55 f8	 mov	 edx, DWORD PTR __Glast$1$[ebp]

; 8308 :                 swap(*_Pfirst, *_Glast_prev); // intentional ADL
; 8309 :             }
; 8310 :         }
; 8311 : 
; 8312 :         if (_Glast == _First && _Gfirst == _Last) {

  00134	3b d0		 cmp	 edx, eax
  00136	8b 5d fc	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
$LN129@Partition_:
  00139	75 2a		 jne	 SHORT $LN27@Partition_
  0013b	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  0013e	74 62		 je	 SHORT $LN82@Partition_

; 8314 :         }
; 8315 : 
; 8316 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 8317 :             if (_Plast != _Gfirst) {

  00140	3b df		 cmp	 ebx, edi
  00142	74 08		 je	 SHORT $LN45@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00144	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 140  :     _Left    = _STD move(_Right);

  00146	8b 03		 mov	 eax, DWORD PTR [ebx]
  00148	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  0014a	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN45@Partition_:

; 139  :     _Ty _Tmp = _STD move(_Left);

  0014c	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8321 :             ++_Plast;

  0014e	83 c3 04	 add	 ebx, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00151	8b 07		 mov	 eax, DWORD PTR [edi]
  00153	89 06		 mov	 DWORD PTR [esi], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8323 :             ++_Pfirst;

  00155	83 c6 04	 add	 esi, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  00158	89 0f		 mov	 DWORD PTR [edi], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8324 :             ++_Gfirst;

  0015a	83 c7 04	 add	 edi, 4
  0015d	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  00160	e9 36 ff ff ff	 jmp	 $LN130@Partition_
$LN27@Partition_:

; 8325 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00165	83 c2 fc	 add	 edx, -4			; fffffffcH
  00168	89 55 f8	 mov	 DWORD PTR __Glast$1$[ebp], edx
  0016b	3b 7d 10	 cmp	 edi, DWORD PTR __Last$[ebp]
  0016e	75 22		 jne	 SHORT $LN30@Partition_

; 8326 :             if (--_Glast != --_Pfirst) {

  00170	83 ee 04	 sub	 esi, 4
  00173	3b d6		 cmp	 edx, esi
  00175	74 08		 je	 SHORT $LN99@Partition_
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00177	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 140  :     _Left    = _STD move(_Right);

  00179	8b 06		 mov	 eax, DWORD PTR [esi]
  0017b	89 02		 mov	 DWORD PTR [edx], eax

; 141  :     _Right   = _STD move(_Tmp);

  0017d	89 0e		 mov	 DWORD PTR [esi], ecx
$LN99@Partition_:

; 139  :     _Ty _Tmp = _STD move(_Left);

  0017f	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8330 :             swap(*_Pfirst, *--_Plast); // intentional ADL

  00181	83 eb 04	 sub	 ebx, 4
  00184	89 5d fc	 mov	 DWORD PTR __Plast$1$[ebp], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  00187	8b 03		 mov	 eax, DWORD PTR [ebx]
  00189	89 06		 mov	 DWORD PTR [esi], eax

; 141  :     _Right   = _STD move(_Tmp);

  0018b	89 0b		 mov	 DWORD PTR [ebx], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8331 :         } else {

  0018d	e9 0e ff ff ff	 jmp	 $LL8@Partition_
$LN30@Partition_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 139  :     _Ty _Tmp = _STD move(_Left);

  00192	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 140  :     _Left    = _STD move(_Right);

  00194	8b 02		 mov	 eax, DWORD PTR [edx]
  00196	89 07		 mov	 DWORD PTR [edi], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8333 :             ++_Gfirst;

  00198	83 c7 04	 add	 edi, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 141  :     _Right   = _STD move(_Tmp);

  0019b	89 0a		 mov	 DWORD PTR [edx], ecx
  0019d	e9 f6 fe ff ff	 jmp	 $LN131@Partition_
$LN82@Partition_:

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001a2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8313 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  001a5	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001a6	89 30		 mov	 DWORD PTR [eax], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8313 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  001a8	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001a9	89 58 04	 mov	 DWORD PTR [eax+4], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8313 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  001ac	5b		 pop	 ebx

; 8334 :         }
; 8335 :     }
; 8336 : }

  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YA?AU?$pair@PAPAVCEffectInstance@@PAPAV1@@0@PAPAVCEffectInstance@@0UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ENDP ; std::_Partition_by_median_guess_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1618 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1619 :         const auto _Scary = _Get_scary();
; 1620 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN13@Find_lower
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1623 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1624 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1625 :                 _Result._Location._Child = _Tree_child::_Right;
; 1626 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1627 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1628 :                 _Result._Location._Child = _Tree_child::_Left;
; 1629 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1630 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1621 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1622 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower
  00044	5e		 pop	 esi
$LN13@Find_lower:

; 1631 :             }
; 1632 :         }
; 1633 : 
; 1634 :         return _Result;
; 1635 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCEffectInstance@@@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@AAEPAPAVCEffectInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCEffectInstance@@@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@AAEPAPAVCEffectInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Emplace_reallocate<CEffectInstance * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectInstance * *,CEffectInstance * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CEffectInstance * *,CEffectInstance * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@CAXXZ ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCEffectInstance@@@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@AAEPAPAVCEffectInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Emplace_reallocate<CEffectInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCEffectManager_LessEffectInstancePtrRenderOrder@@@Z
_TEXT	SEGMENT
__Mid$1 = -20						; size = 8
tv762 = -16						; size = 4
__Mid$1$ = -12						; size = 4
__Bottom$1$ = -12					; size = 4
__Hole$1$ = -8						; size = 4
__Max_sequence_non_leaf$1$ = -8				; size = 4
__Val$1$ = -4						; size = 4
__Val$1$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$1$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$2 = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCEffectManager_LessEffectInstancePtrRenderOrder@@@Z PROC ; std::_Sort_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>, COMDAT

; 8339 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 8340 :     // order [_First, _Last)
; 8341 :     for (;;) {
; 8342 :         if (_Last - _First <= _ISORT_MAX) { // small

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00010	2b c6		 sub	 eax, esi
  00012	83 e0 fc	 and	 eax, -4			; fffffffcH
  00015	57		 push	 edi
  00016	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0001b	7e 74		 jle	 SHORT $LN67@Sort_unche
  0001d	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  00020	8b 7d 10	 mov	 edi, DWORD PTR __Ideal$[ebp]
$LL4@Sort_unche:

; 8343 :             _STD _Insertion_sort_unchecked(_First, _Last, _Pred);
; 8344 :             return;
; 8345 :         }
; 8346 : 
; 8347 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00023	85 ff		 test	 edi, edi
  00025	0f 8e ab 00 00
	00		 jle	 $LN68@Sort_unche

; 8348 :             _STD _Make_heap_unchecked(_First, _Last, _Pred);
; 8349 :             _STD _Sort_heap_unchecked(_First, _Last, _Pred);
; 8350 :             return;
; 8351 :         }
; 8352 : 
; 8353 :         // divide and conquer by quicksort
; 8354 :         auto _Mid = _STD _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0002b	52		 push	 edx
  0002c	53		 push	 ebx
  0002d	8d 45 ec	 lea	 eax, DWORD PTR __Mid$1[ebp]
  00030	56		 push	 esi
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YA?AU?$pair@PAPAVCEffectInstance@@PAPAV1@@0@PAPAVCEffectInstance@@0UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ; std::_Partition_by_median_guess_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>

; 8355 : 
; 8356 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 8357 : 
; 8358 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00037	8b 55 f0	 mov	 edx, DWORD PTR __Mid$1[ebp+4]
  0003a	8b c7		 mov	 eax, edi
  0003c	c1 f8 02	 sar	 eax, 2
  0003f	8b cb		 mov	 ecx, ebx
  00041	d1 ff		 sar	 edi, 1
  00043	83 c4 10	 add	 esp, 16			; 00000010H
  00046	03 f8		 add	 edi, eax
  00048	2b ca		 sub	 ecx, edx
  0004a	8b 45 ec	 mov	 eax, DWORD PTR __Mid$1[ebp]
  0004d	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00050	2b c6		 sub	 eax, esi
  00052	83 e0 fc	 and	 eax, -4			; fffffffcH
  00055	3b c1		 cmp	 eax, ecx
  00057	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  0005a	50		 push	 eax
  0005b	57		 push	 edi
  0005c	7d 12		 jge	 SHORT $LN7@Sort_unche

; 8359 :             _STD _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  0005e	8b 45 ec	 mov	 eax, DWORD PTR __Mid$1[ebp]
  00061	50		 push	 eax
  00062	56		 push	 esi
  00063	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ; std::_Sort_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>

; 8360 :             _First = _Mid.second;

  00068	8b 75 f0	 mov	 esi, DWORD PTR __Mid$1[ebp+4]
  0006b	89 75 08	 mov	 DWORD PTR __First$[ebp], esi

; 8361 :         } else { // loop on first half

  0006e	eb 0d		 jmp	 SHORT $LN112@Sort_unche
$LN7@Sort_unche:

; 8362 :             _STD _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  00070	53		 push	 ebx
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ; std::_Sort_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>

; 8363 :             _Last = _Mid.first;

  00077	8b 5d ec	 mov	 ebx, DWORD PTR __Mid$1[ebp]
  0007a	89 5d 0c	 mov	 DWORD PTR __Last$[ebp], ebx
$LN112@Sort_unche:

; 8340 :     // order [_First, _Last)
; 8341 :     for (;;) {
; 8342 :         if (_Last - _First <= _ISORT_MAX) { // small

  0007d	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  00080	8b c3		 mov	 eax, ebx
  00082	2b c6		 sub	 eax, esi
  00084	83 c4 10	 add	 esp, 16			; 00000010H
  00087	83 e0 fc	 and	 eax, -4			; fffffffcH
  0008a	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0008f	7f 92		 jg	 SHORT $LL4@Sort_unche
$LN67@Sort_unche:

; 8213 :     if (_First != _Last) {

  00091	3b f3		 cmp	 esi, ebx
  00093	0f 84 9e 01 00
	00		 je	 $LN12@Sort_unche

; 8214 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  00099	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  0009c	89 5d f4	 mov	 DWORD PTR __Mid$1$[ebp], ebx
  0009f	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  000a2	0f 84 8f 01 00
	00		 je	 $LN12@Sort_unche
$LL13@Sort_unche:

; 8216 :             _Iter_value_t<_BidIt> _Val(_STD move(*_Mid));

  000a8	8b 3b		 mov	 edi, DWORD PTR [ebx]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  000aa	8b cf		 mov	 ecx, edi
  000ac	ff 36		 push	 DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8215 :             _BidIt _Hole = _Mid;

  000ae	89 5d f8	 mov	 DWORD PTR __Hole$1$[ebp], ebx

; 8216 :             _Iter_value_t<_BidIt> _Val(_STD move(*_Mid));

  000b1	89 7d fc	 mov	 DWORD PTR __Val$1$[ebp], edi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  000b4	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8218 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  000b9	84 c0		 test	 al, al
  000bb	0f 84 20 01 00
	00		 je	 $LN18@Sort_unche
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  000c1	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000c4	50		 push	 eax
  000c5	53		 push	 ebx
  000c6	56		 push	 esi
  000c7	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAPAVCEffectInstance@@PAPAV1@@std@@YAPAPAVCEffectInstance@@PAPAV1@00@Z ; std::_Copy_backward_memmove<CEffectInstance * *,CEffectInstance * *>
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8220 :                 *_First = _STD move(_Val);

  000cf	89 3e		 mov	 DWORD PTR [esi], edi

; 8221 :             } else { // look for insertion point after first

  000d1	e9 52 01 00 00	 jmp	 $LN11@Sort_unche
$LN68@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 124  :     _Diff _Bottom = _Last - _First;

  000d6	2b de		 sub	 ebx, esi
  000d8	8b c3		 mov	 eax, ebx
  000da	89 5d 0c	 mov	 DWORD PTR __Last$[ebp], ebx
  000dd	c1 f8 02	 sar	 eax, 2

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  000e0	8b c8		 mov	 ecx, eax
  000e2	89 45 f4	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  000e5	d1 f9		 sar	 ecx, 1
  000e7	85 c9		 test	 ecx, ecx
  000e9	0f 8e ae 00 00
	00		 jle	 $LN31@Sort_unche
  000ef	48		 dec	 eax
  000f0	8b f8		 mov	 edi, eax
  000f2	89 45 f0	 mov	 DWORD PTR tv762[ebp], eax
  000f5	d1 ff		 sar	 edi, 1
  000f7	89 7d f8	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], edi
  000fa	66 0f 1f 44 00
	00		 npad	 6
$LL32@Sort_unche:

; 126  :         // reheap top half, bottom to top
; 127  :         --_Hole;
; 128  :         _Iter_value_t<_RanIt> _Val(_STD move(*(_First + _Hole)));

  00100	8b 44 8e fc	 mov	 eax, DWORD PTR [esi+ecx*4-4]
  00104	49		 dec	 ecx
  00105	89 4d 08	 mov	 DWORD PTR __Hole$1$[ebp], ecx

; 129  :         _STD _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00108	8b d9		 mov	 ebx, ecx
  0010a	89 45 fc	 mov	 DWORD PTR __Val$1$[ebp], eax

; 64   :     _Diff _Idx       = _Hole;

  0010d	8b d1		 mov	 edx, ecx

; 65   : 
; 66   :     // Check whether _Idx can have a child before calculating that child's index, since
; 67   :     // calculating the child's index can trigger integer overflows
; 68   :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 69   :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0010f	3b cf		 cmp	 ecx, edi
  00111	7d 2d		 jge	 SHORT $LN36@Sort_unche
$LL35@Sort_unche:

; 70   :         _Idx = 2 * _Idx + 2;

  00113	8d 3c 12	 lea	 edi, DWORD PTR [edx+edx]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00116	ff 74 be 04	 push	 DWORD PTR [esi+edi*4+4]
  0011a	8b 4c be 08	 mov	 ecx, DWORD PTR [esi+edi*4+8]
  0011e	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 74   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00123	0f b6 c0	 movzx	 eax, al
  00126	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  00129	8b 7d f8	 mov	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  0012c	83 f0 01	 xor	 eax, 1
  0012f	03 d0		 add	 edx, eax
  00131	8b 04 96	 mov	 eax, DWORD PTR [esi+edx*4]
  00134	89 04 9e	 mov	 DWORD PTR [esi+ebx*4], eax

; 75   :         _Hole             = _Idx;

  00137	8b da		 mov	 ebx, edx
  00139	3b d7		 cmp	 edx, edi
  0013b	7c d6		 jl	 SHORT $LL35@Sort_unche
  0013d	8b 4d 08	 mov	 ecx, DWORD PTR __Hole$1$[ebp]
$LN36@Sort_unche:

; 76   :     }
; 77   : 
; 78   :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00140	3b df		 cmp	 ebx, edi
  00142	75 11		 jne	 SHORT $LN38@Sort_unche
  00144	8b 45 f4	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  00147	a8 01		 test	 al, 1
  00149	75 0a		 jne	 SHORT $LN38@Sort_unche

; 79   :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0014b	8b 44 86 fc	 mov	 eax, DWORD PTR [esi+eax*4-4]
  0014f	89 04 9e	 mov	 DWORD PTR [esi+ebx*4], eax

; 80   :         _Hole             = _Bottom - 1;

  00152	8b 5d f0	 mov	 ebx, DWORD PTR tv762[ebp]
$LN38@Sort_unche:

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00155	3b cb		 cmp	 ecx, ebx
  00157	7d 2d		 jge	 SHORT $LN44@Sort_unche
  00159	0f 1f 80 00 00
	00 00		 npad	 7
$LL45@Sort_unche:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00160	ff 75 fc	 push	 DWORD PTR __Val$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 26   :     for (_Diff _Idx                                                          = (_Hole - 1) >> 1; // shift for codegen

  00163	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
  00166	d1 ff		 sar	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00168	8b 0c be	 mov	 ecx, DWORD PTR [esi+edi*4]
  0016b	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 27   :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00170	8b 4d 08	 mov	 ecx, DWORD PTR __Hole$1$[ebp]
  00173	84 c0		 test	 al, al
  00175	74 0c		 je	 SHORT $LN92@Sort_unche

; 28   :         // move _Hole up to parent
; 29   :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00177	8b 04 be	 mov	 eax, DWORD PTR [esi+edi*4]
  0017a	89 04 9e	 mov	 DWORD PTR [esi+ebx*4], eax

; 30   :         _Hole             = _Idx;

  0017d	8b df		 mov	 ebx, edi
  0017f	3b cf		 cmp	 ecx, edi
  00181	7c dd		 jl	 SHORT $LL45@Sort_unche
$LN92@Sort_unche:
  00183	8b 7d f8	 mov	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN44@Sort_unche:

; 31   :     }
; 32   : 
; 33   :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00186	8b 45 fc	 mov	 eax, DWORD PTR __Val$1$[ebp]
  00189	89 04 9e	 mov	 DWORD PTR [esi+ebx*4], eax

; 125  :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  0018c	85 c9		 test	 ecx, ecx
  0018e	0f 8f 6c ff ff
	ff		 jg	 $LL32@Sort_unche
  00194	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00197	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  0019a	8b 45 f4	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
$LN31@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  0019d	83 f8 02	 cmp	 eax, 2
  001a0	0f 8c 91 00 00
	00		 jl	 $LN12@Sort_unche
$LL52@Sort_unche:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 102  :         _Iter_value_t<_RanIt> _Val(_STD move(*_Last));

  001a6	8b 44 1e fc	 mov	 eax, DWORD PTR [esi+ebx-4]
  001aa	89 45 0c	 mov	 DWORD PTR __Val$2[ebp], eax

; 91   :     *_Dest      = _STD move(*_First);

  001ad	8b 06		 mov	 eax, DWORD PTR [esi]
  001af	89 44 1e fc	 mov	 DWORD PTR [esi+ebx-4], eax

; 93   :     _STD _Pop_heap_hole_by_index(

  001b3	8d 45 0c	 lea	 eax, DWORD PTR __Val$2[ebp]
  001b6	52		 push	 edx
  001b7	50		 push	 eax
  001b8	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  001bb	c1 f8 02	 sar	 eax, 2
  001be	50		 push	 eax
  001bf	6a 00		 push	 0
  001c1	56		 push	 esi
  001c2	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAPAVCEffectInstance@@PAV1@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@HH$$QAPAV1@UCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ; std::_Pop_heap_hole_by_index<CEffectInstance * *,CEffectInstance *,CEffectManager_LessEffectInstancePtrRenderOrder>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  001c7	8b 55 14	 mov	 edx, DWORD PTR __Pred$[ebp]
  001ca	83 c3 fc	 add	 ebx, -4			; fffffffcH
  001cd	8b c3		 mov	 eax, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_heap_algorithms.hpp

; 93   :     _STD _Pop_heap_hole_by_index(

  001cf	83 c4 14	 add	 esp, 20			; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7118 :     for (; _Last - _First >= 2; --_Last) {

  001d2	83 e0 fc	 and	 eax, -4			; fffffffcH
  001d5	83 f8 08	 cmp	 eax, 8
  001d8	7d cc		 jge	 SHORT $LL52@Sort_unche

; 8364 :         }
; 8365 :     }
; 8366 : }

  001da	5f		 pop	 edi
  001db	5e		 pop	 esi
  001dc	5b		 pop	 ebx
  001dd	8b e5		 mov	 esp, ebp
  001df	5d		 pop	 ebp
  001e0	c3		 ret	 0
$LN18@Sort_unche:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  001e1	ff 73 fc	 push	 DWORD PTR [ebx-4]
  001e4	8b 4d fc	 mov	 ecx, DWORD PTR __Val$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001e7	8d 7b fc	 lea	 edi, DWORD PTR [ebx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  001ea	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  001ef	84 c0		 test	 al, al
  001f1	74 2d		 je	 SHORT $LN15@Sort_unche
  001f3	8b 75 fc	 mov	 esi, DWORD PTR __Val$1$[ebp]
  001f6	8b 5d f8	 mov	 ebx, DWORD PTR __Hole$1$[ebp]
  001f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL16@Sort_unche:

; 8223 :                     *_Hole = _STD move(*_Prev); // move hole down

  00200	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00202	8b ce		 mov	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8223 :                     *_Hole = _STD move(*_Prev); // move hole down

  00204	89 03		 mov	 DWORD PTR [ebx], eax
  00206	8b df		 mov	 ebx, edi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  00208	ff 77 fc	 push	 DWORD PTR [edi-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  0020b	83 ef 04	 sub	 edi, 4
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 74   : 		return pkLeft->LessRenderOrder(pkRight);

  0020e	e8 00 00 00 00	 call	 ?LessRenderOrder@CEffectInstance@@QAE_NPAV1@@Z ; CEffectInstance::LessRenderOrder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8222 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00213	84 c0		 test	 al, al
  00215	75 e9		 jne	 SHORT $LL16@Sort_unche
  00217	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0021a	89 5d f8	 mov	 DWORD PTR __Hole$1$[ebp], ebx
  0021d	8b 5d f4	 mov	 ebx, DWORD PTR __Mid$1$[ebp]
$LN15@Sort_unche:

; 8224 :                 }
; 8225 : 
; 8226 :                 *_Hole = _STD move(_Val); // insert element in hole

  00220	8b 4d f8	 mov	 ecx, DWORD PTR __Hole$1$[ebp]
  00223	8b 45 fc	 mov	 eax, DWORD PTR __Val$1$[ebp]
  00226	89 01		 mov	 DWORD PTR [ecx], eax
$LN11@Sort_unche:

; 8214 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  00228	83 c3 04	 add	 ebx, 4
  0022b	89 5d f4	 mov	 DWORD PTR __Mid$1$[ebp], ebx
  0022e	3b 5d 0c	 cmp	 ebx, DWORD PTR __Last$[ebp]
  00231	0f 85 71 fe ff
	ff		 jne	 $LL13@Sort_unche
$LN12@Sort_unche:
  00237	5f		 pop	 edi

; 8364 :         }
; 8365 :     }
; 8366 : }

  00238	5e		 pop	 esi
  00239	5b		 pop	 ebx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c3		 ret	 0
??$_Sort_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ENDP ; std::_Sort_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 757  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN39@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN39@Erase_tree:
  00035	5e		 pop	 esi

; 760  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 761  :         }
; 762  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z
_TEXT	SEGMENT
__Loc$2 = -36						; size = 12
$T3 = -24						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::insert<0,0>, COMDAT
; _this$ = ecx

; 1235 :     pair<iterator, bool> insert(value_type&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 0b		 jne	 SHORT $LN4@insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004e	72 04		 jb	 SHORT $LN4@insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00050	32 d2		 xor	 dl, dl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1009 :                 return {_Loc._Bound, false};

  00052	eb 51		 jmp	 SHORT $LN90@insert
$LN4@insert:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0005b	74 64		 je	 SHORT $LN109@insert

; 1013 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 136  :         return ::operator new(_Bytes);

  00062	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0007c	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0007f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00082	8b cf		 mov	 ecx, edi
  00084	50		 push	 eax
  00085	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp+4]

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00088	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008b	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp]

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0008e	89 30		 mov	 DWORD PTR [eax], esi

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00090	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00093	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  00096	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Insert_node
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000a1	8b c8		 mov	 ecx, eax
  000a3	b2 01		 mov	 dl, 1
$LN90@insert:
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx
  000aa	88 50 04	 mov	 BYTE PTR [eax+4], dl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1238 :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN109@insert:

; 1639 :             _Throw_tree_length_error();

  000c1	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN107@insert:
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::insert<0,0>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 49   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN21@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 62   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN10@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL9@operator
$LN10@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 62   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??__Fs_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@YAXXZ
text$yd	SEGMENT
??__Fs_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@YAXXZ PROC ; `CEffectManager::Render'::`9'::`dynamic atexit destructor for 's_kVct_pkEftInstSort'', COMDAT

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
  00006	85 d2		 test	 edx, edx
  00008	74 51		 je	 SHORT $LN7@dynamic

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00010	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00012	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00017	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001d	72 14		 jb	 SHORT $LN26@dynamic

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00022	83 c1 23	 add	 ecx, 35			; 00000023H
  00025	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00027	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002d	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN26@dynamic:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00033	51		 push	 ecx
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0003d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A, 0

; 2081 :             _Mylast  = nullptr;

  00047	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4, 0

; 2082 :             _Myend   = nullptr;

  00051	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+8, 0
$LN7@dynamic:
  0005b	c3		 ret	 0
??__Fs_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@YAXXZ ENDP ; `CEffectManager::Render'::`9'::`dynamic atexit destructor for 's_kVct_pkEftInstSort''
text$yd	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 49   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN21@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 62   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN10@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL9@operator
$LN10@operator:

; 54   :             }
; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())
; 57   :         } else {
; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 59   :         }
; 60   : 
; 61   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 62   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEffectManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEffectManager@@UAEPAXI@Z PROC			; CEffectManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEffectManager@@UAE@XZ ; CEffectManager::~CEffectManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCEffectManager@@UAEPAXI@Z ENDP			; CEffectManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >::~map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >
??1?$map@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >::~map<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1039 = -16						; size = 4
tv1073 = -12						; size = 4
tv1093 = -12						; size = 4
$T1 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Extract, COMDAT
; _this$ = ecx

; 517  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 518  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 519  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00017	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 520  : 
; 521  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 522  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 523  :         _Nodeptr _Pnode = _Erasednode;
; 524  : 
; 525  :         if (_Pnode->_Left->_Isnil) {

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 18		 jne	 SHORT $LN94@Extract

; 526  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 527  :         } else if (_Pnode->_Right->_Isnil) {

  0002a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002e	74 04		 je	 SHORT $LN7@Extract

; 528  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00030	8b f8		 mov	 edi, eax

; 529  :         } else { // two subtrees, must lift successor node to replace erased

  00032	eb 0e		 jmp	 SHORT $LN94@Extract
$LN7@Extract:

; 530  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00034	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 531  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00037	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  0003a	3b d1		 cmp	 edx, ecx

; 532  :         }
; 533  : 
; 534  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0003c	0f 85 91 00 00
	00		 jne	 $LN9@Extract
$LN94@Extract:

; 535  :             _Fixnodeparent = _Erasednode->_Parent;
; 536  :             if (!_Fixnode->_Isnil) {

  00042	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00046	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00049	75 03		 jne	 SHORT $LN11@Extract

; 537  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Parent == _Erasednode) {

  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00053	75 05		 jne	 SHORT $LN12@Extract

; 541  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00058	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 542  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0005a	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005c	75 04		 jne	 SHORT $LN14@Extract

; 543  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005e	89 3e		 mov	 DWORD PTR [esi], edi

; 544  :             } else {

  00060	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 545  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00062	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 546  :             }
; 547  : 
; 548  :             if (_Myhead->_Left == _Erasednode) {

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	39 08		 cmp	 DWORD PTR [eax], ecx
  00069	75 28		 jne	 SHORT $LN16@Extract

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006b	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006f	74 04		 je	 SHORT $LN42@Extract
  00071	8b d6		 mov	 edx, esi
  00073	eb 1c		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00075	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00077	8b d7		 mov	 edx, edi

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00079	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007d	75 0f		 jne	 SHORT $LN49@Extract
  0007f	90		 npad	 1
$LL48@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL48@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN49@Extract:
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN43@Extract:

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00091	89 10		 mov	 DWORD PTR [eax], edx
$LN16@Extract:

; 550  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 551  :             }
; 552  : 
; 553  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 13		 mov	 edx, DWORD PTR [ebx]
  00095	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  00098	75 34		 jne	 SHORT $LN17@Extract

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0d		 je	 SHORT $LN44@Extract

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a0	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000a3	8b ce		 mov	 ecx, esi
  000a5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000a8	e9 94 00 00 00	 jmp	 $LN58@Extract
$LN44@Extract:

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000ad	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b0	8b cf		 mov	 ecx, edi

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000b2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b6	75 13		 jne	 SHORT $LN54@Extract
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL53@Extract:

; 459  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL53@Extract
$LN54@Extract:

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN17@Extract:

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000d1	eb 6e		 jmp	 SHORT $LN58@Extract
$LN9@Extract:

; 558  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 559  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	89 02		 mov	 DWORD PTR [edx], eax

; 560  : 
; 561  :             if (_Pnode == _Erasednode->_Right) {

  000da	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000dd	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  000e0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000e3	75 04		 jne	 SHORT $LN18@Extract

; 562  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e5	8b f2		 mov	 esi, edx

; 563  :             } else { // successor further down, link in place of erased

  000e7	eb 1f		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 564  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 565  :                 if (!_Fixnode->_Isnil) {

  000e9	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ed	8b 30		 mov	 esi, DWORD PTR [eax]
  000ef	75 03		 jne	 SHORT $LN20@Extract

; 566  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f1	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 567  :                 }
; 568  : 
; 569  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f4	89 3e		 mov	 DWORD PTR [esi], edi

; 570  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 571  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ff	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00102	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00105	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN19@Extract:

; 572  :             }
; 573  : 
; 574  :             if (_Myhead->_Parent == _Erasednode) {

  00108	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0010d	75 05		 jne	 SHORT $LN21@Extract

; 575  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00112	eb 0e		 jmp	 SHORT $LN141@Extract
$LN21@Extract:

; 576  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00114	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00117	39 08		 cmp	 DWORD PTR [eax], ecx
  00119	75 04		 jne	 SHORT $LN23@Extract

; 577  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011b	89 10		 mov	 DWORD PTR [eax], edx

; 578  :             } else {

  0011d	eb 03		 jmp	 SHORT $LN141@Extract
$LN23@Extract:

; 579  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011f	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN141@Extract:

; 580  :             }
; 581  : 
; 582  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012d	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00132	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00135	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00138	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 141  :     _Right   = _STD move(_Tmp);

  0013b	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0013e	88 48 0c	 mov	 BYTE PTR [eax+12], cl
$LN58@Extract:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 586  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00141	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00145	0f 85 ba 01 00
	00		 jne	 $LN25@Extract

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0014b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014d	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00150	0f 84 a8 01 00
	00		 je	 $LN3@Extract
  00156	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  0015a	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  0015d	0f 85 9b 01 00
	00		 jne	 $LN3@Extract
$LL4@Extract:

; 588  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00163	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00165	3b f9		 cmp	 edi, ecx
  00167	0f 85 be 00 00
	00		 jne	 $LN26@Extract

; 589  :                     _Pnode = _Fixnodeparent->_Right;

  0016d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 590  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  00170	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00174	75 54		 jne	 SHORT $LN95@Extract

; 591  :                         _Pnode->_Color         = _Black;

  00176	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  0017a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 592  :                         _Fixnodeparent->_Color = _Red;

  0017d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  00186	8b 01		 mov	 eax, DWORD PTR [ecx]
  00188	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0018c	75 03		 jne	 SHORT $LN61@Extract

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  0018e	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN61@Extract:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00191	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00194	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00197	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0019a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019c	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0019f	75 0c		 jne	 SHORT $LN62@Extract

; 484  :             _Myhead->_Parent = _Pnode;

  001a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001a4	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001a8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ab	eb 20		 jmp	 SHORT $LN87@Extract
$LN62@Extract:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ad	8b 02		 mov	 eax, DWORD PTR [edx]
  001af	3b 30		 cmp	 esi, DWORD PTR [eax]
  001b1	75 0b		 jne	 SHORT $LN64@Extract

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001b3	89 08		 mov	 DWORD PTR [eax], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001b5	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001b7	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	eb 0f		 jmp	 SHORT $LN87@Extract
$LN64@Extract:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001be	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c1	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001c3	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001c5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c8	eb 03		 jmp	 SHORT $LN87@Extract
$LN95@Extract:
  001ca	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN87@Extract:

; 595  :                     }
; 596  : 
; 597  :                     if (_Pnode->_Isnil) {

  001cd	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d1	0f 85 d0 00 00
	00		 jne	 $LN2@Extract

; 598  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 599  :                     } else if (_Pnode->_Left->_Color == _Black
; 600  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001dd	75 0d		 jne	 SHORT $LN97@Extract
  001df	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e6	0f 84 b4 00 00
	00		 je	 $LN142@Extract
$LN97@Extract:

; 601  :                         _Pnode->_Color = _Red;
; 602  :                         _Fixnode       = _Fixnodeparent;
; 603  :                     } else { // must rearrange right subtree
; 604  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  001f2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f6	75 15		 jne	 SHORT $LN33@Extract

; 605  :                             _Pnode->_Left->_Color = _Black;

  001f8	8b 01		 mov	 eax, DWORD PTR [ecx]

; 606  :                             _Pnode->_Color        = _Red;
; 607  :                             _Rrotate(_Pnode);

  001fa	51		 push	 ecx
  001fb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001ff	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00203	8b cb		 mov	 ecx, ebx
  00205	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Rrotate

; 608  :                             _Pnode = _Fixnodeparent->_Right;

  0020a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 609  :                         }
; 610  : 
; 611  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0020d	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00210	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 612  :                         _Fixnodeparent->_Color = _Black;

  00213	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 613  :                         _Pnode->_Right->_Color = _Black;

  00217	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 614  :                         _Lrotate(_Fixnodeparent);

  0021a	8b cb		 mov	 ecx, ebx
  0021c	56		 push	 esi
  0021d	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00221	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Lrotate

; 615  :                         break; // tree now recolored/rebalanced

  00226	e9 d3 00 00 00	 jmp	 $LN3@Extract
$LN26@Extract:

; 616  :                     }
; 617  :                 } else { // fixup right subtree
; 618  :                     _Pnode = _Fixnodeparent->_Left;
; 619  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0022b	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0022f	75 55		 jne	 SHORT $LN96@Extract

; 620  :                         _Pnode->_Color         = _Black;

  00231	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 621  :                         _Fixnodeparent->_Color = _Red;

  00237	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  0023b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0023e	89 06		 mov	 DWORD PTR [esi], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  00240	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00243	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00247	75 03		 jne	 SHORT $LN69@Extract

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00249	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN69@Extract:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0024c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0024f	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00252	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00255	8b 03		 mov	 eax, DWORD PTR [ebx]
  00257	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0025a	75 0c		 jne	 SHORT $LN70@Extract

; 506  :             _Myhead->_Parent = _Pnode;

  0025c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0025f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00262	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00264	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00266	eb 21		 jmp	 SHORT $LN86@Extract
$LN70@Extract:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00268	8b 02		 mov	 eax, DWORD PTR [edx]
  0026a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0026d	75 0c		 jne	 SHORT $LN72@Extract

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0026f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00272	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00275	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00277	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00279	eb 0e		 jmp	 SHORT $LN86@Extract
$LN72@Extract:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0027b	89 08		 mov	 DWORD PTR [eax], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0027d	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00280	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00282	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00284	eb 03		 jmp	 SHORT $LN86@Extract
$LN96@Extract:
  00286	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN86@Extract:

; 624  :                     }
; 625  : 
; 626  :                     if (_Pnode->_Isnil) {

  00289	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0028d	75 18		 jne	 SHORT $LN2@Extract

; 627  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 628  :                     } else if (_Pnode->_Right->_Color == _Black
; 629  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  0028f	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00292	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00296	75 2c		 jne	 SHORT $LN98@Extract
  00298	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0029e	75 24		 jne	 SHORT $LN98@Extract
$LN142@Extract:

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002a0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002a3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a9	8b 4d f4	 mov	 ecx, DWORD PTR tv1093[ebp]
  002ac	8b f9		 mov	 edi, ecx
  002ae	8b 32		 mov	 esi, DWORD PTR [edx]
  002b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002b3	74 49		 je	 SHORT $LN3@Extract
  002b5	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  002b9	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  002bc	0f 84 a1 fe ff
	ff		 je	 $LL4@Extract
  002c2	eb 3a		 jmp	 SHORT $LN3@Extract
$LN98@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002c4	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ca	75 17		 jne	 SHORT $LN101@Extract

; 634  :                             _Pnode->_Right->_Color = _Black;

  002cc	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 635  :                             _Pnode->_Color         = _Red;
; 636  :                             _Lrotate(_Pnode);

  002d0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002d3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  002d7	51		 push	 ecx
  002d8	8b cb		 mov	 ecx, ebx
  002da	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Lrotate

; 637  :                             _Pnode = _Fixnodeparent->_Left;

  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	eb 03		 jmp	 SHORT $LN39@Extract
$LN101@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e3	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN39@Extract:

; 638  :                         }
; 639  : 
; 640  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002e6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002e9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 641  :                         _Fixnodeparent->_Color = _Black;

  002ec	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 642  :                         _Pnode->_Left->_Color  = _Black;

  002f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 643  :                         _Rrotate(_Fixnodeparent);

  002f2	8b cb		 mov	 ecx, ebx
  002f4	56		 push	 esi
  002f5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002f9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Rrotate
$LN3@Extract:

; 644  :                         break; // tree now recolored/rebalanced
; 645  :                     }
; 646  :                 }
; 647  :             }
; 648  : 
; 649  :             _Fixnode->_Color = _Black; // stopping node is black

  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00301	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 650  :         }
; 651  : 
; 652  :         if (0 < _Mysize) {

  00305	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00308	85 c9		 test	 ecx, ecx
  0030a	74 04		 je	 SHORT $LN40@Extract

; 653  :             --_Mysize;

  0030c	49		 dec	 ecx
  0030d	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 654  :         }
; 655  : 
; 656  :         return _Erasednode;
; 657  :     }

  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 495  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 506  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 509  :         } else {
; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 473  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 484  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 487  :         } else {
; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::clear, COMDAT
; _this$ = ecx

; 1360 :     void clear() noexcept {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1361 :         const auto _Scary = _Get_scary();
; 1362 :         _Scary->_Orphan_ptr(nullptr);
; 1363 :         auto _Head = _Scary->_Myhead;

  00005	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00007	8b 77 04	 mov	 esi, DWORD PTR [edi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 20		 jne	 SHORT $LN43@clear
$LL5@clear:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cb		 mov	 ecx, ebx
  00015	53		 push	 ebx
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL5@clear
$LN43@clear:

; 1365 :         _Head->_Parent  = _Head;

  00030	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1366 :         _Head->_Left    = _Head;

  00033	89 3f		 mov	 DWORD PTR [edi], edi

; 1367 :         _Head->_Right   = _Head;

  00035	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1368 :         _Scary->_Mysize = 0;

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00041	5b		 pop	 ebx

; 1369 :     }

  00042	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectInstance *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> > >::~map<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >
??1?$map@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> > >::~map<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 659  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 660  :         ++_Mysize;
; 661  :         const auto _Head  = _Myhead;
; 662  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 663  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 664  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 665  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 666  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 725  :         return _Newnode;
; 726  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 667  :             _Newnode->_Color = _Black; // the root is black
; 668  :             return _Newnode;
; 669  :         }
; 670  : 
; 671  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 672  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 673  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 674  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 675  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 676  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 677  :             }
; 678  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 679  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 680  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 681  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 682  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL4@Insert_nod:

; 687  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 688  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 689  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN82@Insert_nod

; 690  :                     _Pnode->_Parent->_Color          = _Black;
; 691  :                     _Parent_sibling->_Color          = _Black;
; 692  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 693  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 694  :                 } else { // parent's sibling has red and black children
; 695  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN57@Insert_nod

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 696  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN21@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN21@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN22@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN25@Insert_nod
$LN22@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN24@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN25@Insert_nod
$LN24@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN25@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 492  :         _Wherenode->_Parent = _Pnode;

  000b8	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN57@Insert_nod:

; 697  :                         _Lrotate(_Pnode);
; 698  :                     }
; 699  : 
; 700  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 701  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 702  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN29@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN29@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN30@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN81@Insert_nod
$LN30@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN32@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN81@Insert_nod
$LN32@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 703  :                 }
; 704  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN81@Insert_nod
$LN10@Insert_nod:

; 705  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 706  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN82@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN2@Insert_nod
$LN15@Insert_nod:

; 707  :                     _Pnode->_Parent->_Color          = _Black;
; 708  :                     _Parent_sibling->_Color          = _Black;
; 709  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 710  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 711  :                 } else { // parent's sibling has red and black children
; 712  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN42@Insert_nod

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 713  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN37@Insert_nod

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN37@Insert_nod:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN38@Insert_nod

; 506  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN41@Insert_nod
$LN38@Insert_nod:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN40@Insert_nod

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 509  :         } else {

  00173	eb 02		 jmp	 SHORT $LN41@Insert_nod
$LN40@Insert_nod:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN41@Insert_nod:

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 514  :         _Wherenode->_Parent = _Pnode;

  0017a	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN42@Insert_nod:

; 714  :                         _Rrotate(_Pnode);
; 715  :                     }
; 716  : 
; 717  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 718  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 719  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN45@Insert_nod

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN45@Insert_nod:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN46@Insert_nod

; 484  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN49@Insert_nod
$LN46@Insert_nod:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN48@Insert_nod

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 487  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN49@Insert_nod
$LN48@Insert_nod:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN49@Insert_nod:

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN81@Insert_nod:

; 683  :             }
; 684  :         }
; 685  : 
; 686  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN2@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL4@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 720  :                 }
; 721  :             }
; 722  :         }
; 723  : 
; 724  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 725  :         return _Newnode;
; 726  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1039 = -16						; size = 4
tv1073 = -12						; size = 4
tv1093 = -12						; size = 4
$T1 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Extract, COMDAT
; _this$ = ecx

; 517  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 518  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b d9		 mov	 ebx, ecx
  0000d	89 45 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 519  :         ++_Where; // save successor iterator for return

  00011	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00017	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >,std::_Iterator_base0>::operator++

; 520  : 
; 521  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 522  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 523  :         _Nodeptr _Pnode = _Erasednode;
; 524  : 
; 525  :         if (_Pnode->_Left->_Isnil) {

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00021	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	75 18		 jne	 SHORT $LN94@Extract

; 526  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 527  :         } else if (_Pnode->_Right->_Isnil) {

  0002a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002e	74 04		 je	 SHORT $LN7@Extract

; 528  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00030	8b f8		 mov	 edi, eax

; 529  :         } else { // two subtrees, must lift successor node to replace erased

  00032	eb 0e		 jmp	 SHORT $LN94@Extract
$LN7@Extract:

; 530  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  00034	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 531  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00037	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  0003a	3b d1		 cmp	 edx, ecx

; 532  :         }
; 533  : 
; 534  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0003c	0f 85 91 00 00
	00		 jne	 $LN9@Extract
$LN94@Extract:

; 535  :             _Fixnodeparent = _Erasednode->_Parent;
; 536  :             if (!_Fixnode->_Isnil) {

  00042	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00046	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00049	75 03		 jne	 SHORT $LN11@Extract

; 537  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Parent == _Erasednode) {

  0004e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00050	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00053	75 05		 jne	 SHORT $LN12@Extract

; 541  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00055	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00058	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 542  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0005a	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005c	75 04		 jne	 SHORT $LN14@Extract

; 543  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005e	89 3e		 mov	 DWORD PTR [esi], edi

; 544  :             } else {

  00060	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 545  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00062	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 546  :             }
; 547  : 
; 548  :             if (_Myhead->_Left == _Erasednode) {

  00065	8b 03		 mov	 eax, DWORD PTR [ebx]
  00067	39 08		 cmp	 DWORD PTR [eax], ecx
  00069	75 28		 jne	 SHORT $LN16@Extract

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006b	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006f	74 04		 je	 SHORT $LN42@Extract
  00071	8b d6		 mov	 edx, esi
  00073	eb 1c		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00075	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00077	8b d7		 mov	 edx, edi

; 466  :         while (!_Pnode->_Left->_Isnil) {

  00079	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007d	75 0f		 jne	 SHORT $LN49@Extract
  0007f	90		 npad	 1
$LL48@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 467  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL48@Extract
  0008c	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN49@Extract:
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN43@Extract:

; 549  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00091	89 10		 mov	 DWORD PTR [eax], edx
$LN16@Extract:

; 550  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 551  :             }
; 552  : 
; 553  :             if (_Myhead->_Right == _Erasednode) {

  00093	8b 13		 mov	 edx, DWORD PTR [ebx]
  00095	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx
  00098	75 34		 jne	 SHORT $LN17@Extract

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0d		 je	 SHORT $LN44@Extract

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000a0	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000a3	8b ce		 mov	 ecx, esi
  000a5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  000a8	e9 94 00 00 00	 jmp	 $LN58@Extract
$LN44@Extract:

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000ad	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b0	8b cf		 mov	 ecx, edi

; 458  :         while (!_Pnode->_Right->_Isnil) {

  000b2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b6	75 13		 jne	 SHORT $LN54@Extract
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL53@Extract:

; 459  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL53@Extract
$LN54@Extract:

; 554  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cb	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN17@Extract:

; 555  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 556  :             }
; 557  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  000d1	eb 6e		 jmp	 SHORT $LN58@Extract
$LN9@Extract:

; 558  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 559  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	89 02		 mov	 DWORD PTR [edx], eax

; 560  : 
; 561  :             if (_Pnode == _Erasednode->_Right) {

  000da	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000dd	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  000e0	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000e3	75 04		 jne	 SHORT $LN18@Extract

; 562  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e5	8b f2		 mov	 esi, edx

; 563  :             } else { // successor further down, link in place of erased

  000e7	eb 1f		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 564  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 565  :                 if (!_Fixnode->_Isnil) {

  000e9	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ed	8b 30		 mov	 esi, DWORD PTR [eax]
  000ef	75 03		 jne	 SHORT $LN20@Extract

; 566  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f1	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 567  :                 }
; 568  : 
; 569  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f4	89 3e		 mov	 DWORD PTR [esi], edi

; 570  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f9	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 571  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ff	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00102	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00105	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN19@Extract:

; 572  :             }
; 573  : 
; 574  :             if (_Myhead->_Parent == _Erasednode) {

  00108	8b 03		 mov	 eax, DWORD PTR [ebx]
  0010a	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0010d	75 05		 jne	 SHORT $LN21@Extract

; 575  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00112	eb 0e		 jmp	 SHORT $LN141@Extract
$LN21@Extract:

; 576  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00114	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00117	39 08		 cmp	 DWORD PTR [eax], ecx
  00119	75 04		 jne	 SHORT $LN23@Extract

; 577  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011b	89 10		 mov	 DWORD PTR [eax], edx

; 578  :             } else {

  0011d	eb 03		 jmp	 SHORT $LN141@Extract
$LN23@Extract:

; 579  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011f	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN141@Extract:

; 580  :             }
; 581  : 
; 582  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0012a	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012d	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 140  :     _Left    = _STD move(_Right);

  0012f	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00132	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00135	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00138	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 141  :     _Right   = _STD move(_Tmp);

  0013b	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  0013e	88 48 0c	 mov	 BYTE PTR [eax+12], cl
$LN58@Extract:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 586  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  00141	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00145	0f 85 ba 01 00
	00		 jne	 $LN25@Extract

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0014b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014d	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00150	0f 84 a8 01 00
	00		 je	 $LN3@Extract
  00156	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  0015a	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  0015d	0f 85 9b 01 00
	00		 jne	 $LN3@Extract
$LL4@Extract:

; 588  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00163	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00165	3b f9		 cmp	 edi, ecx
  00167	0f 85 be 00 00
	00		 jne	 $LN26@Extract

; 589  :                     _Pnode = _Fixnodeparent->_Right;

  0016d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 590  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  00170	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00174	75 54		 jne	 SHORT $LN95@Extract

; 591  :                         _Pnode->_Color         = _Black;

  00176	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  0017a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 592  :                         _Fixnodeparent->_Color = _Red;

  0017d	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  00186	8b 01		 mov	 eax, DWORD PTR [ecx]
  00188	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0018c	75 03		 jne	 SHORT $LN61@Extract

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  0018e	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN61@Extract:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  00191	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00194	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00197	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  0019a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019c	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0019f	75 0c		 jne	 SHORT $LN62@Extract

; 484  :             _Myhead->_Parent = _Pnode;

  001a1	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001a4	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001a6	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001a8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001ab	eb 20		 jmp	 SHORT $LN87@Extract
$LN62@Extract:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ad	8b 02		 mov	 eax, DWORD PTR [edx]
  001af	3b 30		 cmp	 esi, DWORD PTR [eax]
  001b1	75 0b		 jne	 SHORT $LN64@Extract

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  001b3	89 08		 mov	 DWORD PTR [eax], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001b5	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001b7	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001b9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001bc	eb 0f		 jmp	 SHORT $LN87@Extract
$LN64@Extract:

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  001be	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;

  001c1	89 31		 mov	 DWORD PTR [ecx], esi

; 492  :         _Wherenode->_Parent = _Pnode;

  001c3	89 0a		 mov	 DWORD PTR [edx], ecx

; 593  :                         _Lrotate(_Fixnodeparent);
; 594  :                         _Pnode = _Fixnodeparent->_Right;

  001c5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c8	eb 03		 jmp	 SHORT $LN87@Extract
$LN95@Extract:
  001ca	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN87@Extract:

; 595  :                     }
; 596  : 
; 597  :                     if (_Pnode->_Isnil) {

  001cd	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d1	0f 85 d0 00 00
	00		 jne	 $LN2@Extract

; 598  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 599  :                     } else if (_Pnode->_Left->_Color == _Black
; 600  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001d7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001d9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001dd	75 0d		 jne	 SHORT $LN97@Extract
  001df	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e6	0f 84 b4 00 00
	00		 je	 $LN142@Extract
$LN97@Extract:

; 601  :                         _Pnode->_Color = _Red;
; 602  :                         _Fixnode       = _Fixnodeparent;
; 603  :                     } else { // must rearrange right subtree
; 604  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  001f2	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f6	75 15		 jne	 SHORT $LN33@Extract

; 605  :                             _Pnode->_Left->_Color = _Black;

  001f8	8b 01		 mov	 eax, DWORD PTR [ecx]

; 606  :                             _Pnode->_Color        = _Red;
; 607  :                             _Rrotate(_Pnode);

  001fa	51		 push	 ecx
  001fb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001ff	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00203	8b cb		 mov	 ecx, ebx
  00205	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Rrotate

; 608  :                             _Pnode = _Fixnodeparent->_Right;

  0020a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 609  :                         }
; 610  : 
; 611  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0020d	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00210	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 612  :                         _Fixnodeparent->_Color = _Black;

  00213	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 613  :                         _Pnode->_Right->_Color = _Black;

  00217	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 614  :                         _Lrotate(_Fixnodeparent);

  0021a	8b cb		 mov	 ecx, ebx
  0021c	56		 push	 esi
  0021d	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00221	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Lrotate

; 615  :                         break; // tree now recolored/rebalanced

  00226	e9 d3 00 00 00	 jmp	 $LN3@Extract
$LN26@Extract:

; 616  :                     }
; 617  :                 } else { // fixup right subtree
; 618  :                     _Pnode = _Fixnodeparent->_Left;
; 619  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0022b	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0022f	75 55		 jne	 SHORT $LN96@Extract

; 620  :                         _Pnode->_Color         = _Black;

  00231	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 621  :                         _Fixnodeparent->_Color = _Red;

  00237	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  0023b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0023e	89 06		 mov	 DWORD PTR [esi], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  00240	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00243	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00247	75 03		 jne	 SHORT $LN69@Extract

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00249	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN69@Extract:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0024c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0024f	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00252	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00255	8b 03		 mov	 eax, DWORD PTR [ebx]
  00257	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0025a	75 0c		 jne	 SHORT $LN70@Extract

; 506  :             _Myhead->_Parent = _Pnode;

  0025c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0025f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00262	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00264	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00266	eb 21		 jmp	 SHORT $LN86@Extract
$LN70@Extract:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00268	8b 02		 mov	 eax, DWORD PTR [edx]
  0026a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0026d	75 0c		 jne	 SHORT $LN72@Extract

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0026f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  00272	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00275	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00277	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00279	eb 0e		 jmp	 SHORT $LN86@Extract
$LN72@Extract:

; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0027b	89 08		 mov	 DWORD PTR [eax], ecx

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;

  0027d	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 514  :         _Wherenode->_Parent = _Pnode;

  00280	89 0a		 mov	 DWORD PTR [edx], ecx

; 622  :                         _Rrotate(_Fixnodeparent);
; 623  :                         _Pnode = _Fixnodeparent->_Left;

  00282	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00284	eb 03		 jmp	 SHORT $LN86@Extract
$LN96@Extract:
  00286	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN86@Extract:

; 624  :                     }
; 625  : 
; 626  :                     if (_Pnode->_Isnil) {

  00289	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0028d	75 18		 jne	 SHORT $LN2@Extract

; 627  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 628  :                     } else if (_Pnode->_Right->_Color == _Black
; 629  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  0028f	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00292	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00296	75 2c		 jne	 SHORT $LN98@Extract
  00298	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0029e	75 24		 jne	 SHORT $LN98@Extract
$LN142@Extract:

; 587  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002a0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002a3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002a7	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a9	8b 4d f4	 mov	 ecx, DWORD PTR tv1093[ebp]
  002ac	8b f9		 mov	 edi, ecx
  002ae	8b 32		 mov	 esi, DWORD PTR [edx]
  002b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002b3	74 49		 je	 SHORT $LN3@Extract
  002b5	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  002b9	89 75 f4	 mov	 DWORD PTR tv1093[ebp], esi
  002bc	0f 84 a1 fe ff
	ff		 je	 $LL4@Extract
  002c2	eb 3a		 jmp	 SHORT $LN3@Extract
$LN98@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002c4	8b 01		 mov	 eax, DWORD PTR [ecx]
  002c6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ca	75 17		 jne	 SHORT $LN101@Extract

; 634  :                             _Pnode->_Right->_Color = _Black;

  002cc	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 635  :                             _Pnode->_Color         = _Red;
; 636  :                             _Lrotate(_Pnode);

  002d0	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002d3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  002d7	51		 push	 ecx
  002d8	8b cb		 mov	 ecx, ebx
  002da	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Lrotate

; 637  :                             _Pnode = _Fixnodeparent->_Left;

  002df	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002e1	eb 03		 jmp	 SHORT $LN39@Extract
$LN101@Extract:

; 630  :                         _Pnode->_Color = _Red;
; 631  :                         _Fixnode       = _Fixnodeparent;
; 632  :                     } else { // must rearrange left subtree
; 633  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e3	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN39@Extract:

; 638  :                         }
; 639  : 
; 640  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  002e6	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  002e9	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 641  :                         _Fixnodeparent->_Color = _Black;

  002ec	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 642  :                         _Pnode->_Left->_Color  = _Black;

  002f0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 643  :                         _Rrotate(_Fixnodeparent);

  002f2	8b cb		 mov	 ecx, ebx
  002f4	56		 push	 esi
  002f5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  002f9	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Rrotate
$LN3@Extract:

; 644  :                         break; // tree now recolored/rebalanced
; 645  :                     }
; 646  :                 }
; 647  :             }
; 648  : 
; 649  :             _Fixnode->_Color = _Black; // stopping node is black

  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00301	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 650  :         }
; 651  : 
; 652  :         if (0 < _Mysize) {

  00305	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00308	85 c9		 test	 ecx, ecx
  0030a	74 04		 je	 SHORT $LN40@Extract

; 653  :             --_Mysize;

  0030c	49		 dec	 ecx
  0030d	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN40@Extract:

; 654  :         }
; 655  : 
; 656  :         return _Erasednode;
; 657  :     }

  00310	5f		 pop	 edi
  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	8b e5		 mov	 esp, ebp
  00315	5d		 pop	 ebp
  00316	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 495  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 497  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 498  : 
; 499  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 500  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 501  :         }
; 502  : 
; 503  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 504  : 
; 505  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 506  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 507  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 508  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 509  :         } else {
; 510  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 511  :         }
; 512  : 
; 513  :         _Pnode->_Right      = _Wherenode;
; 514  :         _Wherenode->_Parent = _Pnode;
; 515  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 473  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 474  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 475  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 476  : 
; 477  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 478  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 479  :         }
; 480  : 
; 481  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 482  : 
; 483  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 484  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 485  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 486  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 487  :         } else {
; 488  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 489  :         }
; 490  : 
; 491  :         _Pnode->_Left       = _Wherenode;
; 492  :         _Wherenode->_Parent = _Pnode;
; 493  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >, COMDAT
; _this$ = ecx

; 1085 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 767  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN72@Tree
  0000f	90		 npad	 1
$LL8@Tree:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL8@Tree
$LN72@Tree:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1092 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?__DestroyEffectDataMap@CEffectManager@@IAEXXZ
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?__DestroyEffectDataMap@CEffectManager@@IAEXXZ PROC	; CEffectManager::__DestroyEffectDataMap, COMDAT
; _this$ = ecx

; 430  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00006	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  00009	8d 59 0c	 lea	 ebx, DWORD PTR [ecx+12]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 430  : {

  0000c	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
  00012	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 431  : 	for (TEffectDataMap::iterator i = m_kEftDataMap.begin(); i != m_kEftDataMap.end(); ++i)

  00014	74 1c		 je	 SHORT $LN3@DestroyEff
$LL4@DestroyEff:

; 432  : 	{
; 433  : 		CEffectData * pData = i->second;
; 434  : 		CEffectData::Delete(pData);

  00016	ff 70 14	 push	 DWORD PTR [eax+20]
  00019	e8 00 00 00 00	 call	 ?Delete@CEffectData@@SAXPAV1@@Z ; CEffectData::Delete
  0001e	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _i$1[ebp]
  00024	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >,std::_Iterator_base0>::operator++

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00029	8b 33		 mov	 esi, DWORD PTR [ebx]

; 232  :         return this->_Ptr == _Right._Ptr;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0002e	3b c6		 cmp	 eax, esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 431  : 	for (TEffectDataMap::iterator i = m_kEftDataMap.begin(); i != m_kEftDataMap.end(); ++i)

  00030	75 e4		 jne	 SHORT $LL4@DestroyEff
$LN3@DestroyEff:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1364 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00032	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00035	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00039	75 25		 jne	 SHORT $LN96@DestroyEff
  0003b	0f 1f 44 00 00	 npad	 5
$LL55@DestroyEff:

; 759  :             _Erase_tree(_Al, _Rootnode->_Right);

  00040	ff 77 08	 push	 DWORD PTR [edi+8]
  00043	8b cb		 mov	 ecx, ebx
  00045	53		 push	 ebx
  00046	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0004b	8b c7		 mov	 eax, edi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  0004d	8b 3f		 mov	 edi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004f	6a 18		 push	 24			; 00000018H
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00057	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 758  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0005a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0005e	74 e0		 je	 SHORT $LL55@DestroyEff
$LN96@DestroyEff:

; 1368 :         _Scary->_Mysize = 0;

  00060	5f		 pop	 edi
  00061	89 76 04	 mov	 DWORD PTR [esi+4], esi
  00064	89 36		 mov	 DWORD PTR [esi], esi
  00066	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00069	5e		 pop	 esi
  0006a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00071	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 438  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?__DestroyEffectDataMap@CEffectManager@@IAEXXZ ENDP	; CEffectManager::__DestroyEffectDataMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?__DestroyEffectCacheMap@CEffectManager@@IAEXXZ
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?__DestroyEffectCacheMap@CEffectManager@@IAEXXZ PROC	; CEffectManager::__DestroyEffectCacheMap, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00005	8d 71 1c	 lea	 esi, DWORD PTR [ecx+28]
  00008	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
  0000f	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 420  : 	for (TEffectInstanceMap::iterator i = m_kEftCacheMap.begin(); i != m_kEftCacheMap.end(); ++i)

  00011	74 1a		 je	 SHORT $LN3@DestroyEff
$LL4@DestroyEff:

; 421  : 	{
; 422  : 		CEffectInstance * pkEftInst = i->second;
; 423  : 		CEffectInstance::Delete(pkEftInst);

  00013	ff 70 14	 push	 DWORD PTR [eax+20]
  00016	e8 00 00 00 00	 call	 ?Delete@CEffectInstance@@SAXPAV1@@Z ; CEffectInstance::Delete
  0001b	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  0001e	8d 4d fc	 lea	 ecx, DWORD PTR _i$1[ebp]
  00021	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00029	3b 06		 cmp	 eax, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 420  : 	for (TEffectInstanceMap::iterator i = m_kEftCacheMap.begin(); i != m_kEftCacheMap.end(); ++i)

  0002b	75 e6		 jne	 SHORT $LL4@DestroyEff
$LN3@DestroyEff:

; 424  : 	}
; 425  : 
; 426  : 	m_kEftCacheMap.clear();

  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::clear
  00034	5e		 pop	 esi

; 427  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?__DestroyEffectCacheMap@CEffectManager@@IAEXXZ ENDP	; CEffectManager::__DestroyEffectCacheMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?__DestroyEffectInstanceMap@CEffectManager@@IAEXXZ
_TEXT	SEGMENT
_i$1 = -4						; size = 4
?__DestroyEffectInstanceMap@CEffectManager@@IAEXXZ PROC	; CEffectManager::__DestroyEffectInstanceMap, COMDAT
; _this$ = ecx

; 408  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00005	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
  00008	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
  0000f	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 409  : 	for (TEffectInstanceMap::iterator i = m_kEftInstMap.begin(); i != m_kEftInstMap.end(); ++i)

  00011	74 1a		 je	 SHORT $LN3@DestroyEff
$LL4@DestroyEff:

; 410  : 	{
; 411  : 		CEffectInstance * pkEftInst = i->second;
; 412  : 		CEffectInstance::Delete(pkEftInst);

  00013	ff 70 14	 push	 DWORD PTR [eax+20]
  00016	e8 00 00 00 00	 call	 ?Delete@CEffectInstance@@SAXPAV1@@Z ; CEffectInstance::Delete
  0001b	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  0001e	8d 4d fc	 lea	 ecx, DWORD PTR _i$1[ebp]
  00021	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  00026	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00029	3b 06		 cmp	 eax, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 409  : 	for (TEffectInstanceMap::iterator i = m_kEftInstMap.begin(); i != m_kEftInstMap.end(); ++i)

  0002b	75 e6		 jne	 SHORT $LL4@DestroyEff
$LN3@DestroyEff:

; 413  : 	}
; 414  : 
; 415  : 	m_kEftInstMap.clear();

  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::clear
  00034	5e		 pop	 esi

; 416  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?__DestroyEffectInstanceMap@CEffectManager@@IAEXXZ ENDP	; CEffectManager::__DestroyEffectInstanceMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?__Initialize@CEffectManager@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CEffectManager@@IAEXXZ PROC		; CEffectManager::__Initialize, COMDAT
; _this$ = ecx

; 451  : 	m_pSelectedEffectInstance = NULL;

  00000	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 452  : 	m_isDisableSortRendering = false;

  00007	c6 41 08 00	 mov	 BYTE PTR [ecx+8], 0

; 453  : }

  0000b	c3		 ret	 0
?__Initialize@CEffectManager@@IAEXXZ ENDP		; CEffectManager::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?DestroyUnsafeEffectInstance@CEffectManager@@QAE_NPAVCEffectInstance@@@Z
_TEXT	SEGMENT
_pEffectInstance$ = 8					; size = 4
?DestroyUnsafeEffectInstance@CEffectManager@@QAE_NPAVCEffectInstance@@@Z PROC ; CEffectManager::DestroyUnsafeEffectInstance, COMDAT
; _this$ = ecx

; 253  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 254  : 	if (!pEffectInstance)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pEffectInstance$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 06		 jne	 SHORT $LN2@DestroyUns

; 255  : 		return false;

  0000a	32 c0		 xor	 al, al

; 260  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN2@DestroyUns:

; 256  : 
; 257  : 	CEffectInstance::Delete(pEffectInstance);

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?Delete@CEffectInstance@@SAXPAV1@@Z ; CEffectInstance::Delete
  00016	83 c4 04	 add	 esp, 4

; 258  : 
; 259  : 	return true;

  00019	b0 01		 mov	 al, 1

; 260  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?DestroyUnsafeEffectInstance@CEffectManager@@QAE_NPAVCEffectInstance@@@Z ENDP ; CEffectManager::DestroyUnsafeEffectInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?CreateUnsafeEffectInstance@CEffectManager@@QAEXKPAPAVCEffectInstance@@@Z
_TEXT	SEGMENT
_pEffect$ = -4						; size = 4
_dwEffectDataID$ = 8					; size = 4
_ppEffectInstance$ = 12					; size = 4
?CreateUnsafeEffectInstance@CEffectManager@@QAEXKPAPAVCEffectInstance@@@Z PROC ; CEffectManager::CreateUnsafeEffectInstance, COMDAT
; _this$ = ecx

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 239  : 	CEffectData * pEffect;
; 240  : 	if (!GetEffectData(dwEffectDataID, &pEffect))

  00005	8b 75 08	 mov	 esi, DWORD PTR _dwEffectDataID$[ebp]
  00008	8d 45 fc	 lea	 eax, DWORD PTR _pEffect$[ebp]
  0000b	50		 push	 eax
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ?GetEffectData@CEffectManager@@QAE_NKPAPAVCEffectData@@@Z ; CEffectManager::GetEffectData
  00012	84 c0		 test	 al, al
  00014	75 15		 jne	 SHORT $LN2@CreateUnsa

; 241  : 	{
; 242  : 		Tracef("CEffectManager::CreateUnsafeEffectInstance - NO DATA :%d\n", dwEffectDataID);

  00016	56		 push	 esi
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@NJGMADIE@CEffectManager?3?3CreateUnsafeEff@
  0001c	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00021	83 c4 08	 add	 esp, 8
  00024	5e		 pop	 esi

; 250  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 08 00	 ret	 8
$LN2@CreateUnsa:

; 243  : 		return;
; 244  : 	}
; 245  : 
; 246  : 	CEffectInstance* pkEftInstNew=CEffectInstance::New();

  0002b	e8 00 00 00 00	 call	 ?New@CEffectInstance@@SAPAV1@XZ ; CEffectInstance::New

; 247  : 	pkEftInstNew->SetEffectDataPointer(pEffect);

  00030	ff 75 fc	 push	 DWORD PTR _pEffect$[ebp]
  00033	8b f0		 mov	 esi, eax
  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?SetEffectDataPointer@CEffectInstance@@QAEXPAVCEffectData@@@Z ; CEffectInstance::SetEffectDataPointer

; 248  : 
; 249  : 	*ppEffectInstance = pkEftInstNew;

  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _ppEffectInstance$[ebp]
  0003f	89 31		 mov	 DWORD PTR [ecx], esi
  00041	5e		 pop	 esi

; 250  : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?CreateUnsafeEffectInstance@CEffectManager@@QAEXKPAPAVCEffectInstance@@@Z ENDP ; CEffectManager::CreateUnsafeEffectInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?GetEffectData@CEffectManager@@QAE_NKPAPBVCEffectData@@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwID$ = 8						; size = 4
_c_ppEffect$ = 12					; size = 4
?GetEffectData@CEffectManager@@QAE_NKPAPBVCEffectData@@@Z PROC ; CEffectManager::GetEffectData, COMDAT
; _this$ = ecx

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwID$[ebp]
  0000a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 368  : 	TEffectDataMap::iterator itor = m_kEftDataMap.find(dwID);

  0000b	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 1d		 jne	 SHORT $LN50@GetEffectD
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwID$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 15		 jb	 SHORT $LN50@GetEffectD

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 370  : 	if (itor == m_kEftDataMap.end())

  0002c	74 11		 je	 SHORT $LN50@GetEffectD

; 372  : 
; 373  : 	*c_ppEffect = itor->second;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _c_ppEffect$[ebp]
  00031	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00034	5e		 pop	 esi
  00035	89 08		 mov	 DWORD PTR [eax], ecx

; 374  : 
; 375  : 	return true;

  00037	b0 01		 mov	 al, 1

; 376  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN50@GetEffectD:

; 371  : 		return false;

  0003f	32 c0		 xor	 al, al
  00041	5e		 pop	 esi

; 376  : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?GetEffectData@CEffectManager@@QAE_NKPAPBVCEffectData@@@Z ENDP ; CEffectManager::GetEffectData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?GetEffectData@CEffectManager@@QAE_NKPAPAVCEffectData@@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwID$ = 8						; size = 4
_ppEffect$ = 12						; size = 4
?GetEffectData@CEffectManager@@QAE_NKPAPAVCEffectData@@@Z PROC ; CEffectManager::GetEffectData, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwID$[ebp]
  0000a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 356  : 	TEffectDataMap::iterator itor = m_kEftDataMap.find(dwID);

  0000b	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 1d		 jne	 SHORT $LN50@GetEffectD
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwID$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 15		 jb	 SHORT $LN50@GetEffectD

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 358  : 	if (itor == m_kEftDataMap.end())

  0002c	74 11		 je	 SHORT $LN50@GetEffectD

; 360  : 
; 361  : 	*ppEffect = itor->second;

  0002e	8b 45 0c	 mov	 eax, DWORD PTR _ppEffect$[ebp]
  00031	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00034	5e		 pop	 esi
  00035	89 08		 mov	 DWORD PTR [eax], ecx

; 362  : 
; 363  : 	return true;

  00037	b0 01		 mov	 al, 1

; 364  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN50@GetEffectD:

; 359  : 		return false;

  0003f	32 c0		 xor	 al, al
  00041	5e		 pop	 esi

; 364  : }

  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
?GetEffectData@CEffectManager@@QAE_NKPAPAVCEffectData@@@Z ENDP ; CEffectManager::GetEffectData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?GetEmptyIndex@CEffectManager@@QAEHXZ
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
$T2 = -4						; size = 4
?GetEmptyIndex@CEffectManager@@QAEHXZ PROC		; CEffectManager::GetEmptyIndex, COMDAT
; _this$ = ecx

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 390  : 	static int iMaxIndex=1;
; 391  : 
; 392  : 	if (iMaxIndex>2100000000)

  00008	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?iMaxIndex@?1??GetEmptyIndex@CEffectManager@@QAEHXZ@4HA
  0000e	57		 push	 edi
  0000f	81 fe 00 75 2b
	7d		 cmp	 esi, 2100000000		; 7d2b7500H
  00015	7e 05		 jle	 SHORT $LN4@GetEmptyIn

; 393  : 		iMaxIndex = 1;

  00017	be 01 00 00 00	 mov	 esi, 1
$LN4@GetEmptyIn:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1142 :         return iterator(_Scary->_Myhead, _Scary);

  0001c	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 395  : 	int iNextIndex = iMaxIndex++;

  0001f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 396  : 	while(m_kEftInstMap.find(iNextIndex) != m_kEftInstMap.end())

  00022	8d 59 14	 lea	 ebx, DWORD PTR [ecx+20]
  00025	a3 00 00 00 00	 mov	 DWORD PTR ?iMaxIndex@?1??GetEmptyIndex@CEffectManager@@QAEHXZ@4HA, eax
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL2@GetEmptyIn:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00030	8d 45 fc	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 396  : 	while(m_kEftInstMap.find(iNextIndex) != m_kEftInstMap.end())

  00033	89 75 fc	 mov	 DWORD PTR $T2[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00036	50		 push	 eax
  00037	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
  0003a	8b cb		 mov	 ecx, ebx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00042	8b 45 f8	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00045	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00049	75 0c		 jne	 SHORT $LN51@GetEmptyIn
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  0004b	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004e	72 07		 jb	 SHORT $LN51@GetEmptyIn

; 232  :         return this->_Ptr == _Right._Ptr;

  00050	3b c7		 cmp	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 396  : 	while(m_kEftInstMap.find(iNextIndex) != m_kEftInstMap.end())

  00052	74 03		 je	 SHORT $LN51@GetEmptyIn

; 397  : 		iNextIndex++;

  00054	46		 inc	 esi
  00055	eb d9		 jmp	 SHORT $LL2@GetEmptyIn
$LN51@GetEmptyIn:
  00057	5f		 pop	 edi

; 398  : 
; 399  : 	return iNextIndex;
; 400  : }

  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?GetEmptyIndex@CEffectManager@@QAEHXZ ENDP		; CEffectManager::GetEmptyIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?GetRandomEffect@CEffectManager@@QAEKXZ
_TEXT	SEGMENT
_itor$ = -4						; size = 4
?GetRandomEffect@CEffectManager@@QAEKXZ PROC		; CEffectManager::GetRandomEffect, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1199 :         return _Get_scary()->_Mysize;

  00008	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 380  : 	int iIndex = random() % m_kEftDataMap.size();

  0000b	e8 00 00 00 00	 call	 ?random@@YAKXZ		; random
  00010	33 d2		 xor	 edx, edx
  00012	f7 f6		 div	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00014	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 380  : 	int iIndex = random() % m_kEftDataMap.size();

  00017	8b f2		 mov	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	89 45 fc	 mov	 DWORD PTR _itor$[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 383  : 	for (int i = 0; i < iIndex; ++i, ++itor);

  0001e	85 f6		 test	 esi, esi
  00020	7e 10		 jle	 SHORT $LN40@GetRandomE
$LL4@GetRandomE:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  00022	8d 4d fc	 lea	 ecx, DWORD PTR _itor$[ebp]
  00025	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >,std::_Iterator_base0>::operator++
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 383  : 	for (int i = 0; i < iIndex; ++i, ++itor);

  0002a	83 ee 01	 sub	 esi, 1
  0002d	75 f3		 jne	 SHORT $LL4@GetRandomE

; 384  : 
; 385  : 	return itor->first;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _itor$[ebp]
$LN40@GetRandomE:

; 386  : }

  00032	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?GetRandomEffect@CEffectManager@@QAEKXZ ENDP		; CEffectManager::GetRandomEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?ReleaseAlwaysHidden@CEffectManager@@QAEXXZ
_TEXT	SEGMENT
?ReleaseAlwaysHidden@CEffectManager@@QAEXXZ PROC	; CEffectManager::ReleaseAlwaysHidden, COMDAT
; _this$ = ecx

; 348  : 	if (!m_pSelectedEffectInstance)

  00000	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?ReleaseAlwaysHidden@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ReleaseAlwaysHidden

; 349  : 		return;
; 350  : 	m_pSelectedEffectInstance->ReleaseAlwaysHidden();
; 351  : }

  0000b	c3		 ret	 0
?ReleaseAlwaysHidden@CEffectManager@@QAEXXZ ENDP	; CEffectManager::ReleaseAlwaysHidden
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?ApplyAlwaysHidden@CEffectManager@@QAEXXZ
_TEXT	SEGMENT
?ApplyAlwaysHidden@CEffectManager@@QAEXXZ PROC		; CEffectManager::ApplyAlwaysHidden, COMDAT
; _this$ = ecx

; 341  : 	if (!m_pSelectedEffectInstance)

  00000	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?ApplyAlwaysHidden@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::ApplyAlwaysHidden

; 342  : 		return;
; 343  : 	m_pSelectedEffectInstance->ApplyAlwaysHidden();
; 344  : }

  0000b	c3		 ret	 0
?ApplyAlwaysHidden@CEffectManager@@QAEXXZ ENDP		; CEffectManager::ApplyAlwaysHidden
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?HideEffect@CEffectManager@@QAEXXZ
_TEXT	SEGMENT
?HideEffect@CEffectManager@@QAEXXZ PROC			; CEffectManager::HideEffect, COMDAT
; _this$ = ecx

; 332  : 	if (!m_pSelectedEffectInstance)

  00000	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?Hide@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Hide

; 333  : 		return;
; 334  : 
; 335  : 	m_pSelectedEffectInstance->Hide();
; 336  : }

  0000b	c3		 ret	 0
?HideEffect@CEffectManager@@QAEXXZ ENDP			; CEffectManager::HideEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?ShowEffect@CEffectManager@@QAEXXZ
_TEXT	SEGMENT
?ShowEffect@CEffectManager@@QAEXXZ PROC			; CEffectManager::ShowEffect, COMDAT
; _this$ = ecx

; 324  : 	if (!m_pSelectedEffectInstance)

  00000	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00003	85 c9		 test	 ecx, ecx
  00005	0f 85 00 00 00
	00		 jne	 ?Show@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Show

; 325  : 		return;
; 326  : 
; 327  : 	m_pSelectedEffectInstance->Show();
; 328  : }

  0000b	c3		 ret	 0
?ShowEffect@CEffectManager@@QAEXXZ ENDP			; CEffectManager::ShowEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_c_rmatGlobal$ = 8					; size = 4
?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z PROC ; CEffectManager::SetEffectInstanceGlobalMatrix, COMDAT
; _this$ = ecx

; 315  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 316  : 	if (!m_pSelectedEffectInstance)

  00003	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN1@SetEffectI

; 320  : }

  0000a	5d		 pop	 ebp

; 317  : 		return;
; 318  : 
; 319  : 	m_pSelectedEffectInstance->SetGlobalMatrix(c_rmatGlobal);

  0000b	e9 00 00 00 00	 jmp	 ?SetGlobalMatrix@CEffectInstance@@QAEXABUD3DXMATRIX@@@Z ; CEffectInstance::SetGlobalMatrix
$LN1@SetEffectI:

; 320  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z ENDP ; CEffectManager::SetEffectInstanceGlobalMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?SetEffectInstanceRotation@CEffectManager@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rv3Rotation$ = 8					; size = 4
?SetEffectInstanceRotation@CEffectManager@@QAEXABUD3DXVECTOR3@@@Z PROC ; CEffectManager::SetEffectInstanceRotation, COMDAT
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 305  : 	if (!m_pSelectedEffectInstance)

  00003	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00006	85 c9		 test	 ecx, ecx
  00008	74 2a		 je	 SHORT $LN1@SetEffectI

; 306  : 	{
; 307  : //		assert(!"Instance to use is not yet set!");
; 308  : 		return;
; 309  : 	}
; 310  : 
; 311  : 	m_pSelectedEffectInstance->SetRotation(c_rv3Rotation.x,c_rv3Rotation.y,c_rv3Rotation.z);

  0000a	8b 45 08	 mov	 eax, DWORD PTR _c_rv3Rotation$[ebp]
  0000d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00010	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00015	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00020	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00026	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0002a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002f	e8 00 00 00 00	 call	 ?SetRotation@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetRotation
$LN1@SetEffectI:

; 312  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?SetEffectInstanceRotation@CEffectManager@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CEffectManager::SetEffectInstanceRotation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?SetEffectInstancePosition@CEffectManager@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rv3Position$ = 8					; size = 4
?SetEffectInstancePosition@CEffectManager@@QAEXABUD3DXVECTOR3@@@Z PROC ; CEffectManager::SetEffectInstancePosition, COMDAT
; _this$ = ecx

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 294  : 	if (!m_pSelectedEffectInstance)

  00003	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN1@SetEffectI

; 301  : }

  0000a	5d		 pop	 ebp

; 295  : 	{
; 296  : //		assert(!"Instance to use is not yet set!");
; 297  : 		return;
; 298  : 	}
; 299  : 
; 300  : 	m_pSelectedEffectInstance->SetPosition(c_rv3Position);

  0000b	e9 00 00 00 00	 jmp	 ?SetPosition@CGraphicObjectInstance@@QAEXABUD3DXVECTOR3@@@Z ; CGraphicObjectInstance::SetPosition
$LN1@SetEffectI:

; 301  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetEffectInstancePosition@CEffectManager@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CEffectManager::SetEffectInstancePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
_pEffectData$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwID$ = 8						; size = 4
_pParticle$1$ = 8					; size = 4
tv412 = 8						; size = 4
_textures$ = 12						; size = 12
?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; CEffectManager::SetEffectTextures, COMDAT
; _this$ = ecx

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 278  : 	CEffectData * pEffectData;
; 279  : 	if (!GetEffectData(dwID, &pEffectData))

  00026	8b 75 08	 mov	 esi, DWORD PTR _dwID$[ebp]
  00029	8d 45 f0	 lea	 eax, DWORD PTR _pEffectData$[ebp]
  0002c	50		 push	 eax
  0002d	56		 push	 esi
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00035	e8 00 00 00 00	 call	 ?GetEffectData@CEffectManager@@QAE_NKPAPAVCEffectData@@@Z ; CEffectManager::GetEffectData
  0003a	84 c0		 test	 al, al
  0003c	0f 85 b1 00 00
	00		 jne	 $LN5@SetEffectT

; 280  : 	{
; 281  : 		Tracef("CEffectManager::SetEffectTextures - NO DATA :%d\n", dwID);

  00042	56		 push	 esi
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@KHLBHCOC@CEffectManager?3?3SetEffectTextur@
  00048	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  0004d	8b 7d 10	 mov	 edi, DWORD PTR _textures$[ebp+4]
  00050	83 c4 08	 add	 esp, 8
  00053	8b 75 0c	 mov	 esi, DWORD PTR _textures$[ebp]
$LN3@SetEffectT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00056	85 f6		 test	 esi, esi
  00058	0f 84 38 01 00
	00		 je	 $LN30@SetEffectT

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0005e	3b f7		 cmp	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00060	74 4e		 je	 SHORT $LN111@SetEffectT
$LL36@SetEffectT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00062	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00065	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00068	76 2b		 jbe	 SHORT $LN65@SetEffectT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0006c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00073	72 16		 jb	 SHORT $LN76@SetEffectT

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00075	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00078	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0007b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00080	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00083	0f 87 21 01 00
	00		 ja	 $LN99@SetEffectT

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00089	8b c2		 mov	 eax, edx
$LN76@SetEffectT:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0008b	51		 push	 ecx
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00092	83 c4 08	 add	 esp, 8
$LN65@SetEffectT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00095	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0009c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000a3	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  000a6	83 c6 18	 add	 esi, 24			; 00000018H
  000a9	3b f7		 cmp	 esi, edi
  000ab	75 b5		 jne	 SHORT $LL36@SetEffectT
  000ad	8b 75 0c	 mov	 esi, DWORD PTR _textures$[ebp]
$LN111@SetEffectT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000b0	8b 4d 14	 mov	 ecx, DWORD PTR _textures$[ebp+8]
  000b3	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000b8	2b ce		 sub	 ecx, esi
  000ba	f7 e9		 imul	 ecx
  000bc	c1 fa 02	 sar	 edx, 2
  000bf	8b c2		 mov	 eax, edx
  000c1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c4	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c6	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000c9	8b c6		 mov	 eax, esi
  000cb	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ce	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000d4	0f 82 b2 00 00
	00		 jb	 $LN102@SetEffectT

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000da	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  000dd	83 c1 23	 add	 ecx, 35			; 00000023H
  000e0	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000e5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000e8	0f 87 bc 00 00
	00		 ja	 $LN99@SetEffectT
  000ee	e9 99 00 00 00	 jmp	 $LN102@SetEffectT
$LN5@SetEffectT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f3	8b 7d 10	 mov	 edi, DWORD PTR _textures$[ebp+4]
  000f6	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000fb	8b 75 0c	 mov	 esi, DWORD PTR _textures$[ebp]
  000fe	8b cf		 mov	 ecx, edi
  00100	2b ce		 sub	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 285  : 	for(DWORD i = 0; i < textures.size(); i++)

  00102	33 db		 xor	 ebx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00104	f7 e9		 imul	 ecx
  00106	c1 fa 02	 sar	 edx, 2
  00109	8b c2		 mov	 eax, edx
  0010b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0010e	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 285  : 	for(DWORD i = 0; i < textures.size(); i++)

  00110	0f 84 40 ff ff
	ff		 je	 $LN3@SetEffectT
  00116	33 ff		 xor	 edi, edi
  00118	eb 09		 jmp	 SHORT $LN4@SetEffectT
  0011a	66 0f 1f 44 00
	00		 npad	 6
$LL116@SetEffectT:
  00120	8b 7d 08	 mov	 edi, DWORD PTR tv412[ebp]
$LN4@SetEffectT:

; 287  : 		CParticleSystemData * pParticle = pEffectData->GetParticlePointer(i);

  00123	8b 4d f0	 mov	 ecx, DWORD PTR _pEffectData$[ebp]
  00126	53		 push	 ebx
  00127	e8 00 00 00 00	 call	 ?GetParticlePointer@CEffectData@@QAEPAVCParticleSystemData@@K@Z ; CEffectData::GetParticlePointer
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0012c	8b 4d 10	 mov	 ecx, DWORD PTR _textures$[ebp+4]
  0012f	8b 75 0c	 mov	 esi, DWORD PTR _textures$[ebp]
  00132	2b ce		 sub	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 287  : 		CParticleSystemData * pParticle = pEffectData->GetParticlePointer(i);

  00134	89 45 08	 mov	 DWORD PTR _pParticle$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00137	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0013c	f7 e9		 imul	 ecx
  0013e	c1 fa 02	 sar	 edx, 2
  00141	8b c2		 mov	 eax, edx
  00143	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00146	03 c2		 add	 eax, edx
  00148	3b c3		 cmp	 eax, ebx
  0014a	76 63		 jbe	 SHORT $LN108@SetEffectT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0014c	83 7c 37 14 0f	 cmp	 DWORD PTR [edi+esi+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1938 :         return _My_data._Myfirst[_Pos];

  00151	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00154	76 02		 jbe	 SHORT $LN20@SetEffectT

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00156	8b 00		 mov	 eax, DWORD PTR [eax]
$LN20@SetEffectT:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 288  : 		pParticle->ChangeTexture(textures.at(i).c_str());

  00158	8b 4d 08	 mov	 ecx, DWORD PTR _pParticle$1$[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 ?ChangeTexture@CParticleSystemData@@QAEXPBD@Z ; CParticleSystemData::ChangeTexture
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00161	8b 75 0c	 mov	 esi, DWORD PTR _textures$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 285  : 	for(DWORD i = 0; i < textures.size(); i++)

  00164	83 c7 18	 add	 edi, 24			; 00000018H
  00167	89 7d 08	 mov	 DWORD PTR tv412[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0016a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0016f	8b 7d 10	 mov	 edi, DWORD PTR _textures$[ebp+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 285  : 	for(DWORD i = 0; i < textures.size(); i++)

  00172	43		 inc	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00173	8b cf		 mov	 ecx, edi
  00175	2b ce		 sub	 ecx, esi
  00177	f7 e9		 imul	 ecx
  00179	c1 fa 02	 sar	 edx, 2
  0017c	8b c2		 mov	 eax, edx
  0017e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00181	03 c2		 add	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 285  : 	for(DWORD i = 0; i < textures.size(); i++)

  00183	3b d8		 cmp	 ebx, eax
  00185	72 99		 jb	 SHORT $LL116@SetEffectT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1934 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00187	e9 ca fe ff ff	 jmp	 $LN3@SetEffectT
$LN102@SetEffectT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0018c	51		 push	 ecx
  0018d	56		 push	 esi
  0018e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00193	83 c4 08	 add	 esp, 8
$LN30@SetEffectT:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 290  : }

  00196	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00199	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a0	59		 pop	 ecx
  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c2 10 00	 ret	 16			; 00000010H
$LN99@SetEffectT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001aa	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN108@SetEffectT:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1935 :             _Xrange();

  001af	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN118@SetEffectT:
  001b4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _textures$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetEffectTextures@CEffectManager@@QAEXKV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; CEffectManager::SetEffectTextures
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?DeactiveEffectInstance@CEffectManager@@QAEXK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwInstanceIndex$ = 8					; size = 4
?DeactiveEffectInstance@CEffectManager@@QAEXK@Z PROC	; CEffectManager::DeactiveEffectInstance, COMDAT
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwInstanceIndex$[ebp]
  0000a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 228  : 	TEffectInstanceMap::iterator itor = m_kEftInstMap.find(dwInstanceIndex);

  0000b	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 14		 jne	 SHORT $LN1@DeactiveEf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwInstanceIndex$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 0c		 jb	 SHORT $LN1@DeactiveEf

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 230  : 	if (itor == m_kEftInstMap.end())

  0002c	74 08		 je	 SHORT $LN1@DeactiveEf

; 231  : 		return;
; 232  : 
; 233  : 	CEffectInstance * pEffectInstance = itor->second;
; 234  : 	pEffectInstance->SetDeactive();

  0002e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00031	e8 00 00 00 00	 call	 ?SetDeactive@CEffectInstance@@QAEXXZ ; CEffectInstance::SetDeactive
$LN1@DeactiveEf:
  00036	5e		 pop	 esi

; 235  : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?DeactiveEffectInstance@CEffectManager@@QAEXK@Z ENDP	; CEffectManager::DeactiveEffectInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?DestroyEffectInstance@CEffectManager@@QAE_NK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwInstanceIndex$ = 8					; size = 4
?DestroyEffectInstance@CEffectManager@@QAE_NK@Z PROC	; CEffectManager::DestroyEffectInstance, COMDAT
; _this$ = ecx

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwInstanceIndex$[ebp]
  0000a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 212  : 	TEffectInstanceMap::iterator itor = m_kEftInstMap.find(dwInstanceIndex);

  0000b	8d 79 14	 lea	 edi, DWORD PTR [ecx+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b cf		 mov	 ecx, edi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 33		 jne	 SHORT $LN104@DestroyEff
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwInstanceIndex$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 2b		 jb	 SHORT $LN104@DestroyEff

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	3b 0f		 cmp	 ecx, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 214  : 	if (itor == m_kEftInstMap.end())

  0002c	74 27		 je	 SHORT $LN104@DestroyEff

; 216  : 
; 217  : 	CEffectInstance * pEffectInstance = itor->second;

  0002e	56		 push	 esi
  0002f	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1293 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00032	51		 push	 ecx
  00033	8b cf		 mov	 ecx, edi
  00035	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Extract
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003a	6a 18		 push	 24			; 00000018H
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 221  : 	CEffectInstance::Delete(pEffectInstance);

  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ?Delete@CEffectInstance@@SAXPAV1@@Z ; CEffectInstance::Delete
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 222  : 
; 223  : 	return true;

  0004b	b0 01		 mov	 al, 1
  0004d	5e		 pop	 esi
  0004e	5f		 pop	 edi

; 224  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
$LN104@DestroyEff:

; 215  : 		return false;

  00055	32 c0		 xor	 al, al
  00057	5f		 pop	 edi

; 224  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
?DestroyEffectInstance@CEffectManager@@QAE_NK@Z ENDP	; CEffectManager::DestroyEffectInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?SelectEffectInstance@CEffectManager@@QAEHK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwInstanceIndex$ = 8					; size = 4
?SelectEffectInstance@CEffectManager@@QAEHK@Z PROC	; CEffectManager::SelectEffectInstance, COMDAT
; _this$ = ecx

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000a	8d 45 08	 lea	 eax, DWORD PTR _dwInstanceIndex$[ebp]
  0000d	50		 push	 eax
  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	50		 push	 eax
  00012	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  00015	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00021	75 08		 jne	 SHORT $LN7@SelectEffe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00023	8b 45 08	 mov	 eax, DWORD PTR _dwInstanceIndex$[ebp]
  00026	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00029	73 03		 jae	 SHORT $LN6@SelectEffe
$LN7@SelectEffe:

; 1379 :         return _Get_scary()->_Myhead;

  0002b	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
$LN6@SelectEffe:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 266  : 	m_pSelectedEffectInstance = NULL;

  0002e	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00035	39 4f 14	 cmp	 DWORD PTR [edi+20], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 268  : 	if (m_kEftInstMap.end() == itor)

  00038	75 0a		 jne	 SHORT $LN2@SelectEffe

; 269  : 		return FALSE;

  0003a	5f		 pop	 edi
  0003b	33 c0		 xor	 eax, eax

; 274  : }

  0003d	5e		 pop	 esi
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN2@SelectEffe:

; 270  : 
; 271  : 	m_pSelectedEffectInstance = itor->second;

  00044	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00047	89 47 24	 mov	 DWORD PTR [edi+36], eax

; 272  : 
; 273  : 	return TRUE;

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	5f		 pop	 edi

; 274  : }

  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?SelectEffectInstance@CEffectManager@@QAEHK@Z ENDP	; CEffectManager::SelectEffectInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?CreateEffectInstance@CEffectManager@@QAEXKK@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
$T2 = -8						; size = 8
_dwInstanceIndex$ = 8					; size = 4
_dwID$ = 12						; size = 4
_pEffect$ = 12						; size = 4
?CreateEffectInstance@CEffectManager@@QAEXKK@Z PROC	; CEffectManager::CreateEffectInstance, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 194  : 	if (!dwID)

  00007	8b 75 0c	 mov	 esi, DWORD PTR _dwID$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	85 f6		 test	 esi, esi
  0000f	74 4e		 je	 SHORT $LN1@CreateEffe

; 195  : 		return;
; 196  : 
; 197  : 	CEffectData * pEffect;
; 198  : 	if (!GetEffectData(dwID, &pEffect))

  00011	8d 45 0c	 lea	 eax, DWORD PTR _pEffect$[ebp]
  00014	50		 push	 eax
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ?GetEffectData@CEffectManager@@QAE_NKPAPAVCEffectData@@@Z ; CEffectManager::GetEffectData
  0001b	84 c0		 test	 al, al
  0001d	75 16		 jne	 SHORT $LN3@CreateEffe

; 199  : 	{
; 200  : 		Tracef("CEffectManager::CreateEffectInstance - NO DATA :%d\n", dwID);

  0001f	56		 push	 esi
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@BDEGLFKP@CEffectManager?3?3CreateEffectIns@
  00025	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  0002a	83 c4 08	 add	 esp, 8
  0002d	5f		 pop	 edi

; 208  : }

  0002e	5e		 pop	 esi
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN3@CreateEffe:

; 201  : 		return;
; 202  : 	}
; 203  : 
; 204  : 	CEffectInstance * pEffectInstance = CEffectInstance::New();

  00035	e8 00 00 00 00	 call	 ?New@CEffectInstance@@SAPAV1@XZ ; CEffectInstance::New

; 205  : 	pEffectInstance->SetEffectDataPointer(pEffect);

  0003a	ff 75 0c	 push	 DWORD PTR _pEffect$[ebp]
  0003d	8b f0		 mov	 esi, eax
  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?SetEffectDataPointer@CEffectInstance@@QAEXPAVCEffectData@@@Z ; CEffectInstance::SetEffectDataPointer
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00046	8b 4d 08	 mov	 ecx, DWORD PTR _dwInstanceIndex$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 207  : 	m_kEftInstMap.insert(TEffectInstanceMap::value_type(dwInstanceIndex, pEffectInstance));

  00049	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0004c	50		 push	 eax
  0004d	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00050	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 207  : 	m_kEftInstMap.insert(TEffectInstanceMap::value_type(dwInstanceIndex, pEffectInstance));

  00053	50		 push	 eax
  00054	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00057	89 75 fc	 mov	 DWORD PTR $T2[ebp+4], esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 207  : 	m_kEftInstMap.insert(TEffectInstanceMap::value_type(dwInstanceIndex, pEffectInstance));

  0005a	e8 00 00 00 00	 call	 ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::insert<0,0>
$LN1@CreateEffe:

; 208  : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?CreateEffectInstance@CEffectManager@@QAEXKK@Z ENDP	; CEffectManager::CreateEffectInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?CreateEffect@CEffectManager@@QAEHPBDABUD3DXVECTOR3@@1@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
_c_rv3Position$ = 12					; size = 4
_c_rv3Rotation$ = 16					; size = 4
?CreateEffect@CEffectManager@@QAEHPBDABUD3DXVECTOR3@@1@Z PROC ; CEffectManager::CreateEffect, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 172  : 	DWORD dwID = GetCaseCRC32(c_szFileName, strlen(c_szFileName));

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_szFileName$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL3@CreateEffe:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@CreateEffe
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  00020	83 c4 08	 add	 esp, 8

; 173  : 	return CreateEffect(dwID, c_rv3Position, c_rv3Rotation);

  00023	8b ce		 mov	 ecx, esi
  00025	ff 75 10	 push	 DWORD PTR _c_rv3Rotation$[ebp]
  00028	ff 75 0c	 push	 DWORD PTR _c_rv3Position$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?CreateEffect@CEffectManager@@QAEHKABUD3DXVECTOR3@@0@Z ; CEffectManager::CreateEffect
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 174  : }

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?CreateEffect@CEffectManager@@QAEHPBDABUD3DXVECTOR3@@1@Z ENDP ; CEffectManager::CreateEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?CreateEffect@CEffectManager@@QAEHKABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -72					; size = 4
_mat$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_dwID$ = 8						; size = 4
_c_rv3Position$ = 12					; size = 4
_c_rv3Rotation$ = 16					; size = 4
?CreateEffect@CEffectManager@@QAEHKABUD3DXVECTOR3@@0@Z PROC ; CEffectManager::CreateEffect, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 10	 mov	 esi, DWORD PTR _c_rv3Rotation$[ebp]
  00015	8b c1		 mov	 eax, ecx
  00017	57		 push	 edi
  00018	8b 7d 0c	 mov	 edi, DWORD PTR _c_rv3Position$[ebp]
  0001b	89 45 b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax

; 178  : 	int iInstanceIndex = GetEmptyIndex();

  0001e	e8 00 00 00 00	 call	 ?GetEmptyIndex@CEffectManager@@QAEHXZ ; CEffectManager::GetEmptyIndex

; 179  : 
; 180  : 	CreateEffectInstance(iInstanceIndex, dwID);

  00023	ff 75 08	 push	 DWORD PTR _dwID$[ebp]
  00026	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00029	8b d8		 mov	 ebx, eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ?CreateEffectInstance@CEffectManager@@QAEXKK@Z ; CEffectManager::CreateEffectInstance

; 181  : 	SelectEffectInstance(iInstanceIndex);

  00031	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 ?SelectEffectInstance@CEffectManager@@QAEHK@Z ; CEffectManager::SelectEffectInstance

; 182  : 	D3DXMATRIX mat;
; 183  : 	D3DXMatrixRotationYawPitchRoll(&mat,D3DXToRadian(c_rv3Rotation.x),D3DXToRadian(c_rv3Rotation.y),D3DXToRadian(c_rv3Rotation.z));

  0003a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3c8efa35
  00042	8d 45 bc	 lea	 eax, DWORD PTR _mat$[ebp]
  00045	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0004a	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0004d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00051	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00057	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0005c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00060	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00066	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0006a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0006e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _D3DXMatrixRotationYawPitchRoll@16

; 184  : 	mat._41 = c_rv3Position.x;

  00079	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]

; 185  : 	mat._42 = c_rv3Position.y;
; 186  : 	mat._43 = c_rv3Position.z;
; 187  : 	SetEffectInstanceGlobalMatrix(mat);

  0007d	8d 45 bc	 lea	 eax, DWORD PTR _mat$[ebp]
  00080	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00083	f3 0f 11 45 ec	 movss	 DWORD PTR _mat$[ebp+48], xmm0
  00088	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  0008d	f3 0f 11 45 f0	 movss	 DWORD PTR _mat$[ebp+52], xmm0
  00092	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00097	50		 push	 eax
  00098	f3 0f 11 45 f4	 movss	 DWORD PTR _mat$[ebp+56], xmm0
  0009d	e8 00 00 00 00	 call	 ?SetEffectInstanceGlobalMatrix@CEffectManager@@QAEXABUD3DXMATRIX@@@Z ; CEffectManager::SetEffectInstanceGlobalMatrix

; 188  : 
; 189  : 	return iInstanceIndex;
; 190  : }

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	8b c3		 mov	 eax, ebx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	33 cd		 xor	 ecx, ebp
  000ab	5b		 pop	 ebx
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 0c 00	 ret	 12			; 0000000cH
?CreateEffect@CEffectManager@@QAEHKABUD3DXVECTOR3@@0@Z ENDP ; CEffectManager::CreateEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?DeleteAllInstances@CEffectManager@@QAEXXZ
_TEXT	SEGMENT
?DeleteAllInstances@CEffectManager@@QAEXXZ PROC		; CEffectManager::DeleteAllInstances, COMDAT
; _this$ = ecx

; 404  : 	__DestroyEffectInstanceMap();

  00000	e9 00 00 00 00	 jmp	 ?__DestroyEffectInstanceMap@CEffectManager@@IAEXXZ ; CEffectManager::__DestroyEffectInstanceMap
?DeleteAllInstances@CEffectManager@@QAEXXZ ENDP		; CEffectManager::DeleteAllInstances
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -44					; size = 4
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_pdwRetCRC$ = 12					; size = 4
_isNeedCache$ = 16					; size = 1
?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z PROC	; CEffectManager::RegisterEffect2, COMDAT
; _this$ = ecx

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 7d 08	 mov	 edi, DWORD PTR _c_szFileName$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 75 0c	 mov	 esi, DWORD PTR _pdwRetCRC$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00036	0f 11 45 d8	 movups	 XMMWORD PTR _strFileName$[ebp], xmm0

; 836  :         _My_data._Mysize = 0;

  0003a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00041	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00048	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 163  : 	StringPath(c_szFileName, strFileName);

  0004c	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00056	50		 push	 eax
  00057	57		 push	 edi
  00058	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0005d	83 7d ec 0f	 cmp	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00061	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 164  : 	DWORD dwCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  00064	ff 75 e8	 push	 DWORD PTR _strFileName$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00067	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 164  : 	DWORD dwCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32

; 167  : 	return RegisterEffect(c_szFileName,false,isNeedCache);

  00071	8b 4d d4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00074	83 c4 10	 add	 esp, 16			; 00000010H
  00077	89 06		 mov	 DWORD PTR [esi], eax
  00079	ff 75 10	 push	 DWORD PTR _isNeedCache$[ebp]
  0007c	6a 00		 push	 0
  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 ?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z ; CEffectManager::RegisterEffect
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00084	8b 4d ec	 mov	 ecx, DWORD PTR _strFileName$[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 167  : 	return RegisterEffect(c_szFileName,false,isNeedCache);

  00087	8b f0		 mov	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00089	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0008c	76 28		 jbe	 SHORT $LN57@RegisterEf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008e	8b 55 d8	 mov	 edx, DWORD PTR _strFileName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00091	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00092	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00094	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009a	72 10		 jb	 SHORT $LN68@RegisterEf

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0009c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009f	83 c1 23	 add	 ecx, 35			; 00000023H
  000a2	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a4	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000aa	77 29		 ja	 SHORT $LN78@RegisterEf
$LN68@RegisterEf:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000ac	51		 push	 ecx
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b3	83 c4 08	 add	 esp, 8
$LN57@RegisterEf:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 167  : 	return RegisterEffect(c_szFileName,false,isNeedCache);

  000b6	8b c6		 mov	 eax, esi

; 168  : }

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c8	33 cd		 xor	 ecx, ebp
  000ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 0c 00	 ret	 12			; 0000000cH
$LN78@RegisterEf:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@RegisterEf:
  000da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z ENDP	; CEffectManager::RegisterEffect2
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z
_TEXT	SEGMENT
$T2 = -88						; size = 12
$T3 = -76						; size = 8
_this$GSCopy$1$ = -72					; size = 4
__Loc$4 = -68						; size = 12
__Loc$5 = -68						; size = 12
__Loc$6 = -68						; size = 12
$T7 = -56						; size = 8
$T8 = -56						; size = 8
$T9 = -56						; size = 8
_c_szFileName$GSCopy$1$ = -52				; size = 4
$T10 = -48						; size = 4
_dwCRC$ = -44						; size = 4
_strFileName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_isExistDelete$ = 12					; size = 1
_isNeedCache$ = 16					; size = 1
?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z PROC	; CEffectManager::RegisterEffect, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	89 7d b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  0002f	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00035	0f 11 45 d8	 movups	 XMMWORD PTR _strFileName$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 116  : {

  00039	89 45 cc	 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  0003c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00043	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004a	c6 45 d8 00	 mov	 BYTE PTR _strFileName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 118  : 	StringPath(c_szFileName, strFileName);

  0004e	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00058	51		 push	 ecx
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0005f	83 7d ec 0f	 cmp	 DWORD PTR _strFileName$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00063	8d 45 d8	 lea	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 119  : 	DWORD dwCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  00066	ff 75 e8	 push	 DWORD PTR _strFileName$[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00069	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 119  : 	DWORD dwCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?GetCaseCRC32@@YAKPBDI@Z ; GetCaseCRC32
  00073	83 c4 10	 add	 esp, 16			; 00000010H
  00076	8b f0		 mov	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00078	8d 45 d4	 lea	 eax, DWORD PTR _dwCRC$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 119  : 	DWORD dwCRC = GetCaseCRC32(strFileName.c_str(), strFileName.length());

  0007b	89 75 d4	 mov	 DWORD PTR _dwCRC$[ebp], esi

; 120  : 
; 121  : 	TEffectDataMap::iterator itor = m_kEftDataMap.find(dwCRC);

  0007e	83 c7 0c	 add	 edi, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00081	8b cf		 mov	 ecx, edi
  00083	50		 push	 eax
  00084	8d 45 bc	 lea	 eax, DWORD PTR __Loc$4[ebp]
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0008d	8b 45 c4	 mov	 eax, DWORD PTR __Loc$4[ebp+8]
  00090	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00094	75 33		 jne	 SHORT $LN4@RegisterEf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00096	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00099	72 2e		 jb	 SHORT $LN4@RegisterEf

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0009b	39 07		 cmp	 DWORD PTR [edi], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 122  : 	if (m_kEftDataMap.end() != itor)

  0009d	74 2a		 je	 SHORT $LN4@RegisterEf

; 123  : 	{
; 124  : 		if (isExistDelete)

  0009f	80 7d 0c 00	 cmp	 BYTE PTR _isExistDelete$[ebp], 0
  000a3	0f 84 31 01 00
	00		 je	 $LN7@RegisterEf

; 125  : 		{
; 126  : 			CEffectData* pkEftData=itor->second;
; 127  : 			CEffectData::Delete(pkEftData);

  000a9	ff 70 14	 push	 DWORD PTR [eax+20]
  000ac	e8 00 00 00 00	 call	 ?Delete@CEffectData@@SAXPAV1@@Z ; CEffectData::Delete
  000b1	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1293 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  000b4	8b cf		 mov	 ecx, edi
  000b6	ff 75 c4	 push	 DWORD PTR __Loc$4[ebp+8]
  000b9	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Extract
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000be	6a 18		 push	 24			; 00000018H
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c6	83 c4 08	 add	 esp, 8
$LN4@RegisterEf:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 137  : 	CEffectData * pkEftData = CEffectData::New();

  000c9	e8 00 00 00 00	 call	 ?New@CEffectData@@SAPAV1@XZ ; CEffectData::New

; 138  : 
; 139  : 	if (!pkEftData->LoadScript(c_szFileName))

  000ce	ff 75 cc	 push	 DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  000d1	8b c8		 mov	 ecx, eax
  000d3	89 45 d0	 mov	 DWORD PTR $T10[ebp], eax
  000d6	e8 00 00 00 00	 call	 ?LoadScript@CEffectData@@QAE_NPBD@Z ; CEffectData::LoadScript
  000db	84 c0		 test	 al, al
  000dd	75 20		 jne	 SHORT $LN5@RegisterEf

; 140  : 	{
; 141  : 		TraceError("CEffectManager::RegisterEffect - LoadScript(%s) Error", c_szFileName);

  000df	ff 75 cc	 push	 DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@OFGFHJOI@CEffectManager?3?3RegisterEffect?5@
  000e7	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 142  : 		CEffectData::Delete(pkEftData);

  000ec	8b 4d d0	 mov	 ecx, DWORD PTR $T10[ebp]
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 ?Delete@CEffectData@@SAXPAV1@@Z ; CEffectData::Delete
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 143  : 		return FALSE;

  000f8	33 f6		 xor	 esi, esi
  000fa	e9 e0 00 00 00	 jmp	 $LN11@RegisterEf
$LN5@RegisterEf:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000ff	8b 45 d0	 mov	 eax, DWORD PTR $T10[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  00102	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00104	89 45 cc	 mov	 DWORD PTR $T7[ebp+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  00107	8d 45 c8	 lea	 eax, DWORD PTR $T7[ebp]
  0010a	50		 push	 eax
  0010b	8d 45 a8	 lea	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0010e	89 75 c8	 mov	 DWORD PTR $T7[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1007 :             _Loc                = _Find_lower_bound(_Keyval);

  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::_Find_lower_bound<unsigned long>
  00117	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0011b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0011e	66 0f d6 45 bc	 movq	 QWORD PTR __Loc$5[ebp], xmm0

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00123	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00127	75 05		 jne	 SHORT $LN133@RegisterEf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00129	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0012c	73 56		 jae	 SHORT $LN214@RegisterEf
$LN133@RegisterEf:

; 1638 :         if (max_size() == _Get_scary()->_Mysize) {

  0012e	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  00135	0f 84 f3 00 00
	00		 je	 $LN367@RegisterEf

; 1013 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0013b	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0013d	89 7d c8	 mov	 DWORD PTR $T9[ebp], edi

; 136  :         return ::operator new(_Bytes);

  00140	6a 18		 push	 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 798  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00142	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00146	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  0014d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00152	8b 4d d4	 mov	 ecx, DWORD PTR _dwCRC$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00155	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 800  :     }

  00158	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0

; 820  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0015c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0015f	8b 4d d0	 mov	 ecx, DWORD PTR $T10[ebp]
  00162	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00165	8b cf		 mov	 ecx, edi
  00167	50		 push	 eax
  00168	ff 75 c0	 push	 DWORD PTR __Loc$5[ebp+4]

; 821  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0016b	89 30		 mov	 DWORD PTR [eax], esi

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0016d	ff 75 bc	 push	 DWORD PTR __Loc$5[ebp]

; 822  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00170	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 823  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00173	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 824  :         this->_Ptr->_Color = _Red;

  00176	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1032 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0017c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectData *> > >::_Insert_node
  00181	8b 75 d4	 mov	 esi, DWORD PTR _dwCRC$[ebp]
$LN214@RegisterEf:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 148  : 	if (isNeedCache)

  00184	80 7d 10 00	 cmp	 BYTE PTR _isNeedCache$[ebp], 0
  00188	74 50		 je	 SHORT $LN7@RegisterEf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1142 :         return iterator(_Scary->_Myhead, _Scary);

  0018a	8b 7d b8	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0018d	8d 45 d4	 lea	 eax, DWORD PTR _dwCRC$[ebp]
  00190	50		 push	 eax
  00191	8d 45 bc	 lea	 eax, DWORD PTR __Loc$6[ebp]
  00194	50		 push	 eax
  00195	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  00198	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0019d	8b 45 c4	 mov	 eax, DWORD PTR __Loc$6[ebp+8]
  001a0	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001a4	75 0a		 jne	 SHORT $LN363@RegisterEf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  001a6	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001a9	72 05		 jb	 SHORT $LN363@RegisterEf

; 232  :         return this->_Ptr == _Right._Ptr;

  001ab	3b 47 1c	 cmp	 eax, DWORD PTR [edi+28]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 150  : 		if (m_kEftCacheMap.find(dwCRC)==m_kEftCacheMap.end())

  001ae	75 2a		 jne	 SHORT $LN7@RegisterEf
$LN363@RegisterEf:

; 151  : 		{
; 152  : 			CEffectInstance* pkNewEftInst=CEffectInstance::New();

  001b0	e8 00 00 00 00	 call	 ?New@CEffectInstance@@SAPAV1@XZ ; CEffectInstance::New

; 153  : 			pkNewEftInst->SetEffectDataPointer(pkEftData);

  001b5	ff 75 d0	 push	 DWORD PTR $T10[ebp]
  001b8	8b f0		 mov	 esi, eax
  001ba	8b ce		 mov	 ecx, esi
  001bc	e8 00 00 00 00	 call	 ?SetEffectDataPointer@CEffectInstance@@QAEXPAVCEffectData@@@Z ; CEffectInstance::SetEffectDataPointer
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001c1	8b 4d d4	 mov	 ecx, DWORD PTR _dwCRC$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 154  : 			m_kEftCacheMap.insert(TEffectInstanceMap::value_type(dwCRC, pkNewEftInst));

  001c4	8d 45 b4	 lea	 eax, DWORD PTR $T3[ebp]
  001c7	50		 push	 eax
  001c8	8d 45 c8	 lea	 eax, DWORD PTR $T8[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001cb	89 4d b4	 mov	 DWORD PTR $T3[ebp], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 154  : 			m_kEftCacheMap.insert(TEffectInstanceMap::value_type(dwCRC, pkNewEftInst));

  001ce	50		 push	 eax
  001cf	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001d2	89 75 b8	 mov	 DWORD PTR $T3[ebp+4], esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 154  : 			m_kEftCacheMap.insert(TEffectInstanceMap::value_type(dwCRC, pkNewEftInst));

  001d5	e8 00 00 00 00	 call	 ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAVCEffectInstance@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::insert<0,0>
$LN7@RegisterEf:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001da	be 01 00 00 00	 mov	 esi, 1
$LN11@RegisterEf:
  001df	8b 4d ec	 mov	 ecx, DWORD PTR _strFileName$[ebp+20]
  001e2	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001e5	76 28		 jbe	 SHORT $LN104@RegisterEf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e7	8b 55 d8	 mov	 edx, DWORD PTR _strFileName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001ea	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001eb	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001ed	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001f3	72 10		 jb	 SHORT $LN115@RegisterEf

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001f5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001f8	83 c1 23	 add	 ecx, 35			; 00000023H
  001fb	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001fd	83 c0 fc	 add	 eax, -4			; fffffffcH
  00200	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00203	77 2e		 ja	 SHORT $LN368@RegisterEf
$LN115@RegisterEf:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00205	51		 push	 ecx
  00206	52		 push	 edx
  00207	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0020c	83 c4 08	 add	 esp, 8
$LN104@RegisterEf:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 158  : 	return TRUE;

  0020f	8b c6		 mov	 eax, esi

; 159  : }

  00211	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00214	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0021b	59		 pop	 ecx
  0021c	5f		 pop	 edi
  0021d	5e		 pop	 esi
  0021e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00221	33 cd		 xor	 ecx, ebp
  00223	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c2 0c 00	 ret	 12			; 0000000cH
$LN367@RegisterEf:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1639 :             _Throw_tree_length_error();

  0022e	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN368@RegisterEf:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00233	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN365@RegisterEf:
  00238	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z$7:
  00008	8d 4d c8	 lea	 ecx, DWORD PTR $T9[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCEffectData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CEffectData *>,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterEffect@CEffectManager@@QAEHPBD_N1@Z ENDP	; CEffectManager::RegisterEffect
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?IsAliveEffect@CEffectManager@@QAE_NK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwInstanceIndex$ = 8					; size = 4
?IsAliveEffect@CEffectManager@@QAE_NK@Z PROC		; CEffectManager::IsAliveEffect, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwInstanceIndex$[ebp]
  0000a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 41   : 	TEffectInstanceMap::iterator f = m_kEftInstMap.find(dwInstanceIndex);

  0000b	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1374 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 20		 jne	 SHORT $LN50@IsAliveEff
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\type_traits

; 2412 :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwInstanceIndex$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1614 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 18		 jb	 SHORT $LN50@IsAliveEff

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 0e		 cmp	 DWORD PTR [esi], ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 42   : 	if (m_kEftInstMap.end()==f)

  0002c	74 14		 je	 SHORT $LN50@IsAliveEff

; 44   : 
; 45   : 	return f->second->isAlive() ? true : false;

  0002e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00031	e8 00 00 00 00	 call	 ?isAlive@CEffectInstance@@QAEHXZ ; CEffectInstance::isAlive
  00036	85 c0		 test	 eax, eax
  00038	5e		 pop	 esi
  00039	0f 95 c0	 setne	 al

; 46   : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN50@IsAliveEff:

; 43   : 		return false;

  00042	32 c0		 xor	 al, al
  00044	5e		 pop	 esi

; 46   : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?IsAliveEffect@CEffectManager@@QAE_NK@Z ENDP		; CEffectManager::IsAliveEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?GetInfo@CEffectManager@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_szInfo$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pstInfo$ = 8						; size = 4
?GetInfo@CEffectManager@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CEffectManager::GetInfo, COMDAT
; _this$ = ecx

; 9    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00013	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CLightData@@2V?$CDynamicPool@VCLightData@@@@A+8
  00018	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CLightData@@2V?$CDynamicPool@VCLightData@@@@A+4
  0001e	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 9    : {

  00021	56		 push	 esi

; 12   : 	sprintf(szInfo, "Effect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d, EI %d, ED %d, PSD %d, EM %d, LD %d",

  00022	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00023	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CEffectMeshScript@@2V?$CDynamicPool@VCEffectMeshScript@@@@A+8
  00028	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CEffectMeshScript@@2V?$CDynamicPool@VCEffectMeshScript@@@@A+4
  0002e	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 12   : 	sprintf(szInfo, "Effect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d, EI %d, ED %d, PSD %d, EM %d, LD %d",

  00031	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00032	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CParticleSystemData@@2V?$CDynamicPool@VCParticleSystemData@@@@A+8
  00037	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CParticleSystemData@@2V?$CDynamicPool@VCParticleSystemData@@@@A+4
  0003d	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 12   : 	sprintf(szInfo, "Effect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d, EI %d, ED %d, PSD %d, EM %d, LD %d",

  00040	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00041	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+8
  00046	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CEffectData@@2V?$CDynamicPool@VCEffectData@@@@A+4
  0004c	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 12   : 	sprintf(szInfo, "Effect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d, EI %d, ED %d, PSD %d, EM %d, LD %d",

  0004f	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00050	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CEffectInstance@@2V?$CDynamicPool@VCEffectInstance@@@@A+8
  00055	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CEffectInstance@@2V?$CDynamicPool@VCEffectInstance@@@@A+4
  0005b	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 12   : 	sprintf(szInfo, "Effect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d, EI %d, ED %d, PSD %d, EM %d, LD %d",

  0005e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0005f	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+8
  00064	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CParticleInstance@@2V?$CDynamicPool@VCParticleInstance@@@@A+4
  0006a	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 12   : 	sprintf(szInfo, "Effect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d, EI %d, ED %d, PSD %d, EM %d, LD %d",

  0006d	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0006e	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CLightInstance@@2V?$CDynamicPool@VCLightInstance@@@@A+8
  00073	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CLightInstance@@2V?$CDynamicPool@VCLightInstance@@@@A+4
  00079	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 12   : 	sprintf(szInfo, "Effect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d, EI %d, ED %d, PSD %d, EM %d, LD %d",

  0007c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0007d	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+8
  00082	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CEffectMeshInstance@@2V?$CDynamicPool@VCEffectMeshInstance@@@@A+4
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 9    : {

  00088	8b 75 08	 mov	 esi, DWORD PTR _pstInfo$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0008b	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 12   : 	sprintf(szInfo, "Effect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d, EI %d, ED %d, PSD %d, EM %d, LD %d",

  0008e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0008f	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8
  00094	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+4
  0009a	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 12   : 	sprintf(szInfo, "Effect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d, EI %d, ED %d, PSD %d, EM %d, LD %d",

  0009d	50		 push	 eax
  0009e	ff 71 18	 push	 DWORD PTR [ecx+24]
  000a1	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szInfo$[ebp]
  000a7	ff 71 10	 push	 DWORD PTR [ecx+16]
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0GD@GOKDKBKN@Effect?3?5Inst?5?9?5ED?5?$CFd?0?5EI?5?$CFd?5Poo@
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _sprintf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000b5	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szInfo$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 12   : 	sprintf(szInfo, "Effect: Inst - ED %d, EI %d Pool - PSI %d, MI %d, LI %d, PI %d, EI %d, ED %d, PSD %d, EM %d, LD %d",

  000bb	83 c4 34	 add	 esp, 52			; 00000034H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 433  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  000be	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL53@GetInfo:
  000c1	8a 08		 mov	 cl, BYTE PTR [eax]
  000c3	40		 inc	 eax
  000c4	84 c9		 test	 cl, cl
  000c6	75 f9		 jne	 SHORT $LL53@GetInfo
  000c8	2b c2		 sub	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ca	8b ce		 mov	 ecx, esi
  000cc	50		 push	 eax
  000cd	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szInfo$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 27   : }

  000d9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000dc	33 cd		 xor	 ecx, ebp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000de	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 27   : }

  000df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
?GetInfo@CEffectManager@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CEffectManager::GetInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?Render@CEffectManager@@QAEXXZ
_TEXT	SEGMENT
_itor$1 = -4						; size = 4
_i$2 = -4						; size = 4
$T3 = -4						; size = 1
?Render@CEffectManager@@QAEXXZ PROC			; CEffectManager::Render, COMDAT
; _this$ = ecx

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 88   : 	STATEMANAGER.SetTexture(0, NULL);

  00005	6a 00		 push	 0
  00007	8b f9		 mov	 edi, ecx
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000f	6a 00		 push	 0
  00011	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 89   : 	STATEMANAGER.SetTexture(1, NULL);

  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001c	6a 00		 push	 0
  0001e	6a 01		 push	 1
  00020	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 90   : 
; 91   : 	if (m_isDisableSortRendering)

  00025	80 7f 08 00	 cmp	 BYTE PTR [edi+8], 0
  00029	74 32		 je	 SHORT $LN9@Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0002b	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00030	89 45 fc	 mov	 DWORD PTR _itor$1[ebp], eax
  00033	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 93   : 		for (TEffectInstanceMap::iterator itor = m_kEftInstMap.begin(); itor != m_kEftInstMap.end();)

  00035	0f 84 e4 00 00
	00		 je	 $LN125@Render
  0003b	0f 1f 44 00 00	 npad	 5
$LL4@Render:

; 94   : 		{
; 95   : 			CEffectInstance * pEffectInstance = itor->second;
; 96   : 			pEffectInstance->Render();

  00040	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00043	e8 00 00 00 00	 call	 ?Render@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  00048	8d 4d fc	 lea	 ecx, DWORD PTR _itor$1[ebp]
  0004b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _itor$1[ebp]
  00053	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 93   : 		for (TEffectInstanceMap::iterator itor = m_kEftInstMap.begin(); itor != m_kEftInstMap.end();)

  00056	75 e8		 jne	 SHORT $LL4@Render
  00058	5f		 pop	 edi

; 113  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN9@Render:

; 97   : 			++itor;
; 98   : 		}
; 99   : 	}
; 100  : 	else
; 101  : 	{
; 102  : 		static std::vector<CEffectInstance*> s_kVct_pkEftInstSort;

  0005d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00063	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  00069	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?8??Render@CEffectManager@@QAEXXZ@4HA
  00071	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00077	0f 8f a7 00 00
	00		 jg	 $LN201@Render
$LN5@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0007d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
  00083	56		 push	 esi
  00084	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4
  0008a	3b d6		 cmp	 edx, esi
  0008c	74 08		 je	 SHORT $LN144@Render

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0008e	8b f2		 mov	 esi, edx
  00090	89 35 04 00 00
	00		 mov	 DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4, esi
$LN144@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00096	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00099	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 107  : 		for (i=rkMap_pkEftInstSrc.begin(); i!=rkMap_pkEftInstSrc.end(); ++i)

  0009b	89 45 fc	 mov	 DWORD PTR _i$2[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0009e	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 107  : 		for (i=rkMap_pkEftInstSrc.begin(); i!=rkMap_pkEftInstSrc.end(); ++i)

  000a0	74 48		 je	 SHORT $LN7@Render
$LL8@Render:

; 108  : 			s_kVct_pkEftInstSort.push_back(i->second);

  000a2	83 c0 14	 add	 eax, 20			; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  000a5	3b 35 08 00 00
	00		 cmp	 esi, DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+8
  000ab	74 15		 je	 SHORT $LN81@Render

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 06		 mov	 DWORD PTR [esi], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  000b1	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4
  000b7	83 c6 04	 add	 esi, 4
  000ba	89 35 04 00 00
	00		 mov	 DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4, esi

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000c0	eb 12		 jmp	 SHORT $LN6@Render
$LN81@Render:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000c2	50		 push	 eax
  000c3	56		 push	 esi
  000c4	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
  000c9	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCEffectInstance@@@?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@AAEPAPAVCEffectInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CEffectInstance *,std::allocator<CEffectInstance *> >::_Emplace_reallocate<CEffectInstance * const &>
  000ce	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4
$LN6@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  000d4	8d 4d fc	 lea	 ecx, DWORD PTR _i$2[ebp]
  000d7	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _i$2[ebp]
  000df	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 107  : 		for (i=rkMap_pkEftInstSrc.begin(); i!=rkMap_pkEftInstSrc.end(); ++i)

  000e2	75 be		 jne	 SHORT $LL8@Render
  000e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
$LN7@Render:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  000ea	ff 75 fc	 push	 DWORD PTR $T3[ebp]
  000ed	8b c6		 mov	 eax, esi
  000ef	2b c2		 sub	 eax, edx
  000f1	c1 f8 02	 sar	 eax, 2
  000f4	50		 push	 eax
  000f5	56		 push	 esi
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCEffectInstance@@UCEffectManager_LessEffectInstancePtrRenderOrder@@@std@@YAXPAPAVCEffectInstance@@0HUCEffectManager_LessEffectInstancePtrRenderOrder@@@Z ; std::_Sort_unchecked<CEffectInstance * *,CEffectManager_LessEffectInstancePtrRenderOrder>

; 369  :     auto _UFirst      = _STD _Get_unwrapped(_First);

  000fc	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A+4

; 8373 :     _STD _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _STD _Pass_fn(_Pred));

  00102	83 c4 10	 add	 esp, 16			; 00000010H

; 369  :     auto _UFirst      = _STD _Get_unwrapped(_First);

  00105	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?s_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@4V?$vector@PAVCEffectInstance@@V?$allocator@PAVCEffectInstance@@@std@@@std@@A
  0010b	3b f7		 cmp	 esi, edi

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  0010d	74 0f		 je	 SHORT $LN199@Render
  0010f	90		 npad	 1
$LL126@Render:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 82   : 		pkEftInst->Render();

  00110	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00112	e8 00 00 00 00	 call	 ?Render@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::Render
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  00117	83 c6 04	 add	 esi, 4
  0011a	3b f7		 cmp	 esi, edi
  0011c	75 f2		 jne	 SHORT $LL126@Render
$LN199@Render:
  0011e	5e		 pop	 esi
$LN125@Render:
  0011f	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 113  : }

  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c3		 ret	 0
$LN201@Render:

; 97   : 			++itor;
; 98   : 		}
; 99   : 	}
; 100  : 	else
; 101  : 	{
; 102  : 		static std::vector<CEffectInstance*> s_kVct_pkEftInstSort;

  00124	68 00 00 00 00	 push	 OFFSET ?$TSS0@?8??Render@CEffectManager@@QAEXXZ@4HA
  00129	e8 00 00 00 00	 call	 __Init_thread_header
  0012e	83 c4 04	 add	 esp, 4
  00131	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?8??Render@CEffectManager@@QAEXXZ@4HA, -1
  00138	0f 85 3f ff ff
	ff		 jne	 $LN5@Render
  0013e	68 00 00 00 00	 push	 OFFSET ??__Fs_kVct_pkEftInstSort@?8??Render@CEffectManager@@QAEXXZ@YAXXZ ; `CEffectManager::Render'::`9'::`dynamic atexit destructor for 's_kVct_pkEftInstSort''
  00143	e8 00 00 00 00	 call	 _atexit
  00148	68 00 00 00 00	 push	 OFFSET ?$TSS0@?8??Render@CEffectManager@@QAEXXZ@4HA
  0014d	e8 00 00 00 00	 call	 __Init_thread_footer
  00152	83 c4 08	 add	 esp, 8
  00155	e9 23 ff ff ff	 jmp	 $LN5@Render
?Render@CEffectManager@@QAEXXZ ENDP			; CEffectManager::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?Update@CEffectManager@@QAEXXZ
_TEXT	SEGMENT
_itor$1 = -4						; size = 4
__Successor$2 = -4					; size = 4
?Update@CEffectManager@@QAEXXZ PROC			; CEffectManager::Update, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00004	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 49   : {

  00007	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00008	8d 59 14	 lea	 ebx, DWORD PTR [ecx+20]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 49   : {

  0000b	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000c	8b 30		 mov	 esi, DWORD PTR [eax]
  0000e	89 75 fc	 mov	 DWORD PTR _itor$1[ebp], esi
  00011	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 50   : 	for (TEffectInstanceMap::iterator itor = m_kEftInstMap.begin(); itor != m_kEftInstMap.end();)

  00013	74 4f		 je	 SHORT $LN109@Update
  00015	57		 push	 edi
$LL4@Update:

; 51   : 	{
; 52   : 		CEffectInstance * pEffectInstance = itor->second;

  00016	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]

; 53   : 
; 54   : 		pEffectInstance->Update(/*fElapsedTime*/);

  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?Update@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Update

; 55   : 
; 56   : 		if (!pEffectInstance->isAlive())

  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?isAlive@CEffectInstance@@QAEHXZ ; CEffectInstance::isAlive
  00027	8d 4d fc	 lea	 ecx, DWORD PTR __Successor$2[ebp]
  0002a	85 c0		 test	 eax, eax
  0002c	75 29		 jne	 SHORT $LN5@Update
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1291 :         _Unchecked_const_iterator _Successor = _Where;

  0002e	89 75 fc	 mov	 DWORD PTR __Successor$2[ebp], esi

; 1292 :         ++_Successor; // save successor iterator for return

  00031	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 1293 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00036	56		 push	 esi
  00037	8b cb		 mov	 ecx, ebx
  00039	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCEffectInstance@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >::_Extract
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003e	6a 18		 push	 24			; 00000018H
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 58   : 			itor = m_kEftInstMap.erase(itor);

  00046	8b 75 fc	 mov	 esi, DWORD PTR __Successor$2[ebp]

; 59   : 
; 60   : 			CEffectInstance::Delete(pEffectInstance);

  00049	57		 push	 edi
  0004a	89 75 fc	 mov	 DWORD PTR _itor$1[ebp], esi
  0004d	e8 00 00 00 00	 call	 ?Delete@CEffectInstance@@SAXPAV1@@Z ; CEffectInstance::Delete
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 61   : 		}

  00055	eb 08		 jmp	 SHORT $LN2@Update
$LN5@Update:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  00057	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++
  0005c	8b 75 fc	 mov	 esi, DWORD PTR _itor$1[ebp]
$LN2@Update:

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0005f	3b 33		 cmp	 esi, DWORD PTR [ebx]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 50   : 	for (TEffectInstanceMap::iterator itor = m_kEftInstMap.begin(); itor != m_kEftInstMap.end();)

  00061	75 b3		 jne	 SHORT $LL4@Update
  00063	5f		 pop	 edi
$LN109@Update:
  00064	5e		 pop	 esi

; 62   : 		else
; 63   : 		{
; 64   : 			++itor;
; 65   : 		}
; 66   : 	}
; 67   : }

  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?Update@CEffectManager@@QAEXXZ ENDP			; CEffectManager::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?UpdateSound@CEffectManager@@QAEXXZ
_TEXT	SEGMENT
_itor$1 = -4						; size = 4
?UpdateSound@CEffectManager@@QAEXXZ PROC		; CEffectManager::UpdateSound, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 1132 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00007	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000a	8b 02		 mov	 eax, DWORD PTR [edx]
  0000c	89 45 fc	 mov	 DWORD PTR _itor$1[ebp], eax
  0000f	3b c2		 cmp	 eax, edx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 31   : 	for (TEffectInstanceMap::iterator itor = m_kEftInstMap.begin(); itor != m_kEftInstMap.end(); ++itor)

  00011	74 18		 je	 SHORT $LN3@UpdateSoun
$LL4@UpdateSoun:

; 32   : 	{
; 33   : 		CEffectInstance * pEffectInstance = itor->second;
; 34   : 
; 35   : 		pEffectInstance->UpdateSound();

  00013	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00016	e8 00 00 00 00	 call	 ?UpdateSound@CEffectInstance@@QAEXXZ ; CEffectInstance::UpdateSound
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 198  :         _Mybase::operator++();

  0001b	8d 4d fc	 lea	 ecx, DWORD PTR _itor$1[ebp]
  0001e	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCEffectInstance@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CEffectInstance *> > >,std::_Iterator_base0>::operator++

; 232  :         return this->_Ptr == _Right._Ptr;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _itor$1[ebp]
  00026	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 31   : 	for (TEffectInstanceMap::iterator itor = m_kEftInstMap.begin(); itor != m_kEftInstMap.end(); ++itor)

  00029	75 e8		 jne	 SHORT $LL4@UpdateSoun
$LN3@UpdateSoun:
  0002b	5e		 pop	 esi

; 36   : 	}
; 37   : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?UpdateSound@CEffectManager@@QAEXXZ ENDP		; CEffectManager::UpdateSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?Destroy@CEffectManager@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CEffectManager@@QAEXXZ PROC			; CEffectManager::Destroy, COMDAT
; _this$ = ecx

; 441  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 442  : 	__DestroyEffectInstanceMap();

  00003	e8 00 00 00 00	 call	 ?__DestroyEffectInstanceMap@CEffectManager@@IAEXXZ ; CEffectManager::__DestroyEffectInstanceMap

; 443  : 	__DestroyEffectCacheMap();

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ?__DestroyEffectCacheMap@CEffectManager@@IAEXXZ ; CEffectManager::__DestroyEffectCacheMap

; 444  : 	__DestroyEffectDataMap();

  0000f	8b ce		 mov	 ecx, esi
  00011	e8 00 00 00 00	 call	 ?__DestroyEffectDataMap@CEffectManager@@IAEXXZ ; CEffectManager::__DestroyEffectDataMap

; 445  : 
; 446  : 	__Initialize();

  00016	8b ce		 mov	 ecx, esi
  00018	5e		 pop	 esi
  00019	e9 00 00 00 00	 jmp	 ?__Initialize@CEffectManager@@IAEXXZ ; CEffectManager::__Initialize
?Destroy@CEffectManager@@QAEXXZ ENDP			; CEffectManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ??1CEffectManager@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CEffectManager@@UAE@XZ PROC				; CEffectManager::~CEffectManager, COMDAT
; _this$ = ecx

; 461  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CEffectManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEffectManager@@6BCScreen@@@
  0002b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CEffectManager@@6B?$CSingleton@VCEffectManager@@@@@

; 462  : 	Destroy();

  00032	e8 00 00 00 00	 call	 ?Destroy@CEffectManager@@QAEXXZ ; CEffectManager::Destroy

; 463  : }

  00037	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0003a	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >
  0003f	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00042	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectInstance *> >,0> >
  00047	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0004a	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CEffectData *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CEffectData *> >,0> >
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 19   : 	{

  0004f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CSingleton@VCEffectManager@@@@6B@
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 463  : }

  00056	8b ce		 mov	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 21   : 		ms_singleton = 0;

  00058	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A, 0 ; CSingleton<CEffectManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 463  : }

  00062	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5e		 pop	 esi
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
  00077	cc		 int	 3
  00078	cc		 int	 3
  00079	cc		 int	 3
  0007a	cc		 int	 3
  0007b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CEffectManager@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CEffectManager@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CEffectManager@@UAE@XZ ENDP				; CEffectManager::~CEffectManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ??0CEffectManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CEffectManager@@QAE@XZ PROC				; CEffectManager::CEffectManager, COMDAT
; _this$ = ecx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CEffectManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00031	8b c7		 mov	 eax, edi
  00033	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7?$CSingleton@VCEffectManager@@@@6B@
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 456  : {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00041	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A, eax ; CSingleton<CEffectManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 456  : {

  00046	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00049	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CEffectManager@@6BCScreen@@@
  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CEffectManager@@6B?$CSingleton@VCEffectManager@@@@@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00056	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 456  : {

  00058	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005c	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0005f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00065	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0006c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00071	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00073	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00076	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  00079	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0007f	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 456  : {

  00081	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  00084	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00088	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 456  : {

  0008a	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0008d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00093	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0009a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0009f	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000a1	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000a4	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  000a7	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000ad	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 456  : {

  000af	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  000b2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000b6	6a 18		 push	 24			; 00000018H
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 456  : {

  000b8	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 450  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000bb	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000c1	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000c8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 457  : 	__Initialize();

  000d0	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000d2	89 00		 mov	 DWORD PTR [eax], eax

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000d4	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000d7	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 349  :         _Pnode->_Color = _Black;

  000da	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1947 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000e0	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp

; 457  : 	__Initialize();

  000e2	e8 00 00 00 00	 call	 ?__Initialize@CEffectManager@@IAEXXZ ; CEffectManager::__Initialize

; 458  : }

  000e7	8b c7		 mov	 eax, edi
  000e9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f3	59		 pop	 ecx
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CEffectManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$??0CEffectManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCEffectManager@@@@UAE@XZ ; CSingleton<CEffectManager>::~CSingleton<CEffectManager>
__unwindfunclet$??0CEffectManager@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$map@KPAVCEffectData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectData@@@std@@@3@@std@@QAE@XZ
__unwindfunclet$??0CEffectManager@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$map@KPAVCEffectInstance@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCEffectInstance@@@std@@@3@@std@@QAE@XZ
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
__ehhandler$??0CEffectManager@@QAE@XZ:
  0002e	90		 npad	 1
  0002f	90		 npad	 1
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CEffectManager@@QAE@XZ
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CEffectManager@@QAE@XZ ENDP				; CEffectManager::CEffectManager
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCEffectManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCEffectManager@@@@UAEPAXI@Z PROC	; CSingleton<CEffectManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCEffectManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A, 0 ; CSingleton<CEffectManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCEffectManager@@@@UAEPAXI@Z ENDP	; CSingleton<CEffectManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCEffectManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCEffectManager@@@@UAE@XZ PROC		; CSingleton<CEffectManager>::~CSingleton<CEffectManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCEffectManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A, 0 ; CSingleton<CEffectManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCEffectManager@@@@UAE@XZ ENDP		; CSingleton<CEffectManager>::~CSingleton<CEffectManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 2173 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	0f 84 a6 00 00
	00		 je	 $LN5@vector
  0000e	53		 push	 ebx

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0000f	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00012	3b f3		 cmp	 esi, ebx
  00014	74 47		 je	 SHORT $LN87@vector
$LL11@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00016	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00019	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0001c	76 27		 jbe	 SHORT $LN40@vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00020	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00021	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00027	72 12		 jb	 SHORT $LN51@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00029	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00031	83 c0 fc	 add	 eax, -4			; fffffffcH
  00034	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00037	77 7e		 ja	 SHORT $LN74@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00039	8b c2		 mov	 eax, edx
$LN51@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003b	51		 push	 ecx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00042	83 c4 08	 add	 esp, 8
$LN40@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00045	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0004c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00053	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00056	83 c6 18	 add	 esi, 24			; 00000018H
  00059	3b f3		 cmp	 esi, ebx
  0005b	75 b9		 jne	 SHORT $LL11@vector
$LN87@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0005d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00060	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00065	8b 37		 mov	 esi, DWORD PTR [edi]
  00067	2b ce		 sub	 ecx, esi
  00069	f7 e9		 imul	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006b	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00076	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00079	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0007c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00082	72 12		 jb	 SHORT $LN77@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00084	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00087	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0008a	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008c	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0008f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00092	77 23		 ja	 SHORT $LN74@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00094	8b f2		 mov	 esi, edx
$LN77@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00096	51		 push	 ecx
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0009d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000a3	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000a6	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2082 :             _Myend   = nullptr;

  000ad	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN5@vector:
  000b4	5f		 pop	 edi

; 820  :     }

  000b5	5e		 pop	 esi
  000b6	c3		 ret	 0
$LN74@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN95@vector:
  000bc	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 417  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv518 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
__Old$1$ = -8						; size = 4
$T1 = -4						; size = 4
tv508 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv503 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR __Old$1$[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv508[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv508[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv508[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR __Old$1$[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv518[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv503[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv518[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv503[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectManager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
