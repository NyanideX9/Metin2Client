; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EffectLib\Distribute\ParticleSystemInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPool@VCParticleSystemInstance@@@@6B@ ; CDynamicPool<CParticleSystemInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z ; CDynamicPool<CParticleSystemInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCParticleSystemInstance@@@@6B@ ; CDynamicPool<CParticleSystemInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCParticleSystemInstance@@@@@8 ; CDynamicPool<CParticleSystemInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCParticleSystemInstance@@@@8 ; CDynamicPool<CParticleSystemInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCParticleSystemInstance@@@@8 ; CDynamicPool<CParticleSystemInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCParticleSystemInstance@@@@8 ; CDynamicPool<CParticleSystemInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CParticleSystemInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCParticleSystemInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCParticleSystemInstance@@@@@8 ; CDynamicPool<CParticleSystemInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCParticleSystemInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCParticleSystemInstance@@@@8 ; CDynamicPool<CParticleSystemInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCParticleSystemInstance@@@@8 DD 00H ; CDynamicPool<CParticleSystemInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCParticleSystemInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCParticleSystemInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CParticleSystemInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCParticleSystemInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCParticleSystemInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCParticleSystemInstance@@@@6B@ DD 00H ; CDynamicPool<CParticleSystemInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCParticleSystemInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCParticleSystemInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCParticleSystemInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCParticleSystemInstance@@@@6B@ ; CDynamicPool<CParticleSystemInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?DestroySystem@CParticleSystemInstance@@SAXXZ	; CParticleSystemInstance::DestroySystem
PUBLIC	?New@CParticleSystemInstance@@SAPAV1@XZ		; CParticleSystemInstance::New
PUBLIC	?Delete@CParticleSystemInstance@@SAXPAV1@@Z	; CParticleSystemInstance::Delete
PUBLIC	??0CParticleSystemInstance@@QAE@XZ		; CParticleSystemInstance::CParticleSystemInstance
PUBLIC	??1CParticleSystemInstance@@UAE@XZ		; CParticleSystemInstance::~CParticleSystemInstance
PUBLIC	?OnSetDataPointer@CParticleSystemInstance@@UAEXPAVCEffectElementBase@@@Z ; CParticleSystemInstance::OnSetDataPointer
PUBLIC	?CreateParticles@CParticleSystemInstance@@QAEXM@Z ; CParticleSystemInstance::CreateParticles
PUBLIC	?GetEmissionCount@CParticleSystemInstance@@QAEKXZ ; CParticleSystemInstance::GetEmissionCount
PUBLIC	?OnInitialize@CParticleSystemInstance@@MAEXXZ	; CParticleSystemInstance::OnInitialize
PUBLIC	?OnDestroy@CParticleSystemInstance@@MAEXXZ	; CParticleSystemInstance::OnDestroy
PUBLIC	?OnUpdate@CParticleSystemInstance@@MAE_NM@Z	; CParticleSystemInstance::OnUpdate
PUBLIC	?OnRender@CParticleSystemInstance@@MAEXXZ	; CParticleSystemInstance::OnRender
PUBLIC	??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
PUBLIC	?_Xlength@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Xlength
PUBLIC	??1?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::~vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >
PUBLIC	?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
PUBLIC	??_GCParticleSystemInstance@@UAEPAXI@Z		; CParticleSystemInstance::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ ; CDynamicPool<CParticleSystemInstance>::~CDynamicPool<CParticleSystemInstance>
PUBLIC	?_Xlength@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@CAXXZ ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Xlength
PUBLIC	??$ForEachParticleRendering@UNormalRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUNormalRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::NormalRenderer>
PUBLIC	??$ForEachParticleRendering@UAttachRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUAttachRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::AttachRenderer>
PUBLIC	??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::TwoSideRenderer>
PUBLIC	??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::ThreeSideRenderer>
PUBLIC	??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
PUBLIC	??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Emplace_reallocate<CParticleSystemInstance * const &>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
PUBLIC	??1_Reallocation_guard@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Reallocation_guard::~_Reallocation_guard
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
PUBLIC	??$_Copy_memmove_tail@PAPAVCGraphicImageInstance@@@std@@YAPAPAVCGraphicImageInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CGraphicImageInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleSystemInstance * *,CParticleSystemInstance * *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCParticleSystemInstance@@@std@@YAPAPAVCParticleSystemInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CParticleSystemInstance * *>
PUBLIC	??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A ; CParticleSystemInstance::ms_kPool
PUBLIC	??_7CParticleSystemInstance@@6B@		; CParticleSystemInstance::`vftable'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CParticleSystemInstance@@6B@		; CParticleSystemInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCParticleSystemInstance@@@8		; CParticleSystemInstance `RTTI Type Descriptor'
PUBLIC	??_R3CParticleSystemInstance@@8			; CParticleSystemInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CParticleSystemInstance@@8			; CParticleSystemInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CParticleSystemInstance@@8	; CParticleSystemInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CEffectElementBaseInstance@@8	; CEffectElementBaseInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCEffectElementBaseInstance@@@8		; CEffectElementBaseInstance `RTTI Type Descriptor'
PUBLIC	??_R3CEffectElementBaseInstance@@8		; CEffectElementBaseInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEffectElementBaseInstance@@8		; CEffectElementBaseInstance::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@42652ee0
PUBLIC	__real@42c80000
PUBLIC	__real@447a0000
PUBLIC	__real@c2c80000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXVec3TransformNormal@12:PROC
EXTRN	?random@@YAKXZ:PROC				; random
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	?random_range@@YAJJJ@Z:PROC			; random_range
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z:PROC ; CEffectElementBase::GetPosition
EXTRN	?GetEmitterShape@CEmitterProperty@@QAEEXZ:PROC	; CEmitterProperty::GetEmitterShape
EXTRN	?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ:PROC ; CEmitterProperty::GetEmitterAdvancedType
EXTRN	?isEmitFromEdge@CEmitterProperty@@QAEHXZ:PROC	; CEmitterProperty::isEmitFromEdge
EXTRN	?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingSize
EXTRN	?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingAngularVelocity
EXTRN	?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingDirectionX
EXTRN	?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingDirectionY
EXTRN	?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingDirectionZ
EXTRN	?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingVelocity
EXTRN	?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmissionCountPerSecond
EXTRN	?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetParticleLifeTime
EXTRN	?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetParticleSizeX
EXTRN	?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetParticleSizeY
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTextureReference
EXTRN	?New@CGraphicImageInstance@@SAPAV1@XZ:PROC	; CGraphicImageInstance::New
EXTRN	?Delete@CGraphicImageInstance@@SAXPAV1@@Z:PROC	; CGraphicImageInstance::Delete
EXTRN	?GetEmitterPropertyPointer@CParticleSystemData@@QAEPAVCEmitterProperty@@XZ:PROC ; CParticleSystemData::GetEmitterPropertyPointer
EXTRN	?GetParticlePropertyPointer@CParticleSystemData@@QAEPAVCParticleProperty@@XZ:PROC ; CParticleSystemData::GetParticlePropertyPointer
EXTRN	?BuildDecorator@CParticleSystemData@@QAEXPAVCParticleInstance@@@Z:PROC ; CParticleSystemData::BuildDecorator
EXTRN	??0CEffectElementBaseInstance@@QAE@XZ:PROC	; CEffectElementBaseInstance::CEffectElementBaseInstance
EXTRN	??1CEffectElementBaseInstance@@UAE@XZ:PROC	; CEffectElementBaseInstance::~CEffectElementBaseInstance
EXTRN	?Initialize@CEffectElementBaseInstance@@QAEXXZ:PROC ; CEffectElementBaseInstance::Initialize
EXTRN	?Destroy@CEffectElementBaseInstance@@QAEXXZ:PROC ; CEffectElementBaseInstance::Destroy
EXTRN	?isActive@CEffectElementBaseInstance@@QAE_NXZ:PROC ; CEffectElementBaseInstance::isActive
EXTRN	?GetRadiusApproximation@CParticleInstance@@QAEMXZ:PROC ; CParticleInstance::GetRadiusApproximation
EXTRN	?Update@CParticleInstance@@QAEHMM@Z:PROC	; CParticleInstance::Update
EXTRN	?New@CParticleInstance@@SAPAV1@XZ:PROC		; CParticleInstance::New
EXTRN	?DestroySystem@CParticleInstance@@SAXXZ:PROC	; CParticleInstance::DestroySystem
EXTRN	?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z:PROC ; CParticleInstance::Transform
EXTRN	?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z:PROC ; CParticleInstance::Transform
EXTRN	?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ:PROC ; CParticleInstance::GetParticleMeshPointer
EXTRN	?DeleteThis@CParticleInstance@@QAEXXZ:PROC	; CParticleInstance::DeleteThis
EXTRN	?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z:PROC ; Frustum::ViewVolumeTest
EXTRN	?Identity@CScreen@@SAXXZ:PROC			; CScreen::Identity
EXTRN	??_ECParticleSystemInstance@@UAEPAXI@Z:PROC	; CParticleSystemInstance::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIatan2:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	?ms_frustum@CScreen@@1VFrustum@@A:BYTE		; CScreen::ms_frustum
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CParticleSystemInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CParticleSystemInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2c80000
CONST	SEGMENT
__real@c2c80000 DD 0c2c80000r			; -100
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2CEffectElementBaseInstance@@8
rdata$r	SEGMENT
??_R2CEffectElementBaseInstance@@8 DD FLAT:??_R1A@?0A@EA@CEffectElementBaseInstance@@8 ; CEffectElementBaseInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEffectElementBaseInstance@@8
rdata$r	SEGMENT
??_R3CEffectElementBaseInstance@@8 DD 00H		; CEffectElementBaseInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEffectElementBaseInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEffectElementBaseInstance@@@8
data$rs	SEGMENT
??_R0?AVCEffectElementBaseInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CEffectElementBaseInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEffectElementBaseInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CEffectElementBaseInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEffectElementBaseInstance@@8 DD FLAT:??_R0?AVCEffectElementBaseInstance@@@8 ; CEffectElementBaseInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEffectElementBaseInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CParticleSystemInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CParticleSystemInstance@@8 DD FLAT:??_R0?AVCParticleSystemInstance@@@8 ; CParticleSystemInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CParticleSystemInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CParticleSystemInstance@@8
rdata$r	SEGMENT
??_R2CParticleSystemInstance@@8 DD FLAT:??_R1A@?0A@EA@CParticleSystemInstance@@8 ; CParticleSystemInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CEffectElementBaseInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CParticleSystemInstance@@8
rdata$r	SEGMENT
??_R3CParticleSystemInstance@@8 DD 00H			; CParticleSystemInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CParticleSystemInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCParticleSystemInstance@@@8
data$rs	SEGMENT
??_R0?AVCParticleSystemInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CParticleSystemInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCParticleSystemInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CParticleSystemInstance@@6B@
rdata$r	SEGMENT
??_R4CParticleSystemInstance@@6B@ DD 00H		; CParticleSystemInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCParticleSystemInstance@@@8
	DD	FLAT:??_R3CParticleSystemInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CParticleSystemInstance@@6B@
CONST	SEGMENT
??_7CParticleSystemInstance@@6B@ DD FLAT:??_R4CParticleSystemInstance@@6B@ ; CParticleSystemInstance::`vftable'
	DD	FLAT:??_ECParticleSystemInstance@@UAEPAXI@Z
	DD	FLAT:?OnSetDataPointer@CParticleSystemInstance@@UAEXPAVCEffectElementBase@@@Z
	DD	FLAT:?OnInitialize@CParticleSystemInstance@@MAEXXZ
	DD	FLAT:?OnDestroy@CParticleSystemInstance@@MAEXXZ
	DD	FLAT:?OnUpdate@CParticleSystemInstance@@MAE_NM@Z
	DD	FLAT:?OnRender@CParticleSystemInstance@@MAEXXZ
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCParticleSystemInstance@@@@6B@ ; CParticleSystemInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Attach_head@U?$_List_simple_types@PAVCParticleInstance@@@std@@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXAAV?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Attach_head@U?$_List_simple_types@PAVCParticleInstance@@@std@@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXAAV?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@1@@Z$0
__ehfuncinfo$??$_Attach_head@U?$_List_simple_types@PAVCParticleInstance@@@std@@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXAAV?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Attach_head@U?$_List_simple_types@PAVCParticleInstance@@@std@@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXAAV?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
__ehfuncinfo$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$2
__ehfuncinfo$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z$2
__ehfuncinfo$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z$2
__ehfuncinfo$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$3
__ehfuncinfo$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAVCParticleInstance@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@1@ABQAVCParticleInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAVCParticleInstance@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@1@ABQAVCParticleInstance@@@Z$0
__ehfuncinfo$??$?0ABQAVCParticleInstance@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@1@ABQAVCParticleInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAVCParticleInstance@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@1@ABQAVCParticleInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAVCParticleInstance@@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEPAU?$_List_node@PAVCParticleInstance@@PAX@1@QAU21@ABQAVCParticleInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAVCParticleInstance@@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEPAU?$_List_node@PAVCParticleInstance@@PAX@1@QAU21@ABQAVCParticleInstance@@@Z$1
__ehfuncinfo$??$_Emplace@ABQAVCParticleInstance@@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEPAU?$_List_node@PAVCParticleInstance@@PAX@1@QAU21@ABQAVCParticleInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAVCParticleInstance@@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEPAU?$_List_node@PAVCParticleInstance@@PAX@1@QAU21@ABQAVCParticleInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEXABQAVCParticleInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEXABQAVCParticleInstance@@@Z$1
__ehfuncinfo$?push_back@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEXABQAVCParticleInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEXABQAVCParticleInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCParticleSystemInstance@@@@QAEPAVCParticleSystemInstance@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCParticleSystemInstance@@@@QAEPAVCParticleSystemInstance@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCParticleSystemInstance@@@@QAEPAVCParticleSystemInstance@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCParticleSystemInstance@@@@QAEPAVCParticleSystemInstance@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z$1
__ehfuncinfo$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateParticles@CParticleSystemInstance@@QAEXM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateParticles@CParticleSystemInstance@@QAEXM@Z$1
__ehfuncinfo$?CreateParticles@CParticleSystemInstance@@QAEXM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateParticles@CParticleSystemInstance@@QAEXM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CParticleSystemInstance@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$2
__ehfuncinfo$??0CParticleSystemInstance@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CParticleSystemInstance@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CParticleSystemInstance@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CParticleSystemInstance@@SAPAV1@XZ$0
__ehfuncinfo$?New@CParticleSystemInstance@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CParticleSystemInstance@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
;	COMDAT ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >, COMDAT
; _this$ = ecx

; 732  :         if (_Added == 0) {

  00000	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00004	74 2f		 je	 SHORT $LN40@List_node_

; 733  :             return;
; 734  :         }
; 735  : 
; 736  :         _Construct_in_place(_Head->_Prev, pointer{});

  00006	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00009	56		 push	 esi
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 737  :         _Construct_in_place(_Tail->_Next, pointer{});

  00011	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 738  :         pointer _Subject = _Head;

  0001a	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]

; 739  :         while (_Subject) {

  0001d	85 f6		 test	 esi, esi
  0001f	74 13		 je	 SHORT $LN45@List_node_
$LL2@List_node_:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00021	8b c6		 mov	 eax, esi

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00023	8b 36		 mov	 esi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00025	6a 0c		 push	 12			; 0000000cH
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 739  :         while (_Subject) {

  00030	85 f6		 test	 esi, esi
  00032	75 ed		 jne	 SHORT $LL2@List_node_
$LN45@List_node_:
  00034	5e		 pop	 esi
$LN40@List_node_:

; 740  :             value_type::_Freenode(_Al, _STD exchange(_Subject, _Subject->_Next));
; 741  :         }
; 742  :     }

  00035	c3		 ret	 0
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCParticleSystemInstance@@@std@@YAPAPAVCParticleSystemInstance@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCParticleSystemInstance@@@std@@YAPAPAVCParticleSystemInstance@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CParticleSystemInstance * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCParticleSystemInstance@@@std@@YAPAPAVCParticleSystemInstance@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CParticleSystemInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CParticleSystemInstance * *,CParticleSystemInstance * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCParticleSystemInstance@@@std@@YAPAPAVCParticleSystemInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CParticleSystemInstance * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CParticleSystemInstance * *,CParticleSystemInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCGraphicImageInstance@@@std@@YAPAPAVCGraphicImageInstance@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCGraphicImageInstance@@@std@@YAPAPAVCGraphicImageInstance@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CGraphicImageInstance * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCGraphicImageInstance@@@std@@YAPAPAVCGraphicImageInstance@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CGraphicImageInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >, COMDAT
; _this$ = ecx

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	ff 71 04	 push	 DWORD PTR [ecx+4]
  00006	ff 31		 push	 DWORD PTR [ecx]
  00008	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  0000d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1803 :     }

  00010	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1_Reallocation_guard@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Reallocation_guard@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Reallocation_guard::~_Reallocation_guard, COMDAT
; _this$ = ecx

; 605  :         _CONSTEXPR20 ~_Reallocation_guard() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 606  :             if (_New_begin != nullptr) {

  00003	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00007	74 3d		 je	 SHORT $LN10@Reallocati

; 607  :                 _STD _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00009	ff 36		 push	 DWORD PTR [esi]
  0000b	ff 76 10	 push	 DWORD PTR [esi+16]
  0000e	ff 76 0c	 push	 DWORD PTR [esi+12]
  00011	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00016	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 607  :                 _STD _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00022	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00028	72 12		 jb	 SHORT $LN21@Reallocati

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002d	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00030	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00032	83 c0 fc	 add	 eax, -4			; fffffffcH
  00035	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00038	77 0e		 ja	 SHORT $LN18@Reallocati

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003a	8b c2		 mov	 eax, edx
$LN21@Reallocati:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003c	51		 push	 ecx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00043	83 c4 08	 add	 esp, 8
$LN10@Reallocati:
  00046	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 610  :         }

  00047	c3		 ret	 0
$LN18@Reallocati:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Reallocati:
  0004d	cc		 int	 3
??1_Reallocation_guard@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Reallocation_guard::~_Reallocation_guard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCGraphicImageInstance@@@std@@YAPAPAVCGraphicImageInstance@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CGraphicImageInstance * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Emplace_reallocate<CParticleSystemInstance * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleSystemInstance * *,CParticleSystemInstance * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleSystemInstance * *,CParticleSystemInstance * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@CAXXZ ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Emplace_reallocate<CParticleSystemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Backout$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >, COMDAT

; 2041 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00028	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0002b	8b 5d 10	 mov	 ebx, DWORD PTR __Al$[ebp]
  0002e	89 75 e8	 mov	 DWORD PTR __Backout$[ebp], esi
  00031	89 75 ec	 mov	 DWORD PTR __Backout$[ebp+4], esi
  00034	89 5d f0	 mov	 DWORD PTR __Backout$[ebp+8], ebx

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00037	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	85 ff		 test	 edi, edi
  00043	74 34		 je	 SHORT $LN3@Uninitiali
  00045	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:

; 136  :         return ::operator new(_Bytes);

  00050	6a 0c		 push	 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 353  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00052	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00058	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0005f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00064	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1844 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00067	89 00		 mov	 DWORD PTR [eax], eax

; 1845 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00069	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1846 :         _Mypair._Myval2._Myhead = _Newhead;

  0006c	89 06		 mov	 DWORD PTR [esi], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  0006e	83 c6 08	 add	 esi, 8
  00071	89 75 ec	 mov	 DWORD PTR __Backout$[ebp+4], esi

; 2042 :     // value-initialize _Count objects to raw _First, using _Al
; 2043 :     using _Ptrty = typename _Alloc::value_type*;
; 2044 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2045 : #if _HAS_CXX20
; 2046 :         if (!_STD is_constant_evaluated())
; 2047 : #endif // _HAS_CXX20
; 2048 :         {
; 2049 :             auto _PFirst = _Unfancy(_First);
; 2050 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2051 :             return _First + _Count;
; 2052 :         }
; 2053 :     }
; 2054 : 
; 2055 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 2056 :     for (; 0 < _Count; --_Count) {

  00074	83 ef 01	 sub	 edi, 1
  00077	75 d7		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00079	53		 push	 ebx
  0007a	56		 push	 esi
  0007b	56		 push	 esi
  0007c	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2057 :         _Backout._Emplace_back();
; 2058 :     }
; 2059 : 
; 2060 :     return _Backout._Release();

  00084	8b c6		 mov	 eax, esi

; 2061 : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Guard$ = -100						; size = 20
__Appended$2 = -80					; size = 16
__Backout$3 = -64					; size = 12
__Newnode$4 = -52					; size = 8
__Newnode$5 = -44					; size = 8
_this$1$ = -36						; size = 4
__Last$1$ = -32						; size = 4
tv1234 = -28						; size = 4
__UFirst$1$ = -24					; size = 4
$T6 = -20						; size = 4
__Old_val$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1537 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d dc	 mov	 DWORD PTR _this$1$[ebp], ebx

; 1538 :         if (_Newsize > max_size()) {

  0002d	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Newsize$[ebp], 536870911 ; 1fffffffH
  00034	0f 87 56 02 00
	00		 ja	 $LN328@Resize_rea

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0003d	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00042	2b 0b		 sub	 ecx, DWORD PTR [ebx]

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  00044	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00047	2b 3b		 sub	 edi, DWORD PTR [ebx]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00049	c1 f9 03	 sar	 ecx, 3

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004c	8b d1		 mov	 edx, ecx

; 1540 :         }
; 1541 : 
; 1542 :         auto& _Al         = _Getal();
; 1543 :         auto& _My_data    = _Mypair._Myval2;
; 1544 :         pointer& _Myfirst = _My_data._Myfirst;
; 1545 :         pointer& _Mylast  = _My_data._Mylast;
; 1546 : 
; 1547 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

  0004e	c1 ff 03	 sar	 edi, 3

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00051	d1 ea		 shr	 edx, 1
  00053	2b c2		 sub	 eax, edx
  00055	3b c8		 cmp	 ecx, eax
  00057	76 19		 jbe	 SHORT $LN6@Resize_rea

; 1997 :             return _Max; // geometric growth would overflow

  00059	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  0005e	c7 45 e4 f8 ff
	ff ff		 mov	 DWORD PTR tv1234[ebp], -8 ; fffffff8H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00065	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1997 :             return _Max; // geometric growth would overflow

  00066	be ff ff ff 1f	 mov	 esi, 536870911		; 1fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00070	eb 3f		 jmp	 SHORT $LN326@Resize_rea
$LN6@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2002 :         if (_Geometric < _Newsize) {

  00072	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00075	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]
  00078	3b f0		 cmp	 esi, eax
  0007a	73 12		 jae	 SHORT $LN7@Resize_rea

; 2003 :             return _Newsize; // geometric growth would be insufficient

  0007c	8b f0		 mov	 esi, eax
$LN17@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  0007e	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  00085	89 45 e4	 mov	 DWORD PTR tv1234[ebp], eax

; 227  :     if (_Bytes == 0) {

  00088	85 c0		 test	 eax, eax
  0008a	75 10		 jne	 SHORT $LN21@Resize_rea

; 228  :         return nullptr;

  0008c	eb 26		 jmp	 SHORT $LN325@Resize_rea
$LN7@Resize_rea:

; 117  :         if (_Count > _Max_possible) {

  0008e	81 fe ff ff ff
	1f		 cmp	 esi, 536870911		; 1fffffffH
  00094	0f 87 fb 01 00
	00		 ja	 $LN329@Resize_rea
  0009a	eb e2		 jmp	 SHORT $LN17@Resize_rea
$LN21@Resize_rea:

; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0009c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a1	72 08		 jb	 SHORT $LN22@Resize_rea

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a9	eb 06		 jmp	 SHORT $LN326@Resize_rea
$LN22@Resize_rea:

; 136  :         return ::operator new(_Bytes);

  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN326@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1551 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000b1	83 c4 04	 add	 esp, 4
$LN325@Resize_rea:
  000b4	8d 0c f8	 lea	 ecx, DWORD PTR [eax+edi*8]
  000b7	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax

; 1552 : 
; 1553 :         _Reallocation_guard _Guard{_Al, _Newvec, _Newcapacity, _Appended_first, _Appended_first};

  000ba	89 5d 9c	 mov	 DWORD PTR __Guard$[ebp], ebx
  000bd	89 45 a0	 mov	 DWORD PTR __Guard$[ebp+4], eax
  000c0	89 75 a4	 mov	 DWORD PTR __Guard$[ebp+8], esi
  000c3	89 4d a8	 mov	 DWORD PTR __Guard$[ebp+12], ecx
  000c6	89 4d ac	 mov	 DWORD PTR __Guard$[ebp+16], ecx

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000c9	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000cc	53		 push	 ebx
  000cd	2b c7		 sub	 eax, edi
  000cf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d6	50		 push	 eax
  000d7	51		 push	 ecx
  000d8	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000dd	8b 75 ec	 mov	 esi, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1566 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);

  000e3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000e6	8b d6		 mov	 edx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1560 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000e8	89 45 ac	 mov	 DWORD PTR __Guard$[ebp+16], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1839 :     auto _UFirst = _STD _Get_unwrapped(_STD move(_First));

  000eb	8b 03		 mov	 eax, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1566 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);

  000ed	89 4d e0	 mov	 DWORD PTR __Last$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1839 :     auto _UFirst = _STD _Get_unwrapped(_STD move(_First));

  000f0	89 45 e8	 mov	 DWORD PTR __UFirst$1$[ebp], eax

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000f3	89 75 c0	 mov	 DWORD PTR __Backout$3[ebp], esi
  000f6	89 55 c4	 mov	 DWORD PTR __Backout$3[ebp+4], edx
  000f9	89 5d c8	 mov	 DWORD PTR __Backout$3[ebp+8], ebx

; 1863 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  000fc	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1864 :     for (; _UFirst != _ULast; ++_UFirst) {

  00100	3b c1		 cmp	 eax, ecx
  00102	0f 84 10 01 00
	00		 je	 $LN317@Resize_rea
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00108	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0
  0010f	90		 npad	 1
$LL31@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 353  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00110	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 747  :     pointer _Tail{}; // points to the most recently appended element; it doesn't have _Next constructed

  00116	33 db		 xor	 ebx, ebx

; 353  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00118	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0011f	8b 38		 mov	 edi, DWORD PTR [eax]

; 617  :     explicit _List_node_insert_op2(_Alnode& _Al_) : _Al(_Al_), _Added(0) {}

  00121	33 c0		 xor	 eax, eax
  00123	89 55 b0	 mov	 DWORD PTR __Appended$2[ebp], edx
  00126	89 45 f0	 mov	 DWORD PTR __Old_val$1$[ebp], eax
  00129	89 45 b4	 mov	 DWORD PTR __Appended$2[ebp+4], eax

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0012c	8b 37		 mov	 esi, DWORD PTR [edi]

; 747  :     pointer _Tail{}; // points to the most recently appended element; it doesn't have _Next constructed

  0012e	89 5d b8	 mov	 DWORD PTR __Appended$2[ebp+8], ebx

; 748  :     pointer _Head{}; // points to the first appended element; it doesn't have _Prev constructed

  00131	89 45 bc	 mov	 DWORD PTR __Appended$2[ebp+12], eax

; 72   :         return _Ptr == _Right._Ptr;

  00134	3b f7		 cmp	 esi, edi

; 654  :         if (_First == _Last) { // throws

  00136	0f 84 7f 00 00
	00		 je	 $LN67@Resize_rea
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0013c	89 55 d4	 mov	 DWORD PTR __Newnode$5[ebp], edx

; 136  :         return ::operator new(_Bytes);

  0013f	6a 0c		 push	 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 658  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);

  00141	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00145	89 5d d8	 mov	 DWORD PTR __Newnode$5[ebp+4], ebx

; 136  :         return ::operator new(_Bytes);

  00148	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 661  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), *_First); // throws

  0014d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 256  :         return _Traits::_Allocate(_Bytes);

  00150	8b d8		 mov	 ebx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 665  :             ++_Added;

  00152	b8 01 00 00 00	 mov	 eax, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00157	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Newnode$5[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0015e	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 663  :             _Head               = _Newhead;

  00161	89 5d bc	 mov	 DWORD PTR __Appended$2[ebp+12], ebx

; 664  :             _Tail               = _Newhead;

  00164	89 5d b8	 mov	 DWORD PTR __Appended$2[ebp+8], ebx
  00167	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 50   :         _Ptr = _Ptr->_Next;

  0016a	8b 36		 mov	 esi, DWORD PTR [esi]

; 665  :             ++_Added;

  0016c	89 45 f0	 mov	 DWORD PTR __Old_val$1$[ebp], eax
  0016f	89 45 b4	 mov	 DWORD PTR __Appended$2[ebp+4], eax

; 72   :         return _Ptr == _Right._Ptr;

  00172	3b f7		 cmp	 esi, edi

; 669  :         while (_First != _Last) { // throws

  00174	74 42		 je	 SHORT $LN322@Resize_rea
  00176	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL66@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00180	6a 0c		 push	 12			; 0000000cH

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00182	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Newnode$5[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  00189	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 671  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), *_First); // throws

  0018e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00191	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00194	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR __Newnode$5[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 671  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), *_First); // throws

  0019b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 672  :             _Construct_in_place(_Tail->_Next, _Newnode._Ptr);

  0019e	89 03		 mov	 DWORD PTR [ebx], eax

; 673  :             _Construct_in_place(_Newnode._Ptr->_Prev, _Tail);

  001a0	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 674  :             _Tail = _STD exchange(_Newnode._Ptr, pointer{});

  001a3	8b d8		 mov	 ebx, eax

; 675  :             ++_Added;

  001a5	8b 45 f0	 mov	 eax, DWORD PTR __Old_val$1$[ebp]

; 50   :         _Ptr = _Ptr->_Next;

  001a8	8b 36		 mov	 esi, DWORD PTR [esi]

; 675  :             ++_Added;

  001aa	40		 inc	 eax
  001ab	89 5d b8	 mov	 DWORD PTR __Appended$2[ebp+8], ebx
  001ae	89 45 f0	 mov	 DWORD PTR __Old_val$1$[ebp], eax
  001b1	89 45 b4	 mov	 DWORD PTR __Appended$2[ebp+4], eax

; 72   :         return _Ptr == _Right._Ptr;

  001b4	3b f7		 cmp	 esi, edi

; 669  :         while (_First != _Last) { // throws

  001b6	75 c8		 jne	 SHORT $LL66@Resize_rea
$LN322@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  001b8	8b 55 c4	 mov	 edx, DWORD PTR __Backout$3[ebp+4]
$LN67@Resize_rea:
  001bb	89 55 cc	 mov	 DWORD PTR __Newnode$4[ebp], edx

; 136  :         return ::operator new(_Bytes);

  001be	6a 0c		 push	 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 712  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);

  001c0	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  001c4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 715  :         if (_Local_added == 0) {

  001c9	8b 4d f0	 mov	 ecx, DWORD PTR __Old_val$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  001cc	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  001cf	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR __Appended$2[ebp+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 715  :         if (_Local_added == 0) {

  001d6	85 c9		 test	 ecx, ecx
  001d8	75 07		 jne	 SHORT $LN158@Resize_rea

; 716  :             _Construct_in_place(_Newnode._Ptr->_Next, _Newnode._Ptr);

  001da	89 00		 mov	 DWORD PTR [eax], eax

; 717  :             _Construct_in_place(_Newnode._Ptr->_Prev, _Newnode._Ptr);

  001dc	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 718  :         } else {

  001df	eb 0d		 jmp	 SHORT $LN159@Resize_rea
$LN158@Resize_rea:

; 719  :             const auto _Local_head = _Head;
; 720  :             const auto _Local_tail = _Tail;
; 721  :             _Construct_in_place(_Newnode._Ptr->_Next, _Local_head);

  001e1	8b 55 bc	 mov	 edx, DWORD PTR __Appended$2[ebp+12]
  001e4	89 10		 mov	 DWORD PTR [eax], edx

; 722  :             _Construct_in_place(_Newnode._Ptr->_Prev, _Local_tail);

  001e6	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 723  :             _Construct_in_place(_Local_head->_Prev, _Newnode._Ptr);

  001e9	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 724  :             _Construct_in_place(_Local_tail->_Next, _Newnode._Ptr);

  001ec	89 03		 mov	 DWORD PTR [ebx], eax
$LN159@Resize_rea:

; 727  :         _List_data._Mysize = _Local_added;

  001ee	8b 55 c4	 mov	 edx, DWORD PTR __Backout$3[ebp+4]

; 869  :     }

  001f1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 728  :         _List_data._Myhead = _Newnode._Release();

  001f5	89 02		 mov	 DWORD PTR [edx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1864 :     for (; _UFirst != _ULast; ++_UFirst) {

  001f7	8b 45 e8	 mov	 eax, DWORD PTR __UFirst$1$[ebp]
  001fa	83 c0 08	 add	 eax, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 727  :         _List_data._Mysize = _Local_added;

  001fd	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00200	83 c2 08	 add	 edx, 8

; 1864 :     for (; _UFirst != _ULast; ++_UFirst) {

  00203	89 45 e8	 mov	 DWORD PTR __UFirst$1$[ebp], eax

; 1808 :         ++_Last;

  00206	89 55 c4	 mov	 DWORD PTR __Backout$3[ebp+4], edx

; 1864 :     for (; _UFirst != _ULast; ++_UFirst) {

  00209	3b 45 e0	 cmp	 eax, DWORD PTR __Last$1$[ebp]
  0020c	0f 85 fe fe ff
	ff		 jne	 $LL31@Resize_rea
  00212	8b 5d dc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00215	8b 75 ec	 mov	 esi, DWORD PTR $T6[ebp]
$LN317@Resize_rea:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00218	53		 push	 ebx
  00219	52		 push	 edx
  0021a	52		 push	 edx
  0021b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00220	8b 03		 mov	 eax, DWORD PTR [ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00222	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00225	85 c0		 test	 eax, eax
  00227	74 3b		 je	 SHORT $LN268@Resize_rea

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00229	53		 push	 ebx
  0022a	ff 73 04	 push	 DWORD PTR [ebx+4]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >

; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00233	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00236	83 c4 0c	 add	 esp, 12			; 0000000cH
  00239	8b 03		 mov	 eax, DWORD PTR [ebx]
  0023b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0023d	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00240	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00246	72 12		 jb	 SHORT $LN279@Resize_rea

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00248	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0024b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0024e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00250	83 c0 fc	 add	 eax, -4			; fffffffcH
  00253	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00256	77 33		 ja	 SHORT $LN276@Resize_rea

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00258	8b c2		 mov	 eax, edx
$LN279@Resize_rea:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0025a	51		 push	 ecx
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00261	83 c4 08	 add	 esp, 8
$LN268@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00264	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00267	89 33		 mov	 DWORD PTR [ebx], esi
  00269	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]
  0026c	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0026f	8b 45 e4	 mov	 eax, DWORD PTR tv1234[ebp]
  00272	03 c6		 add	 eax, esi
  00274	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 1571 :     }

  00277	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0027a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00281	59		 pop	 ecx
  00282	5f		 pop	 edi
  00283	5e		 pop	 esi
  00284	5b		 pop	 ebx
  00285	8b e5		 mov	 esp, ebp
  00287	5d		 pop	 ebp
  00288	c2 08 00	 ret	 8
$LN276@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0028b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN328@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1539 :             _Xlength();

  00290	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Xlength
$LN329@Resize_rea:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00295	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN324@Resize_rea:
  0029a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$0:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR __Guard$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Reallocation_guard@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Reallocation_guard::~_Reallocation_guard
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$2:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR __Appended$2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$3:
  00018	8d 4d d4	 lea	 ecx, DWORD PTR __Newnode$5[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$4:
  00020	8d 4d cc	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
  00028	cc		 int	 3
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z:
  0002d	90		 npad	 1
  0002e	90		 npad	 1
  0002f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00033	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00036	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >, COMDAT
; _this$ = ecx

; 1168 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Alloc_cons

; 289  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Alloc_cons:

; 1169 :             _Al.deallocate(_Ptr, 1);
; 1170 :         }
; 1171 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 274  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 133  : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
  00005	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@

; 161  : 			for (auto v : m_kVct_pkData)

  0000b	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 11		 je	 SHORT $LN6@CDynamicPo
$LL7@CDynamicPo:

; 226  : 			::operator delete(pkData);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 161  : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4

; 226  : 			::operator delete(pkData);

  0001f	83 c4 04	 add	 esp, 4

; 161  : 			for (auto v : m_kVct_pkData)

  00022	3b f3		 cmp	 esi, ebx
  00024	75 ef		 jne	 SHORT $LL7@CDynamicPo
$LN6@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00026	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00029	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0002c	74 03		 je	 SHORT $LN11@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0002e	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN11@CDynamicPo:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00034	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00037	74 03		 je	 SHORT $LN15@CDynamicPo

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00039	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0003c	85 c0		 test	 eax, eax
  0003e	74 41		 je	 SHORT $LN23@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00040	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00043	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00045	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00048	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004e	72 12		 jb	 SHORT $LN42@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00050	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00053	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00056	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00058	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005e	77 6d		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00060	8b c2		 mov	 eax, edx
$LN42@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00062	51		 push	 ecx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00069	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00070	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00073	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2082 :             _Myend   = nullptr;

  0007a	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN23@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00081	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00084	85 c0		 test	 eax, eax
  00086	74 41		 je	 SHORT $LN52@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00090	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00096	72 12		 jb	 SHORT $LN71@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00098	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0009b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a6	77 25		 ja	 SHORT $LN68@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a8	8b c2		 mov	 eax, edx
$LN71@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000aa	51		 push	 ecx
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000bb	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2082 :             _Myend   = nullptr;

  000c2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN52@CDynamicPo:
  000c9	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 143  : 		}

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
$LN68@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@CDynamicPo:
  000d2	cc		 int	 3
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >, COMDAT

; 1094 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1095 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1096 :     using _Ty = typename _Alloc::value_type;
; 1097 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1098 :         for (; _First != _Last; ++_First) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	3b fb		 cmp	 edi, ebx
  0000d	74 39		 je	 SHORT $LN85@Destroy_ra
  0000f	56		 push	 esi
$LL4@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1508 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00010	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 324  :         _Head->_Prev->_Next = nullptr;

  00012	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0001d	85 c0		 test	 eax, eax
  0001f	74 13		 je	 SHORT $LN21@Destroy_ra
$LL22@Destroy_ra:

; 328  :             _Pnext = _Pnode->_Next;

  00021	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 0c		 push	 12			; 0000000cH
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0002e	8b c6		 mov	 eax, esi
  00030	85 f6		 test	 esi, esi
  00032	75 ed		 jne	 SHORT $LL22@Destroy_ra
$LN21@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00034	6a 0c		 push	 12			; 0000000cH
  00036	ff 37		 push	 DWORD PTR [edi]
  00038	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete

; 1095 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1096 :     using _Ty = typename _Alloc::value_type;
; 1097 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1098 :         for (; _First != _Last; ++_First) {

  0003d	83 c7 08	 add	 edi, 8

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8

; 1095 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1096 :     using _Ty = typename _Alloc::value_type;
; 1097 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1098 :         for (; _First != _Last; ++_First) {

  00043	3b fb		 cmp	 edi, ebx
  00045	75 c9		 jne	 SHORT $LL4@Destroy_ra
  00047	5e		 pop	 esi
$LN85@Destroy_ra:
  00048	5f		 pop	 edi

; 1099 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1100 :         }
; 1101 :     }
; 1102 : }

  00049	5b		 pop	 ebx
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
;	COMDAT ??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -40					; size = 4
_dwFrameIndex$1$ = -36					; size = 4
_FunObj$GSCopy$1$ = -32					; size = 4
$T1 = -28						; size = 12
$T2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_FunObj$ = 8						; size = 4
??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z PROC ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::ThreeSideRenderer>, COMDAT
; _this$ = ecx

; 25   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _FunObj$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	89 45 e0	 mov	 DWORD PTR _FunObj$GSCopy$1$[ebp], eax
  00019	57		 push	 edi

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  0001a	33 ff		 xor	 edi, edi
  0001c	89 5d d8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0001f	89 7d dc	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00022	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  00025	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00028	2b c1		 sub	 eax, ecx
  0002a	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 78 01 00
	00		 je	 $LN101@ForEachPar
  00035	56		 push	 esi
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@ForEachPar:

; 29   : 				STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00040	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00043	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 29   : 				STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00049	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00055	50		 push	 eax
  00056	6a 00		 push	 0
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1095 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0005f	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00062	8b 04 f8	 mov	 eax, DWORD PTR [eax+edi*8]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00065	8b 30		 mov	 esi, DWORD PTR [eax]
  00067	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 31   : 				for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  00069	0f 84 26 01 00
	00		 je	 $LN2@ForEachPar
  0006f	90		 npad	 1
$LL7@ForEachPar:

; 49   : 			if (m_pParticleProperty->m_bAttachFlag)

  00070	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]

; 32   : 				{
; 33   : 					if (!InFrustum(*itor))

  00073	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 49   : 			if (m_pParticleProperty->m_bAttachFlag)

  00076	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0007a	74 3a		 je	 SHORT $LN67@ForEachPar

; 50   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  0007c	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0007f	f3 0f 10 50 34	 movss	 xmm2, DWORD PTR [eax+52]
  00084	f3 0f 10 48 38	 movss	 xmm1, DWORD PTR [eax+56]
  00089	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  0008e	f3 0f 58 51 10	 addss	 xmm2, DWORD PTR [ecx+16]
  00093	f3 0f 58 49 14	 addss	 xmm1, DWORD PTR [ecx+20]
  00098	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 38   : 		y = b;

  0009d	f3 0f 11 55 f4	 movss	 DWORD PTR $T2[ebp+4], xmm2

; 39   : 		z = c;

  000a2	f3 0f 11 4d f8	 movss	 DWORD PTR $T2[ebp+8], xmm1
  000a7	f3 0f 11 45 f0	 movss	 DWORD PTR $T2[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 50   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000ac	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  000b1	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  000b4	eb 26		 jmp	 SHORT $LN107@ForEachPar
$LN67@ForEachPar:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 37   : 		x = a;

  000b6	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  000bb	f3 0f 11 45 e4	 movss	 DWORD PTR $T1[ebp], xmm0

; 38   : 		y = b;

  000c0	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  000c5	f3 0f 11 45 e8	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 39   : 		z = c;

  000ca	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  000cf	f3 0f 11 45 ec	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 56   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x,pInstance->m_v3Position.y,pInstance->m_v3Position.z),pInstance->GetRadiusApproximation())!=VS_OUTSIDE;

  000d4	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  000d9	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
$LN107@ForEachPar:

; 32   : 				{
; 33   : 					if (!InFrustum(*itor))

  000dc	51		 push	 ecx
  000dd	d9 1c 24	 fstp	 DWORD PTR [esp]
  000e0	50		 push	 eax
  000e1	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  000e6	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  000eb	83 f8 02	 cmp	 eax, 2
  000ee	0f 95 c0	 setne	 al
  000f1	84 c0		 test	 al, al
  000f3	0f 84 b3 00 00
	00		 je	 $LN106@ForEachPar
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 381  : 			pInstance->Transform(pmat);

  000f9	8b 45 e0	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 35   : 					FunObj(*itor);

  000fc	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 381  : 			pInstance->Transform(pmat);

  000ff	8b cb		 mov	 ecx, ebx
  00101	ff 30		 push	 DWORD PTR [eax]
  00103	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z ; CParticleInstance::Transform
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00108	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 382  : 			STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  0010e	8b cb		 mov	 ecx, ebx
  00110	6a 14		 push	 20			; 00000014H
  00112	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  00117	50		 push	 eax
  00118	6a 02		 push	 2
  0011a	6a 05		 push	 5
  0011c	8b cf		 mov	 ecx, edi
  0011e	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 383  : 			pInstance->Transform(pmat,D3DXToRadian(-60.0f));

  00123	8b 45 e0	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
  00126	51		 push	 ecx
  00127	c7 04 24 92 0a
	86 bf		 mov	 DWORD PTR [esp], -1081734510 ; bf860a92H
  0012e	8b cb		 mov	 ecx, ebx
  00130	ff 30		 push	 DWORD PTR [eax]
  00132	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z ; CParticleInstance::Transform
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00137	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 384  : 			STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  0013d	8b cb		 mov	 ecx, ebx
  0013f	6a 14		 push	 20			; 00000014H
  00141	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  00146	50		 push	 eax
  00147	6a 02		 push	 2
  00149	6a 05		 push	 5
  0014b	8b cf		 mov	 ecx, edi
  0014d	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 385  : 			pInstance->Transform(pmat,D3DXToRadian(+60.0f));

  00152	8b 45 e0	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
  00155	51		 push	 ecx
  00156	c7 04 24 92 0a
	86 3f		 mov	 DWORD PTR [esp], 1065749138 ; 3f860a92H
  0015d	8b cb		 mov	 ecx, ebx
  0015f	ff 30		 push	 DWORD PTR [eax]
  00161	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z ; CParticleInstance::Transform
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00166	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 386  : 			STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  0016c	8b cb		 mov	 ecx, ebx
  0016e	6a 14		 push	 20			; 00000014H
  00170	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  00175	50		 push	 eax
  00176	6a 02		 push	 2
  00178	6a 05		 push	 5
  0017a	8b cf		 mov	 ecx, edi
  0017c	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00181	8b 5d d8	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]

; 197  :         return this->_Ptr == _Right._Ptr;

  00184	8b 7d dc	 mov	 edi, DWORD PTR _dwFrameIndex$1$[ebp]

; 164  :         this->_Ptr = this->_Ptr->_Next;

  00187	8b 36		 mov	 esi, DWORD PTR [esi]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00189	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]

; 197  :         return this->_Ptr == _Right._Ptr;

  0018c	3b 34 f8	 cmp	 esi, DWORD PTR [eax+edi*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 31   : 				for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  0018f	0f 85 db fe ff
	ff		 jne	 $LL7@ForEachPar
$LN2@ForEachPar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00195	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  00198	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00199	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  0019c	2b c1		 sub	 eax, ecx
  0019e	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  001a1	89 7d dc	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], edi
  001a4	3b f8		 cmp	 edi, eax
  001a6	0f 82 94 fe ff
	ff		 jb	 $LL4@ForEachPar
$LN106@ForEachPar:
  001ac	5e		 pop	 esi
$LN101@ForEachPar:

; 36   : 				}
; 37   : 			}
; 38   : 		}

  001ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b0	5f		 pop	 edi
  001b1	33 cd		 xor	 ecx, ebp
  001b3	5b		 pop	 ebx
  001b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b9	8b e5		 mov	 esp, ebp
  001bb	5d		 pop	 ebp
  001bc	c2 04 00	 ret	 4
??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z ENDP ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::ThreeSideRenderer>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
;	COMDAT ??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -40					; size = 4
_dwFrameIndex$1$ = -36					; size = 4
_FunObj$GSCopy$1$ = -32					; size = 4
$T1 = -28						; size = 12
$T2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_FunObj$ = 8						; size = 4
??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z PROC ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::TwoSideRenderer>, COMDAT
; _this$ = ecx

; 25   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _FunObj$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	89 45 e0	 mov	 DWORD PTR _FunObj$GSCopy$1$[ebp], eax
  00019	57		 push	 edi

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  0001a	33 ff		 xor	 edi, edi
  0001c	89 5d d8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0001f	89 7d dc	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00022	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  00025	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00028	2b c1		 sub	 eax, ecx
  0002a	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 51 01 00
	00		 je	 $LN99@ForEachPar
  00035	56		 push	 esi
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@ForEachPar:

; 29   : 				STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00040	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00043	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 29   : 				STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00049	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00055	50		 push	 eax
  00056	6a 00		 push	 0
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1095 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0005f	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00062	8b 04 f8	 mov	 eax, DWORD PTR [eax+edi*8]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00065	8b 30		 mov	 esi, DWORD PTR [eax]
  00067	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 31   : 				for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  00069	0f 84 ff 00 00
	00		 je	 $LN2@ForEachPar
  0006f	90		 npad	 1
$LL7@ForEachPar:

; 49   : 			if (m_pParticleProperty->m_bAttachFlag)

  00070	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]

; 32   : 				{
; 33   : 					if (!InFrustum(*itor))

  00073	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 49   : 			if (m_pParticleProperty->m_bAttachFlag)

  00076	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0007a	74 3a		 je	 SHORT $LN67@ForEachPar

; 50   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  0007c	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0007f	f3 0f 10 50 34	 movss	 xmm2, DWORD PTR [eax+52]
  00084	f3 0f 10 48 38	 movss	 xmm1, DWORD PTR [eax+56]
  00089	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  0008e	f3 0f 58 51 10	 addss	 xmm2, DWORD PTR [ecx+16]
  00093	f3 0f 58 49 14	 addss	 xmm1, DWORD PTR [ecx+20]
  00098	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 38   : 		y = b;

  0009d	f3 0f 11 55 f4	 movss	 DWORD PTR $T2[ebp+4], xmm2

; 39   : 		z = c;

  000a2	f3 0f 11 4d f8	 movss	 DWORD PTR $T2[ebp+8], xmm1
  000a7	f3 0f 11 45 f0	 movss	 DWORD PTR $T2[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 50   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000ac	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  000b1	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  000b4	eb 26		 jmp	 SHORT $LN105@ForEachPar
$LN67@ForEachPar:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 37   : 		x = a;

  000b6	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  000bb	f3 0f 11 45 e4	 movss	 DWORD PTR $T1[ebp], xmm0

; 38   : 		y = b;

  000c0	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  000c5	f3 0f 11 45 e8	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 39   : 		z = c;

  000ca	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  000cf	f3 0f 11 45 ec	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 56   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x,pInstance->m_v3Position.y,pInstance->m_v3Position.z),pInstance->GetRadiusApproximation())!=VS_OUTSIDE;

  000d4	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  000d9	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
$LN105@ForEachPar:

; 32   : 				{
; 33   : 					if (!InFrustum(*itor))

  000dc	51		 push	 ecx
  000dd	d9 1c 24	 fstp	 DWORD PTR [esp]
  000e0	50		 push	 eax
  000e1	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  000e6	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  000eb	83 f8 02	 cmp	 eax, 2
  000ee	0f 95 c0	 setne	 al
  000f1	84 c0		 test	 al, al
  000f3	0f 84 8c 00 00
	00		 je	 $LN104@ForEachPar
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 363  : 			pInstance->Transform(pmat,D3DXToRadian(-30.0f));

  000f9	8b 45 e0	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 35   : 					FunObj(*itor);

  000fc	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 363  : 			pInstance->Transform(pmat,D3DXToRadian(-30.0f));

  000ff	51		 push	 ecx
  00100	c7 04 24 92 0a
	06 bf		 mov	 DWORD PTR [esp], -1090123118 ; bf060a92H
  00107	8b cb		 mov	 ecx, ebx
  00109	ff 30		 push	 DWORD PTR [eax]
  0010b	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z ; CParticleInstance::Transform
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00110	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 364  : 			STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  00116	8b cb		 mov	 ecx, ebx
  00118	6a 14		 push	 20			; 00000014H
  0011a	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  0011f	50		 push	 eax
  00120	6a 02		 push	 2
  00122	6a 05		 push	 5
  00124	8b cf		 mov	 ecx, edi
  00126	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 365  : 
; 366  : 			pInstance->Transform(pmat,D3DXToRadian(+30.0f));

  0012b	8b 45 e0	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
  0012e	51		 push	 ecx
  0012f	c7 04 24 92 0a
	06 3f		 mov	 DWORD PTR [esp], 1057360530 ; 3f060a92H
  00136	8b cb		 mov	 ecx, ebx
  00138	ff 30		 push	 DWORD PTR [eax]
  0013a	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z ; CParticleInstance::Transform
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  0013f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 367  : 			STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  00145	8b cb		 mov	 ecx, ebx
  00147	6a 14		 push	 20			; 00000014H
  00149	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  0014e	50		 push	 eax
  0014f	6a 02		 push	 2
  00151	6a 05		 push	 5
  00153	8b cf		 mov	 ecx, edi
  00155	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0015a	8b 5d d8	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]

; 197  :         return this->_Ptr == _Right._Ptr;

  0015d	8b 7d dc	 mov	 edi, DWORD PTR _dwFrameIndex$1$[ebp]

; 164  :         this->_Ptr = this->_Ptr->_Next;

  00160	8b 36		 mov	 esi, DWORD PTR [esi]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00162	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]

; 197  :         return this->_Ptr == _Right._Ptr;

  00165	3b 34 f8	 cmp	 esi, DWORD PTR [eax+edi*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 31   : 				for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  00168	0f 85 02 ff ff
	ff		 jne	 $LL7@ForEachPar
$LN2@ForEachPar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0016e	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  00171	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00172	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00175	2b c1		 sub	 eax, ecx
  00177	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  0017a	89 7d dc	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], edi
  0017d	3b f8		 cmp	 edi, eax
  0017f	0f 82 bb fe ff
	ff		 jb	 $LL4@ForEachPar
$LN104@ForEachPar:
  00185	5e		 pop	 esi
$LN99@ForEachPar:

; 36   : 				}
; 37   : 			}
; 38   : 		}

  00186	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00189	5f		 pop	 edi
  0018a	33 cd		 xor	 ecx, ebp
  0018c	5b		 pop	 ebx
  0018d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00192	8b e5		 mov	 esp, ebp
  00194	5d		 pop	 ebp
  00195	c2 04 00	 ret	 4
??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z ENDP ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::TwoSideRenderer>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
;	COMDAT ??$ForEachParticleRendering@UAttachRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUAttachRenderer@NParticleRenderer@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -40					; size = 4
_FunObj$GSCopy$1$ = -36					; size = 4
_dwFrameIndex$1$ = -32					; size = 4
$T1 = -28						; size = 12
$T2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_FunObj$ = 8						; size = 4
??$ForEachParticleRendering@UAttachRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUAttachRenderer@NParticleRenderer@@@Z PROC ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::AttachRenderer>, COMDAT
; _this$ = ecx

; 25   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _FunObj$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	89 45 dc	 mov	 DWORD PTR _FunObj$GSCopy$1$[ebp], eax
  00019	57		 push	 edi

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  0001a	33 ff		 xor	 edi, edi
  0001c	89 5d d8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0001f	89 7d e0	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00022	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  00025	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00028	2b c1		 sub	 eax, ecx
  0002a	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 16 01 00
	00		 je	 $LN97@ForEachPar
  00035	56		 push	 esi
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@ForEachPar:

; 29   : 				STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00040	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00043	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 29   : 				STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00049	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00055	50		 push	 eax
  00056	6a 00		 push	 0
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1095 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0005f	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00062	8b 04 f8	 mov	 eax, DWORD PTR [eax+edi*8]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00065	8b 30		 mov	 esi, DWORD PTR [eax]
  00067	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 31   : 				for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  00069	0f 84 c4 00 00
	00		 je	 $LN2@ForEachPar
  0006f	90		 npad	 1
$LL7@ForEachPar:

; 49   : 			if (m_pParticleProperty->m_bAttachFlag)

  00070	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]

; 32   : 				{
; 33   : 					if (!InFrustum(*itor))

  00073	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 49   : 			if (m_pParticleProperty->m_bAttachFlag)

  00076	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0007a	74 3a		 je	 SHORT $LN67@ForEachPar

; 50   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  0007c	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0007f	f3 0f 10 50 34	 movss	 xmm2, DWORD PTR [eax+52]
  00084	f3 0f 10 48 38	 movss	 xmm1, DWORD PTR [eax+56]
  00089	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  0008e	f3 0f 58 51 10	 addss	 xmm2, DWORD PTR [ecx+16]
  00093	f3 0f 58 49 14	 addss	 xmm1, DWORD PTR [ecx+20]
  00098	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 38   : 		y = b;

  0009d	f3 0f 11 55 f4	 movss	 DWORD PTR $T2[ebp+4], xmm2

; 39   : 		z = c;

  000a2	f3 0f 11 4d f8	 movss	 DWORD PTR $T2[ebp+8], xmm1
  000a7	f3 0f 11 45 f0	 movss	 DWORD PTR $T2[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 50   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000ac	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  000b1	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  000b4	eb 26		 jmp	 SHORT $LN103@ForEachPar
$LN67@ForEachPar:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 37   : 		x = a;

  000b6	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  000bb	f3 0f 11 45 e4	 movss	 DWORD PTR $T1[ebp], xmm0

; 38   : 		y = b;

  000c0	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  000c5	f3 0f 11 45 e8	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 39   : 		z = c;

  000ca	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  000cf	f3 0f 11 45 ec	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 56   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x,pInstance->m_v3Position.y,pInstance->m_v3Position.z),pInstance->GetRadiusApproximation())!=VS_OUTSIDE;

  000d4	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  000d9	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
$LN103@ForEachPar:

; 32   : 				{
; 33   : 					if (!InFrustum(*itor))

  000dc	51		 push	 ecx
  000dd	d9 1c 24	 fstp	 DWORD PTR [esp]
  000e0	50		 push	 eax
  000e1	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  000e6	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  000eb	83 f8 02	 cmp	 eax, 2
  000ee	0f 95 c0	 setne	 al
  000f1	84 c0		 test	 al, al
  000f3	74 55		 je	 SHORT $LN102@ForEachPar
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 408  : 			pInstance->Transform(pmat);

  000f5	8b 45 dc	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 35   : 					FunObj(*itor);

  000f8	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 408  : 			pInstance->Transform(pmat);

  000fb	8b cf		 mov	 ecx, edi
  000fd	ff 30		 push	 DWORD PTR [eax]
  000ff	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z ; CParticleInstance::Transform
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00104	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 409  : 			STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  0010a	8b cf		 mov	 ecx, edi
  0010c	6a 14		 push	 20			; 00000014H
  0010e	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  00113	50		 push	 eax
  00114	6a 02		 push	 2
  00116	6a 05		 push	 5
  00118	8b cb		 mov	 ecx, ebx
  0011a	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0011f	8b 5d d8	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]

; 197  :         return this->_Ptr == _Right._Ptr;

  00122	8b 7d e0	 mov	 edi, DWORD PTR _dwFrameIndex$1$[ebp]

; 164  :         this->_Ptr = this->_Ptr->_Next;

  00125	8b 36		 mov	 esi, DWORD PTR [esi]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00127	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]

; 197  :         return this->_Ptr == _Right._Ptr;

  0012a	3b 34 f8	 cmp	 esi, DWORD PTR [eax+edi*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 31   : 				for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  0012d	0f 85 3d ff ff
	ff		 jne	 $LL7@ForEachPar
$LN2@ForEachPar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00133	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  00136	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00137	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  0013a	2b c1		 sub	 eax, ecx
  0013c	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  0013f	89 7d e0	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], edi
  00142	3b f8		 cmp	 edi, eax
  00144	0f 82 f6 fe ff
	ff		 jb	 $LL4@ForEachPar
$LN102@ForEachPar:
  0014a	5e		 pop	 esi
$LN97@ForEachPar:

; 36   : 				}
; 37   : 			}
; 38   : 		}

  0014b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014e	5f		 pop	 edi
  0014f	33 cd		 xor	 ecx, ebp
  00151	5b		 pop	 ebx
  00152	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c2 04 00	 ret	 4
??$ForEachParticleRendering@UAttachRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUAttachRenderer@NParticleRenderer@@@Z ENDP ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::AttachRenderer>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h
;	COMDAT ??$ForEachParticleRendering@UNormalRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUNormalRenderer@NParticleRenderer@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -36					; size = 4
_dwFrameIndex$1$ = -32					; size = 4
$T1 = -28						; size = 12
$T2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_FunObj$ = 8						; size = 4
??$ForEachParticleRendering@UNormalRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUNormalRenderer@NParticleRenderer@@@Z PROC ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::NormalRenderer>, COMDAT
; _this$ = ecx

; 25   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx
  00013	57		 push	 edi

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  00014	33 ff		 xor	 edi, edi
  00016	89 5d dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00019	89 7d e0	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001c	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  0001f	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00022	2b c1		 sub	 eax, ecx
  00024	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  00027	85 c0		 test	 eax, eax
  00029	0f 84 09 01 00
	00		 je	 $LN97@ForEachPar
  0002f	56		 push	 esi
$LL4@ForEachPar:

; 29   : 				STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00030	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00033	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 29   : 				STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00039	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0003e	8b c8		 mov	 ecx, eax
  00040	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture8@@XZ ; CGraphicTexture::GetD3DTexture
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1095 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0004f	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00052	8b 04 f8	 mov	 eax, DWORD PTR [eax+edi*8]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00055	8b 30		 mov	 esi, DWORD PTR [eax]
  00057	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 31   : 				for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  00059	0f 84 c1 00 00
	00		 je	 $LN2@ForEachPar
  0005f	90		 npad	 1
$LL7@ForEachPar:

; 49   : 			if (m_pParticleProperty->m_bAttachFlag)

  00060	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]

; 32   : 				{
; 33   : 					if (!InFrustum(*itor))

  00063	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 49   : 			if (m_pParticleProperty->m_bAttachFlag)

  00066	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0006a	74 3a		 je	 SHORT $LN67@ForEachPar

; 50   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  0006c	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0006f	f3 0f 10 50 34	 movss	 xmm2, DWORD PTR [eax+52]
  00074	f3 0f 10 48 38	 movss	 xmm1, DWORD PTR [eax+56]
  00079	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  0007e	f3 0f 58 51 10	 addss	 xmm2, DWORD PTR [ecx+16]
  00083	f3 0f 58 49 14	 addss	 xmm1, DWORD PTR [ecx+20]
  00088	f3 0f 58 41 0c	 addss	 xmm0, DWORD PTR [ecx+12]
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 38   : 		y = b;

  0008d	f3 0f 11 55 f4	 movss	 DWORD PTR $T2[ebp+4], xmm2

; 39   : 		z = c;

  00092	f3 0f 11 4d f8	 movss	 DWORD PTR $T2[ebp+8], xmm1
  00097	f3 0f 11 45 f0	 movss	 DWORD PTR $T2[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 50   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  0009c	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  000a1	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  000a4	eb 26		 jmp	 SHORT $LN103@ForEachPar
$LN67@ForEachPar:
; File C:\Marty 5.5\Src-Client\Client\SphereLib\vector.h

; 37   : 		x = a;

  000a6	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  000ab	f3 0f 11 45 e4	 movss	 DWORD PTR $T1[ebp], xmm0

; 38   : 		y = b;

  000b0	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  000b5	f3 0f 11 45 e8	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 39   : 		z = c;

  000ba	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  000bf	f3 0f 11 45 ec	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 56   : 				return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x,pInstance->m_v3Position.y,pInstance->m_v3Position.z),pInstance->GetRadiusApproximation())!=VS_OUTSIDE;

  000c4	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  000c9	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
$LN103@ForEachPar:

; 32   : 				{
; 33   : 					if (!InFrustum(*itor))

  000cc	51		 push	 ecx
  000cd	d9 1c 24	 fstp	 DWORD PTR [esp]
  000d0	50		 push	 eax
  000d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  000d6	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  000db	83 f8 02	 cmp	 eax, 2
  000de	0f 95 c0	 setne	 al
  000e1	84 c0		 test	 al, al
  000e3	74 52		 je	 SHORT $LN102@ForEachPar

; 34   : 						return;
; 35   : 					FunObj(*itor);

  000e5	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 394  : 			pInstance->Transform();

  000e8	8b cf		 mov	 ecx, edi
  000ea	6a 00		 push	 0
  000ec	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z ; CParticleInstance::Transform
; File C:\Marty 5.5\Src-Client\Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  000f1	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 395  : 			STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  000f7	8b cf		 mov	 ecx, edi
  000f9	6a 14		 push	 20			; 00000014H
  000fb	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  00100	50		 push	 eax
  00101	6a 02		 push	 2
  00103	6a 05		 push	 5
  00105	8b cb		 mov	 ecx, ebx
  00107	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0010c	8b 5d dc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]

; 197  :         return this->_Ptr == _Right._Ptr;

  0010f	8b 7d e0	 mov	 edi, DWORD PTR _dwFrameIndex$1$[ebp]

; 164  :         this->_Ptr = this->_Ptr->_Next;

  00112	8b 36		 mov	 esi, DWORD PTR [esi]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00114	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]

; 197  :         return this->_Ptr == _Right._Ptr;

  00117	3b 34 f8	 cmp	 esi, DWORD PTR [eax+edi*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 31   : 				for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  0011a	0f 85 40 ff ff
	ff		 jne	 $LL7@ForEachPar
$LN2@ForEachPar:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00120	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  00123	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00124	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00127	2b c1		 sub	 eax, ecx
  00129	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.h

; 27   : 			for(dwFrameIndex=0; dwFrameIndex<m_kVct_pkImgInst.size(); dwFrameIndex++)

  0012c	89 7d e0	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], edi
  0012f	3b f8		 cmp	 edi, eax
  00131	0f 82 f9 fe ff
	ff		 jb	 $LL4@ForEachPar
$LN102@ForEachPar:
  00137	5e		 pop	 esi
$LN97@ForEachPar:

; 36   : 				}
; 37   : 			}
; 38   : 		}

  00138	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013b	5f		 pop	 edi
  0013c	33 cd		 xor	 ecx, ebp
  0013e	5b		 pop	 ebx
  0013f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 04 00	 ret	 4
??$ForEachParticleRendering@UNormalRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUNormalRenderer@NParticleRenderer@@@Z ENDP ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::NormalRenderer>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CParticleSystemInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A ; CParticleSystemInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ ; CDynamicPool<CParticleSystemInstance>::~CDynamicPool<CParticleSystemInstance>
??__F?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CParticleSystemInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ??__E?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CParticleSystemInstance::ms_kPool'', COMDAT

; 8    : CDynamicPool<CParticleSystemInstance>	CParticleSystemInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CParticleSystemInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CParticleSystemInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CParticleSystemInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ ; CDynamicPool<CParticleSystemInstance>::~CDynamicPool<CParticleSystemInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CParticleSystemInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ PROC ; CDynamicPool<CParticleSystemInstance>::~CDynamicPool<CParticleSystemInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCParticleSystemInstance@@@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN8@CDynamicPo:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN37@CDynamicPo

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN56@CDynamicPo

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN53@CDynamicPo

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN56@CDynamicPo:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2082 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN37@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 26   : 		}

  0009a	c3		 ret	 0
$LN53@CDynamicPo:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN67@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ ENDP ; CDynamicPool<CParticleSystemInstance>::~CDynamicPool<CParticleSystemInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCParticleSystemInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCParticleSystemInstance@@UAEPAXI@Z PROC		; CParticleSystemInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CParticleSystemInstance@@UAE@XZ ; CParticleSystemInstance::~CParticleSystemInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 54		 push	 84			; 00000054H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCParticleSystemInstance@@UAEPAXI@Z ENDP		; CParticleSystemInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2064 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::~vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 820  :     }

  0004a	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00050	cc		 int	 3
??1?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::~vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 4f		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  00009	56		 push	 esi
  0000a	ff 76 04	 push	 DWORD PTR [esi+4]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >

; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001d	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00020	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00026	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00028	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00030	83 c0 fc	 add	 eax, -4			; fffffffcH
  00033	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00036	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00038	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003a	51		 push	 ecx
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00047	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00051	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00058	5e		 pop	 esi

; 820  :     }

  00059	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  0005f	cc		 int	 3
??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?OnRender@CParticleSystemInstance@@MAEXXZ
_TEXT	SEGMENT
_obj$1 = -8						; size = 4
_obj$2 = -8						; size = 4
_obj$3 = -8						; size = 4
_obj$4 = -8						; size = 4
_obj$5 = -8						; size = 4
_obj$6 = -1						; size = 1
?OnRender@CParticleSystemInstance@@MAEXXZ PROC		; CParticleSystemInstance::OnRender, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 416  : 	CScreen::Identity();

  00009	e8 00 00 00 00	 call	 ?Identity@CScreen@@SAXXZ ; CScreen::Identity

; 417  : 	STATEMANAGER.SetRenderState(D3DRS_SRCBLEND, m_pParticleProperty->m_bySrcBlendType);

  0000e	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00011	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00017	0f b6 40 10	 movzx	 eax, BYTE PTR [eax+16]
  0001b	50		 push	 eax
  0001c	6a 13		 push	 19			; 00000013H
  0001e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 418  : 	STATEMANAGER.SetRenderState(D3DRS_DESTBLEND, m_pParticleProperty->m_byDestBlendType);

  00023	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0002c	0f b6 40 11	 movzx	 eax, BYTE PTR [eax+17]
  00030	50		 push	 eax
  00031	6a 14		 push	 20			; 00000014H
  00033	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 419  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, m_pParticleProperty->m_byColorOperationType);

  00038	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00041	0f b6 40 12	 movzx	 eax, BYTE PTR [eax+18]
  00045	50		 push	 eax
  00046	6a 01		 push	 1
  00048	6a 00		 push	 0
  0004a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 420  : 	if (m_pParticleProperty->m_byBillboardType < BILLBOARD_TYPE_2FACE)

  0004f	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00052	8a 48 13	 mov	 cl, BYTE PTR [eax+19]
  00055	80 f9 04	 cmp	 cl, 4
  00058	73 2a		 jae	 SHORT $LN2@OnRender

; 421  : 	{
; 422  : 		if (!m_pParticleProperty->m_bAttachFlag)

  0005a	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0005e	8b ce		 mov	 ecx, esi
  00060	75 0e		 jne	 SHORT $LN4@OnRender

; 423  : 		{
; 424  : 			auto obj = NParticleRenderer::NormalRenderer();
; 425  : 			ForEachParticleRendering(obj);

  00062	8d 45 ff	 lea	 eax, DWORD PTR _obj$6[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UNormalRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUNormalRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::NormalRenderer>
  0006b	5e		 pop	 esi

; 449  : 		{
; 450  : 			auto obj = NParticleRenderer::ThreeSideRenderer();
; 451  : 			ForEachParticleRendering(obj);
; 452  : 		}
; 453  : 		else
; 454  : 		{
; 455  : 			auto obj = NParticleRenderer::ThreeSideRenderer(mc_pmatLocal);
; 456  : 			ForEachParticleRendering(obj);
; 457  : 		}
; 458  : 	}
; 459  : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
$LN4@OnRender:

; 402  : 			: pmat(pmat)

  00070	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00073	89 45 f8	 mov	 DWORD PTR _obj$1[ebp], eax

; 426  : 		}
; 427  : 		else
; 428  : 		{
; 429  : 			auto obj = NParticleRenderer::AttachRenderer(mc_pmatLocal);
; 430  : 			ForEachParticleRendering(obj);

  00076	8d 45 f8	 lea	 eax, DWORD PTR _obj$1[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UAttachRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUAttachRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::AttachRenderer>
  0007f	5e		 pop	 esi

; 449  : 		{
; 450  : 			auto obj = NParticleRenderer::ThreeSideRenderer();
; 451  : 			ForEachParticleRendering(obj);
; 452  : 		}
; 453  : 		else
; 454  : 		{
; 455  : 			auto obj = NParticleRenderer::ThreeSideRenderer(mc_pmatLocal);
; 456  : 			ForEachParticleRendering(obj);
; 457  : 		}
; 458  : 	}
; 459  : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN2@OnRender:

; 431  : 		}
; 432  : 	}
; 433  : 	else if (m_pParticleProperty->m_byBillboardType == BILLBOARD_TYPE_2FACE)

  00084	75 31		 jne	 SHORT $LN6@OnRender

; 434  : 	{
; 435  : 		if (!m_pParticleProperty->m_bAttachFlag)

  00086	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0008a	8b ce		 mov	 ecx, esi
  0008c	75 15		 jne	 SHORT $LN8@OnRender

; 436  : 		{
; 437  : 			auto obj = NParticleRenderer::TwoSideRenderer();
; 438  : 			ForEachParticleRendering(obj);

  0008e	8d 45 f8	 lea	 eax, DWORD PTR _obj$2[ebp]

; 357  : 			: pmat(pmat)

  00091	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _obj$2[ebp], 0

; 436  : 		{
; 437  : 			auto obj = NParticleRenderer::TwoSideRenderer();
; 438  : 			ForEachParticleRendering(obj);

  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::TwoSideRenderer>
  0009e	5e		 pop	 esi

; 449  : 		{
; 450  : 			auto obj = NParticleRenderer::ThreeSideRenderer();
; 451  : 			ForEachParticleRendering(obj);
; 452  : 		}
; 453  : 		else
; 454  : 		{
; 455  : 			auto obj = NParticleRenderer::ThreeSideRenderer(mc_pmatLocal);
; 456  : 			ForEachParticleRendering(obj);
; 457  : 		}
; 458  : 	}
; 459  : }

  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
$LN8@OnRender:

; 357  : 			: pmat(pmat)

  000a3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a6	89 45 f8	 mov	 DWORD PTR _obj$3[ebp], eax

; 439  : 		}
; 440  : 		else
; 441  : 		{
; 442  : 			auto obj = NParticleRenderer::TwoSideRenderer(mc_pmatLocal);
; 443  : 			ForEachParticleRendering(obj);

  000a9	8d 45 f8	 lea	 eax, DWORD PTR _obj$3[ebp]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::TwoSideRenderer>
  000b2	5e		 pop	 esi

; 449  : 		{
; 450  : 			auto obj = NParticleRenderer::ThreeSideRenderer();
; 451  : 			ForEachParticleRendering(obj);
; 452  : 		}
; 453  : 		else
; 454  : 		{
; 455  : 			auto obj = NParticleRenderer::ThreeSideRenderer(mc_pmatLocal);
; 456  : 			ForEachParticleRendering(obj);
; 457  : 		}
; 458  : 	}
; 459  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
$LN6@OnRender:

; 444  : 		}
; 445  : 	}
; 446  : 	else if (m_pParticleProperty->m_byBillboardType == BILLBOARD_TYPE_3FACE)

  000b7	80 f9 05	 cmp	 cl, 5
  000ba	75 2c		 jne	 SHORT $LN12@OnRender

; 447  : 	{
; 448  : 		if (!m_pParticleProperty->m_bAttachFlag)

  000bc	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  000c0	8b ce		 mov	 ecx, esi
  000c2	75 15		 jne	 SHORT $LN11@OnRender

; 449  : 		{
; 450  : 			auto obj = NParticleRenderer::ThreeSideRenderer();
; 451  : 			ForEachParticleRendering(obj);
; 452  : 		}
; 453  : 		else
; 454  : 		{
; 455  : 			auto obj = NParticleRenderer::ThreeSideRenderer(mc_pmatLocal);
; 456  : 			ForEachParticleRendering(obj);
; 457  : 		}
; 458  : 	}
; 459  : }

  000c4	8d 45 f8	 lea	 eax, DWORD PTR _obj$5[ebp]

; 375  : 			: pmat(pmat)

  000c7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _obj$4[ebp], 0

; 449  : 		{
; 450  : 			auto obj = NParticleRenderer::ThreeSideRenderer();
; 451  : 			ForEachParticleRendering(obj);
; 452  : 		}
; 453  : 		else
; 454  : 		{
; 455  : 			auto obj = NParticleRenderer::ThreeSideRenderer(mc_pmatLocal);
; 456  : 			ForEachParticleRendering(obj);
; 457  : 		}
; 458  : 	}
; 459  : }

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::ThreeSideRenderer>
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
$LN11@OnRender:

; 375  : 			: pmat(pmat)

  000d9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000dc	89 45 f8	 mov	 DWORD PTR _obj$5[ebp], eax

; 449  : 		{
; 450  : 			auto obj = NParticleRenderer::ThreeSideRenderer();
; 451  : 			ForEachParticleRendering(obj);
; 452  : 		}
; 453  : 		else
; 454  : 		{
; 455  : 			auto obj = NParticleRenderer::ThreeSideRenderer(mc_pmatLocal);
; 456  : 			ForEachParticleRendering(obj);
; 457  : 		}
; 458  : 	}
; 459  : }

  000df	8d 45 f8	 lea	 eax, DWORD PTR _obj$5[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::ThreeSideRenderer>
$LN12@OnRender:
  000e8	5e		 pop	 esi
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
?OnRender@CParticleSystemInstance@@MAEXXZ ENDP		; CParticleSystemInstance::OnRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?OnUpdate@CParticleSystemInstance@@MAE_NM@Z
_TEXT	SEGMENT
__First$1$ = -56					; size = 4
_fAngularVelocity$ = -52				; size = 4
_dwFrameCount$1$ = -48					; size = 4
_pInstance$1$ = -44					; size = 4
tv1681 = -44						; size = 4
_dwFrameIndex$2$ = -40					; size = 4
__Where$1$ = -40					; size = 4
$T2 = -40						; size = 4
_dwFrameIndex$1$ = -36					; size = 4
tv1642 = -36						; size = 4
_bMakeParticle$1$ = -29					; size = 1
_d3dd$3 = -28						; size = 12
__Op$4 = -24						; size = 8
__Right_head$1$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fElapsedTime$ = 8					; size = 4
?OnUpdate@CParticleSystemInstance@@MAE_NM@Z PROC	; CParticleSystemInstance::OnUpdate, COMDAT
; _this$ = ecx

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx

; 278  : 	bool bMakeParticle = true;
; 279  : 
; 280  : 	/////
; 281  : 
; 282  : 	if (m_fLocalTime >= m_pEmitterProperty->GetCycleLength())

  0002d	8b 7b 50	 mov	 edi, DWORD PTR [ebx+80]
  00030	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  00035	c6 45 e3 01	 mov	 BYTE PTR _bMakeParticle$1$[ebp], 1
  00039	0f 2f 47 08	 comiss	 xmm0, DWORD PTR [edi+8]
  0003d	72 4e		 jb	 SHORT $LN15@OnUpdate

; 283  : 	{
; 284  : 		if (m_pEmitterProperty->isCycleLoop() && --m_iLoopCount!=0)

  0003f	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
  00043	8d 4b 2c	 lea	 ecx, DWORD PTR [ebx+44]
  00046	74 1f		 je	 SHORT $LN343@OnUpdate
  00048	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004a	83 c0 ff	 add	 eax, -1
  0004d	89 01		 mov	 DWORD PTR [ecx], eax
  0004f	74 16		 je	 SHORT $LN343@OnUpdate

; 285  : 		{
; 286  : 			if (m_iLoopCount<0)

  00051	85 c0		 test	 eax, eax
  00053	79 06		 jns	 SHORT $LN14@OnUpdate

; 287  : 				m_iLoopCount = 0;

  00055	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN14@OnUpdate:

; 288  : 			m_fLocalTime = m_fLocalTime - m_pEmitterProperty->GetCycleLength();

  0005b	f3 0f 5c 47 08	 subss	 xmm0, DWORD PTR [edi+8]
  00060	f3 0f 11 43 0c	 movss	 DWORD PTR [ebx+12], xmm0

; 289  : 		}

  00065	eb 26		 jmp	 SHORT $LN15@OnUpdate
$LN343@OnUpdate:

; 290  : 		else
; 291  : 		{
; 292  : 			bMakeParticle = false;
; 293  : 			m_iLoopCount=1;

  00067	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1

; 294  : 			if (GetEmissionCount()==0)

  0006d	8b cb		 mov	 ecx, ebx
  0006f	c6 45 e3 00	 mov	 BYTE PTR _bMakeParticle$1$[ebp], 0
  00073	f3 0f 11 45 d8	 movss	 DWORD PTR $T2[ebp], xmm0
  00078	e8 00 00 00 00	 call	 ?GetEmissionCount@CParticleSystemInstance@@QAEKXZ ; CParticleSystemInstance::GetEmissionCount
  0007d	85 c0		 test	 eax, eax
  0007f	75 07		 jne	 SHORT $LN350@OnUpdate

; 295  : 				return false;

  00081	32 c0		 xor	 al, al
  00083	e9 96 02 00 00	 jmp	 $LN1@OnUpdate
$LN350@OnUpdate:

; 294  : 			if (GetEmissionCount()==0)

  00088	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR $T2[ebp]
$LN15@OnUpdate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  0008d	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00090	8b 70 74	 mov	 esi, DWORD PTR [eax+116]
  00093	2b 70 70	 sub	 esi, DWORD PTR [eax+112]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 305  : 	m_pEmitterProperty->GetEmittingAngularVelocity(m_fLocalTime,&fAngularVelocity);

  00096	8d 45 cc	 lea	 eax, DWORD PTR _fAngularVelocity$[ebp]
  00099	50		 push	 eax
  0009a	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0009b	c1 fe 02	 sar	 esi, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 305  : 	m_pEmitterProperty->GetEmittingAngularVelocity(m_fLocalTime,&fAngularVelocity);

  0009e	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000a0	89 75 d0	 mov	 DWORD PTR _dwFrameCount$1$[ebp], esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 305  : 	m_pEmitterProperty->GetEmittingAngularVelocity(m_fLocalTime,&fAngularVelocity);

  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	e8 00 00 00 00	 call	 ?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingAngularVelocity

; 306  : 
; 307  : 	if (fAngularVelocity && !m_pParticleProperty->m_bAttachFlag)

  000ad	f3 0f 10 4d cc	 movss	 xmm1, DWORD PTR _fAngularVelocity$[ebp]
  000b2	0f 57 c0	 xorps	 xmm0, xmm0
  000b5	0f 2e c8	 ucomiss xmm1, xmm0
  000b8	9f		 lahf
  000b9	f6 c4 44	 test	 ah, 68			; 00000044H
  000bc	7b 2e		 jnp	 SHORT $LN16@OnUpdate
  000be	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]
  000c1	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  000c5	75 25		 jne	 SHORT $LN16@OnUpdate

; 310  : 		D3DXVec3TransformNormal(&m_pParticleProperty->m_v3ZAxis, &d3dd, mc_pmatLocal);

  000c7	ff 73 04	 push	 DWORD PTR [ebx+4]
  000ca	8d 4d e4	 lea	 ecx, DWORD PTR _d3dd$3[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  000cd	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _d3dd$3[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 310  : 		D3DXVec3TransformNormal(&m_pParticleProperty->m_v3ZAxis, &d3dd, mc_pmatLocal);

  000d4	51		 push	 ecx
  000d5	83 c0 7c	 add	 eax, 124		; 0000007cH
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 181  :     y = fy;

  000d8	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _d3dd$3[ebp+4], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 310  : 		D3DXVec3TransformNormal(&m_pParticleProperty->m_v3ZAxis, &d3dd, mc_pmatLocal);

  000df	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 182  :     z = fz;

  000e0	c7 45 ec 00 00
	80 3f		 mov	 DWORD PTR _d3dd$3[ebp+8], 1065353216 ; 3f800000H
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 310  : 		D3DXVec3TransformNormal(&m_pParticleProperty->m_v3ZAxis, &d3dd, mc_pmatLocal);

  000e7	e8 00 00 00 00	 call	 _D3DXVec3TransformNormal@12
$LN16@OnUpdate:

; 311  : 	}
; 312  : 
; 313  : 	for (dwFrameIndex = 0; dwFrameIndex < dwFrameCount; dwFrameIndex++)

  000ec	33 ff		 xor	 edi, edi
  000ee	89 7d dc	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], edi
  000f1	85 f6		 test	 esi, esi
  000f3	0f 8e 2d 01 00
	00		 jle	 $LN344@OnUpdate
  000f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@OnUpdate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1095 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00100	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00103	8b 04 f8	 mov	 eax, DWORD PTR [eax+edi*8]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00106	8b 30		 mov	 esi, DWORD PTR [eax]
  00108	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 316  : 		for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end();)

  0010a	0f 84 07 01 00
	00		 je	 $LN2@OnUpdate
$LL7@OnUpdate:

; 317  : 		{
; 318  : 			CParticleInstance * pInstance = *itor;
; 319  : 
; 320  : 			if (!pInstance->Update(fElapsedTime,fAngularVelocity))

  00110	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _fAngularVelocity$[ebp]
  00115	83 ec 08	 sub	 esp, 8
  00118	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0011b	8b c8		 mov	 ecx, eax
  0011d	89 45 d4	 mov	 DWORD PTR _pInstance$1$[ebp], eax
  00120	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00126	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  0012b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00130	e8 00 00 00 00	 call	 ?Update@CParticleInstance@@QAEHMM@Z ; CParticleInstance::Update
  00135	85 c0		 test	 eax, eax
  00137	75 39		 jne	 SHORT $LN17@OnUpdate

; 321  : 			{
; 322  : 				pInstance->DeleteThis();

  00139	8b 4d d4	 mov	 ecx, DWORD PTR _pInstance$1$[ebp]
  0013c	e8 00 00 00 00	 call	 ?DeleteThis@CParticleInstance@@QAEXXZ ; CParticleInstance::DeleteThis
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 395  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00141	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1421 :         const auto _Result = _Where._Ptr->_Next;

  00144	8b 3e		 mov	 edi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00146	8b 53 30	 mov	 edx, DWORD PTR [ebx+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00149	6a 0c		 push	 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 395  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  0014b	89 38		 mov	 DWORD PTR [eax], edi

; 396  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  0014d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00152	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 396  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 397  :         --_Mysize;

  00156	8b 45 dc	 mov	 eax, DWORD PTR _dwFrameIndex$1$[ebp]
  00159	ff 4c c2 04	 dec	 DWORD PTR [edx+eax*8+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0015d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00162	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 325  : 				m_dwCurrentEmissionCount--;

  00165	8b f7		 mov	 esi, edi
  00167	ff 4b 28	 dec	 DWORD PTR [ebx+40]

; 326  : 			}

  0016a	8b 7d dc	 mov	 edi, DWORD PTR _dwFrameIndex$1$[ebp]
  0016d	e9 99 00 00 00	 jmp	 $LN5@OnUpdate
$LN17@OnUpdate:

; 327  : 			else
; 328  : 			{
; 329  : 				if (pInstance->m_byFrameIndex != dwFrameIndex)

  00172	8b 45 d4	 mov	 eax, DWORD PTR _pInstance$1$[ebp]
  00175	0f b6 40 50	 movzx	 eax, BYTE PTR [eax+80]
  00179	3b c7		 cmp	 eax, edi
  0017b	0f 84 88 00 00
	00		 je	 $LN19@OnUpdate
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00181	8b 4d d0	 mov	 ecx, DWORD PTR _dwFrameCount$1$[ebp]
  00184	03 c8		 add	 ecx, eax
  00186	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1020 :         if (_Mysize == max_size()) {

  00189	81 7c c8 04 55
	55 55 15	 cmp	 DWORD PTR [eax+ecx*8+4], 357913941 ; 15555555H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00191	8d 3c c8	 lea	 edi, DWORD PTR [eax+ecx*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1264 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00194	8b 07		 mov	 eax, DWORD PTR [edi]
  00196	89 45 d8	 mov	 DWORD PTR __Where$1$[ebp], eax

; 1020 :         if (_Mysize == max_size()) {

  00199	0f 84 9d 01 00
	00		 je	 $LN327@OnUpdate
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0019f	89 7d e8	 mov	 DWORD PTR __Op$4[ebp], edi

; 136  :         return ::operator new(_Bytes);

  001a2	6a 0c		 push	 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 583  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  001a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001ab	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Op$4[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  001b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 585  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001b7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  001ba	8b 55 d8	 mov	 edx, DWORD PTR __Where$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  001bd	6a 0c		 push	 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 585  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001bf	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1025 :         ++_Mysize;

  001c2	ff 47 04	 inc	 DWORD PTR [edi+4]

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  001c5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 599  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  001c8	89 10		 mov	 DWORD PTR [eax], edx

; 600  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  001ca	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 603  :         _Insert_before->_Prev = _Result;

  001cd	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 604  :         _Insert_after->_Next  = _Result;

  001d0	89 01		 mov	 DWORD PTR [ecx], eax

; 395  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  001d2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1421 :         const auto _Result = _Where._Ptr->_Next;

  001d5	8b 3e		 mov	 edi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  001d7	8b 53 30	 mov	 edx, DWORD PTR [ebx+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  001da	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 395  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  001db	89 38		 mov	 DWORD PTR [eax], edi

; 396  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  001dd	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001df	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 586  :     }

  001e2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 602  :         this->_Ptr            = pointer{};

  001e9	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Op$4[ebp+4], 0

; 396  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  001f0	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 397  :         --_Mysize;

  001f3	8b 45 dc	 mov	 eax, DWORD PTR _dwFrameIndex$1$[ebp]
  001f6	ff 4c c2 04	 dec	 DWORD PTR [edx+eax*8+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  001fa	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 332  : 					itor = m_ParticleInstanceListVector[dwFrameIndex].erase(itor);

  001ff	8b f7		 mov	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00201	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 333  : 				}

  00204	8b 7d dc	 mov	 edi, DWORD PTR _dwFrameIndex$1$[ebp]
  00207	eb 02		 jmp	 SHORT $LN5@OnUpdate
$LN19@OnUpdate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 164  :         this->_Ptr = this->_Ptr->_Next;

  00209	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@OnUpdate:

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0020b	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]

; 197  :         return this->_Ptr == _Right._Ptr;

  0020e	3b 34 f8	 cmp	 esi, DWORD PTR [eax+edi*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 316  : 		for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end();)

  00211	0f 85 f9 fe ff
	ff		 jne	 $LL7@OnUpdate
$LN2@OnUpdate:

; 311  : 	}
; 312  : 
; 313  : 	for (dwFrameIndex = 0; dwFrameIndex < dwFrameCount; dwFrameIndex++)

  00217	8b 75 d0	 mov	 esi, DWORD PTR _dwFrameCount$1$[ebp]
  0021a	47		 inc	 edi
  0021b	89 7d dc	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], edi
  0021e	3b fe		 cmp	 edi, esi
  00220	0f 8c da fe ff
	ff		 jl	 $LL4@OnUpdate
$LN344@OnUpdate:

; 334  : 				else
; 335  : 					++itor;
; 336  : 			}
; 337  : 		}
; 338  : 	}
; 339  : 	if (isActive() && bMakeParticle)

  00226	8b cb		 mov	 ecx, ebx
  00228	e8 00 00 00 00	 call	 ?isActive@CEffectElementBaseInstance@@QAE_NXZ ; CEffectElementBaseInstance::isActive
  0022d	84 c0		 test	 al, al
  0022f	74 18		 je	 SHORT $LN21@OnUpdate
  00231	80 7d e3 00	 cmp	 BYTE PTR _bMakeParticle$1$[ebp], 0
  00235	74 12		 je	 SHORT $LN21@OnUpdate

; 340  : 		CreateParticles(fElapsedTime);

  00237	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  0023c	51		 push	 ecx
  0023d	8b cb		 mov	 ecx, ebx
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	e8 00 00 00 00	 call	 ?CreateParticles@CParticleSystemInstance@@QAEXM@Z ; CParticleSystemInstance::CreateParticles
$LN21@OnUpdate:

; 342  : 	for (dwFrameIndex = 0; dwFrameIndex < dwFrameCount; ++dwFrameIndex)

  00249	33 c9		 xor	 ecx, ecx
  0024b	89 4d d8	 mov	 DWORD PTR _dwFrameIndex$2$[ebp], ecx
  0024e	85 f6		 test	 esi, esi
  00250	0f 8e c6 00 00
	00		 jle	 $LN333@OnUpdate
  00256	c1 e6 03	 shl	 esi, 3
  00259	89 75 dc	 mov	 DWORD PTR tv1642[ebp], esi
  0025c	0f 1f 40 00	 npad	 4
$LL10@OnUpdate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1103 :         return iterator(_Mypair._Myval2._Myhead, _STD addressof(_Mypair._Myval2));

  00260	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  00263	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00266	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00268	89 4d d4	 mov	 DWORD PTR tv1681[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0026b	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1522 :         if (this != _STD addressof(_Right) && _Right_data._Mysize != 0) { // worth splicing, do it

  0026e	3b d1		 cmp	 edx, ecx
  00270	74 51		 je	 SHORT $LN79@OnUpdate
  00272	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00275	85 ff		 test	 edi, edi
  00277	74 4a		 je	 SHORT $LN79@OnUpdate

; 1523 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1524 :             _STL_VERIFY(_Where._Getcont() == _STD addressof(_Mypair._Myval2), "list splice iterator outside range");
; 1525 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1526 :             const auto _Right_head = _Right_data._Myhead;

  00279	8b 01		 mov	 eax, DWORD PTR [ecx]
  0027b	89 45 ec	 mov	 DWORD PTR __Right_head$1$[ebp], eax

; 1527 :             _Splice(_Where._Ptr, _Right, _Right_head->_Next, _Right_head, _Right_data._Mysize);

  0027e	8b 00		 mov	 eax, DWORD PTR [eax]
  00280	89 45 c8	 mov	 DWORD PTR __First$1$[ebp], eax

; 1816 :             if (max_size() - _My_data._Mysize < _Count) {

  00283	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H
  00288	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  0028b	3b c7		 cmp	 eax, edi
  0028d	0f 82 a9 00 00
	00		 jb	 $LN327@OnUpdate

; 1818 :             }
; 1819 : 
; 1820 :             auto& _Right_data = _Right._Mypair._Myval2;
; 1821 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1822 :             // transfer ownership
; 1823 :             if (_Count == 1) {
; 1824 :                 _My_data._Adopt_unique(_Right_data, _First);
; 1825 :             } else if (_Count == _Right_data._Mysize) {
; 1826 :                 _My_data._Adopt_all(_Right_data);
; 1827 :             } else {
; 1828 :                 _My_data._Adopt_range(_Right_data, _First, _Last);
; 1829 :             }
; 1830 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1831 : 
; 1832 :             _My_data._Mysize += _Count;

  00293	01 7a 04	 add	 DWORD PTR [edx+4], edi

; 1833 :             _Right_data._Mysize -= _Count;

  00296	29 79 04	 sub	 DWORD PTR [ecx+4], edi

; 474  :         const auto _First_prev  = _First->_Prev;

  00299	8b 75 c8	 mov	 esi, DWORD PTR __First$1$[ebp]

; 475  :         _First_prev->_Next      = _Last;

  0029c	8b 7d ec	 mov	 edi, DWORD PTR __Right_head$1$[ebp]

; 476  :         const auto _Last_prev   = _Last->_Prev;
; 477  :         _Last_prev->_Next       = _Before;

  0029f	8b 45 d4	 mov	 eax, DWORD PTR tv1681[ebp]
  002a2	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  002a5	89 3a		 mov	 DWORD PTR [edx], edi
  002a7	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  002aa	89 01		 mov	 DWORD PTR [ecx], eax

; 478  :         const auto _Before_prev = _Before->_Prev;

  002ac	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 479  :         _Before_prev->_Next     = _First;

  002af	89 30		 mov	 DWORD PTR [eax], esi

; 480  : 
; 481  :         // fixup the _Prev values
; 482  :         _Before->_Prev = _Last_prev;

  002b1	8b 75 d4	 mov	 esi, DWORD PTR tv1681[ebp]
  002b4	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 484  :         _First->_Prev  = _Before_prev;

  002b7	8b 4d c8	 mov	 ecx, DWORD PTR __First$1$[ebp]
  002ba	8b 75 dc	 mov	 esi, DWORD PTR tv1642[ebp]

; 483  :         _Last->_Prev   = _First_prev;

  002bd	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 484  :         _First->_Prev  = _Before_prev;

  002c0	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN79@OnUpdate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  002c3	8b 7b 30	 mov	 edi, DWORD PTR [ebx+48]
  002c6	03 fe		 add	 edi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1497 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  002c8	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 324  :         _Head->_Prev->_Next = nullptr;

  002ca	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002cd	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  002d3	8b 01		 mov	 eax, DWORD PTR [ecx]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002d5	85 c0		 test	 eax, eax
  002d7	74 1d		 je	 SHORT $LN91@OnUpdate
  002d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL92@OnUpdate:

; 328  :             _Pnext = _Pnode->_Next;

  002e0	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  002e2	6a 0c		 push	 12			; 0000000cH
  002e4	50		 push	 eax
  002e5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002ea	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002ed	8b c6		 mov	 eax, esi
  002ef	85 f6		 test	 esi, esi
  002f1	75 ed		 jne	 SHORT $LL92@OnUpdate
  002f3	8b 75 dc	 mov	 esi, DWORD PTR tv1642[ebp]
$LN91@OnUpdate:

; 1498 :         _My_data._Myhead->_Next = _My_data._Myhead;

  002f6	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 342  : 	for (dwFrameIndex = 0; dwFrameIndex < dwFrameCount; ++dwFrameIndex)

  002f8	83 c6 08	 add	 esi, 8
  002fb	8b 4d d8	 mov	 ecx, DWORD PTR _dwFrameIndex$2$[ebp]
  002fe	41		 inc	 ecx
  002ff	89 75 dc	 mov	 DWORD PTR tv1642[ebp], esi
  00302	89 4d d8	 mov	 DWORD PTR _dwFrameIndex$2$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1498 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00305	89 00		 mov	 DWORD PTR [eax], eax

; 1499 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00307	8b 07		 mov	 eax, DWORD PTR [edi]
  00309	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1500 :         _My_data._Mysize        = 0;

  0030c	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 342  : 	for (dwFrameIndex = 0; dwFrameIndex < dwFrameCount; ++dwFrameIndex)

  00313	3b 4d d0	 cmp	 ecx, DWORD PTR _dwFrameCount$1$[ebp]
  00316	0f 8c 44 ff ff
	ff		 jl	 $LL10@OnUpdate
$LN333@OnUpdate:

; 343  : 	{
; 344  : 		m_ParticleInstanceListVector[dwFrameIndex].splice(m_ParticleInstanceListVector[dwFrameIndex].end(),m_ParticleInstanceListVector[dwFrameIndex+dwFrameCount]);
; 345  : 		m_ParticleInstanceListVector[dwFrameIndex+dwFrameCount].clear();
; 346  : 	}
; 347  : 
; 348  : 	return true;

  0031c	b0 01		 mov	 al, 1
$LN1@OnUpdate:

; 349  : }

  0031e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00321	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00328	59		 pop	 ecx
  00329	5f		 pop	 edi
  0032a	5e		 pop	 esi
  0032b	5b		 pop	 ebx
  0032c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0032f	33 cd		 xor	 ecx, ebp
  00331	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00336	8b e5		 mov	 esp, ebp
  00338	5d		 pop	 ebp
  00339	c2 04 00	 ret	 4
$LN327@OnUpdate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1817 :                 _Xlength_error("list too long");

  0033c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00341	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN352@OnUpdate:
  00346	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z$1:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Op$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnUpdate@CParticleSystemInstance@@MAE_NM@Z ENDP	; CParticleSystemInstance::OnUpdate
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?OnDestroy@CParticleSystemInstance@@MAEXXZ
_TEXT	SEGMENT
?OnDestroy@CParticleSystemInstance@@MAEXXZ PROC		; CParticleSystemInstance::OnDestroy, COMDAT
; _this$ = ecx

; 493  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1827 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00004	8d 73 30	 lea	 esi, DWORD PTR [ebx+48]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 493  : {

  00007	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000a	3b 7b 34	 cmp	 edi, DWORD PTR [ebx+52]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 495  : 	for(i = m_ParticleInstanceListVector.begin(); i!=m_ParticleInstanceListVector.end(); ++i)

  0000d	74 56		 je	 SHORT $LN179@OnDestroy
  0000f	90		 npad	 1
$LL4@OnDestroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1095 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00010	8b 07		 mov	 eax, DWORD PTR [edi]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
  00014	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 500  : 		for(j = rkLst_kParticleInst.begin(); j!=rkLst_kParticleInst.end(); ++j)

  00016	74 10		 je	 SHORT $LN6@OnDestroy
$LL7@OnDestroy:

; 501  : 		{
; 502  : 			CParticleInstance* pkParticleInst=*j;
; 503  : 			pkParticleInst->DeleteThis();

  00018	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0001b	e8 00 00 00 00	 call	 ?DeleteThis@CParticleInstance@@QAEXXZ ; CParticleInstance::DeleteThis
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 164  :         this->_Ptr = this->_Ptr->_Next;

  00020	8b 36		 mov	 esi, DWORD PTR [esi]

; 37   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00022	8b 07		 mov	 eax, DWORD PTR [edi]

; 197  :         return this->_Ptr == _Right._Ptr;

  00024	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 500  : 		for(j = rkLst_kParticleInst.begin(); j!=rkLst_kParticleInst.end(); ++j)

  00026	75 f0		 jne	 SHORT $LL7@OnDestroy
$LN6@OnDestroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 324  :         _Head->_Prev->_Next = nullptr;

  00028	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00031	8b 00		 mov	 eax, DWORD PTR [eax]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00033	85 c0		 test	 eax, eax
  00035	74 13		 je	 SHORT $LN65@OnDestroy
$LL66@OnDestroy:

; 328  :             _Pnext = _Pnode->_Next;

  00037	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00039	6a 0c		 push	 12			; 0000000cH
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00041	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00044	8b c6		 mov	 eax, esi
  00046	85 f6		 test	 esi, esi
  00048	75 ed		 jne	 SHORT $LL66@OnDestroy
$LN65@OnDestroy:

; 1498 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0004a	8b 07		 mov	 eax, DWORD PTR [edi]
  0004c	89 00		 mov	 DWORD PTR [eax], eax

; 1499 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  0004e	8b 07		 mov	 eax, DWORD PTR [edi]
  00050	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1500 :         _My_data._Mysize        = 0;

  00053	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  0005a	83 c7 08	 add	 edi, 8

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0005d	3b 7b 34	 cmp	 edi, DWORD PTR [ebx+52]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 495  : 	for(i = m_ParticleInstanceListVector.begin(); i!=m_ParticleInstanceListVector.end(); ++i)

  00060	75 ae		 jne	 SHORT $LL4@OnDestroy
  00062	8d 73 30	 lea	 esi, DWORD PTR [ebx+48]
$LN179@OnDestroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006a	3b c1		 cmp	 eax, ecx
  0006c	74 10		 je	 SHORT $LN120@OnDestroy

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  0006e	56		 push	 esi
  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00076	8b 06		 mov	 eax, DWORD PTR [esi]
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN120@OnDestroy:

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0007e	8b 7b 40	 mov	 edi, DWORD PTR [ebx+64]
  00081	8b 73 3c	 mov	 esi, DWORD PTR [ebx+60]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 371  :     for (; _UFirst != _ULast; ++_UFirst) {

  00084	3b f7		 cmp	 esi, edi
  00086	74 11		 je	 SHORT $LN144@OnDestroy
$LL145@OnDestroy:

; 372  :         _Func(*_UFirst);

  00088	ff 36		 push	 DWORD PTR [esi]
  0008a	e8 00 00 00 00	 call	 ?Delete@CGraphicImageInstance@@SAXPAV1@@Z ; CGraphicImageInstance::Delete
  0008f	83 c6 04	 add	 esi, 4
  00092	83 c4 04	 add	 esp, 4
  00095	3b f7		 cmp	 esi, edi
  00097	75 ef		 jne	 SHORT $LL145@OnDestroy
$LN144@OnDestroy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00099	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]
  0009c	3b 43 40	 cmp	 eax, DWORD PTR [ebx+64]
  0009f	74 03		 je	 SHORT $LN147@OnDestroy

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  000a1	89 43 40	 mov	 DWORD PTR [ebx+64], eax
$LN147@OnDestroy:
  000a4	5f		 pop	 edi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 512  : }

  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	c3		 ret	 0
?OnDestroy@CParticleSystemInstance@@MAEXXZ ENDP		; CParticleSystemInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?OnInitialize@CParticleSystemInstance@@MAEXXZ
_TEXT	SEGMENT
?OnInitialize@CParticleSystemInstance@@MAEXXZ PROC	; CParticleSystemInstance::OnInitialize, COMDAT
; _this$ = ecx

; 487  : 	m_dwCurrentEmissionCount = 0;

  00000	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 488  : 	m_iLoopCount = 0;

  00007	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 489  : 	m_fEmissionResidue = 0.0f;

  0000e	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 490  : }

  00015	c3		 ret	 0
?OnInitialize@CParticleSystemInstance@@MAEXXZ ENDP	; CParticleSystemInstance::OnInitialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?GetEmissionCount@CParticleSystemInstance@@QAEKXZ
_TEXT	SEGMENT
?GetEmissionCount@CParticleSystemInstance@@QAEKXZ PROC	; CParticleSystemInstance::GetEmissionCount, COMDAT
; _this$ = ecx

; 35   : 	return m_dwCurrentEmissionCount;

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 36   : }

  00003	c3		 ret	 0
?GetEmissionCount@CParticleSystemInstance@@QAEKXZ ENDP	; CParticleSystemInstance::GetEmissionCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectUpdateDecorator.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?CreateParticles@CParticleSystemInstance@@QAEXM@Z
_TEXT	SEGMENT
_v2HalfSize$ = -164					; size = 8
_this$GSCopy$1$ = -156					; size = 4
_fEmissionCount$ = -152					; size = 4
_i$1$ = -148						; size = 4
_fElapsedTime$GSCopy$1$ = -144				; size = 4
_fLieRotation$1$ = -140					; size = 4
_fVelocity$ = -136					; size = 4
_this$1$ = -132						; size = 4
_pNewDecorator$1$ = -132				; size = 4
_pFirstInstance$1$ = -128				; size = 4
__real@447a0000$1$ = -124				; size = 4
__Op$2 = -120						; size = 8
tv2517 = -120						; size = 8
tv2523 = -120						; size = 8
tv2526 = -120						; size = 8
_iCreatingCount$1$ = -108				; size = 4
_fLifeTime$ = -104					; size = 4
_fEmittingSize$ = -100					; size = 4
tv1416 = -96						; size = 4
tv748 = -96						; size = 4
tv1275 = -96						; size = 4
_f$ = -96						; size = 4
tv1424 = -96						; size = 4
__Where$1$ = -96					; size = 4
_pDest$1$ = -96						; size = 4
_d3dd$3 = -92						; size = 12
_d3dd$4 = -80						; size = 12
__v3TimePosition$ = -68					; size = 12
__v3Velocity$ = -56					; size = 12
_v3Velocity$5 = -44					; size = 12
_v3TimePosition$6 = -32					; size = 12
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_fElapsedTime$ = 8					; size = 4
?CreateParticles@CParticleSystemInstance@@QAEXM@Z PROC	; CParticleSystemInstance::CreateParticles, COMDAT
; _this$ = ecx

; 39   : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?CreateParticles@CParticleSystemInstance@@QAEXM@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	8b f1		 mov	 esi, ecx
  00043	89 b5 64 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00049	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebx]

; 40   : 	float fEmissionCount;
; 41   : 	m_pEmitterProperty->GetEmissionCountPerSecond(m_fLocalTime, &fEmissionCount);

  0004e	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _fEmissionCount$[ebp]
  00054	50		 push	 eax
  00055	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _fElapsedTime$GSCopy$1$[ebp], xmm0
  0005d	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00062	51		 push	 ecx
  00063	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	e8 00 00 00 00	 call	 ?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmissionCountPerSecond

; 42   : 
; 43   : 	float fCreatingValue = fEmissionCount * (fElapsedTime / 1.0f) + m_fEmissionResidue;

  00070	f3 0f 10 8d 70
	ff ff ff	 movss	 xmm1, DWORD PTR _fElapsedTime$GSCopy$1$[ebp]

; 44   : 	int iCreatingCount = int(fCreatingValue);
; 45   : 	m_fEmissionResidue = fCreatingValue - iCreatingCount;
; 46   : 
; 47   : 	int icurEmissionCount = GetEmissionCount();

  00078	8b ce		 mov	 ecx, esi
  0007a	f3 0f 59 8d 68
	ff ff ff	 mulss	 xmm1, DWORD PTR _fEmissionCount$[ebp]
  00082	f3 0f 58 4e 24	 addss	 xmm1, DWORD PTR [esi+36]
  00087	f3 0f 2c f9	 cvttss2si edi, xmm1
  0008b	66 0f 6e c7	 movd	 xmm0, edi
  0008f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00092	f3 0f 5c c8	 subss	 xmm1, xmm0
  00096	f3 0f 11 4e 24	 movss	 DWORD PTR [esi+36], xmm1
  0009b	e8 00 00 00 00	 call	 ?GetEmissionCount@CParticleSystemInstance@@QAEKXZ ; CParticleSystemInstance::GetEmissionCount

; 48   : 	int iMaxEmissionCount = int(m_pEmitterProperty->GetMaxEmissionCount());

  000a0	8b 56 50	 mov	 edx, DWORD PTR [esi+80]
  000a3	0f 57 c0	 xorps	 xmm0, xmm0

; 49   : 	int iNextEmissionCount = int(icurEmissionCount + iCreatingCount);
; 50   : 	iCreatingCount -= max(0, iNextEmissionCount - iMaxEmissionCount);
; 51   : 
; 52   : 	float fLifeTime = 0.0f;
; 53   : 	float fEmittingSize = 0.0f;
; 54   : 	D3DXVECTOR3 _v3TimePosition;
; 55   : 	D3DXVECTOR3 _v3Velocity;
; 56   : 	float fVelocity = 0.0f;
; 57   : 	D3DXVECTOR2 v2HalfSize;
; 58   : 	float fLieRotation = 0;

  000a6	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _fLieRotation$1$[ebp], xmm0
  000ae	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000b1	b8 00 00 00 00	 mov	 eax, 0
  000b6	2b 4a 04	 sub	 ecx, DWORD PTR [edx+4]
  000b9	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _fLifeTime$[ebp], 0
  000c0	0f 49 c1	 cmovns	 eax, ecx
  000c3	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _fEmittingSize$[ebp], 0
  000ca	2b f8		 sub	 edi, eax
  000cc	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fVelocity$[ebp], 0
  000d6	89 7d 94	 mov	 DWORD PTR _iCreatingCount$1$[ebp], edi

; 59   : 	if (iCreatingCount)

  000d9	0f 84 8a 01 00
	00		 je	 $LN10@CreatePart

; 60   : 	{
; 61   : 		m_pEmitterProperty->GetParticleLifeTime(m_fLocalTime, &fLifeTime);

  000df	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  000e4	8d 45 98	 lea	 eax, DWORD PTR _fLifeTime$[ebp]
  000e7	50		 push	 eax
  000e8	51		 push	 ecx
  000e9	8b ca		 mov	 ecx, edx
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	e8 00 00 00 00	 call	 ?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetParticleLifeTime

; 62   : 		if (fLifeTime==0.0f)

  000f5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fLifeTime$[ebp]
  000fa	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00101	9f		 lahf
  00102	f6 c4 44	 test	 ah, 68			; 00000044H
  00105	0f 8b 26 09 00
	00		 jnp	 $LN3@CreatePart

; 63   : 		{
; 64   : 			return;
; 65   : 		}
; 66   : 
; 67   : 		m_pEmitterProperty->GetEmittingSize(m_fLocalTime, &fEmittingSize);

  0010b	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00110	8d 45 9c	 lea	 eax, DWORD PTR _fEmittingSize$[ebp]
  00113	50		 push	 eax
  00114	51		 push	 ecx
  00115	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	e8 00 00 00 00	 call	 ?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingSize

; 68   : 
; 69   : 		m_pData->GetPosition(m_fLocalTime, _v3TimePosition);

  00122	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00127	8d 45 bc	 lea	 eax, DWORD PTR __v3TimePosition$[ebp]
  0012a	50		 push	 eax
  0012b	51		 push	 ecx
  0012c	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	e8 00 00 00 00	 call	 ?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ; CEffectElementBase::GetPosition

; 70   : 
; 71   : 		m_pEmitterProperty->GetEmittingDirectionX(m_fLocalTime, &_v3Velocity.x);

  00139	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0013e	8d 45 c8	 lea	 eax, DWORD PTR __v3Velocity$[ebp]
  00141	50		 push	 eax
  00142	51		 push	 ecx
  00143	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014b	e8 00 00 00 00	 call	 ?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionX

; 72   : 		m_pEmitterProperty->GetEmittingDirectionY(m_fLocalTime, &_v3Velocity.y);

  00150	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00155	8d 45 cc	 lea	 eax, DWORD PTR __v3Velocity$[ebp+4]
  00158	50		 push	 eax
  00159	51		 push	 ecx
  0015a	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	e8 00 00 00 00	 call	 ?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionY

; 73   : 		m_pEmitterProperty->GetEmittingDirectionZ(m_fLocalTime, &_v3Velocity.z);

  00167	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0016c	8d 45 d0	 lea	 eax, DWORD PTR __v3Velocity$[ebp+8]
  0016f	50		 push	 eax
  00170	51		 push	 ecx
  00171	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionZ

; 74   : 
; 75   : 		m_pEmitterProperty->GetEmittingVelocity(m_fLocalTime, &fVelocity);

  0017e	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00183	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _fVelocity$[ebp]
  00189	50		 push	 eax
  0018a	51		 push	 ecx
  0018b	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	e8 00 00 00 00	 call	 ?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingVelocity

; 76   : 
; 77   : 		m_pEmitterProperty->GetParticleSizeX(m_fLocalTime, &v2HalfSize.x);

  00198	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0019d	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _v2HalfSize$[ebp]
  001a3	50		 push	 eax
  001a4	51		 push	 ecx
  001a5	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	e8 00 00 00 00	 call	 ?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetParticleSizeX

; 78   : 		m_pEmitterProperty->GetParticleSizeY(m_fLocalTime, &v2HalfSize.y);

  001b2	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  001b7	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _v2HalfSize$[ebp+4]
  001bd	50		 push	 eax
  001be	51		 push	 ecx
  001bf	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  001c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c7	e8 00 00 00 00	 call	 ?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetParticleSizeY

; 79   : 
; 80   : 		if (BILLBOARD_TYPE_LIE == m_pParticleProperty->m_byBillboardType && mc_pmatLocal)

  001cc	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  001cf	80 78 13 03	 cmp	 BYTE PTR [eax+19], 3
  001d3	0f 85 90 00 00
	00		 jne	 $LN10@CreatePart
  001d9	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  001dc	85 ff		 test	 edi, edi
  001de	0f 84 82 00 00
	00		 je	 $LN178@CreatePart

; 81   : 		{
; 82   : 			float fsx = mc_pmatLocal->_32;

  001e4	f3 0f 10 4f 24	 movss	 xmm1, DWORD PTR [edi+36]

; 83   : 			float fcx = sqrtf(1.0f - fsx * fsx);

  001e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001f1	f3 0f 59 c9	 mulss	 xmm1, xmm1
  001f5	f3 0f 5c c1	 subss	 xmm0, xmm1
  001f9	0f 57 c9	 xorps	 xmm1, xmm1
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 808  :             return (float)sqrt(_X);

  001fc	0f 5a c0	 cvtps2pd xmm0, xmm0
  001ff	66 0f 2e c8	 ucomisd xmm1, xmm0
  00203	77 06		 ja	 SHORT $LN180@CreatePart
  00205	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00209	eb 05		 jmp	 SHORT $LN181@CreatePart
$LN180@CreatePart:
  0020b	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN181@CreatePart:
  00210	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 85   : 			if (fcx >= 0.00001f)

  00214	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3727c5ac
  0021b	72 49		 jb	 SHORT $LN178@CreatePart

; 86   : 				fLieRotation = D3DXToDegree(atan2f(-mc_pmatLocal->_12, mc_pmatLocal->_22));

  0021d	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00222	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 677  :             return (float)atan2(_Y, _X);

  00229	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0022d	f2 0f 11 45 88	 movsd	 QWORD PTR tv2526[ebp], xmm0
  00232	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  00237	dd 45 88	 fld	 QWORD PTR tv2526[ebp]
  0023a	0f 5a c0	 cvtps2pd xmm0, xmm0
  0023d	f2 0f 11 45 88	 movsd	 QWORD PTR tv2523[ebp], xmm0
  00242	dd 45 88	 fld	 QWORD PTR tv2523[ebp]
  00245	e8 00 00 00 00	 call	 __CIatan2
  0024a	dd 5d 88	 fstp	 QWORD PTR tv2517[ebp]
  0024d	f2 0f 10 4d 88	 movsd	 xmm1, QWORD PTR tv2517[ebp]
  00252	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 86   : 				fLieRotation = D3DXToDegree(atan2f(-mc_pmatLocal->_12, mc_pmatLocal->_22));

  00256	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42652ee0
  0025e	f3 0f 11 8d 74
	ff ff ff	 movss	 DWORD PTR _fLieRotation$1$[ebp], xmm1
$LN178@CreatePart:

; 87   : 		}
; 88   : 
; 89   : 	}
; 90   : 
; 91   : 	CParticleInstance * pFirstInstance = 0;

  00266	8b 7d 94	 mov	 edi, DWORD PTR _iCreatingCount$1$[ebp]
$LN10@CreatePart:
  00269	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _pFirstInstance$1$[ebp], 0

; 93   : 	for (int i = 0; i < iCreatingCount; ++i)

  00270	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  0027a	85 ff		 test	 edi, edi
  0027c	0f 8e af 07 00
	00		 jle	 $LN3@CreatePart
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1913 :         auto& _My_data = _Mypair._Myval2;

  00282	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@447a0000
  00288	d9 5d 84	 fstp	 DWORD PTR __real@447a0000$1$[ebp]
  0028b	0f 1f 44 00 00	 npad	 5
$LL4@CreatePart:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 97   : 		pInstance = CParticleInstance::New();

  00290	e8 00 00 00 00	 call	 ?New@CParticleInstance@@SAPAV1@XZ ; CParticleInstance::New

; 98   : 		pInstance->m_pParticleProperty = m_pParticleProperty;

  00295	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00298	8b f8		 mov	 edi, eax
  0029a	89 4f 5c	 mov	 DWORD PTR [edi+92], ecx

; 99   : 		pInstance->m_pEmitterProperty = m_pEmitterProperty;

  0029d	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  002a0	89 4f 60	 mov	 DWORD PTR [edi+96], ecx

; 100  : 
; 101  : 		// LifeTime
; 102  : 		pInstance->m_fLifeTime = fLifeTime;

  002a3	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fLifeTime$[ebp]
  002a8	f3 0f 11 47 54	 movss	 DWORD PTR [edi+84], xmm0

; 103  : 		pInstance->m_fLastLifeTime = fLifeTime;

  002ad	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fLifeTime$[ebp]
  002b2	f3 0f 11 47 58	 movss	 DWORD PTR [edi+88], xmm0

; 104  : 
; 105  : 		// Position
; 106  : 		switch (m_pEmitterProperty->GetEmitterShape())

  002b7	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  002ba	e8 00 00 00 00	 call	 ?GetEmitterShape@CEmitterProperty@@QAEEXZ ; CEmitterProperty::GetEmitterShape
  002bf	0f b6 c0	 movzx	 eax, al
  002c2	83 f8 03	 cmp	 eax, 3
  002c5	0f 87 f7 01 00
	00		 ja	 $LN18@CreatePart
  002cb	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN176@CreatePart[eax*4]
$LN11@CreatePart:

; 107  : 		{
; 108  : 			case CEmitterProperty::EMITTER_SHAPE_POINT:
; 109  : 				pInstance->m_v3Position.x = 0.0f;

  002d2	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 110  : 				pInstance->m_v3Position.y = 0.0f;

  002d9	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 111  : 				pInstance->m_v3Position.z = 0.0f;

  002e0	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 112  : 				break;

  002e7	e9 d6 01 00 00	 jmp	 $LN18@CreatePart
$LN12@CreatePart:

; 113  : 
; 114  : 			case CEmitterProperty::EMITTER_SHAPE_ELLIPSE:
; 115  : 				pInstance->m_v3Position.x = frandom(-500.0f, 500.0f);

  002ec	83 ec 08	 sub	 esp, 8
  002ef	c7 44 24 04 00
	00 fa 43	 mov	 DWORD PTR [esp+4], 1140457472 ; 43fa0000H
  002f7	c7 04 24 00 00
	fa c3		 mov	 DWORD PTR [esp], -1007026176 ; c3fa0000H
  002fe	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00303	d9 5f 0c	 fstp	 DWORD PTR [edi+12]

; 116  : 				pInstance->m_v3Position.y = frandom(-500.0f, 500.0f);

  00306	c7 44 24 04 00
	00 fa 43	 mov	 DWORD PTR [esp+4], 1140457472 ; 43fa0000H
  0030e	c7 04 24 00 00
	fa c3		 mov	 DWORD PTR [esp], -1007026176 ; c3fa0000H
  00315	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0031a	83 c4 08	 add	 esp, 8

; 117  : 				pInstance->m_v3Position.z = 0.0f;
; 118  : 				D3DXVec3Normalize(&pInstance->m_v3Position, &pInstance->m_v3Position);

  0031d	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00320	d9 5f 10	 fstp	 DWORD PTR [edi+16]
  00323	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0032a	50		 push	 eax
  0032b	50		 push	 eax
  0032c	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 119  : 
; 120  : 				if (m_pEmitterProperty->isEmitFromEdge())

  00331	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00334	e8 00 00 00 00	 call	 ?isEmitFromEdge@CEmitterProperty@@QAEHXZ ; CEmitterProperty::isEmitFromEdge
  00339	85 c0		 test	 eax, eax
  0033b	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  0033e	0f 84 32 01 00
	00		 je	 $LN13@CreatePart

; 121  : 				{
; 122  : 					pInstance->m_v3Position *= (m_pEmitterProperty->m_fEmittingRadius + fEmittingSize);

  00344	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _fEmittingSize$[ebp]
  00349	f3 0f 58 48 28	 addss	 xmm1, DWORD PTR [eax+40]

; 123  : 				}

  0034e	e9 4b 01 00 00	 jmp	 $LN183@CreatePart
$LN15@CreatePart:

; 124  : 				else
; 125  : 				{
; 126  : 					pInstance->m_v3Position *= (frandom(0.0f, m_pEmitterProperty->m_fEmittingRadius) + fEmittingSize);
; 127  : 				}
; 128  : 				break;
; 129  : 
; 130  : 			case CEmitterProperty::EMITTER_SHAPE_SQUARE:
; 131  : 				pInstance->m_v3Position.x = (frandom(-m_pEmitterProperty->m_v3EmittingSize.x/2.0f, m_pEmitterProperty->m_v3EmittingSize.x/2.0f) + fEmittingSize);

  00353	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00356	83 ec 08	 sub	 esp, 8
  00359	f3 0f 10 48 1c	 movss	 xmm1, DWORD PTR [eax+28]
  0035e	0f 28 c1	 movaps	 xmm0, xmm1
  00361	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00368	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00370	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00378	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0037e	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00383	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00388	d8 45 9c	 fadd	 DWORD PTR _fEmittingSize$[ebp]
  0038b	d9 5f 0c	 fstp	 DWORD PTR [edi+12]

; 132  : 				pInstance->m_v3Position.y = (frandom(-m_pEmitterProperty->m_v3EmittingSize.y/2.0f, m_pEmitterProperty->m_v3EmittingSize.y/2.0f) + fEmittingSize);

  0038e	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00391	f3 0f 10 48 20	 movss	 xmm1, DWORD PTR [eax+32]
  00396	0f 28 c1	 movaps	 xmm0, xmm1
  00399	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  003a0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  003a8	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  003b0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003b6	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  003bb	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  003c0	d8 45 9c	 fadd	 DWORD PTR _fEmittingSize$[ebp]
  003c3	d9 5f 10	 fstp	 DWORD PTR [edi+16]

; 133  : 				pInstance->m_v3Position.z = (frandom(-m_pEmitterProperty->m_v3EmittingSize.z/2.0f, m_pEmitterProperty->m_v3EmittingSize.z/2.0f) + fEmittingSize);

  003c6	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  003c9	f3 0f 10 48 24	 movss	 xmm1, DWORD PTR [eax+36]
  003ce	0f 28 c1	 movaps	 xmm0, xmm1
  003d1	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  003d8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  003e0	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  003e8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003ee	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  003f3	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  003f8	d8 45 9c	 fadd	 DWORD PTR _fEmittingSize$[ebp]
  003fb	83 c4 08	 add	 esp, 8
  003fe	d9 5f 14	 fstp	 DWORD PTR [edi+20]

; 134  : 				break;

  00401	e9 bc 00 00 00	 jmp	 $LN18@CreatePart
$LN16@CreatePart:

; 135  : 
; 136  : 			case CEmitterProperty::EMITTER_SHAPE_SPHERE:
; 137  : 				pInstance->m_v3Position.x = frandom(-500.0f, 500.0f);

  00406	83 ec 08	 sub	 esp, 8
  00409	c7 44 24 04 00
	00 fa 43	 mov	 DWORD PTR [esp+4], 1140457472 ; 43fa0000H
  00411	c7 04 24 00 00
	fa c3		 mov	 DWORD PTR [esp], -1007026176 ; c3fa0000H
  00418	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0041d	d9 5f 0c	 fstp	 DWORD PTR [edi+12]

; 138  : 				pInstance->m_v3Position.y = frandom(-500.0f, 500.0f);

  00420	c7 44 24 04 00
	00 fa 43	 mov	 DWORD PTR [esp+4], 1140457472 ; 43fa0000H
  00428	c7 04 24 00 00
	fa c3		 mov	 DWORD PTR [esp], -1007026176 ; c3fa0000H
  0042f	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00434	d9 5f 10	 fstp	 DWORD PTR [edi+16]

; 139  : 				pInstance->m_v3Position.z = frandom(-500.0f, 500.0f);

  00437	c7 44 24 04 00
	00 fa 43	 mov	 DWORD PTR [esp+4], 1140457472 ; 43fa0000H
  0043f	c7 04 24 00 00
	fa c3		 mov	 DWORD PTR [esp], -1007026176 ; c3fa0000H
  00446	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0044b	83 c4 08	 add	 esp, 8

; 140  : 				D3DXVec3Normalize(&pInstance->m_v3Position, &pInstance->m_v3Position);

  0044e	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00451	d9 5f 14	 fstp	 DWORD PTR [edi+20]
  00454	50		 push	 eax
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 141  : 
; 142  : 				if (m_pEmitterProperty->isEmitFromEdge())

  0045b	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0045e	e8 00 00 00 00	 call	 ?isEmitFromEdge@CEmitterProperty@@QAEHXZ ; CEmitterProperty::isEmitFromEdge
  00463	85 c0		 test	 eax, eax
  00465	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00468	74 0c		 je	 SHORT $LN13@CreatePart

; 143  : 				{
; 144  : 					pInstance->m_v3Position *= (m_pEmitterProperty->m_fEmittingRadius + fEmittingSize);

  0046a	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _fEmittingSize$[ebp]
  0046f	f3 0f 58 48 28	 addss	 xmm1, DWORD PTR [eax+40]

; 145  : 				}

  00474	eb 28		 jmp	 SHORT $LN183@CreatePart
$LN13@CreatePart:

; 154  : 		D3DXVECTOR3 v3TimePosition=_v3TimePosition;

  00476	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  0047b	83 ec 08	 sub	 esp, 8
  0047e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00484	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0048b	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00490	d8 45 9c	 fadd	 DWORD PTR _fEmittingSize$[ebp]
  00493	83 c4 08	 add	 esp, 8
  00496	d9 5d a0	 fstp	 DWORD PTR _f$[ebp]
  00499	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR _f$[ebp]
$LN183@CreatePart:
  0049e	0f 28 c1	 movaps	 xmm0, xmm1
  004a1	f3 0f 59 47 0c	 mulss	 xmm0, DWORD PTR [edi+12]
  004a6	f3 0f 11 47 0c	 movss	 DWORD PTR [edi+12], xmm0
  004ab	0f 28 c1	 movaps	 xmm0, xmm1
  004ae	f3 0f 59 4f 14	 mulss	 xmm1, DWORD PTR [edi+20]
  004b3	f3 0f 59 47 10	 mulss	 xmm0, DWORD PTR [edi+16]
  004b8	f3 0f 11 4f 14	 movss	 DWORD PTR [edi+20], xmm1
  004bd	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0
$LN18@CreatePart:
  004c2	f3 0f 7e 45 bc	 movq	 xmm0, QWORD PTR __v3TimePosition$[ebp]

; 155  : 
; 156  : 		pInstance->m_v3Position += v3TimePosition;

  004c7	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  004ca	8b 45 c4	 mov	 eax, DWORD PTR __v3TimePosition$[ebp+8]
  004cd	66 0f d6 45 e0	 movq	 QWORD PTR _v3TimePosition$6[ebp], xmm0
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  004d2	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR __v3TimePosition$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 154  : 		D3DXVECTOR3 v3TimePosition=_v3TimePosition;

  004d7	89 45 e8	 mov	 DWORD PTR _v3TimePosition$6[ebp+8], eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  004da	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  004de	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 205  :     y += v.y;

  004e2	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v3TimePosition$6[ebp+4]
  004e7	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  004ec	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 206  :     z += v.z;

  004f1	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _v3TimePosition$6[ebp+8]
  004f6	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  004fb	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 158  : 		if (mc_pmatLocal && !m_pParticleProperty->m_bAttachFlag)

  00500	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00503	85 d2		 test	 edx, edx
  00505	74 1e		 je	 SHORT $LN19@CreatePart
  00507	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0050a	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0050e	75 15		 jne	 SHORT $LN19@CreatePart

; 159  : 		{
; 160  : 			D3DXVec3TransformCoord(&pInstance->m_v3Position,&pInstance->m_v3Position,mc_pmatLocal);

  00510	52		 push	 edx
  00511	51		 push	 ecx
  00512	51		 push	 ecx
  00513	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 161  : 			D3DXVec3TransformCoord(&v3TimePosition, &v3TimePosition, mc_pmatLocal);

  00518	ff 76 04	 push	 DWORD PTR [esi+4]
  0051b	8d 45 e0	 lea	 eax, DWORD PTR _v3TimePosition$6[ebp]
  0051e	50		 push	 eax
  0051f	50		 push	 eax
  00520	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
$LN19@CreatePart:

; 162  : 		}
; 163  : 		pInstance->m_v3StartPosition = v3TimePosition;

  00525	f3 0f 7e 45 e0	 movq	 xmm0, QWORD PTR _v3TimePosition$6[ebp]
  0052a	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  0052e	8b 45 e8	 mov	 eax, DWORD PTR _v3TimePosition$6[ebp+8]
  00531	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 164  : 		//pInstance->m_v3LastPosition = pInstance->m_v3Position;
; 165  : 
; 166  : 		// Direction & Velocity
; 167  : 		pInstance->m_v3Velocity.x = 0.0f;

  00534	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0

; 168  : 		pInstance->m_v3Velocity.y = 0.0f;

  0053b	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 169  : 		pInstance->m_v3Velocity.z = 0.0f;

  00542	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 170  : 
; 171  : 		if (CEmitterProperty::EMITTER_ADVANCED_TYPE_INNER == m_pEmitterProperty->GetEmitterAdvancedType())

  00549	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0054c	e8 00 00 00 00	 call	 ?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ ; CEmitterProperty::GetEmitterAdvancedType
  00551	3c 02		 cmp	 al, 2
  00553	75 47		 jne	 SHORT $LN20@CreatePart
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00555	f3 0f 10 57 0c	 movss	 xmm2, DWORD PTR [edi+12]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 174  : 			D3DXVec3Normalize(&pInstance->m_v3Velocity, &d3dd);

  0055a	8d 45 b0	 lea	 eax, DWORD PTR _d3dd$4[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0055d	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  00562	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  00567	f3 0f 5c 55 e0	 subss	 xmm2, DWORD PTR _v3TimePosition$6[ebp]
  0056c	f3 0f 5c 4d e4	 subss	 xmm1, DWORD PTR _v3TimePosition$6[ebp+4]
  00571	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _v3TimePosition$6[ebp+8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 174  : 			D3DXVec3Normalize(&pInstance->m_v3Velocity, &d3dd);

  00576	50		 push	 eax
  00577	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  0057a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0057b	f3 0f 11 55 b0	 movss	 DWORD PTR _d3dd$4[ebp], xmm2

; 181  :     y = fy;

  00580	f3 0f 11 4d b4	 movss	 DWORD PTR _d3dd$4[ebp+4], xmm1

; 182  :     z = fz;

  00585	f3 0f 11 45 b8	 movss	 DWORD PTR _d3dd$4[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 174  : 			D3DXVec3Normalize(&pInstance->m_v3Velocity, &d3dd);

  0058a	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  0058f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@c2c80000
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 176  : 		}

  00597	e9 ab 00 00 00	 jmp	 $LN184@CreatePart
$LN20@CreatePart:

; 177  : 		else if (CEmitterProperty::EMITTER_ADVANCED_TYPE_OUTER == m_pEmitterProperty->GetEmitterAdvancedType())

  0059c	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  0059f	e8 00 00 00 00	 call	 ?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ ; CEmitterProperty::GetEmitterAdvancedType
  005a4	3c 01		 cmp	 al, 1
  005a6	0f 85 c5 00 00
	00		 jne	 $LN24@CreatePart

; 178  : 		{
; 179  : 			if (m_pEmitterProperty->GetEmitterShape() == CEmitterProperty::EMITTER_SHAPE_POINT)

  005ac	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  005af	e8 00 00 00 00	 call	 ?GetEmitterShape@CEmitterProperty@@QAEEXZ ; CEmitterProperty::GetEmitterShape
  005b4	84 c0		 test	 al, al
  005b6	75 4d		 jne	 SHORT $LN23@CreatePart

; 180  : 			{
; 181  : 				pInstance->m_v3Velocity.x = frandom(-100.0f, 100.0f);

  005b8	83 ec 08	 sub	 esp, 8
  005bb	c7 44 24 04 00
	00 c8 42	 mov	 DWORD PTR [esp+4], 1120403456 ; 42c80000H
  005c3	c7 04 24 00 00
	c8 c2		 mov	 DWORD PTR [esp], -1027080192 ; c2c80000H
  005ca	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  005cf	d9 5f 24	 fstp	 DWORD PTR [edi+36]

; 182  : 				pInstance->m_v3Velocity.y = frandom(-100.0f, 100.0f);

  005d2	c7 44 24 04 00
	00 c8 42	 mov	 DWORD PTR [esp+4], 1120403456 ; 42c80000H
  005da	c7 04 24 00 00
	c8 c2		 mov	 DWORD PTR [esp], -1027080192 ; c2c80000H
  005e1	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  005e6	d9 5f 28	 fstp	 DWORD PTR [edi+40]

; 183  : 				pInstance->m_v3Velocity.z = frandom(-100.0f, 100.0f);

  005e9	c7 44 24 04 00
	00 c8 42	 mov	 DWORD PTR [esp+4], 1120403456 ; 42c80000H
  005f1	c7 04 24 00 00
	c8 c2		 mov	 DWORD PTR [esp], -1027080192 ; c2c80000H
  005f8	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  005fd	d9 5f 2c	 fstp	 DWORD PTR [edi+44]
  00600	83 c4 08	 add	 esp, 8

; 184  : 			}

  00603	eb 6c		 jmp	 SHORT $LN24@CreatePart
$LN23@CreatePart:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00605	f3 0f 10 57 0c	 movss	 xmm2, DWORD PTR [edi+12]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 188  : 				D3DXVec3Normalize(&pInstance->m_v3Velocity, &d3dd);

  0060a	8d 45 a4	 lea	 eax, DWORD PTR _d3dd$3[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0060d	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  00612	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  00617	f3 0f 5c 55 e0	 subss	 xmm2, DWORD PTR _v3TimePosition$6[ebp]
  0061c	f3 0f 5c 4d e4	 subss	 xmm1, DWORD PTR _v3TimePosition$6[ebp+4]
  00621	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _v3TimePosition$6[ebp+8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 188  : 				D3DXVec3Normalize(&pInstance->m_v3Velocity, &d3dd);

  00626	50		 push	 eax
  00627	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  0062a	50		 push	 eax
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0062b	f3 0f 11 55 a4	 movss	 DWORD PTR _d3dd$3[ebp], xmm2

; 181  :     y = fy;

  00630	f3 0f 11 4d a8	 movss	 DWORD PTR _d3dd$3[ebp+4], xmm1

; 182  :     z = fz;

  00635	f3 0f 11 45 ac	 movss	 DWORD PTR _d3dd$3[ebp+8], xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 188  : 				D3DXVec3Normalize(&pInstance->m_v3Velocity, &d3dd);

  0063a	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  0063f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
$LN184@CreatePart:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 193  : 		D3DXVECTOR3 v3Velocity = _v3Velocity;

  00647	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  0064c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00650	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0
  00655	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  0065a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0065e	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
  00663	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  00668	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0066c	f3 0f 11 47 2c	 movss	 DWORD PTR [edi+44], xmm0
$LN24@CreatePart:
  00671	f3 0f 7e 45 c8	 movq	 xmm0, QWORD PTR __v3Velocity$[ebp]

; 194  : 		if (mc_pmatLocal && !m_pParticleProperty->m_bAttachFlag)

  00676	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00679	8b 45 d0	 mov	 eax, DWORD PTR __v3Velocity$[ebp+8]
  0067c	66 0f d6 45 d4	 movq	 QWORD PTR _v3Velocity$5[ebp], xmm0
  00681	89 45 dc	 mov	 DWORD PTR _v3Velocity$5[ebp+8], eax
  00684	85 c9		 test	 ecx, ecx
  00686	74 14		 je	 SHORT $LN25@CreatePart
  00688	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0068b	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0068f	75 0b		 jne	 SHORT $LN25@CreatePart

; 195  : 		{
; 196  : 			D3DXVec3TransformNormal(&v3Velocity, &v3Velocity, mc_pmatLocal);

  00691	51		 push	 ecx
  00692	8d 45 d4	 lea	 eax, DWORD PTR _v3Velocity$5[ebp]
  00695	50		 push	 eax
  00696	50		 push	 eax
  00697	e8 00 00 00 00	 call	 _D3DXVec3TransformNormal@12
$LN25@CreatePart:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 204  :     x += v.x;

  0069c	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _v3Velocity$5[ebp]
  006a1	f3 0f 58 47 24	 addss	 xmm0, DWORD PTR [edi+36]
  006a6	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0

; 205  :     y += v.y;

  006ab	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _v3Velocity$5[ebp+4]
  006b0	f3 0f 58 47 28	 addss	 xmm0, DWORD PTR [edi+40]
  006b5	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0

; 206  :     z += v.z;

  006ba	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _v3Velocity$5[ebp+8]
  006bf	f3 0f 58 47 2c	 addss	 xmm0, DWORD PTR [edi+44]
  006c4	f3 0f 11 47 2c	 movss	 DWORD PTR [edi+44], xmm0
  006c9	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 200  : 		if (m_pEmitterProperty->m_v3EmittingDirection.x > 0.0f)

  006cc	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  006cf	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  006d4	0f 2f c8	 comiss	 xmm1, xmm0
  006d7	76 48		 jbe	 SHORT $LN26@CreatePart

; 201  : 			pInstance->m_v3Velocity.x += frandom(-m_pEmitterProperty->m_v3EmittingDirection.x/2.0f, m_pEmitterProperty->m_v3EmittingDirection.x/2.0f) * 1000.0f;

  006d9	0f 28 c1	 movaps	 xmm0, xmm1
  006dc	83 ec 08	 sub	 esp, 8
  006df	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  006e6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  006ee	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  006f6	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  006fc	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00701	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00706	d8 4d 84	 fmul	 DWORD PTR __real@447a0000$1$[ebp]
  00709	83 c4 08	 add	 esp, 8
  0070c	d9 5d a0	 fstp	 DWORD PTR tv1416[ebp]
  0070f	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv1416[ebp]
  00714	f3 0f 58 47 24	 addss	 xmm0, DWORD PTR [edi+36]
  00719	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0
  0071e	0f 57 c0	 xorps	 xmm0, xmm0
$LN26@CreatePart:

; 202  : 		if (m_pEmitterProperty->m_v3EmittingDirection.y > 0.0f)

  00721	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00724	f3 0f 10 48 30	 movss	 xmm1, DWORD PTR [eax+48]
  00729	0f 2f c8	 comiss	 xmm1, xmm0
  0072c	76 48		 jbe	 SHORT $LN27@CreatePart

; 203  : 			pInstance->m_v3Velocity.y += frandom(-m_pEmitterProperty->m_v3EmittingDirection.y/2.0f, m_pEmitterProperty->m_v3EmittingDirection.y/2.0f) * 1000.0f;

  0072e	0f 28 c1	 movaps	 xmm0, xmm1
  00731	83 ec 08	 sub	 esp, 8
  00734	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0073b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00743	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  0074b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00751	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00756	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0075b	d8 4d 84	 fmul	 DWORD PTR __real@447a0000$1$[ebp]
  0075e	83 c4 08	 add	 esp, 8
  00761	d9 5d a0	 fstp	 DWORD PTR tv1275[ebp]
  00764	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv1275[ebp]
  00769	f3 0f 58 47 28	 addss	 xmm0, DWORD PTR [edi+40]
  0076e	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
  00773	0f 57 c0	 xorps	 xmm0, xmm0
$LN27@CreatePart:

; 204  : 		if (m_pEmitterProperty->m_v3EmittingDirection.z > 0.0f)

  00776	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00779	f3 0f 10 48 34	 movss	 xmm1, DWORD PTR [eax+52]
  0077e	0f 2f c8	 comiss	 xmm1, xmm0
  00781	76 45		 jbe	 SHORT $LN28@CreatePart

; 205  : 			pInstance->m_v3Velocity.z += frandom(-m_pEmitterProperty->m_v3EmittingDirection.z/2.0f, m_pEmitterProperty->m_v3EmittingDirection.z/2.0f) * 1000.0f;

  00783	0f 28 c1	 movaps	 xmm0, xmm1
  00786	83 ec 08	 sub	 esp, 8
  00789	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00790	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00798	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  007a0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  007a6	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  007ab	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  007b0	d8 4d 84	 fmul	 DWORD PTR __real@447a0000$1$[ebp]
  007b3	83 c4 08	 add	 esp, 8
  007b6	d9 5d a0	 fstp	 DWORD PTR tv1424[ebp]
  007b9	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv1424[ebp]
  007be	f3 0f 58 47 2c	 addss	 xmm0, DWORD PTR [edi+44]
  007c3	f3 0f 11 47 2c	 movss	 DWORD PTR [edi+44], xmm0
$LN28@CreatePart:

; 206  : 
; 207  : 		pInstance->m_v3Velocity *= fVelocity;

  007c8	f3 0f 10 8d 78
	ff ff ff	 movss	 xmm1, DWORD PTR _fVelocity$[ebp]

; 214  : 		pInstance->m_fRotation = frandom(m_pParticleProperty->m_wRotationRandomStartingBegin,m_pParticleProperty->m_wRotationRandomStartingEnd);

  007d0	83 ec 08	 sub	 esp, 8
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 222  :     x *= f;

  007d3	0f 28 c1	 movaps	 xmm0, xmm1
  007d6	f3 0f 59 47 24	 mulss	 xmm0, DWORD PTR [edi+36]
  007db	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0

; 223  :     y *= f;

  007e0	0f 28 c1	 movaps	 xmm0, xmm1
  007e3	f3 0f 59 47 28	 mulss	 xmm0, DWORD PTR [edi+40]

; 224  :     z *= f;

  007e8	f3 0f 59 4f 2c	 mulss	 xmm1, DWORD PTR [edi+44]
  007ed	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
  007f2	f3 0f 11 4f 2c	 movss	 DWORD PTR [edi+44], xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 210  : 		pInstance->m_v2HalfSize = v2HalfSize;

  007f7	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _v2HalfSize$[ebp]
  007fd	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _v2HalfSize$[ebp+4]
  00803	89 47 30	 mov	 DWORD PTR [edi+48], eax
  00806	89 4f 34	 mov	 DWORD PTR [edi+52], ecx

; 211  : 
; 212  : 		// Rotation
; 213  : 		pInstance->m_fRotation = m_pParticleProperty->m_wRotationRandomStartingBegin;

  00809	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0080c	0f b7 40 1c	 movzx	 eax, WORD PTR [eax+28]
  00810	66 0f 6e c0	 movd	 xmm0, eax
  00814	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00817	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0

; 214  : 		pInstance->m_fRotation = frandom(m_pParticleProperty->m_wRotationRandomStartingBegin,m_pParticleProperty->m_wRotationRandomStartingEnd);

  0081c	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  0081f	0f b7 41 1e	 movzx	 eax, WORD PTR [ecx+30]
  00823	66 0f 6e c0	 movd	 xmm0, eax
  00827	0f b7 41 1c	 movzx	 eax, WORD PTR [ecx+28]
  0082b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0082e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00834	66 0f 6e c0	 movd	 xmm0, eax
  00838	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0083b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00840	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00845	d9 5d a0	 fstp	 DWORD PTR tv748[ebp]
  00848	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv748[ebp]
  0084d	83 c4 08	 add	 esp, 8
  00850	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0

; 215  : 		if (BILLBOARD_TYPE_LIE == m_pParticleProperty->m_byBillboardType && mc_pmatLocal)

  00855	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00858	80 78 13 03	 cmp	 BYTE PTR [eax+19], 3
  0085c	75 13		 jne	 SHORT $LN29@CreatePart
  0085e	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00862	74 0d		 je	 SHORT $LN29@CreatePart

; 216  : 		{
; 217  : 			pInstance->m_fRotation += fLieRotation;

  00864	f3 0f 58 85 74
	ff ff ff	 addss	 xmm0, DWORD PTR _fLieRotation$1$[ebp]
  0086c	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0
$LN29@CreatePart:

; 218  : 		}
; 219  : 
; 220  : 		// Texture Animation
; 221  : 		pInstance->m_byFrameIndex = 0;

  00871	c6 47 50 00	 mov	 BYTE PTR [edi+80], 0

; 222  : 		pInstance->m_byTextureAnimationType = m_pParticleProperty->GetTextureAnimationType();

  00875	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00878	8a 40 04	 mov	 al, BYTE PTR [eax+4]
  0087b	88 47 48	 mov	 BYTE PTR [edi+72], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  0087e	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00881	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00884	2b 41 70	 sub	 eax, DWORD PTR [ecx+112]
  00887	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 224  : 		if (m_pParticleProperty->GetTextureAnimationFrameCount() > 1)

  0088a	83 f8 01	 cmp	 eax, 1
  0088d	76 4f		 jbe	 SHORT $LN34@CreatePart

; 225  : 		{
; 226  : 			if (CParticleProperty::TEXTURE_ANIMATION_TYPE_RANDOM_DIRECTION == m_pParticleProperty->GetTextureAnimationType())

  0088f	80 79 04 04	 cmp	 BYTE PTR [ecx+4], 4
  00893	75 28		 jne	 SHORT $LN33@CreatePart

; 227  : 			{
; 228  : 				if (random() & 1)

  00895	e8 00 00 00 00	 call	 ?random@@YAKXZ		; random
  0089a	a8 01		 test	 al, 1
  0089c	74 0a		 je	 SHORT $LN32@CreatePart

; 229  : 				{
; 230  : 					pInstance->m_byFrameIndex = 0;

  0089e	c6 47 50 00	 mov	 BYTE PTR [edi+80], 0

; 231  : 					pInstance->m_byTextureAnimationType = CParticleProperty::TEXTURE_ANIMATION_TYPE_CW;

  008a2	c6 47 48 01	 mov	 BYTE PTR [edi+72], 1

; 232  : 				}

  008a6	eb 15		 jmp	 SHORT $LN33@CreatePart
$LN32@CreatePart:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  008a8	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  008ab	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  008ae	2b 48 70	 sub	 ecx, DWORD PTR [eax+112]
  008b1	c1 f9 02	 sar	 ecx, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 235  : 					pInstance->m_byFrameIndex = m_pParticleProperty->GetTextureAnimationFrameCount() - 1;

  008b4	fe c9		 dec	 cl
  008b6	88 4f 50	 mov	 BYTE PTR [edi+80], cl

; 236  : 					pInstance->m_byTextureAnimationType = CParticleProperty::TEXTURE_ANIMATION_TYPE_CCW;

  008b9	c6 47 48 02	 mov	 BYTE PTR [edi+72], 2
$LN33@CreatePart:

; 237  : 				}
; 238  : 			}
; 239  : 			if (m_pParticleProperty->m_bTexAniRandomStartFrameFlag)

  008bd	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  008c0	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  008c4	74 18		 je	 SHORT $LN34@CreatePart
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  008c6	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  008c9	2b 41 70	 sub	 eax, DWORD PTR [ecx+112]
  008cc	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 241  : 				pInstance->m_byFrameIndex = random_range(0,m_pParticleProperty->GetTextureAnimationFrameCount()-1);

  008cf	48		 dec	 eax
  008d0	50		 push	 eax
  008d1	6a 00		 push	 0
  008d3	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
  008d8	83 c4 08	 add	 esp, 8
  008db	88 47 50	 mov	 BYTE PTR [edi+80], al
$LN34@CreatePart:
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  008de	f3 0f 10 8d 70
	ff ff ff	 movss	 xmm1, DWORD PTR _fElapsedTime$GSCopy$1$[ebp]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  008e6	f3 0f 10 5f 10	 movss	 xmm3, DWORD PTR [edi+16]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  008eb	0f 28 c1	 movaps	 xmm0, xmm1
  008ee	f3 0f 59 47 28	 mulss	 xmm0, DWORD PTR [edi+40]
  008f3	0f 28 e1	 movaps	 xmm4, xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 261  : 		if (!pFirstInstance)

  008f6	8b 4d 80	 mov	 ecx, DWORD PTR _pFirstInstance$1$[ebp]
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  008f9	f3 0f 59 67 24	 mulss	 xmm4, DWORD PTR [edi+36]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 261  : 		if (!pFirstInstance)

  008fe	57		 push	 edi
; File C:\Marty 5.5\Src-Client\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  008ff	f3 0f 59 4f 2c	 mulss	 xmm1, DWORD PTR [edi+44]

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00904	f3 0f 5c d8	 subss	 xmm3, xmm0
  00908	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  0090d	f3 0f 10 57 14	 movss	 xmm2, DWORD PTR [edi+20]
  00912	f3 0f 5c c4	 subss	 xmm0, xmm4
  00916	f3 0f 5c d1	 subss	 xmm2, xmm1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 247  : 			pInstance->m_v3LastPosition = pInstance->m_v3Position - (pInstance->m_v3Velocity * fElapsedTime);

  0091a	f3 0f 11 47 18	 movss	 DWORD PTR [edi+24], xmm0
  0091f	f3 0f 11 5f 1c	 movss	 DWORD PTR [edi+28], xmm3
  00924	f3 0f 11 57 20	 movss	 DWORD PTR [edi+32], xmm2

; 248  : 			pInstance->m_v2Scale.x = m_pParticleProperty->m_TimeEventScaleX.front().m_Value;

  00929	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0092c	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0092f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00932	89 47 38	 mov	 DWORD PTR [edi+56], eax

; 249  : 			pInstance->m_v2Scale.y= m_pParticleProperty->m_TimeEventScaleY.front().m_Value;

  00935	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00938	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  0093b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0093e	89 47 3c	 mov	 DWORD PTR [edi+60], eax

; 250  : 			//pInstance->m_v2Scale = m_pParticleProperty->m_TimeEventScaleXY.front().m_Value;
; 251  : #ifdef WORLD_EDITOR
; 252  : 			pInstance->m_Color.r = m_pParticleProperty->m_TimeEventColorRed.front().m_Value;
; 253  : 			pInstance->m_Color.g = m_pParticleProperty->m_TimeEventColorGreen.front().m_Value;
; 254  : 			pInstance->m_Color.b = m_pParticleProperty->m_TimeEventColorBlue.front().m_Value;
; 255  : 			pInstance->m_Color.a = m_pParticleProperty->m_TimeEventAlpha.front().m_Value;
; 256  : #else
; 257  : 			pInstance->m_dcColor = m_pParticleProperty->m_TimeEventColor.front().m_Value;

  00941	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00944	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 141  : 		m_dwColor = r.m_dwColor;

  00947	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0094a	89 47 44	 mov	 DWORD PTR [edi+68], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 261  : 		if (!pFirstInstance)

  0094d	85 c9		 test	 ecx, ecx
  0094f	75 0d		 jne	 SHORT $LN35@CreatePart

; 262  : 		{
; 263  : 			m_pData->BuildDecorator(pInstance);

  00951	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00954	e8 00 00 00 00	 call	 ?BuildDecorator@CParticleSystemData@@QAEXPAVCParticleInstance@@@Z ; CParticleSystemData::BuildDecorator

; 264  : 			pFirstInstance = pInstance;

  00959	89 7d 80	 mov	 DWORD PTR _pFirstInstance$1$[ebp], edi

; 265  : 		}

  0095c	eb 56		 jmp	 SHORT $LN36@CreatePart
$LN35@CreatePart:

; 268  : 			pInstance->m_pDecorator = pFirstInstance->m_pDecorator->Clone(pFirstInstance,pInstance);

  0095e	8b 71 70	 mov	 esi, DWORD PTR [ecx+112]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EffectUpdateDecorator.h

; 52   : 			CBaseDecorator * pNewDecorator = __Clone(pFirstInstance, pInstance);

  00961	51		 push	 ecx
  00962	8b ce		 mov	 ecx, esi
  00964	8b 06		 mov	 eax, DWORD PTR [esi]
  00966	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00969	ff d0		 call	 eax

; 53   : 			CBaseDecorator * pSrc = this;
; 54   : 			CBaseDecorator * pDest = pNewDecorator;
; 55   : 			while (pSrc->m_NextDecorator)

  0096b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0096e	83 c6 04	 add	 esi, 4
  00971	89 85 7c ff ff
	ff		 mov	 DWORD PTR _pNewDecorator$1$[ebp], eax
  00977	89 45 a0	 mov	 DWORD PTR _pDest$1$[ebp], eax
  0097a	85 c9		 test	 ecx, ecx
  0097c	74 2d		 je	 SHORT $LN136@CreatePart
  0097e	66 90		 npad	 2
$LL135@CreatePart:

; 56   : 			{
; 57   : 				pDest->m_NextDecorator = pSrc->m_NextDecorator->__Clone(pFirstInstance, pInstance);

  00980	8b 01		 mov	 eax, DWORD PTR [ecx]
  00982	57		 push	 edi
  00983	ff 75 80	 push	 DWORD PTR _pFirstInstance$1$[ebp]
  00986	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00989	ff d0		 call	 eax
  0098b	8b 55 a0	 mov	 edx, DWORD PTR _pDest$1$[ebp]
  0098e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 58   : 				pDest->m_NextDecorator->m_PrevDecorator = pDest;

  00991	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 59   : 
; 60   : 				pSrc = pSrc->m_NextDecorator;

  00994	8b 36		 mov	 esi, DWORD PTR [esi]

; 61   : 				pDest = pDest->m_NextDecorator;

  00996	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00999	83 c6 04	 add	 esi, 4
  0099c	89 4d a0	 mov	 DWORD PTR _pDest$1$[ebp], ecx
  0099f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  009a1	85 c9		 test	 ecx, ecx
  009a3	75 db		 jne	 SHORT $LL135@CreatePart
  009a5	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _pNewDecorator$1$[ebp]
$LN136@CreatePart:
  009ab	8b b5 64 ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 268  : 			pInstance->m_pDecorator = pFirstInstance->m_pDecorator->Clone(pFirstInstance,pInstance);

  009b1	89 47 70	 mov	 DWORD PTR [edi+112], eax
$LN36@CreatePart:

; 269  : 		}
; 270  : 
; 271  : 		m_ParticleInstanceListVector[pInstance->m_byFrameIndex].push_back(pInstance);

  009b4	0f b6 4f 50	 movzx	 ecx, BYTE PTR [edi+80]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  009b8	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1020 :         if (_Mysize == max_size()) {

  009bb	81 7c c8 04 55
	55 55 15	 cmp	 DWORD PTR [eax+ecx*8+4], 357913941 ; 15555555H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  009c3	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1264 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  009c6	8b 08		 mov	 ecx, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  009c8	89 85 7c ff ff
	ff		 mov	 DWORD PTR _this$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1264 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  009ce	89 4d a0	 mov	 DWORD PTR __Where$1$[ebp], ecx

; 1020 :         if (_Mysize == max_size()) {

  009d1	74 7e		 je	 SHORT $LN168@CreatePart
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1156 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  009d3	89 45 88	 mov	 DWORD PTR __Op$2[ebp], eax

; 136  :         return ::operator new(_Bytes);

  009d6	6a 0c		 push	 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 583  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  009d8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1163 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  009df	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 136  :         return ::operator new(_Bytes);

  009e6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1025 :         ++_Mysize;

  009eb	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  009f1	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  009f4	8b 55 a0	 mov	 edx, DWORD PTR __Where$1$[ebp]

; 586  :     }

  009f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  009fe	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 1025 :         ++_Mysize;

  00a01	ff 41 04	 inc	 DWORD PTR [ecx+4]

; 598  :         const pointer _Insert_after = _Insert_before->_Prev;

  00a04	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 599  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00a07	89 10		 mov	 DWORD PTR [eax], edx

; 600  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00a09	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 603  :         _Insert_before->_Prev = _Result;

  00a0c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 604  :         _Insert_after->_Next  = _Result;

  00a0f	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 93   : 	for (int i = 0; i < iCreatingCount; ++i)

  00a11	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]

; 272  : 		m_dwCurrentEmissionCount++;

  00a17	ff 46 28	 inc	 DWORD PTR [esi+40]
  00a1a	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 602  :         this->_Ptr            = pointer{};

  00a1b	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 93   : 	for (int i = 0; i < iCreatingCount; ++i)

  00a22	89 85 6c ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  00a28	3b 45 94	 cmp	 eax, DWORD PTR _iCreatingCount$1$[ebp]
  00a2b	0f 8c 5f f8 ff
	ff		 jl	 $LL4@CreatePart
$LN3@CreatePart:

; 274  : }

  00a31	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00a34	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00a3b	59		 pop	 ecx
  00a3c	5f		 pop	 edi
  00a3d	5e		 pop	 esi
  00a3e	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a41	33 cd		 xor	 ecx, ebp
  00a43	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a48	8b e5		 mov	 esp, ebp
  00a4a	5d		 pop	 ebp
  00a4b	8b e3		 mov	 esp, ebx
  00a4d	5b		 pop	 ebx
  00a4e	c2 04 00	 ret	 4
$LN168@CreatePart:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\list

; 1021 :             _Xlength_error("list too long");

  00a51	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00a56	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN182@CreatePart:
  00a5b	90		 npad	 1
$LN176@CreatePart:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 274  : }

  00a5c	00 00 00 00	 DD	 $LN11@CreatePart
  00a60	00 00 00 00	 DD	 $LN12@CreatePart
  00a64	00 00 00 00	 DD	 $LN15@CreatePart
  00a68	00 00 00 00	 DD	 $LN16@CreatePart
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateParticles@CParticleSystemInstance@@QAEXM@Z$1:
  00000	8d 4d 88	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?CreateParticles@CParticleSystemInstance@@QAEXM@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateParticles@CParticleSystemInstance@@QAEXM@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateParticles@CParticleSystemInstance@@QAEXM@Z ENDP	; CParticleSystemInstance::CreateParticles
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?OnSetDataPointer@CParticleSystemInstance@@UAEXPAVCEffectElementBase@@@Z
_TEXT	SEGMENT
__Newsize$1$ = -20					; size = 4
_pkImgInstNew$1$ = -16					; size = 4
tv1221 = -12						; size = 4
__Oldsize$1$ = -12					; size = 4
_i$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
_pElement$ = 8						; size = 4
__Size$1$ = 8						; size = 4
__Whereptr$1$ = 8					; size = 4
$T2 = 11						; size = 1
?OnSetDataPointer@CParticleSystemInstance@@UAEXPAVCEffectElementBase@@@Z PROC ; CParticleSystemInstance::OnSetDataPointer, COMDAT
; _this$ = ecx

; 462  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 463  : 	m_pData = (CParticleSystemData *)pElement;

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _pElement$[ebp]
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00011	89 4b 48	 mov	 DWORD PTR [ebx+72], ecx

; 464  : 
; 465  : 	m_dwCurrentEmissionCount = 0;

  00014	c7 43 28 00 00
	00 00		 mov	 DWORD PTR [ebx+40], 0

; 466  : 	m_pParticleProperty = m_pData->GetParticlePropertyPointer();

  0001b	e8 00 00 00 00	 call	 ?GetParticlePropertyPointer@CParticleSystemData@@QAEPAVCParticleProperty@@XZ ; CParticleSystemData::GetParticlePropertyPointer

; 467  : 	m_pEmitterProperty = m_pData->GetEmitterPropertyPointer();

  00020	8b 4b 48	 mov	 ecx, DWORD PTR [ebx+72]
  00023	89 43 4c	 mov	 DWORD PTR [ebx+76], eax
  00026	e8 00 00 00 00	 call	 ?GetEmitterPropertyPointer@CParticleSystemData@@QAEPAVCEmitterProperty@@XZ ; CParticleSystemData::GetEmitterPropertyPointer
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  0002b	8b 4b 4c	 mov	 ecx, DWORD PTR [ebx+76]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 469  : 	m_ParticleInstanceListVector.resize(m_pParticleProperty->GetTextureAnimationFrameCount()*2+2);

  0002e	8d 7b 30	 lea	 edi, DWORD PTR [ebx+48]
  00031	89 43 50	 mov	 DWORD PTR [ebx+80], eax
  00034	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00037	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003a	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  0003d	2b 41 70	 sub	 eax, DWORD PTR [ecx+112]

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00040	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00043	8b d3		 mov	 edx, ebx
  00045	8b 37		 mov	 esi, DWORD PTR [edi]
  00047	2b d6		 sub	 edx, esi

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00049	c1 f8 02	 sar	 eax, 2

; 1580 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0004c	c1 fa 03	 sar	 edx, 3
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 469  : 	m_ParticleInstanceListVector.resize(m_pParticleProperty->GetTextureAnimationFrameCount()*2+2);

  0004f	8d 0c 45 02 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+2]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1581 :         if (_Newsize < _Oldsize) { // trim

  00056	3b ca		 cmp	 ecx, edx
  00058	73 10		 jae	 SHORT $LN14@OnSetDataP

; 1582 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1583 :             _Orphan_range(_Newlast, _Mylast);
; 1584 :             _Destroy_range(_Newlast, _Mylast, _Al);

  0005a	57		 push	 edi
  0005b	8d 34 ce	 lea	 esi, DWORD PTR [esi+ecx*8]
  0005e	53		 push	 ebx
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >

; 1585 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1586 :             _Mylast = _Newlast;

  00065	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 1587 :             return;

  00068	eb 29		 jmp	 SHORT $LN238@OnSetDataP
$LN14@OnSetDataP:

; 1588 :         }
; 1589 : 
; 1590 :         if (_Newsize > _Oldsize) { // append

  0006a	76 2a		 jbe	 SHORT $LN15@OnSetDataP

; 1591 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0006c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0006f	2b c6		 sub	 eax, esi
  00071	c1 f8 03	 sar	 eax, 3

; 1592 :             if (_Newsize > _Oldcapacity) { // reallocate

  00074	3b c8		 cmp	 ecx, eax
  00076	76 0e		 jbe	 SHORT $LN16@OnSetDataP

; 1593 :                 _Resize_reallocate(_Newsize, _Val);

  00078	8d 45 0b	 lea	 eax, DWORD PTR $T2[ebp]
  0007b	50		 push	 eax
  0007c	51		 push	 ecx
  0007d	8b cf		 mov	 ecx, edi
  0007f	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Resize_reallocate<std::_Value_init_tag>

; 1594 :                 return;

  00084	eb 10		 jmp	 SHORT $LN15@OnSetDataP
$LN16@OnSetDataP:

; 1595 :             }
; 1596 : 
; 1597 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1598 :             const pointer _Oldlast = _Mylast;
; 1599 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1600 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1601 :             } else {
; 1602 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1603 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00086	57		 push	 edi
  00087	2b ca		 sub	 ecx, edx
  00089	51		 push	 ecx
  0008a	53		 push	 ebx
  0008b	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  00090	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN238@OnSetDataP:

; 1899 :         auto& _My_data = _Mypair._Myval2;

  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@OnSetDataP:
  00096	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 474  : 	m_kVct_pkImgInst.reserve(m_pParticleProperty->m_ImageVector.size());

  00099	8d 7a 3c	 lea	 edi, DWORD PTR [edx+60]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  0009c	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0009f	8b 17		 mov	 edx, DWORD PTR [edi]

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000a1	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  000a4	2b 48 70	 sub	 ecx, DWORD PTR [eax+112]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000a7	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000aa	2b c2		 sub	 eax, edx

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000ac	c1 f9 02	 sar	 ecx, 2

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000af	c1 f8 02	 sar	 eax, 2

; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  000b2	3b c8		 cmp	 ecx, eax
  000b4	0f 86 95 00 00
	00		 jbe	 $LN216@OnSetDataP

; 1711 :             if (_Newcapacity > max_size()) {

  000ba	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  000c0	0f 87 cd 01 00
	00		 ja	 $LN210@OnSetDataP

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  000c6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 122  :     return _Count * _Ty_size;

  000c9	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  000d0	2b c2		 sub	 eax, edx
  000d2	c1 f8 02	 sar	 eax, 2
  000d5	89 45 08	 mov	 DWORD PTR __Size$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000d8	85 db		 test	 ebx, ebx
  000da	75 04		 jne	 SHORT $LN40@OnSetDataP

; 228  :         return nullptr;

  000dc	33 f6		 xor	 esi, esi
  000de	eb 1a		 jmp	 SHORT $LN39@OnSetDataP
$LN40@OnSetDataP:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000e0	53		 push	 ebx
  000e1	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  000e7	72 07		 jb	 SHORT $LN41@OnSetDataP

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000e9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ee	eb 05		 jmp	 SHORT $LN239@OnSetDataP
$LN41@OnSetDataP:

; 136  :         return ::operator new(_Bytes);

  000f0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN239@OnSetDataP:

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000f5	8b f0		 mov	 esi, eax
  000f7	83 c4 04	 add	 esp, 4
$LN39@OnSetDataP:
  000fa	56		 push	 esi
  000fb	ff 77 04	 push	 DWORD PTR [edi+4]
  000fe	ff 37		 push	 DWORD PTR [edi]
  00100	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00105	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0010a	85 c0		 test	 eax, eax
  0010c	74 30		 je	 SHORT $LN67@OnSetDataP

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0010e	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00111	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00113	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00116	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011c	72 16		 jb	 SHORT $LN78@OnSetDataP

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00121	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00124	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00126	83 c0 fc	 add	 eax, -4			; fffffffcH
  00129	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012c	0f 87 66 01 00
	00		 ja	 $LN75@OnSetDataP

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00132	8b c2		 mov	 eax, edx
$LN78@OnSetDataP:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00134	51		 push	 ecx
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013b	83 c4 08	 add	 esp, 8
$LN67@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0013e	8b 45 08	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00141	89 37		 mov	 DWORD PTR [edi], esi
  00143	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  00146	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00149	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  0014c	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN216@OnSetDataP:

; 1899 :         auto& _My_data = _Mypair._Myval2;

  0014f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 475  : 	for (DWORD i = 0; i < m_pParticleProperty->m_ImageVector.size(); ++i)

  00152	33 d2		 xor	 edx, edx
  00154	89 55 f8	 mov	 DWORD PTR _i$1$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  00157	8b 49 4c	 mov	 ecx, DWORD PTR [ecx+76]

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0015a	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  0015d	2b 41 70	 sub	 eax, DWORD PTR [ecx+112]
  00160	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 475  : 	for (DWORD i = 0; i < m_pParticleProperty->m_ImageVector.size(); ++i)

  00163	85 c0		 test	 eax, eax
  00165	0f 84 1f 01 00
	00		 je	 $LN3@OnSetDataP
  0016b	0f 1f 44 00 00	 npad	 5
$LL4@OnSetDataP:

; 476  : 	{
; 477  : 		CGraphicImage * pImage = m_pParticleProperty->m_ImageVector[i];

  00170	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00173	8b 34 90	 mov	 esi, DWORD PTR [eax+edx*4]

; 478  : 
; 479  : 		CGraphicImageInstance* pkImgInstNew = CGraphicImageInstance::New();

  00176	e8 00 00 00 00	 call	 ?New@CGraphicImageInstance@@SAPAV1@XZ ; CGraphicImageInstance::New
  0017b	8b d8		 mov	 ebx, eax

; 480  : 		pkImgInstNew->SetImagePointer(pImage);

  0017d	56		 push	 esi
  0017e	8b cb		 mov	 ecx, ebx
  00180	89 5d f0	 mov	 DWORD PTR _pkImgInstNew$1$[ebp], ebx
  00183	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00188	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0018b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0018e	89 45 08	 mov	 DWORD PTR __Whereptr$1$[ebp], eax
  00191	3b c1		 cmp	 eax, ecx
  00193	74 0b		 je	 SHORT $LN117@OnSetDataP

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00195	89 18		 mov	 DWORD PTR [eax], ebx

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00197	83 47 04 04	 add	 DWORD PTR [edi+4], 4

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0019b	e9 cc 00 00 00	 jmp	 $LN2@OnSetDataP
$LN117@OnSetDataP:

; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  001a0	8b 17		 mov	 edx, DWORD PTR [edi]
  001a2	2b c2		 sub	 eax, edx
  001a4	c1 f8 02	 sar	 eax, 2
  001a7	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  001aa	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  001af	0f 84 de 00 00
	00		 je	 $LN210@OnSetDataP

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  001b5	2b ca		 sub	 ecx, edx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  001b7	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  001ba	c1 f9 02	 sar	 ecx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  001bd	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  001c2	8b d1		 mov	 edx, ecx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  001c4	89 75 ec	 mov	 DWORD PTR __Newsize$1$[ebp], esi

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  001c7	d1 ea		 shr	 edx, 1
  001c9	2b c2		 sub	 eax, edx
  001cb	3b c8		 cmp	 ecx, eax
  001cd	76 12		 jbe	 SHORT $LN128@OnSetDataP

; 1997 :             return _Max; // geometric growth would overflow

  001cf	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  001d4	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001df	eb 3a		 jmp	 SHORT $LN240@OnSetDataP
$LN128@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  001e1	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  001e4	8b de		 mov	 ebx, esi
  001e6	3b c6		 cmp	 eax, esi
  001e8	0f 43 d8	 cmovae	 ebx, eax
  001eb	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  001f1	0f 87 a6 00 00
	00		 ja	 $LN211@OnSetDataP

; 122  :     return _Count * _Ty_size;

  001f7	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]

; 227  :     if (_Bytes == 0) {

  001fe	85 c0		 test	 eax, eax
  00200	75 04		 jne	 SHORT $LN143@OnSetDataP

; 228  :         return nullptr;

  00202	33 f6		 xor	 esi, esi
  00204	eb 1a		 jmp	 SHORT $LN142@OnSetDataP
$LN143@OnSetDataP:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00206	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0020b	72 08		 jb	 SHORT $LN144@OnSetDataP

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00213	eb 06		 jmp	 SHORT $LN240@OnSetDataP
$LN144@OnSetDataP:

; 136  :         return ::operator new(_Bytes);

  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN240@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0021b	8b f0		 mov	 esi, eax
  0021d	83 c4 04	 add	 esp, 4
$LN142@OnSetDataP:
  00220	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00223	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]
  00226	8b 45 f0	 mov	 eax, DWORD PTR _pkImgInstNew$1$[ebp]
  00229	89 01		 mov	 DWORD PTR [ecx], eax

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0022b	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$1$[ebp]
  0022e	8b 17		 mov	 edx, DWORD PTR [edi]
  00230	89 4d f4	 mov	 DWORD PTR tv1221[ebp], ecx
  00233	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00236	3b c1		 cmp	 eax, ecx
  00238	75 04		 jne	 SHORT $LN123@OnSetDataP
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0023a	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  0023c	eb 17		 jmp	 SHORT $LN172@OnSetDataP
$LN123@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0023e	56		 push	 esi
  0023f	50		 push	 eax
  00240	52		 push	 edx
  00241	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00246	8b 45 f4	 mov	 eax, DWORD PTR tv1221[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00249	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024c	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0024f	83 c0 04	 add	 eax, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00252	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
$LN172@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 900  :         _Guard._New_begin = nullptr;

  00255	50		 push	 eax
  00256	51		 push	 ecx
  00257	52		 push	 edx
  00258	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
  0025d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00260	8b cf		 mov	 ecx, edi
  00262	53		 push	 ebx
  00263	ff 75 ec	 push	 DWORD PTR __Newsize$1$[ebp]
  00266	56		 push	 esi
  00267	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array
$LN2@OnSetDataP:

; 1899 :         auto& _My_data = _Mypair._Myval2;

  0026c	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 475  : 	for (DWORD i = 0; i < m_pParticleProperty->m_ImageVector.size(); ++i)

  0026f	8b 55 f8	 mov	 edx, DWORD PTR _i$1$[ebp]
  00272	42		 inc	 edx
  00273	89 55 f8	 mov	 DWORD PTR _i$1$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1899 :         auto& _My_data = _Mypair._Myval2;

  00276	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00279	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  0027c	2b 41 70	 sub	 eax, DWORD PTR [ecx+112]
  0027f	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 475  : 	for (DWORD i = 0; i < m_pParticleProperty->m_ImageVector.size(); ++i)

  00282	3b d0		 cmp	 edx, eax
  00284	0f 82 e6 fe ff
	ff		 jb	 $LL4@OnSetDataP
$LN3@OnSetDataP:
  0028a	5f		 pop	 edi

; 483  : }

  0028b	5e		 pop	 esi
  0028c	5b		 pop	 ebx
  0028d	8b e5		 mov	 esp, ebp
  0028f	5d		 pop	 ebp
  00290	c2 04 00	 ret	 4
$LN210@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00293	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
$LN75@OnSetDataP:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00298	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN211@OnSetDataP:

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0029d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN237@OnSetDataP:
  002a2	cc		 int	 3
?OnSetDataPointer@CParticleSystemInstance@@UAEXPAVCEffectElementBase@@@Z ENDP ; CParticleSystemInstance::OnSetDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ??1CParticleSystemInstance@@UAE@XZ
_TEXT	SEGMENT
??1CParticleSystemInstance@@UAE@XZ PROC			; CParticleSystemInstance::~CParticleSystemInstance, COMDAT
; _this$ = ecx

; 520  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CParticleSystemInstance@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN8@CParticleS

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  00013	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN27@CParticleS

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 31		 ja	 SHORT $LN24@CParticleS

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN27@CParticleS:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00039	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00043	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 2082 :             _Myend   = nullptr;

  0004a	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
$LN8@CParticleS:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 523  : }

  00051	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00054	e8 00 00 00 00	 call	 ??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  00059	8b ce		 mov	 ecx, esi
  0005b	5e		 pop	 esi
  0005c	e9 00 00 00 00	 jmp	 ??1CEffectElementBaseInstance@@UAE@XZ ; CEffectElementBaseInstance::~CEffectElementBaseInstance
$LN24@CParticleS:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00061	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@CParticleS:
  00066	cc		 int	 3
??1CParticleSystemInstance@@UAE@XZ ENDP			; CParticleSystemInstance::~CParticleSystemInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ??0CParticleSystemInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CParticleSystemInstance@@QAE@XZ PROC			; CParticleSystemInstance::CParticleSystemInstance, COMDAT
; _this$ = ecx

; 515  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CParticleSystemInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CEffectElementBaseInstance@@QAE@XZ ; CEffectElementBaseInstance::CEffectElementBaseInstance
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CParticleSystemInstance@@6B@
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0003b	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  00042	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00049	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00050	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00057	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  0005e	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 516  : 	Initialize();

  00065	8b ce		 mov	 ecx, esi
  00067	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006b	e8 00 00 00 00	 call	 ?Initialize@CEffectElementBaseInstance@@QAEXXZ ; CEffectElementBaseInstance::Initialize

; 517  : }

  00070	8b c6		 mov	 eax, esi
  00072	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00075	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007c	59		 pop	 ecx
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CEffectElementBaseInstance@@UAE@XZ ; CEffectElementBaseInstance::~CEffectElementBaseInstance
__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 30	 add	 ecx, 48			; 00000030H
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00019	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::~vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CParticleSystemInstance@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CParticleSystemInstance@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CParticleSystemInstance@@QAE@XZ ENDP			; CParticleSystemInstance::CParticleSystemInstance
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?Delete@CParticleSystemInstance@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkPSInst$ = 8						; size = 4
_pkData$ = 8						; size = 4
?Delete@CParticleSystemInstance@@SAXPAV1@@Z PROC	; CParticleSystemInstance::Delete, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 27   : 	pkPSInst->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkPSInst$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CEffectElementBaseInstance@@QAEXXZ ; CEffectElementBaseInstance::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 28   : 	ms_kPool.Free(pkPSInst);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 29   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Emplace_reallocate<CParticleSystemInstance * const &>
  00039	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 29   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CParticleSystemInstance@@SAXPAV1@@Z ENDP	; CParticleSystemInstance::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?New@CParticleSystemInstance@@SAPAV1@XZ
_TEXT	SEGMENT
_pkNewData$2 = -16					; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?New@CParticleSystemInstance@@SAPAV1@XZ PROC		; CParticleSystemInstance::New, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CParticleSystemInstance@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00024	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20
  0002a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+16, ecx
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  00030	0f 85 84 00 00
	00		 jne	 $LN4@New

; 66   : 				T* pkNewData=new T;

  00036	6a 54		 push	 84			; 00000054H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN6@New
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ??0CParticleSystemInstance@@QAE@XZ ; CParticleSystemInstance::CParticleSystemInstance
  00055	8b f0		 mov	 esi, eax
  00057	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00059	33 f6		 xor	 esi, esi
$LN7@New:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0005b	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	89 75 f0	 mov	 DWORD PTR _pkNewData$2[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0006a	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+12
  00070	74 21		 je	 SHORT $LN15@New

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00072	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 22   : 	return ms_kPool.Alloc();

  00074	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00076	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8, 4
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  0007d	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 23   : }

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN15@New:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00093	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$2[ebp]
  00096	51		 push	 ecx
  00097	50		 push	 eax
  00098	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+4
  0009d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Emplace_reallocate<CParticleSystemInstance * const &>
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  000a2	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+32
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 22   : 	return ms_kPool.Alloc();

  000a8	8b c6		 mov	 eax, esi

; 23   : }

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5e		 pop	 esi
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
$LN4@New:
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  000ba	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1744 :         --_Mylast;

  000bd	83 c1 fc	 add	 ecx, -4			; fffffffcH
  000c0	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 23   : }

  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	5e		 pop	 esi
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CParticleSystemInstance@@SAPAV1@XZ$0:
  00000	6a 54		 push	 84			; 00000054H
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?New@CParticleSystemInstance@@SAPAV1@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CParticleSystemInstance@@SAPAV1@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CParticleSystemInstance@@SAPAV1@XZ ENDP		; CParticleSystemInstance::New
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?DestroySystem@CParticleSystemInstance@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CParticleSystemInstance@@SAXXZ PROC	; CParticleSystemInstance::DestroySystem, COMDAT

; 13   : {

  00000	56		 push	 esi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+4
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 13   : {

  00007	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8
  0000e	3b f7		 cmp	 esi, edi
  00010	74 29		 je	 SHORT $LN12@DestroySys
$LL6@DestroySys:

; 111  : 			delete pkData;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN4@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN4@DestroySys:

; 50   : 			for (auto v : m_kVct_pkData)

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL6@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
  00033	74 06		 je	 SHORT $LN12@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00035	89 35 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8, esi
$LN12@DestroySys:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0003b	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+16
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	3b 05 14 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20
  00048	74 05		 je	 SHORT $LN16@DestroySys

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0004a	a3 14 00 00 00	 mov	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20, eax
$LN16@DestroySys:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp

; 16   : 	CParticleInstance::DestroySystem();

  0004f	e9 00 00 00 00	 jmp	 ?DestroySystem@CParticleInstance@@SAXXZ ; CParticleInstance::DestroySystem
?DestroySystem@CParticleSystemInstance@@SAXXZ ENDP	; CParticleSystemInstance::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
