; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EffectLib\Distribute\EmitterProperty.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0CEmitterProperty@@QAE@XZ			; CEmitterProperty::CEmitterProperty
PUBLIC	??1CEmitterProperty@@UAE@XZ			; CEmitterProperty::~CEmitterProperty
PUBLIC	?Clear@CEmitterProperty@@QAEXXZ			; CEmitterProperty::Clear
PUBLIC	?GetEmitterShape@CEmitterProperty@@QAEEXZ	; CEmitterProperty::GetEmitterShape
PUBLIC	?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ ; CEmitterProperty::GetEmitterAdvancedType
PUBLIC	?isEmitFromEdge@CEmitterProperty@@QAEHXZ	; CEmitterProperty::isEmitFromEdge
PUBLIC	?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z	; CEmitterProperty::GetEmittingSize
PUBLIC	?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingAngularVelocity
PUBLIC	?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionX
PUBLIC	?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionY
PUBLIC	?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionZ
PUBLIC	?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingVelocity
PUBLIC	?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmissionCountPerSecond
PUBLIC	?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetParticleLifeTime
PUBLIC	?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z	; CEmitterProperty::GetParticleSizeX
PUBLIC	?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z	; CEmitterProperty::GetParticleSizeY
PUBLIC	??_GCEmitterProperty@@UAEPAXI@Z			; CEmitterProperty::`scalar deleting destructor'
PUBLIC	??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
PUBLIC	??_7CEmitterProperty@@6B@			; CEmitterProperty::`vftable'
PUBLIC	??_R4CEmitterProperty@@6B@			; CEmitterProperty::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEmitterProperty@@@8			; CEmitterProperty `RTTI Type Descriptor'
PUBLIC	??_R3CEmitterProperty@@8			; CEmitterProperty::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEmitterProperty@@8			; CEmitterProperty::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEmitterProperty@@8		; CEmitterProperty::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	??_ECEmitterProperty@@UAEPAXI@Z:PROC		; CEmitterProperty::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CEmitterProperty@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEmitterProperty@@8 DD FLAT:??_R0?AVCEmitterProperty@@@8 ; CEmitterProperty::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEmitterProperty@@8
rdata$r	ENDS
;	COMDAT ??_R2CEmitterProperty@@8
rdata$r	SEGMENT
??_R2CEmitterProperty@@8 DD FLAT:??_R1A@?0A@EA@CEmitterProperty@@8 ; CEmitterProperty::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEmitterProperty@@8
rdata$r	SEGMENT
??_R3CEmitterProperty@@8 DD 00H				; CEmitterProperty::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEmitterProperty@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEmitterProperty@@@8
data$rs	SEGMENT
??_R0?AVCEmitterProperty@@@8 DD FLAT:??_7type_info@@6B@	; CEmitterProperty `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEmitterProperty@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CEmitterProperty@@6B@
rdata$r	SEGMENT
??_R4CEmitterProperty@@6B@ DD 00H			; CEmitterProperty::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEmitterProperty@@@8
	DD	FLAT:??_R3CEmitterProperty@@8
rdata$r	ENDS
;	COMDAT ??_7CEmitterProperty@@6B@
CONST	SEGMENT
??_7CEmitterProperty@@6B@ DD FLAT:??_R4CEmitterProperty@@6B@ ; CEmitterProperty::`vftable'
	DD	FLAT:??_ECEmitterProperty@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm
;	COMDAT ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z
_TEXT	SEGMENT
__UMid$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z PROC ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>, COMDAT

; 7327 : _NODISCARD _CONSTEXPR20 pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 7293 :     auto _UFirst      = _STD _Get_unwrapped(_First);

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __First$[ebp]

; 7327 : _NODISCARD _CONSTEXPR20 pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {

  00008	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  00009	8b 75 10	 mov	 esi, DWORD PTR __Last$[ebp]
  0000c	2b f3		 sub	 esi, ebx
  0000e	c1 fe 03	 sar	 esi, 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7300 :         if (_Count <= 0) {

  00011	85 f6		 test	 esi, esi
  00013	7e 3d		 jle	 SHORT $LN67@equal_rang
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  00015	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  00018	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0001c	0f 1f 40 00	 npad	 4
$LL6@equal_rang:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7306 :         _Diff _Count2    = _Count / 2;

  00020	8b ce		 mov	 ecx, esi
  00022	d1 e9		 shr	 ecx, 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00024	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  0002b	f3 0f 10 04 1a	 movss	 xmm0, DWORD PTR [edx+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00030	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  00033	0f 2f c8	 comiss	 xmm1, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00036	89 45 fc	 mov	 DWORD PTR __UMid$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7308 :         if (_DEBUG_LT_PRED(_Pred, *_UMid, _Val)) { // range begins above _UMid, loop

  00039	76 0c		 jbe	 SHORT $LN8@equal_rang

; 7309 :             _UFirst = _STD _Next_iter(_UMid);

  0003b	8d 58 08	 lea	 ebx, DWORD PTR [eax+8]

; 7310 :             _Count -= _Count2 + 1;

  0003e	83 c8 ff	 or	 eax, -1
  00041	2b c1		 sub	 eax, ecx
  00043	03 f0		 add	 esi, eax

; 7311 :         } else if (_Pred(_Val, *_UMid)) {

  00045	eb 07		 jmp	 SHORT $LN4@equal_rang
$LN8@equal_rang:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 198  : 	return lhs < rhs.m_fTime;

  00047	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7311 :         } else if (_Pred(_Val, *_UMid)) {

  0004a	76 1a		 jbe	 SHORT $LN10@equal_rang

; 7312 :             _Count = _Count2; // range in first half, loop

  0004c	8b f1		 mov	 esi, ecx
$LN4@equal_rang:

; 7300 :         if (_Count <= 0) {

  0004e	85 f6		 test	 esi, esi
  00050	7f ce		 jg	 SHORT $LL6@equal_rang
$LN67@equal_rang:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00052	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7301 :             _STD _Seek_wrapped(_Last, _UFirst); // empty range

  00055	8b c3		 mov	 eax, ebx

; 7302 :             _STD _Seek_wrapped(_First, _UFirst);

  00057	8b cb		 mov	 ecx, ebx

; 7329 :     return _STD equal_range(_First, _Last, _Val, less<>{});

  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0005b	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7329 :     return _STD equal_range(_First, _Last, _Val, less<>{});

  0005e	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00060	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7330 : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN10@equal_rang:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  00066	c1 fa 03	 sar	 edx, 3

; 7456 :     auto _UFirst                = _STD _Get_unwrapped(_First);

  00069	8b cb		 mov	 ecx, ebx
  0006b	57		 push	 edi

; 7457 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _STD _Get_unwrapped(_Last));
; 7458 : 
; 7459 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0006c	85 d2		 test	 edx, edx
  0006e	7e 22		 jle	 SHORT $LN30@equal_rang
$LL29@equal_rang:

; 7460 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00070	8b fa		 mov	 edi, edx
  00072	d1 ef		 shr	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 192  : 	return lhs.m_fTime < rhs;

  00074	0f 2f 0c f9	 comiss	 xmm1, DWORD PTR [ecx+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  00078	8d 04 f9	 lea	 eax, DWORD PTR [ecx+edi*8]

; 7462 :         if (_Pred(*_UMid, _Val)) { // try top half

  0007b	76 0c		 jbe	 SHORT $LN31@equal_rang

; 7463 :             _UFirst = _STD _Next_iter(_UMid);

  0007d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]

; 7464 :             _Count -= _Count2 + 1;

  00080	83 c8 ff	 or	 eax, -1
  00083	2b c7		 sub	 eax, edi
  00085	03 d0		 add	 edx, eax

; 7465 :         } else {

  00087	eb 02		 jmp	 SHORT $LN32@equal_rang
$LN31@equal_rang:

; 7466 :             _Count = _Count2;

  00089	8b d7		 mov	 edx, edi
$LN32@equal_rang:

; 7457 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _STD _Get_unwrapped(_Last));
; 7458 : 
; 7459 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0008b	85 d2		 test	 edx, edx
  0008d	7f e1		 jg	 SHORT $LL29@equal_rang
  0008f	8b 45 fc	 mov	 eax, DWORD PTR __UMid$1$[ebp]
$LN30@equal_rang:

; 1664 :         _Where += _Off;

  00092	c1 e6 03	 shl	 esi, 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7316 :             auto _ULast2 = _STD upper_bound(_STD _Next_iter(_UMid), _UFirst, _Val, _STD _Pass_fn(_Pred));

  00095	83 c0 08	 add	 eax, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7485 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _STD _Get_unwrapped(_Last));

  00098	2b f0		 sub	 esi, eax

; 1692 :         return _Last - _First; // assume the iterator will do debug checking

  0009a	03 f3		 add	 esi, ebx
  0009c	c1 fe 03	 sar	 esi, 3

; 7487 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0009f	85 f6		 test	 esi, esi
  000a1	7e 23		 jle	 SHORT $LN48@equal_rang
$LL47@equal_rang:

; 7488 :         _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  000a3	8b fe		 mov	 edi, esi
  000a5	d1 ef		 shr	 edi, 1
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 198  : 	return lhs < rhs.m_fTime;

  000a7	f3 0f 10 04 f8	 movss	 xmm0, DWORD PTR [eax+edi*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 1664 :         _Where += _Off;

  000ac	8d 14 f8	 lea	 edx, DWORD PTR [eax+edi*8]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 198  : 	return lhs < rhs.m_fTime;

  000af	0f 2f c1	 comiss	 xmm0, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 7490 :         if (_Pred(_Val, *_UMid)) {

  000b2	76 04		 jbe	 SHORT $LN49@equal_rang

; 7491 :             _Count = _Count2;

  000b4	8b f7		 mov	 esi, edi

; 7492 :         } else { // try top half

  000b6	eb 0a		 jmp	 SHORT $LN50@equal_rang
$LN49@equal_rang:

; 7493 :             _UFirst = _STD _Next_iter(_UMid);

  000b8	8d 42 08	 lea	 eax, DWORD PTR [edx+8]

; 7494 :             _Count -= _Count2 + 1;

  000bb	83 ca ff	 or	 edx, -1
  000be	2b d7		 sub	 edx, edi
  000c0	03 f2		 add	 esi, edx
$LN50@equal_rang:

; 7486 : 
; 7487 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  000c2	85 f6		 test	 esi, esi
  000c4	7f dd		 jg	 SHORT $LL47@equal_rang
$LN48@equal_rang:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000c6	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  000c9	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7329 :     return _STD equal_range(_First, _Last, _Val, less<>{});

  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000cc	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7329 :     return _STD equal_range(_First, _Last, _Val, less<>{});

  000cf	8b c2		 mov	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 274  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000d1	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\algorithm

; 7330 : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ENDP ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCEmitterProperty@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCEmitterProperty@@UAEPAXI@Z PROC			; CEmitterProperty::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CEmitterProperty@@UAE@XZ ; CEmitterProperty::~CEmitterProperty
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 b0 00 00 00	 push	 176			; 000000b0H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCEmitterProperty@@UAEPAXI@Z ENDP			; CEmitterProperty::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z PROC	; CEmitterProperty::GetParticleSizeY, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 65   : 	GetTimeEventBlendValue(fTime, m_TimeEventSizeY, pfValue);

  0000c	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00011	8b 89 a8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+168]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 65   : 	GetTimeEventBlendValue(fTime, m_TimeEventSizeY, pfValue);

  00017	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0001c	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  0001e	75 10		 jne	 SHORT $LN4@GetParticl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  00020	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00023	0f 57 d2	 xorps	 xmm2, xmm2
  00026	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN4@GetParticl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00030	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 129  :         _Ptr += _Off;

  00033	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  00035	74 3d		 je	 SHORT $LN80@GetParticl

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00037	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003b	0f 2f c1	 comiss	 xmm0, xmm1
  0003e	77 34		 ja	 SHORT $LN80@GetParticl

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  00040	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00044	76 12		 jbe	 SHORT $LN7@GetParticl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  00046	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00049	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  0004e	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
$LN7@GetParticl:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00058	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  0005b	52		 push	 edx
  0005c	51		 push	 ecx
  0005d	50		 push	 eax
  0005e	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00067	8b 45 f4	 mov	 eax, DWORD PTR _result$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0006a	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _result$1[ebp+4]
  00070	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  00072	74 12		 je	 SHORT $LN8@GetParticl
$LN80@GetParticl:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  00074	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00079	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0007c	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
$LN8@GetParticl:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00086	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0008a	0f 28 d0	 movaps	 xmm2, xmm0
  0008d	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]
  00092	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  00097	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  0009b	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  000a0	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000a8	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000ac	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 66   : }

  000b1	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z ENDP	; CEmitterProperty::GetParticleSizeY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z PROC	; CEmitterProperty::GetParticleSizeX, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 81 98 00 00
	00		 mov	 eax, DWORD PTR [ecx+152]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 60   : 	GetTimeEventBlendValue(fTime, m_TimeEventSizeX, pfValue);

  0000c	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00011	8b 89 9c 00 00
	00		 mov	 ecx, DWORD PTR [ecx+156]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 60   : 	GetTimeEventBlendValue(fTime, m_TimeEventSizeX, pfValue);

  00017	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0001c	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  0001e	75 10		 jne	 SHORT $LN4@GetParticl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  00020	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00023	0f 57 d2	 xorps	 xmm2, xmm2
  00026	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN4@GetParticl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00030	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 129  :         _Ptr += _Off;

  00033	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  00035	74 3d		 je	 SHORT $LN80@GetParticl

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00037	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003b	0f 2f c1	 comiss	 xmm0, xmm1
  0003e	77 34		 ja	 SHORT $LN80@GetParticl

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  00040	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00044	76 12		 jbe	 SHORT $LN7@GetParticl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  00046	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00049	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  0004e	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
$LN7@GetParticl:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00058	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  0005b	52		 push	 edx
  0005c	51		 push	 ecx
  0005d	50		 push	 eax
  0005e	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00067	8b 45 f4	 mov	 eax, DWORD PTR _result$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0006a	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _result$1[ebp+4]
  00070	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  00072	74 12		 je	 SHORT $LN8@GetParticl
$LN80@GetParticl:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  00074	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00079	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0007c	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
$LN8@GetParticl:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00086	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0008a	0f 28 d0	 movaps	 xmm2, xmm0
  0008d	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]
  00092	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  00097	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  0009b	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  000a0	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000a8	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000ac	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 61   : }

  000b1	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z ENDP	; CEmitterProperty::GetParticleSizeX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z PROC	; CEmitterProperty::GetParticleLifeTime, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 55   : 	GetTimeEventBlendValue(fTime, m_TimeEventLifeTime, pfValue);

  0000c	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00011	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 55   : 	GetTimeEventBlendValue(fTime, m_TimeEventLifeTime, pfValue);

  00017	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0001c	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  0001e	75 10		 jne	 SHORT $LN4@GetParticl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  00020	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00023	0f 57 d2	 xorps	 xmm2, xmm2
  00026	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN4@GetParticl:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00030	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 129  :         _Ptr += _Off;

  00033	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  00035	74 3d		 je	 SHORT $LN80@GetParticl

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00037	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003b	0f 2f c1	 comiss	 xmm0, xmm1
  0003e	77 34		 ja	 SHORT $LN80@GetParticl

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  00040	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00044	76 12		 jbe	 SHORT $LN7@GetParticl
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  00046	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00049	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  0004e	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
$LN7@GetParticl:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00058	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  0005b	52		 push	 edx
  0005c	51		 push	 ecx
  0005d	50		 push	 eax
  0005e	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00067	8b 45 f4	 mov	 eax, DWORD PTR _result$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0006a	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _result$1[ebp+4]
  00070	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  00072	74 12		 je	 SHORT $LN8@GetParticl
$LN80@GetParticl:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  00074	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00079	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0007c	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
$LN8@GetParticl:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00086	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0008a	0f 28 d0	 movaps	 xmm2, xmm0
  0008d	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]
  00092	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  00097	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  0009b	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  000a0	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000a8	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000ac	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 56   : }

  000b1	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z ENDP	; CEmitterProperty::GetParticleLifeTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z PROC ; CEmitterProperty::GetEmissionCountPerSecond, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 50   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmissionCountPerSecond, pfValue);

  0000c	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00011	8b 89 84 00 00
	00		 mov	 ecx, DWORD PTR [ecx+132]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 50   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmissionCountPerSecond, pfValue);

  00017	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0001c	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  0001e	75 10		 jne	 SHORT $LN4@GetEmissio
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  00020	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00023	0f 57 d2	 xorps	 xmm2, xmm2
  00026	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN4@GetEmissio:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00030	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 129  :         _Ptr += _Off;

  00033	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  00035	74 3d		 je	 SHORT $LN80@GetEmissio

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00037	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0003b	0f 2f c1	 comiss	 xmm0, xmm1
  0003e	77 34		 ja	 SHORT $LN80@GetEmissio

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  00040	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  00044	76 12		 jbe	 SHORT $LN7@GetEmissio
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  00046	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00049	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  0004e	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
$LN7@GetEmissio:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00058	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  0005b	52		 push	 edx
  0005c	51		 push	 ecx
  0005d	50		 push	 eax
  0005e	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00067	8b 45 f4	 mov	 eax, DWORD PTR _result$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  0006a	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _result$1[ebp+4]
  00070	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  00072	74 12		 je	 SHORT $LN8@GetEmissio
$LN80@GetEmissio:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  00074	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00079	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0007c	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
$LN8@GetEmissio:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00086	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0008a	0f 28 d0	 movaps	 xmm2, xmm0
  0008d	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]
  00092	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  00097	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  0009b	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  000a0	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  000a5	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000a8	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000ac	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 51   : }

  000b1	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z ENDP ; CEmitterProperty::GetEmissionCountPerSecond
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z PROC	; CEmitterProperty::GetEmittingVelocity, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 45   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingVelocity, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 78	 mov	 ecx, DWORD PTR [ecx+120]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 45   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingVelocity, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 129  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	74 3d		 je	 SHORT $LN80@GetEmittin

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00031	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00035	0f 2f c1	 comiss	 xmm0, xmm1
  00038	77 34		 ja	 SHORT $LN80@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0003a	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  0003e	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  00040	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00043	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  00048	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN7@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00052	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00055	52		 push	 edx
  00056	51		 push	 ecx
  00057	50		 push	 eax
  00058	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00061	8b 45 f4	 mov	 eax, DWORD PTR _result$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00064	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00067	8b 4d f8	 mov	 ecx, DWORD PTR _result$1[ebp+4]
  0006a	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0006c	74 12		 je	 SHORT $LN8@GetEmittin
$LN80@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  0006e	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00073	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00076	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN8@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00080	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00084	0f 28 d0	 movaps	 xmm2, xmm0
  00087	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]
  0008c	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  00091	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  00095	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  0009a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000a2	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000a6	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 46   : }

  000ab	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z ENDP	; CEmitterProperty::GetEmittingVelocity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z PROC ; CEmitterProperty::GetEmittingDirectionZ, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 40   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionZ, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 6c	 mov	 ecx, DWORD PTR [ecx+108]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 40   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionZ, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 129  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	74 3d		 je	 SHORT $LN80@GetEmittin

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00031	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00035	0f 2f c1	 comiss	 xmm0, xmm1
  00038	77 34		 ja	 SHORT $LN80@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0003a	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  0003e	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  00040	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00043	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  00048	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN7@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00052	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00055	52		 push	 edx
  00056	51		 push	 ecx
  00057	50		 push	 eax
  00058	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00061	8b 45 f4	 mov	 eax, DWORD PTR _result$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00064	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00067	8b 4d f8	 mov	 ecx, DWORD PTR _result$1[ebp+4]
  0006a	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0006c	74 12		 je	 SHORT $LN8@GetEmittin
$LN80@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  0006e	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00073	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00076	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN8@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00080	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00084	0f 28 d0	 movaps	 xmm2, xmm0
  00087	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]
  0008c	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  00091	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  00095	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  0009a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000a2	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000a6	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 41   : }

  000ab	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z ENDP ; CEmitterProperty::GetEmittingDirectionZ
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z PROC ; CEmitterProperty::GetEmittingDirectionY, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 35   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionY, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 60	 mov	 ecx, DWORD PTR [ecx+96]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 35   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionY, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 129  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	74 3d		 je	 SHORT $LN80@GetEmittin

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00031	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00035	0f 2f c1	 comiss	 xmm0, xmm1
  00038	77 34		 ja	 SHORT $LN80@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0003a	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  0003e	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  00040	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00043	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  00048	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN7@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00052	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00055	52		 push	 edx
  00056	51		 push	 ecx
  00057	50		 push	 eax
  00058	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00061	8b 45 f4	 mov	 eax, DWORD PTR _result$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00064	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00067	8b 4d f8	 mov	 ecx, DWORD PTR _result$1[ebp+4]
  0006a	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0006c	74 12		 je	 SHORT $LN8@GetEmittin
$LN80@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  0006e	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00073	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00076	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN8@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00080	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00084	0f 28 d0	 movaps	 xmm2, xmm0
  00087	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]
  0008c	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  00091	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  00095	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  0009a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000a2	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000a6	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 36   : }

  000ab	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z ENDP ; CEmitterProperty::GetEmittingDirectionY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z PROC ; CEmitterProperty::GetEmittingDirectionX, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 30   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionX, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 54	 mov	 ecx, DWORD PTR [ecx+84]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 30   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingDirectionX, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 129  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	74 3d		 je	 SHORT $LN80@GetEmittin

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00031	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00035	0f 2f c1	 comiss	 xmm0, xmm1
  00038	77 34		 ja	 SHORT $LN80@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0003a	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  0003e	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  00040	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00043	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  00048	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN7@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00052	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00055	52		 push	 edx
  00056	51		 push	 ecx
  00057	50		 push	 eax
  00058	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00061	8b 45 f4	 mov	 eax, DWORD PTR _result$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00064	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00067	8b 4d f8	 mov	 ecx, DWORD PTR _result$1[ebp+4]
  0006a	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0006c	74 12		 je	 SHORT $LN8@GetEmittin
$LN80@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  0006e	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00073	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00076	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN8@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00080	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00084	0f 28 d0	 movaps	 xmm2, xmm0
  00087	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]
  0008c	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  00091	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  00095	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  0009a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000a2	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000a6	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 31   : }

  000ab	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z ENDP ; CEmitterProperty::GetEmittingDirectionX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z PROC ; CEmitterProperty::GetEmittingAngularVelocity, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 25   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingAngularVelocity, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 48	 mov	 ecx, DWORD PTR [ecx+72]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 25   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingAngularVelocity, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 129  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	74 3d		 je	 SHORT $LN80@GetEmittin

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00031	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00035	0f 2f c1	 comiss	 xmm0, xmm1
  00038	77 34		 ja	 SHORT $LN80@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0003a	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  0003e	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  00040	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00043	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  00048	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN7@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00052	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00055	52		 push	 edx
  00056	51		 push	 ecx
  00057	50		 push	 eax
  00058	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00061	8b 45 f4	 mov	 eax, DWORD PTR _result$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00064	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00067	8b 4d f8	 mov	 ecx, DWORD PTR _result$1[ebp+4]
  0006a	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0006c	74 12		 je	 SHORT $LN8@GetEmittin
$LN80@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  0006e	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00073	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00076	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN8@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00080	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00084	0f 28 d0	 movaps	 xmm2, xmm0
  00087	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]
  0008c	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  00091	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  00095	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  0009a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000a2	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000a6	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 26   : }

  000ab	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z ENDP ; CEmitterProperty::GetEmittingAngularVelocity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z
_TEXT	SEGMENT
_result$1 = -12						; size = 8
_fElapsedTime$ = -4					; size = 4
_fTime$ = 8						; size = 4
_pfValue$ = 12						; size = 4
?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z PROC	; CEmitterProperty::GetEmittingSize, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00006	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 20   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingSize, pfValue);

  00009	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fTime$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0000e	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 20   : 	GetTimeEventBlendValue(fTime, m_TimeEventEmittingSize, pfValue);

  00011	f3 0f 11 4d fc	 movss	 DWORD PTR _fElapsedTime$[ebp], xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00016	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 226  : 	if (rVector.empty())

  00018	75 10		 jne	 SHORT $LN4@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  0001d	0f 57 d2	 xorps	 xmm2, xmm2
  00020	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN4@GetEmittin:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002a	8d 50 08	 lea	 edx, DWORD PTR [eax+8]

; 129  :         _Ptr += _Off;

  0002d	3b d1		 cmp	 edx, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 232  : 	if(rVector.begin()+1==rVector.end())

  0002f	74 3d		 je	 SHORT $LN80@GetEmittin

; 233  : 	{
; 234  : 		*pReturnValue = rVector.front().m_Value;
; 235  : 		return;
; 236  : 	}
; 237  : 
; 238  : 	if (fElapsedTime < rVector.front().m_fTime)

  00031	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00035	0f 2f c1	 comiss	 xmm0, xmm1
  00038	77 34		 ja	 SHORT $LN80@GetEmittin

; 239  : 	{
; 240  : 		*pReturnValue = rVector.front().m_Value;
; 241  : 		return;
; 242  : 	}
; 243  : 
; 244  : 	if (fElapsedTime > rVector.back().m_fTime)

  0003a	0f 2f 49 f8	 comiss	 xmm1, DWORD PTR [ecx-8]
  0003e	76 12		 jbe	 SHORT $LN7@GetEmittin
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  00040	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 246  : 		*pReturnValue = rVector.back().m_Value;

  00043	f3 0f 10 51 fc	 movss	 xmm2, DWORD PTR [ecx-4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  00048	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN7@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00052	8d 55 fc	 lea	 edx, DWORD PTR _fElapsedTime$[ebp]
  00055	52		 push	 edx
  00056	51		 push	 ecx
  00057	50		 push	 eax
  00058	8d 45 f4	 lea	 eax, DWORD PTR _result$1[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$equal_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@M@std@@YA?AU?$pair@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@std@@V12@@0@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$CTimeEvent@M@@@std@@@std@@@0@0ABM@Z ; std::equal_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CTimeEvent<float> > > >,float>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00061	8b 45 f4	 mov	 eax, DWORD PTR _result$1[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 252  : 	std::pair<iterator, iterator> result = std::equal_range(rVector.begin(), rVector.end(), fElapsedTime);

  00064	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00067	8b 4d f8	 mov	 ecx, DWORD PTR _result$1[ebp+4]
  0006a	3b c1		 cmp	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 254  : 	if (result.first != result.second)

  0006c	74 12		 je	 SHORT $LN8@GetEmittin
$LN80@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  0006e	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00073	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
  00076	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN8@GetEmittin:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 259  : 		float Head = (result.second->m_fTime - fElapsedTime) / (result.second->m_fTime - result.first->m_fTime);

  00080	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00084	0f 28 d0	 movaps	 xmm2, xmm0
  00087	f3 0f 5c 40 f8	 subss	 xmm0, DWORD PTR [eax-8]
  0008c	f3 0f 5c 55 08	 subss	 xmm2, DWORD PTR _fTime$[ebp]
  00091	f3 0f 5e d0	 divss	 xmm2, xmm0

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  00095	f3 0f 10 40 fc	 movss	 xmm0, DWORD PTR [eax-4]
  0009a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  0009f	8b 45 0c	 mov	 eax, DWORD PTR _pfValue$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\Type.h

; 260  : 		*pReturnValue = T((result.first->m_Value-result.second->m_Value)*Head+(result.second->m_Value));

  000a2	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000a6	f3 0f 58 51 04	 addss	 xmm2, DWORD PTR [ecx+4]
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 21   : }

  000ab	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z ENDP	; CEmitterProperty::GetEmittingSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?isEmitFromEdge@CEmitterProperty@@QAEHXZ
_TEXT	SEGMENT
?isEmitFromEdge@CEmitterProperty@@QAEHXZ PROC		; CEmitterProperty::isEmitFromEdge, COMDAT
; _this$ = ecx

; 14   : 	return m_bEmitFromEdgeFlag;

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 15   : }

  00003	c3		 ret	 0
?isEmitFromEdge@CEmitterProperty@@QAEHXZ ENDP		; CEmitterProperty::isEmitFromEdge
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ
_TEXT	SEGMENT
?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ PROC	; CEmitterProperty::GetEmitterAdvancedType, COMDAT
; _this$ = ecx

; 10   : 	return m_byEmitterAdvancedType;

  00000	8a 41 15	 mov	 al, BYTE PTR [ecx+21]

; 11   : }

  00003	c3		 ret	 0
?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ ENDP	; CEmitterProperty::GetEmitterAdvancedType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?GetEmitterShape@CEmitterProperty@@QAEEXZ
_TEXT	SEGMENT
?GetEmitterShape@CEmitterProperty@@QAEEXZ PROC		; CEmitterProperty::GetEmitterShape, COMDAT
; _this$ = ecx

; 6    : 	return m_byEmitterShape;

  00000	8a 41 14	 mov	 al, BYTE PTR [ecx+20]

; 7    : }

  00003	c3		 ret	 0
?GetEmitterShape@CEmitterProperty@@QAEEXZ ENDP		; CEmitterProperty::GetEmitterShape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ?Clear@CEmitterProperty@@QAEXXZ
_TEXT	SEGMENT
?Clear@CEmitterProperty@@QAEXXZ PROC			; CEmitterProperty::Clear, COMDAT
; _this$ = ecx

; 70   : 	m_dwMaxEmissionCount = 0;

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 71   : 
; 72   : 	m_fCycleLength = 0.0f;

  00007	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 73   : 	m_bCycleLoopFlag = FALSE;

  0000e	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 74   : 	m_iLoopCount = 0;

  00015	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 75   : 
; 76   : 	m_byEmitterShape = EMITTER_SHAPE_POINT;

  0001c	66 c7 41 14 00
	00		 mov	 WORD PTR [ecx+20], 0

; 77   : 	m_byEmitterAdvancedType = EMITTER_ADVANCED_TYPE_FREE;
; 78   : 	m_bEmitFromEdgeFlag = FALSE;

  00022	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 79   : 	m_v3EmittingSize = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00029	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00030	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00037	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 80   : 	m_fEmittingRadius = 0.0f;

  0003e	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 81   : 
; 82   : 	m_v3EmittingDirection = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00045	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  0004c	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  00053	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0005a	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
  0005d	3b 41 3c	 cmp	 eax, DWORD PTR [ecx+60]
  00060	74 03		 je	 SHORT $LN7@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00062	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN7@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00065	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
  00068	3b 41 54	 cmp	 eax, DWORD PTR [ecx+84]
  0006b	74 03		 je	 SHORT $LN11@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0006d	89 41 54	 mov	 DWORD PTR [ecx+84], eax
$LN11@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00070	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  00073	3b 41 60	 cmp	 eax, DWORD PTR [ecx+96]
  00076	74 03		 je	 SHORT $LN15@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00078	89 41 60	 mov	 DWORD PTR [ecx+96], eax
$LN15@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0007b	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
  0007e	3b 41 6c	 cmp	 eax, DWORD PTR [ecx+108]
  00081	74 03		 je	 SHORT $LN19@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00083	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
$LN19@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00086	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00089	3b 41 78	 cmp	 eax, DWORD PTR [ecx+120]
  0008c	74 03		 je	 SHORT $LN23@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0008e	89 41 78	 mov	 DWORD PTR [ecx+120], eax
$LN23@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00091	8b 81 80 00 00
	00		 mov	 eax, DWORD PTR [ecx+128]
  00097	3b 81 84 00 00
	00		 cmp	 eax, DWORD PTR [ecx+132]
  0009d	74 06		 je	 SHORT $LN27@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0009f	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax
$LN27@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000a5	8b 81 8c 00 00
	00		 mov	 eax, DWORD PTR [ecx+140]
  000ab	3b 81 90 00 00
	00		 cmp	 eax, DWORD PTR [ecx+144]
  000b1	74 06		 je	 SHORT $LN31@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  000b3	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax
$LN31@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000b9	8b 81 98 00 00
	00		 mov	 eax, DWORD PTR [ecx+152]
  000bf	3b 81 9c 00 00
	00		 cmp	 eax, DWORD PTR [ecx+156]
  000c5	74 06		 je	 SHORT $LN35@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  000c7	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax
$LN35@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000cd	8b 81 a4 00 00
	00		 mov	 eax, DWORD PTR [ecx+164]
  000d3	3b 81 a8 00 00
	00		 cmp	 eax, DWORD PTR [ecx+168]
  000d9	74 06		 je	 SHORT $LN39@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  000db	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
$LN39@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000e1	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  000e4	3b 41 48	 cmp	 eax, DWORD PTR [ecx+72]
  000e7	74 03		 je	 SHORT $LN43@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  000e9	89 41 48	 mov	 DWORD PTR [ecx+72], eax
$LN43@Clear:
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 94   : }

  000ec	c3		 ret	 0
?Clear@CEmitterProperty@@QAEXXZ ENDP			; CEmitterProperty::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ??1CEmitterProperty@@UAE@XZ
_TEXT	SEGMENT
??1CEmitterProperty@@UAE@XZ PROC			; CEmitterProperty::~CEmitterProperty, COMDAT
; _this$ = ecx

; 101  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEmitterProperty@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 86 a4 00 00
	00		 mov	 eax, DWORD PTR [esi+164]
  0000f	85 c0		 test	 eax, eax
  00011	74 51		 je	 SHORT $LN8@CEmitterPr

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 8e ac 00 00
	00		 mov	 ecx, DWORD PTR [esi+172]
  00019	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001b	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0001e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00024	72 16		 jb	 SHORT $LN27@CEmitterPr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00026	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00029	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00031	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00034	0f 87 fd 02 00
	00		 ja	 $LN277@CEmitterPr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003a	8b c2		 mov	 eax, edx
$LN27@CEmitterPr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0003c	51		 push	 ecx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00043	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004d	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00050	c7 86 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+168], 0

; 2082 :             _Myend   = nullptr;

  0005a	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
$LN8@CEmitterPr:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00064	8b 86 98 00 00
	00		 mov	 eax, DWORD PTR [esi+152]
  0006a	85 c0		 test	 eax, eax
  0006c	74 51		 je	 SHORT $LN37@CEmitterPr

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006e	8b 8e a0 00 00
	00		 mov	 ecx, DWORD PTR [esi+160]
  00074	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00076	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00079	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0007f	72 16		 jb	 SHORT $LN56@CEmitterPr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00081	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00084	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00087	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00089	83 c0 fc	 add	 eax, -4			; fffffffcH
  0008c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0008f	0f 87 a2 02 00
	00		 ja	 $LN277@CEmitterPr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00095	8b c2		 mov	 eax, edx
$LN56@CEmitterPr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00097	51		 push	 ecx
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0009e	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000a8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000ab	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0

; 2082 :             _Myend   = nullptr;

  000b5	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
$LN37@CEmitterPr:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  000bf	8b 86 8c 00 00
	00		 mov	 eax, DWORD PTR [esi+140]
  000c5	85 c0		 test	 eax, eax
  000c7	74 51		 je	 SHORT $LN65@CEmitterPr

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000c9	8b 8e 94 00 00
	00		 mov	 ecx, DWORD PTR [esi+148]
  000cf	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d1	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000d4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000da	72 16		 jb	 SHORT $LN84@CEmitterPr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000dc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000df	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e2	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e4	83 c0 fc	 add	 eax, -4			; fffffffcH
  000e7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ea	0f 87 47 02 00
	00		 ja	 $LN277@CEmitterPr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f0	8b c2		 mov	 eax, edx
$LN84@CEmitterPr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f2	51		 push	 ecx
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000f9	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00103	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00106	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0

; 2082 :             _Myend   = nullptr;

  00110	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
$LN65@CEmitterPr:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0011a	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  00120	85 c0		 test	 eax, eax
  00122	74 51		 je	 SHORT $LN93@CEmitterPr

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00124	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  0012a	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012c	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0012f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00135	72 16		 jb	 SHORT $LN112@CEmitterPr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00137	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0013a	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0013d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0013f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00142	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00145	0f 87 ec 01 00
	00		 ja	 $LN277@CEmitterPr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0014b	8b c2		 mov	 eax, edx
$LN112@CEmitterPr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0014d	51		 push	 ecx
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00154	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0015e	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00161	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0

; 2082 :             _Myend   = nullptr;

  0016b	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
$LN93@CEmitterPr:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00175	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00178	85 c0		 test	 eax, eax
  0017a	74 45		 je	 SHORT $LN121@CEmitterPr

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0017c	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]
  0017f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00181	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00184	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0018a	72 16		 jb	 SHORT $LN140@CEmitterPr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0018c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0018f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00192	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00194	83 c0 fc	 add	 eax, -4			; fffffffcH
  00197	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0019a	0f 87 97 01 00
	00		 ja	 $LN277@CEmitterPr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001a0	8b c2		 mov	 eax, edx
$LN140@CEmitterPr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001a2	51		 push	 ecx
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  001a9	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  001b0	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  001b3	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 2082 :             _Myend   = nullptr;

  001ba	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
$LN121@CEmitterPr:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  001c1	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  001c4	85 c0		 test	 eax, eax
  001c6	74 45		 je	 SHORT $LN149@CEmitterPr

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001c8	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  001cb	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001cd	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001d0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001d6	72 16		 jb	 SHORT $LN168@CEmitterPr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001d8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001db	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001de	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e0	83 c0 fc	 add	 eax, -4			; fffffffcH
  001e3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001e6	0f 87 4b 01 00
	00		 ja	 $LN277@CEmitterPr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001ec	8b c2		 mov	 eax, edx
$LN168@CEmitterPr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ee	51		 push	 ecx
  001ef	50		 push	 eax
  001f0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  001f5	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  001fc	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  001ff	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 2082 :             _Myend   = nullptr;

  00206	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
$LN149@CEmitterPr:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  0020d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00210	85 c0		 test	 eax, eax
  00212	74 45		 je	 SHORT $LN177@CEmitterPr

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00214	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00217	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00219	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0021c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00222	72 16		 jb	 SHORT $LN196@CEmitterPr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00224	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00227	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0022a	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0022c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0022f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00232	0f 87 ff 00 00
	00		 ja	 $LN277@CEmitterPr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00238	8b c2		 mov	 eax, edx
$LN196@CEmitterPr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0023a	51		 push	 ecx
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00241	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00248	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0024b	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 2082 :             _Myend   = nullptr;

  00252	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
$LN177@CEmitterPr:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00259	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  0025c	85 c0		 test	 eax, eax
  0025e	74 45		 je	 SHORT $LN205@CEmitterPr

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00260	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00263	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00265	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00268	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0026e	72 16		 jb	 SHORT $LN224@CEmitterPr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00270	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00273	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00276	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00278	83 c0 fc	 add	 eax, -4			; fffffffcH
  0027b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0027e	0f 87 b3 00 00
	00		 ja	 $LN277@CEmitterPr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00284	8b c2		 mov	 eax, edx
$LN224@CEmitterPr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00286	51		 push	 ecx
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0028d	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00294	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00297	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 2082 :             _Myend   = nullptr;

  0029e	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
$LN205@CEmitterPr:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  002a5	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  002a8	85 c0		 test	 eax, eax
  002aa	74 41		 je	 SHORT $LN233@CEmitterPr

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  002ac	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  002af	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002b1	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002b4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002ba	72 12		 jb	 SHORT $LN252@CEmitterPr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002bc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002bf	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  002c2	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002c4	83 c0 fc	 add	 eax, -4			; fffffffcH
  002c7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002ca	77 6b		 ja	 SHORT $LN277@CEmitterPr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  002cc	8b c2		 mov	 eax, edx
$LN252@CEmitterPr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  002ce	51		 push	 ecx
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  002d5	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  002dc	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  002df	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0

; 2082 :             _Myend   = nullptr;

  002e6	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
$LN233@CEmitterPr:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  002ed	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  002f0	85 c0		 test	 eax, eax
  002f2	74 41		 je	 SHORT $LN261@CEmitterPr

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  002f4	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  002f7	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002f9	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002fc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00302	72 12		 jb	 SHORT $LN280@CEmitterPr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00304	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00307	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0030a	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0030c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0030f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00312	77 23		 ja	 SHORT $LN277@CEmitterPr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00314	8b c2		 mov	 eax, edx
$LN280@CEmitterPr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00316	51		 push	 ecx
  00317	50		 push	 eax
  00318	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0031d	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00324	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00327	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 2082 :             _Myend   = nullptr;

  0032e	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
$LN261@CEmitterPr:
  00335	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 102  : }

  00336	c3		 ret	 0
$LN277@CEmitterPr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00337	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN315@CEmitterPr:
  0033c	cc		 int	 3
??1CEmitterProperty@@UAE@XZ ENDP			; CEmitterProperty::~CEmitterProperty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp
;	COMDAT ??0CEmitterProperty@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CEmitterProperty@@QAE@XZ PROC			; CEmitterProperty::CEmitterProperty, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CEmitterProperty@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00010	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00017	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  0001e	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00025	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  0002c	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  00033	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  0003a	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  00041	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  00048	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0004f	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  00056	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0005d	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
  00064	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  0006b	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
  00072	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
  00079	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00080	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  00087	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
  0008e	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  00098	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  000a2	c7 86 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+136], 0
  000ac	c7 86 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+140], 0
  000b6	c7 86 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+144], 0
  000c0	c7 86 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+148], 0
  000ca	c7 86 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+152], 0
  000d4	c7 86 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+156], 0
  000de	c7 86 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+160], 0
  000e8	c7 86 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+164], 0
  000f2	c7 86 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+168], 0
  000fc	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
; File C:\Marty 5.5\Src-Client\Client\EffectLib\EmitterProperty.cpp

; 98   : 	Clear();

  00106	e8 00 00 00 00	 call	 ?Clear@CEmitterProperty@@QAEXXZ ; CEmitterProperty::Clear

; 99   : }

  0010b	8b c6		 mov	 eax, esi
  0010d	5e		 pop	 esi
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
??0CEmitterProperty@@QAE@XZ ENDP			; CEmitterProperty::CEmitterProperty
_TEXT	ENDS
END
