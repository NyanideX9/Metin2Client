; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterBase\Distribute\Utils.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	_sprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?CreateTempFileName@@YAPBDPBD@Z			; CreateTempFileName
PUBLIC	?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z ; GetFilePathNameExtension
PUBLIC	?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetFileExtension
PUBLIC	?GetFileNameParts@@YAXPBDHPAD11@Z		; GetFileNameParts
PUBLIC	?GetOldIndexingName@@YAXPADH@Z			; GetOldIndexingName
PUBLIC	?GetIndexingName@@YAXPADK@Z			; GetIndexingName
PUBLIC	?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyFileName
PUBLIC	?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyPathName
PUBLIC	?GetOnlyPathName@@YAPBDPBD@Z			; GetOnlyPathName
PUBLIC	?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetLocalFileName
PUBLIC	?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetExceptionPathName
PUBLIC	?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetWorkingFolder
PUBLIC	?StringLowers@@YAXPAD@Z				; StringLowers
PUBLIC	?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
PUBLIC	?StringPath@@YAXPAD@Z				; StringPath
PUBLIC	?StringPath@@YAXPBDPAD@Z			; StringPath
PUBLIC	?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
PUBLIC	?PrintAsciiData@@YAXPBXH@Z			; PrintAsciiData
PUBLIC	?IsFile@@YA_NPBD@Z				; IsFile
PUBLIC	?IsGlobalFileName@@YA_NPBD@Z			; IsGlobalFileName
PUBLIC	?MIN@@YAHHH@Z					; MIN
PUBLIC	?MAX@@YAHHH@Z					; MAX
PUBLIC	?MINMAX@@YAHHHH@Z				; MINMAX
PUBLIC	?fMIN@@YAMMM@Z					; fMIN
PUBLIC	?fMAX@@YAMMM@Z					; fMAX
PUBLIC	?fMINMAX@@YAMMMM@Z				; fMINMAX
PUBLIC	?MyCreateDirectory@@YAXPBD@Z			; MyCreateDirectory
PUBLIC	?RemoveAllDirectory@@YAXPBD@Z			; RemoveAllDirectory
PUBLIC	?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ; SplitLine
PUBLIC	?_getf@@YAPBDPBDZZ				; _getf
PUBLIC	?CommandLineToArgv@@YAPAPADPADPAH@Z		; CommandLineToArgv
PUBLIC	?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; StringExceptCharacter
PUBLIC	?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetExcutedFileName
PUBLIC	??1CDirRemover@@UAE@XZ				; CDirRemover::~CDirRemover
PUBLIC	?OnFolder@CDirRemover@@UAE_NPBD00@Z		; CDirRemover::OnFolder
PUBLIC	?OnFile@CDirRemover@@UAE_NPBD0@Z		; CDirRemover::OnFile
PUBLIC	??_GCDirRemover@@UAEPAXI@Z			; CDirRemover::`scalar deleting destructor'
PUBLIC	?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
PUBLIC	?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
PUBLIC	?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Emplace_back_internal@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_internal<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z	; std::_String_bitmap<char,1>::_Mark
PUBLIC	??$_Find_first_of_vectorized@$$CBD$$CBD@std@@YAPBDQBD000@Z ; std::_Find_first_of_vectorized<char const ,char const >
PUBLIC	??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>
PUBLIC	??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	??$_Copy_memmove_tail@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDQAPAV10@II@Z ; std::_Copy_memmove_tail<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_C@_03NGHAOOHL@etb@				; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_01LOCGONAA@?$AA@				; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	??_C@_03NDEAONJP@?5?5?5@			; `string'
PUBLIC	??_C@_05CNDJFPDP@?$CF02x?5@			; `string'
PUBLIC	??_C@_02MINBJDHL@?$HM?5@			; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
PUBLIC	??_7CDirRemover@@6B@				; CDirRemover::`vftable'
PUBLIC	??_C@_03EMIMMIHL@?$CK?4?$CK@			; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC@				; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4CDirRemover@@6B@				; CDirRemover::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDirRemover@@@8				; CDirRemover `RTTI Type Descriptor'
PUBLIC	??_R3CDirRemover@@8				; CDirRemover::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDirRemover@@8				; CDirRemover::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDirRemover@@8			; CDirRemover::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CDir@@8				; CDir::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCDir@@@8				; CDir `RTTI Type Descriptor'
PUBLIC	??_R3CDir@@8					; CDir::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDir@@8					; CDir::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isprint:PROC
EXTRN	_strchr:PROC
EXTRN	_strncpy:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__RemoveDirectoryA@4:PROC
EXTRN	__imp__GetTempPathA@8:PROC
EXTRN	__imp__GetTempFileNameA@16:PROC
EXTRN	__imp__GetModuleFileNameA@12:PROC
EXTRN	__imp__GlobalAlloc@8:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	__ecvt:PROC
EXTRN	___std_find_first_of_trivial_1@16:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	__getcwd:PROC
EXTRN	__access:PROC
EXTRN	__chmod:PROC
EXTRN	??0CDir@@QAE@XZ:PROC				; CDir::CDir
EXTRN	??1CDir@@UAE@XZ:PROC				; CDir::~CDir
EXTRN	?Create@CDir@@QAE_NPBD0H@Z:PROC			; CDir::Create
EXTRN	?korean_tolower@@YADD@Z:PROC			; korean_tolower
EXTRN	??_ECDirRemover@@UAEPAXI@Z:PROC			; CDirRemover::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA
_BSS	SEGMENT
?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA DB 0105H DUP (?) ; `CreateTempFileName'::`2'::szTempName
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA DD 01H DUP (?) ; `GetOnlyPathName'::`2'::$TSS0
_BSS	ENDS
_BSS	SEGMENT
?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A DB 014H DUP (?) ; CDirRemover::ms_strDirectoryDeque
_BSS	ENDS
;	COMDAT ?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA
_BSS	SEGMENT
?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA DB 0100H DUP (?)	; `_getf'::`2'::szBuf
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_strDirectoryDeque$initializer$@CDirRemover@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ; ??ms_strDirectoryDeque$initializer$@CDirRemover@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R2CDir@@8
rdata$r	SEGMENT
??_R2CDir@@8 DD	FLAT:??_R1A@?0A@EA@CDir@@8		; CDir::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDir@@8
rdata$r	SEGMENT
??_R3CDir@@8 DD	00H					; CDir::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDir@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDir@@@8
data$rs	SEGMENT
??_R0?AVCDir@@@8 DD FLAT:??_7type_info@@6B@		; CDir `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDir@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CDir@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDir@@8 DD FLAT:??_R0?AVCDir@@@8		; CDir::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDir@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDirRemover@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDirRemover@@8 DD FLAT:??_R0?AVCDirRemover@@@8 ; CDirRemover::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDirRemover@@8
rdata$r	ENDS
;	COMDAT ??_R2CDirRemover@@8
rdata$r	SEGMENT
??_R2CDirRemover@@8 DD FLAT:??_R1A@?0A@EA@CDirRemover@@8 ; CDirRemover::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDir@@8
rdata$r	ENDS
;	COMDAT ??_R3CDirRemover@@8
rdata$r	SEGMENT
??_R3CDirRemover@@8 DD 00H				; CDirRemover::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CDirRemover@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDirRemover@@@8
data$rs	SEGMENT
??_R0?AVCDirRemover@@@8 DD FLAT:??_7type_info@@6B@	; CDirRemover `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDirRemover@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CDirRemover@@6B@
rdata$r	SEGMENT
??_R4CDirRemover@@6B@ DD 00H				; CDirRemover::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDirRemover@@@8
	DD	FLAT:??_R3CDirRemover@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03EMIMMIHL@?$CK?4?$CK@
CONST	SEGMENT
??_C@_03EMIMMIHL@?$CK?4?$CK@ DB '*.*', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CDirRemover@@6B@
CONST	SEGMENT
??_7CDirRemover@@6B@ DD FLAT:??_R4CDirRemover@@6B@	; CDirRemover::`vftable'
	DD	FLAT:??_ECDirRemover@@UAEPAXI@Z
	DD	FLAT:?OnFolder@CDirRemover@@UAE_NPBD00@Z
	DD	FLAT:?OnFile@CDirRemover@@UAE_NPBD0@Z
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MINBJDHL@?$HM?5@
CONST	SEGMENT
??_C@_02MINBJDHL@?$HM?5@ DB '| ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CNDJFPDP@?$CF02x?5@
CONST	SEGMENT
??_C@_05CNDJFPDP@?$CF02x?5@ DB '%02x ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NDEAONJP@?5?5?5@
CONST	SEGMENT
??_C@_03NDEAONJP@?5?5?5@ DB '   ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB '-'
	DB	'-------------------------------------------------------------'
	DB	'----', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
_DATA	SEGMENT
?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; `GetOnlyPathName'::`2'::strPathName
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_C@_01LOCGONAA@?$AA@
CONST	SEGMENT
??_C@_01LOCGONAA@?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu@ DB '%u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NGHAOOHL@etb@
CONST	SEGMENT
??_C@_03NGHAOOHL@etb@ DB 'etb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnFile@CDirRemover@@UAE_NPBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnFile@CDirRemover@@UAE_NPBD0@Z$0
__ehfuncinfo$?OnFile@CDirRemover@@UAE_NPBD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnFile@CDirRemover@@UAE_NPBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnFolder@CDirRemover@@UAE_NPBD00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$2
__ehfuncinfo$?OnFolder@CDirRemover@@UAE_NPBD00@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?OnFolder@CDirRemover@@UAE_NPBD00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1
__ehfuncinfo$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$1
__ehfuncinfo$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RemoveAllDirectory@@YAXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RemoveAllDirectory@@YAXPBD@Z$0
__ehfuncinfo$?RemoveAllDirectory@@YAXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RemoveAllDirectory@@YAXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
__ehfuncinfo$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDQAPAV10@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDQAPAV10@II@Z PROC ; std::_Copy_memmove_tail<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDQAPAV10@II@Z ENDP ; std::_Copy_memmove_tail<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z PROC ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDQAPAV10@II@Z ; std::_Copy_memmove_tail<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ENDP ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z PROC ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 2032 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2033 :     char* const _First_ch = reinterpret_cast<char*>(_STD _To_address(_First));
; 2034 :     char* const _Last_ch  = reinterpret_cast<char*>(_STD _To_address(_Last));
; 2035 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 2036 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2037 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ENDP ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>, COMDAT

; 2064 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2065 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2066 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2067 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2068 :         return _STD _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 2069 :     } else {
; 2070 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 2071 :         for (; 0 < _Count; --_Count) {
; 2072 :             _Backout._Emplace_back();
; 2073 :         }
; 2074 : 
; 2075 :         return _Backout._Release();
; 2076 :     }
; 2077 : }

  00012	5d		 pop	 ebp

; 2065 :     // value-initialize all elements in [_UFirst, _UFirst + _Count)
; 2066 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 2067 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 2068 :         return _STD _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0@Z ; std::_Zero_range<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z PROC ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>, COMDAT

; 1928 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1929 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1930 :     _STD _Adl_verify_range(_First, _Last);
; 1931 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1932 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1933 :     auto _UDest       = _STD _Get_unwrapped_n(_Dest, _STD _Idl_distance<_InIt>(_UFirst, _ULast));
; 1934 :     _STD _Seek_wrapped(_Dest, _STD _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1935 :     return _Dest;
; 1936 : }

  00003	5d		 pop	 ebp

; 1915 :             return _STD _Copy_memmove(_First, _Last, _Dest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@00@Z ; std::_Copy_memmove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ENDP ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Find_first_of_vectorized@$$CBD$$CBD@std@@YAPBDQBD000@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
??$_Find_first_of_vectorized@$$CBD$$CBD@std@@YAPBDQBD000@Z PROC ; std::_Find_first_of_vectorized<char const ,char const >, COMDAT

; 257  :     _Ty1* const _First1, _Ty1* const _Last1, _Ty2* const _First2, _Ty2* const _Last2) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 258  :     _STL_INTERNAL_STATIC_ASSERT(sizeof(_Ty1) == sizeof(_Ty2));
; 259  :     if constexpr (sizeof(_Ty1) == 1) {
; 260  :         return const_cast<_Ty1*>(

  00003	ff 75 14	 push	 DWORD PTR __Last2$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __First2$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Last1$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __First1$[ebp]
  0000f	e8 00 00 00 00	 call	 ___std_find_first_of_trivial_1@16

; 261  :             static_cast<const _Ty1*>(::__std_find_first_of_trivial_1(_First1, _Last1, _First2, _Last2)));
; 262  :     } else if constexpr (sizeof(_Ty1) == 2) {
; 263  :         return const_cast<_Ty1*>(
; 264  :             static_cast<const _Ty1*>(::__std_find_first_of_trivial_2(_First1, _Last1, _First2, _Last2)));
; 265  :     } else if constexpr (sizeof(_Ty1) == 4) {
; 266  :         return const_cast<_Ty1*>(
; 267  :             static_cast<const _Ty1*>(::__std_find_first_of_trivial_4(_First1, _Last1, _First2, _Last2)));
; 268  :     } else if constexpr (sizeof(_Ty1) == 8) {
; 269  :         return const_cast<_Ty1*>(
; 270  :             static_cast<const _Ty1*>(::__std_find_first_of_trivial_8(_First1, _Last1, _First2, _Last2)));
; 271  :     } else {
; 272  :         _STL_INTERNAL_STATIC_ASSERT(false); // unexpected size
; 273  :     }
; 274  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Find_first_of_vectorized@$$CBD$$CBD@std@@YAPBDQBD000@Z ENDP ; std::_Find_first_of_vectorized<char const ,char const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
;	COMDAT ?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z PROC	; std::_String_bitmap<char,1>::_Mark, COMDAT
; _this$ = ecx

; 758  :     constexpr bool _Mark(const _Elem* _First, const _Elem* const _Last) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 759  :         // mark this bitmap such that the characters in [_First, _Last) are intended to match
; 760  :         // returns whether all inputs can be placed in the bitmap
; 761  :         for (; _First != _Last; ++_First) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000a	3b c6		 cmp	 eax, esi
  0000c	74 0e		 je	 SHORT $LN11@Mark
  0000e	66 90		 npad	 2
$LL4@Mark:

; 762  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00010	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00013	40		 inc	 eax
  00014	c6 04 0a 01	 mov	 BYTE PTR [edx+ecx], 1
  00018	3b c6		 cmp	 eax, esi
  0001a	75 f4		 jne	 SHORT $LL4@Mark
$LN11@Mark:

; 763  :         }
; 764  : 
; 765  :         return true;
; 766  :     }

  0001c	b0 01		 mov	 al, 1
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z ENDP	; std::_String_bitmap<char,1>::_Mark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
__Oldsize$1$ = -8					; size = 4
__Whereoff$1$ = -4					; size = 4
$T1 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 33		 mov	 esi, DWORD PTR [ebx]
  00015	2b d6		 sub	 edx, esi

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b ce		 sub	 ecx, esi
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b c2		 mov	 eax, edx
  00037	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003a	03 c2		 add	 eax, edx
  0003c	89 45 f8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0003f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00044	0f 84 0d 01 00
	00		 je	 $LN94@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0004d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00050	2b ce		 sub	 ecx, esi
  00052	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00057	f7 e9		 imul	 ecx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00059	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005e	c1 fa 02	 sar	 edx, 2
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 12		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00072	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  00077	be aa aa aa 0a	 mov	 esi, 178956970		; 0aaaaaaaH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 39		 jmp	 SHORT $LN92@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00084	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00087	8b f7		 mov	 esi, edi
  00089	3b c7		 cmp	 eax, edi
  0008b	0f 43 f0	 cmovae	 esi, eax
  0008e	81 fe aa aa aa
	0a		 cmp	 esi, 178956970		; 0aaaaaaaH
  00094	0f 87 c2 00 00
	00		 ja	 $LN95@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0009a	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0009d	c1 e0 03	 shl	 eax, 3

; 227  :     if (_Bytes == 0) {

  000a0	85 c0		 test	 eax, eax
  000a2	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  000a4	33 ff		 xor	 edi, edi
  000a6	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a8	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ad	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b5	eb 06		 jmp	 SHORT $LN92@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN92@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000bd	8b f8		 mov	 edi, eax
  000bf	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  000c2	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000c5	0f 57 c0	 xorps	 xmm0, xmm0

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000c8	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000cb	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000ce	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000d1	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000d4	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  000d7	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000de	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000e5	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000e8	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 880  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000eb	89 4d f4	 mov	 DWORD PTR _this$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ee	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000f1	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000f4	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000f9	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000fe	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00105	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0010c	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0010f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00112	8b 03		 mov	 eax, DWORD PTR [ebx]
  00114	3b d1		 cmp	 edx, ecx
  00116	75 04		 jne	 SHORT $LN3@Emplace_re

; 889  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 890  :                 _STD _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00118	8b d7		 mov	 edx, edi

; 891  :             } else {
; 892  :                 _STD _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 893  :             }
; 894  :         } else { // provide basic guarantee

  0011a	eb 15		 jmp	 SHORT $LN4@Emplace_re
$LN3@Emplace_re:

; 895  :             _STD _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0011c	53		 push	 ebx
  0011d	57		 push	 edi
  0011e	52		 push	 edx
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 896  :             _Constructed_first = _Newvec;
; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00125	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00128	83 c4 10	 add	 esp, 16			; 00000010H
  0012b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0012e	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
$LN4@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  00131	53		 push	 ebx
  00132	52		 push	 edx
  00133	51		 push	 ecx
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0013a	8b 45 f8	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0013d	83 c4 10	 add	 esp, 16			; 00000010H
  00140	40		 inc	 eax
  00141	8b cb		 mov	 ecx, ebx
  00143	56		 push	 esi
  00144	50		 push	 eax
  00145	57		 push	 edi
  00146	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array

; 902  :         return _Newvec + _Whereoff;

  0014b	8b 45 f4	 mov	 eax, DWORD PTR _this$1$[ebp]

; 903  :     }

  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	5b		 pop	 ebx
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c2 08 00	 ret	 8
$LN94@Emplace_re:

; 873  :             _Xlength();

  00157	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN95@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0015c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN91@Emplace_re:
  00161	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1940 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1941 :     // move [_First, _Last) to raw _Dest, using _Al
; 1942 :     // note: only called internally from elsewhere in the STL
; 1943 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1944 :     _STD _Adl_verify_range(_First, _Last);
; 1945 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1946 :     using _Ptrval     = typename _Alloc::value_type*;
; 1947 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1949 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1950 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1951 : #if _HAS_CXX20
; 1952 :         if (!_STD is_constant_evaluated())
; 1953 : #endif // _HAS_CXX20
; 1954 :         {
; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));
; 1956 :             return _Dest + (_ULast - _UFirst);
; 1957 :         }
; 1958 :     }
; 1959 : 
; 1960 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	56		 push	 esi

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000a	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]

; 1941 :     // move [_First, _Last) to raw _Dest, using _Al
; 1942 :     // note: only called internally from elsewhere in the STL
; 1943 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1944 :     _STD _Adl_verify_range(_First, _Last);
; 1945 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1946 :     using _Ptrval     = typename _Alloc::value_type*;
; 1947 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1949 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1950 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1951 : #if _HAS_CXX20
; 1952 :         if (!_STD is_constant_evaluated())
; 1953 : #endif // _HAS_CXX20
; 1954 :         {
; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));
; 1956 :             return _Dest + (_ULast - _UFirst);
; 1957 :         }
; 1958 :     }
; 1959 : 
; 1960 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000d	3b c2		 cmp	 eax, edx
  0000f	74 4f		 je	 SHORT $LN3@Uninitiali

; 1796 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	8b ce		 mov	 ecx, esi
  00013	2b c8		 sub	 ecx, eax
  00015	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:
  00020	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00023	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00026	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0002d	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00035	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00038	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0003b	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00040	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00045	83 c6 18	 add	 esi, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1264 :                 _Right_data._Mysize = 0;

  00048	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0004f	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00056	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1808 :         ++_Last;

  00059	83 c0 18	 add	 eax, 24			; 00000018H

; 1941 :     // move [_First, _Last) to raw _Dest, using _Al
; 1942 :     // note: only called internally from elsewhere in the STL
; 1943 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1944 :     _STD _Adl_verify_range(_First, _Last);
; 1945 : #endif // ^^^ defined(_ENABLE_STL_INTERNAL_CHECK) ^^^
; 1946 :     using _Ptrval     = typename _Alloc::value_type*;
; 1947 :     auto _UFirst      = _STD _Get_unwrapped(_First);
; 1948 :     const auto _ULast = _STD _Get_unwrapped(_Last);
; 1949 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1950 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1951 : #if _HAS_CXX20
; 1952 :         if (!_STD is_constant_evaluated())
; 1953 : #endif // _HAS_CXX20
; 1954 :         {
; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));
; 1956 :             return _Dest + (_ULast - _UFirst);
; 1957 :         }
; 1958 :     }
; 1959 : 
; 1960 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1961 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005c	3b c2		 cmp	 eax, edx
  0005e	75 c0		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1802 :         _STD _Destroy_range(_First, _Last, _Al);

  00060	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  00063	56		 push	 esi
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1962 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1963 :     }
; 1964 : 
; 1965 :     return _Backout._Release();

  0006d	8b c6		 mov	 eax, esi
  0006f	5e		 pop	 esi

; 1966 : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ??$_Emplace_back_internal@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back_internal@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_internal<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 1131 :     void _Emplace_back_internal(_Tys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1132 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00007	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000a	40		 inc	 eax
  0000b	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  0000e	77 07		 ja	 SHORT $LN2@Emplace_ba

; 1133 :             _Growmap(1);

  00010	6a 01		 push	 1
  00012	e8 00 00 00 00	 call	 ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
$LN2@Emplace_ba:

; 1134 :         }
; 1135 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00017	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0001a	53		 push	 ebx
  0001b	57		 push	 edi
  0001c	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0001f	21 46 0c	 and	 DWORD PTR [esi+12], eax

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00022	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]

; 1136 :         const auto _Newoff = static_cast<size_type>(_Myoff() + _Mysize());

  00025	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00028	03 5e 0c	 add	 ebx, DWORD PTR [esi+12]

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0002b	23 c3		 and	 eax, ebx

; 1137 :         const auto _Block  = _Getblock(_Newoff);
; 1138 :         if (_Map()[_Block] == nullptr) {

  0002d	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00034	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00037	83 3c 07 00	 cmp	 DWORD PTR [edi+eax], 0
  0003b	75 10		 jne	 SHORT $LN3@Emplace_ba
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0003d	6a 18		 push	 24			; 00000018H
  0003f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1139 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00044	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00047	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1139 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  0004a	89 04 0f	 mov	 DWORD PTR [edi+ecx], eax
$LN3@Emplace_ba:

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0004d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00050	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00053	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00056	49		 dec	 ecx
  00057	23 cb		 and	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00059	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _<_Vals_0>$[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0005f	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00062	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00069	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 434  :         return _Myres > _Small_string_capacity;

  00070	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00074	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00077	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 426  :         if (_Large_mode_engaged()) {

  0007a	76 05		 jbe	 SHORT $LN35@Emplace_ba

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0007c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007e	89 4d 08	 mov	 DWORD PTR _<_Vals_0>$[ebp], ecx
$LN35@Emplace_ba:

; 857  :         if (_Count > max_size()) {

  00081	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00086	0f 87 91 00 00
	00		 ja	 $LN97@Emplace_ba

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0008c	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0008f	77 1c		 ja	 SHORT $LN43@Emplace_ba

; 866  :             _My_data._Mysize = _Count;

  00091	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00094	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009b	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1144 :         ++_Mysize();

  0009e	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009f	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1144 :         ++_Mysize();

  000a2	ff 46 10	 inc	 DWORD PTR [esi+16]
  000a5	5b		 pop	 ebx

; 1145 :     }

  000a6	5e		 pop	 esi
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 04 00	 ret	 4
$LN43@Emplace_ba:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000ad	8b f8		 mov	 edi, eax
  000af	83 cf 0f	 or	 edi, 15			; 0000000fH
  000b2	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000b8	76 12		 jbe	 SHORT $LN49@Emplace_ba

; 2944 :             return _Max;

  000ba	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  000bf	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	eb 27		 jmp	 SHORT $LN95@Emplace_ba
$LN49@Emplace_ba:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000cc	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  000d1	3b f9		 cmp	 edi, ecx
  000d3	0f 42 f9	 cmovb	 edi, ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  000d6	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000d9	85 c9		 test	 ecx, ecx
  000db	74 1e		 je	 SHORT $LN62@Emplace_ba
$LN63@Emplace_ba:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000dd	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e3	72 08		 jb	 SHORT $LN64@Emplace_ba

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000eb	eb 06		 jmp	 SHORT $LN95@Emplace_ba
$LN64@Emplace_ba:

; 136  :         return ::operator new(_Bytes);

  000ed	51		 push	 ecx
  000ee	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN95@Emplace_ba:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000f3	8b c8		 mov	 ecx, eax
  000f5	83 c4 04	 add	 esp, 4
  000f8	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
$LN62@Emplace_ba:

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  000fb	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000fe	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ff	50		 push	 eax
  00100	ff 75 08	 push	 DWORD PTR _<_Vals_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00103	89 0b		 mov	 DWORD PTR [ebx], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00105	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  00106	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1144 :         ++_Mysize();

  00111	ff 46 10	 inc	 DWORD PTR [esi+16]
  00114	5f		 pop	 edi
  00115	5b		 pop	 ebx

; 1145 :     }

  00116	5e		 pop	 esi
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
$LN97@Emplace_ba:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  0011d	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN94@Emplace_ba:
  00122	cc		 int	 3
??$_Emplace_back_internal@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_internal<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 1094 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1098 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 48		 je	 SHORT $LN55@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00016	76 27		 jbe	 SHORT $LN33@Destroy_ra
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0001a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN44@Destroy_ra

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN41@Destroy_ra

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN44@Destroy_ra:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN33@Destroy_ra:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1098 :         for (; _First != _Last; ++_First) {

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN55@Destroy_ra:
  00057	5f		 pop	 edi

; 1099 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1100 :         }
; 1101 :     }
; 1102 : }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN41@Destroy_ra:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN62@Destroy_ra:
  00060	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	85 c0		 test	 eax, eax
  0000a	74 51		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	ff 77 04	 push	 DWORD PTR [edi+4]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00017	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001f	8b 37		 mov	 esi, DWORD PTR [edi]
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	2b ce		 sub	 ecx, esi
  00026	f7 e9		 imul	 ecx
  00028	c1 fa 02	 sar	 edx, 2
  0002b	8b c2		 mov	 eax, edx
  0002d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00030	03 c2		 add	 eax, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00032	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00035	c1 e1 03	 shl	 ecx, 3

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00038	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003e	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00040	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00043	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00046	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0004b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004e	77 2f		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00050	8b f2		 mov	 esi, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00052	51		 push	 ecx
  00053	56		 push	 esi
  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00059	83 c4 08	 add	 esp, 8
  0005c	5e		 pop	 esi
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00060	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00063	89 0f		 mov	 DWORD PTR [edi], ecx
  00065	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00068	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0006b	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0006e	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00071	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00074	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00077	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0007a	5f		 pop	 edi

; 2064 :     }

  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00084	cc		 int	 3
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CDirRemover::ms_strDirectoryDeque'', COMDAT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 762  :         _Tidy();

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
  00005	e8 00 00 00 00	 call	 ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 773  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0000f	6a 08		 push	 8
  00011	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 774  :     _Val         = static_cast<_Other&&>(_New_val);

  00012	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A, 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	83 c4 08	 add	 esp, 8
  00024	c3		 ret	 0
??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CDirRemover::ms_strDirectoryDeque''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'CDirRemover::ms_strDirectoryDeque'', COMDAT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00000	6a 08		 push	 8
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 512  : std::deque<std::string> CDirRemover::ms_strDirectoryDeque;

  00007	68 00 00 00 00	 push	 OFFSET ??__F?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CDirRemover::ms_strDirectoryDeque''
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1201 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1218 :         _Myproxy            = _New_proxy;

  00013	a3 00 00 00 00	 mov	 DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A, eax

; 1219 :         _New_proxy->_Mycont = this;

  00018	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 512  : std::deque<std::string> CDirRemover::ms_strDirectoryDeque;

  0001e	e8 00 00 00 00	 call	 _atexit
  00023	83 c4 08	 add	 esp, 8
  00026	c3		 ret	 0
??__E?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'CDirRemover::ms_strDirectoryDeque''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1671 :     void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 959  :         return _Mysize() == 0;

  00004	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00007	85 c9		 test	 ecx, ecx

; 1672 :         _Orphan_all();
; 1673 : 
; 1674 :         while (!empty()) {

  00009	74 6d		 je	 SHORT $LN116@Tidy
  0000b	0f 1f 44 00 00	 npad	 5
$LL2@Tidy:

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00010	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00013	48		 dec	 eax
  00014	03 c8		 add	 ecx, eax
  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00019	48		 dec	 eax
  0001a	23 c8		 and	 ecx, eax

; 1512 :         _Alty_traits::destroy(_Getal(), _Get_data()._Address_subscript(_Newoff));

  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	8b 3c 88	 mov	 edi, DWORD PTR [eax+ecx*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00022	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00025	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00028	76 2b		 jbe	 SHORT $LN46@Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002a	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0002c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0002d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00033	72 16		 jb	 SHORT $LN57@Tidy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00035	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00038	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00040	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00043	0f 87 94 00 00
	00		 ja	 $LN107@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b c2		 mov	 eax, edx
$LN57@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8
$LN46@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00055	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0005c	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00063	c6 07 00	 mov	 BYTE PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1513 :         if (--_Mysize() == 0) {

  00066	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00069	83 e9 01	 sub	 ecx, 1
  0006c	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0006f	75 9f		 jne	 SHORT $LL2@Tidy

; 1514 :             _Myoff() = 0;

  00071	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN116@Tidy:

; 1675 :             pop_back();
; 1676 :         }
; 1677 : 
; 1678 :         if (_Map() != nullptr) {

  00078	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0007c	74 5c		 je	 SHORT $LN72@Tidy

; 1655 :         for (auto _Block = _Map_distance(); _Block > 0;) { // free storage for a block and destroy pointer

  0007e	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00081	85 ff		 test	 edi, edi
  00083	7e 1a		 jle	 SHORT $LN121@Tidy
$LL70@Tidy:

; 1656 :             --_Block;
; 1657 :             auto& _Block_ptr = _Map()[_Block];
; 1658 :             if (_Block_ptr) { // free block

  00085	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00088	4f		 dec	 edi
  00089	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0008c	85 c0		 test	 eax, eax
  0008e	74 0b		 je	 SHORT $LN68@Tidy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00090	6a 18		 push	 24			; 00000018H
  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00098	83 c4 08	 add	 esp, 8
$LN68@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1655 :         for (auto _Block = _Map_distance(); _Block > 0;) { // free storage for a block and destroy pointer

  0009b	85 ff		 test	 edi, edi
  0009d	7f e6		 jg	 SHORT $LL70@Tidy
$LN121@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a5	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000a8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ae	72 12		 jb	 SHORT $LN110@Tidy

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000b3	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b6	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000bb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000be	77 1d		 ja	 SHORT $LN107@Tidy

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000c0	8b c2		 mov	 eax, edx
$LN110@Tidy:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000c2	51		 push	 ecx
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c9	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1667 :         _Map()     = nullptr;

  000cc	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1668 :         _Mapsize() = 0;

  000d3	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN72@Tidy:
  000da	5f		 pop	 edi

; 1683 :     }

  000db	5e		 pop	 esi
  000dc	c3		 ret	 0
$LN107@Tidy:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000dd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN136@Tidy:
  000e2	cc		 int	 3
?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
__Myptr$1$ = -8						; size = 4
tv465 = -4						; size = 4
__Count$ = 8						; size = 4
$T1 = 8							; size = 4
?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap, COMDAT
; _this$ = ecx

; 1603 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1604 :         static_assert(_Minimum_map_size > 1, "The _Xlen() test should always be performed.");
; 1605 : 
; 1606 :         _Alpty _Almap(_Getal());
; 1607 :         size_type _Newsize = _Mapsize() > 0 ? _Mapsize() : 1;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	be 01 00 00 00	 mov	 esi, 1
  00012	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00015	85 c9		 test	 ecx, ecx
  00017	0f 45 f1	 cmovne	 esi, ecx
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Growmap:

; 1608 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b c6		 mov	 eax, esi
  00022	2b c1		 sub	 eax, ecx
  00024	3b c2		 cmp	 eax, edx
  00026	72 05		 jb	 SHORT $LN6@Growmap
  00028	83 fe 08	 cmp	 esi, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN6@Growmap:

; 1609 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1610 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH
  00032	2b c6		 sub	 eax, esi
  00034	3b c6		 cmp	 eax, esi
  00036	0f 82 10 01 00
	00		 jb	 $LN55@Growmap

; 1612 :             }
; 1613 : 
; 1614 :             _Newsize *= 2;

  0003c	03 f6		 add	 esi, esi

; 1615 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1616 : 
; 1617 :         size_type _Allocsize = _Newsize;
; 1618 : 
; 1619 :         const auto _Myboff  = static_cast<size_type>(_Myoff() / _Block_size);

  00040	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00043	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00046	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0004c	0f 87 ff 00 00
	00		 ja	 $LN80@Growmap

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00052	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]
  00059	53		 push	 ebx

; 227  :     if (_Bytes == 0) {

  0005a	85 c0		 test	 eax, eax
  0005c	75 04		 jne	 SHORT $LN23@Growmap

; 228  :         return nullptr;

  0005e	33 db		 xor	 ebx, ebx
  00060	eb 19		 jmp	 SHORT $LN22@Growmap
$LN23@Growmap:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00062	50		 push	 eax
  00063	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00068	72 07		 jb	 SHORT $LN24@Growmap

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006f	eb 05		 jmp	 SHORT $LN78@Growmap
$LN24@Growmap:

; 136  :         return ::operator new(_Bytes);

  00071	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN78@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1622 :         _Mapptr _Myptr      = _Newmap + _Map_off;

  00076	8b d8		 mov	 ebx, eax
  00078	83 c4 04	 add	 esp, 4
$LN22@Growmap:
  0007b	8b 55 08	 mov	 edx, DWORD PTR $T1[ebp]
  0007e	c1 e2 02	 shl	 edx, 2
  00081	89 55 fc	 mov	 DWORD PTR tv465[ebp], edx
  00084	8d 04 1a	 lea	 eax, DWORD PTR [edx+ebx]
  00087	89 45 f8	 mov	 DWORD PTR __Myptr$1$[ebp], eax

; 1623 :         _STL_ASSERT(_Allocsize >= _Newsize, "_Allocsize >= _Newsize");
; 1624 :         while (_Newsize <= _Allocsize / 2) {

  0008a	8b c6		 mov	 eax, esi
  0008c	d1 e8		 shr	 eax, 1
  0008e	3b f0		 cmp	 esi, eax
  00090	77 06		 ja	 SHORT $LN5@Growmap
$LL4@Growmap:

; 1625 :             _Newsize *= 2;

  00092	03 f6		 add	 esi, esi
  00094	3b f0		 cmp	 esi, eax
  00096	76 fa		 jbe	 SHORT $LL4@Growmap
$LN5@Growmap:

; 1626 :         }
; 1627 : 
; 1628 :         _Count = _Newsize - _Mapsize();

  00098	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0009b	2b f0		 sub	 esi, eax

; 1629 : 
; 1630 :         const auto _Map_count = static_cast<_Map_difference_type>(_Count);
; 1631 : 
; 1632 :         _Myptr = _STD uninitialized_copy(_Map() + _Map_off, _Map() + _Map_distance(), _Myptr); // copy initial to end

  0009d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000a0	ff 75 f8	 push	 DWORD PTR __Myptr$1$[ebp]
  000a3	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000a6	50		 push	 eax
  000a7	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>
  000b0	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1633 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000b6	50		 push	 eax
  000b7	39 75 08	 cmp	 DWORD PTR $T1[ebp], esi
  000ba	77 22		 ja	 SHORT $LN8@Growmap

; 1634 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Map_off, _Myptr); // copy rest of old

  000bc	8b 45 fc	 mov	 eax, DWORD PTR tv465[ebp]
  000bf	03 c1		 add	 eax, ecx
  000c1	50		 push	 eax
  000c2	51		 push	 ecx
  000c3	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>

; 1635 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000c8	8b ce		 mov	 ecx, esi
  000ca	2b 4d 08	 sub	 ecx, DWORD PTR $T1[ebp]
  000cd	51		 push	 ecx
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>

; 1636 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new
; 1637 :         } else { // increment not greater than offset of initial block

  000d4	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  000d7	83 c4 14	 add	 esp, 20			; 00000014H
  000da	8b cb		 mov	 ecx, ebx
  000dc	eb 24		 jmp	 SHORT $LN9@Growmap
$LN8@Growmap:

; 1638 :             _STD uninitialized_copy(_Map(), _Map() + _Map_count, _Myptr); // copy more old

  000de	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000e1	50		 push	 eax
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>

; 1639 :             _Myptr = _STD uninitialized_copy(_Map() + _Map_count, _Map() + _Map_off, _Newmap); // copy rest of old

  000e8	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000eb	8b 45 fc	 mov	 eax, DWORD PTR tv465[ebp]
  000ee	03 c1		 add	 eax, ecx
  000f0	53		 push	 ebx
  000f1	50		 push	 eax
  000f2	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV12@@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAPAV10@0PAPAV10@@Z ; std::uninitialized_copy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *>

; 1640 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000fb	8b c8		 mov	 ecx, eax
  000fd	83 c4 18	 add	 esp, 24			; 00000018H
  00100	8b c6		 mov	 eax, esi
$LN9@Growmap:

; 1641 :         }
; 1642 : 
; 1643 :         if (_Map() != nullptr) {

  00102	50		 push	 eax
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@YAPAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAPAV10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > * *,unsigned int>
  00109	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0010c	83 c4 08	 add	 esp, 8
  0010f	85 c0		 test	 eax, eax
  00111	74 2a		 je	 SHORT $LN38@Growmap
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00113	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00116	c1 e1 02	 shl	 ecx, 2

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00119	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011f	72 12		 jb	 SHORT $LN49@Growmap

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00121	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00124	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00127	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00129	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012f	77 25		 ja	 SHORT $LN46@Growmap

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00131	8b c2		 mov	 eax, edx
$LN49@Growmap:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00133	51		 push	 ecx
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013a	83 c4 08	 add	 esp, 8
$LN38@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1649 :         _Mapsize() += _Count;

  0013d	01 77 08	 add	 DWORD PTR [edi+8], esi
  00140	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00143	5b		 pop	 ebx

; 1650 :     }

  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c2 04 00	 ret	 4
$LN55@Growmap:

; 1611 :                 _Xlen(); // result too long

  0014c	e8 00 00 00 00	 call	 ?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
$LN80@Growmap:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00151	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN46@Growmap:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00156	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN77@Growmap:
  0015b	cc		 int	 3
?_Growmap@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXI@Z ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
;	COMDAT ?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT

; 1596 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ??_GCDirRemover@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDirRemover@@UAEPAXI@Z PROC				; CDirRemover::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 467  : 		{

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDirRemover@@6B@

; 468  : 		}

  0000c	e8 00 00 00 00	 call	 ??1CDir@@UAE@XZ		; CDir::~CDir
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 0e		 je	 SHORT $LN10@scalar
  00017	68 48 01 00 00	 push	 328			; 00000148H
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN10@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GCDirRemover@@UAEPAXI@Z ENDP				; CDirRemover::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?OnFile@CDirRemover@@UAE_NPBD0@Z
_TEXT	SEGMENT
_strFullPathName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szPathName$ = 8					; size = 4
_c_szFileName$ = 12					; size = 4
?OnFile@CDirRemover@@UAE_NPBD0@Z PROC			; CDirRemover::OnFile, COMDAT
; _this$ = ecx

; 488  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnFile@CDirRemover@@UAE_NPBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b 45 08	 mov	 eax, DWORD PTR _c_szPathName$[ebp]
  0002c	0f 57 c0	 xorps	 xmm0, xmm0
  0002f	8b 75 0c	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00032	0f 11 45 d8	 movups	 XMMWORD PTR _strFullPathName$[ebp], xmm0

; 836  :         _My_data._Mysize = 0;

  00036	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0003d	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00044	c6 45 d8 00	 mov	 BYTE PTR _strFullPathName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 490  : 			strFullPathName = c_szPathName;

  00048	50		 push	 eax
  00049	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00058	8b ce		 mov	 ecx, esi
  0005a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0005d	0f 1f 00	 npad	 3
$LL89@OnFile:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL89@OnFile
  00067	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00069	51		 push	 ecx
  0006a	56		 push	 esi
  0006b	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  0006e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 434  :         return _Myres > _Small_string_capacity;

  00073	83 7d ec 0f	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00077	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 492  : 			_chmod(strFullPathName.c_str(), _S_IWRITE);

  0007a	68 80 00 00 00	 push	 128			; 00000080H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0007f	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 492  : 			_chmod(strFullPathName.c_str(), _S_IWRITE);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 __chmod
  00089	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  0008c	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  0008f	83 7d ec 0f	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 15 ; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00093	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 493  : 			DeleteFile(strFullPathName.c_str());

  00097	50		 push	 eax
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteFileA@4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0009e	8b 4d ec	 mov	 ecx, DWORD PTR _strFullPathName$[ebp+20]
  000a1	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000a4	76 28		 jbe	 SHORT $LN71@OnFile
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a6	8b 55 d8	 mov	 edx, DWORD PTR _strFullPathName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000a9	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000aa	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ac	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b2	72 10		 jb	 SHORT $LN82@OnFile

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000b7	83 c1 23	 add	 ecx, 35			; 00000023H
  000ba	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000bc	83 c0 fc	 add	 eax, -4			; fffffffcH
  000bf	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c2	77 28		 ja	 SHORT $LN93@OnFile
$LN82@OnFile:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000c4	51		 push	 ecx
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000cb	83 c4 08	 add	 esp, 8
$LN71@OnFile:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 494  : 			return true;

  000ce	b0 01		 mov	 al, 1

; 495  : 		}

  000d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000da	59		 pop	 ecx
  000db	5e		 pop	 esi
  000dc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000df	33 cd		 xor	 ecx, ebp
  000e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
$LN93@OnFile:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ec	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN91@OnFile:
  000f1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnFile@CDirRemover@@UAE_NPBD0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?OnFile@CDirRemover@@UAE_NPBD0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnFile@CDirRemover@@UAE_NPBD0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnFile@CDirRemover@@UAE_NPBD0@Z ENDP			; CDirRemover::OnFile
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?OnFolder@CDirRemover@@UAE_NPBD00@Z
_TEXT	SEGMENT
_remover$ = -392					; size = 328
_strWorkingFolder$ = -64				; size = 24
_strFullPathName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFilter$ = 8					; size = 4
_c_szPathName$ = 12					; size = 4
_c_szFileName$ = 16					; size = 4
?OnFolder@CDirRemover@@UAE_NPBD00@Z PROC		; CDirRemover::OnFolder, COMDAT
; _this$ = ecx

; 471  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnFolder@CDirRemover@@UAE_NPBD00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 7c 01 00
	00		 sub	 esp, 380		; 0000017cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 7d 08	 mov	 edi, DWORD PTR _c_szFilter$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 45 0c	 mov	 eax, DWORD PTR _c_szPathName$[ebp]
  00036	8b 75 10	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00039	0f 11 45 d8	 movups	 XMMWORD PTR _strFullPathName$[ebp], xmm0

; 836  :         _My_data._Mysize = 0;

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00044	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFullPathName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004b	c6 45 d8 00	 mov	 BYTE PTR _strFullPathName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 473  : 			strFullPathName = c_szPathName;

  0004f	50		 push	 eax
  00050	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0005f	8b ce		 mov	 ecx, esi
  00061	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL166@OnFolder:
  00064	8a 01		 mov	 al, BYTE PTR [ecx]
  00066	41		 inc	 ecx
  00067	84 c0		 test	 al, al
  00069	75 f9		 jne	 SHORT $LL166@OnFolder
  0006b	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006d	51		 push	 ecx
  0006e	56		 push	 esi
  0006f	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00072	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 464  : 		{

  00077	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  0007d	e8 00 00 00 00	 call	 ??0CDir@@QAE@XZ		; CDir::CDir
  00082	c7 85 78 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$[ebp], OFFSET ??_7CDirRemover@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0008c	83 7d ec 0f	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00090	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 477  : 			remover.Create(c_szFilter, strFullPathName.c_str());

  00093	6a 00		 push	 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00095	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFullPathName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 477  : 			remover.Create(c_szFilter, strFullPathName.c_str());

  00099	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  0009f	50		 push	 eax
  000a0	57		 push	 edi
  000a1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a5	e8 00 00 00 00	 call	 ?Create@CDir@@QAE_NPBD0H@Z ; CDir::Create
  000aa	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  000ad	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strWorkingFolder$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000b4	0f 11 45 c0	 movups	 XMMWORD PTR _strWorkingFolder$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  000b8	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strWorkingFolder$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000bf	c6 45 c0 00	 mov	 BYTE PTR _strWorkingFolder$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 480  : 			GetWorkingFolder(strWorkingFolder);

  000c3	8d 45 c0	 lea	 eax, DWORD PTR _strWorkingFolder$[ebp]
  000c6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 ?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetWorkingFolder
  000d0	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  000d3	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathName$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  000d6	83 7d ec 0f	 cmp	 DWORD PTR _strFullPathName$[ebp+20], 15 ; 0000000fH

; 1459 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000da	8d 4d c0	 lea	 ecx, DWORD PTR _strWorkingFolder$[ebp]

; 426  :         if (_Large_mode_engaged()) {

  000dd	0f 47 45 d8	 cmova	 eax, DWORD PTR _strFullPathName$[ebp]

; 1459 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000e1	ff 75 e8	 push	 DWORD PTR _strFullPathName$[ebp+16]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ea	6a 01		 push	 1
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  000f1	8d 4d c0	 lea	 ecx, DWORD PTR _strWorkingFolder$[ebp]
  000f4	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 483  : 			StringPath(strWorkingFolder);

  000f9	8d 45 c0	 lea	 eax, DWORD PTR _strWorkingFolder$[ebp]
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath
  00102	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 1237 :         _Emplace_back_internal(_Val);

  00105	8d 45 c0	 lea	 eax, DWORD PTR _strWorkingFolder$[ebp]
  00108	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ??$_Emplace_back_internal@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_internal<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00113	8b 4d d4	 mov	 ecx, DWORD PTR _strWorkingFolder$[ebp+20]
  00116	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00119	76 2c		 jbe	 SHORT $LN106@OnFolder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0011b	8b 55 c0	 mov	 edx, DWORD PTR _strWorkingFolder$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0011e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0011f	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00121	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00127	72 14		 jb	 SHORT $LN117@OnFolder

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00129	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0012c	83 c1 23	 add	 ecx, 35			; 00000023H
  0012f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00131	83 c0 fc	 add	 eax, -4			; fffffffcH
  00134	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00137	0f 87 80 00 00
	00		 ja	 $LN157@OnFolder
$LN117@OnFolder:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0013d	51		 push	 ecx
  0013e	52		 push	 edx
  0013f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00144	83 c4 08	 add	 esp, 8
$LN106@OnFolder:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 468  : 		}

  00147	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0014d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strWorkingFolder$[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00154	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strWorkingFolder$[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0015b	c6 45 c0 00	 mov	 BYTE PTR _strWorkingFolder$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 467  : 		{

  0015f	c7 85 78 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$[ebp], OFFSET ??_7CDirRemover@@6B@

; 468  : 		}

  00169	e8 00 00 00 00	 call	 ??1CDir@@UAE@XZ		; CDir::~CDir
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0016e	8b 4d ec	 mov	 ecx, DWORD PTR _strFullPathName$[ebp+20]
  00171	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00174	76 28		 jbe	 SHORT $LN149@OnFolder
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00176	8b 55 d8	 mov	 edx, DWORD PTR _strFullPathName$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00179	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0017a	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0017c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00182	72 10		 jb	 SHORT $LN160@OnFolder

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00184	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00187	83 c1 23	 add	 ecx, 35			; 00000023H
  0018a	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0018f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00192	77 29		 ja	 SHORT $LN157@OnFolder
$LN160@OnFolder:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00194	51		 push	 ecx
  00195	52		 push	 edx
  00196	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0019b	83 c4 08	 add	 esp, 8
$LN149@OnFolder:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 485  : 			return true;

  0019e	b0 01		 mov	 al, 1

; 486  : 		}

  001a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001aa	59		 pop	 ecx
  001ab	5f		 pop	 edi
  001ac	5e		 pop	 esi
  001ad	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b0	33 cd		 xor	 ecx, ebp
  001b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	c2 0c 00	 ret	 12			; 0000000cH
$LN157@OnFolder:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001bd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN168@OnFolder:
  001c2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$1:
  00008	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CDirRemover@@UAE@XZ	; CDirRemover::~CDirRemover
__unwindfunclet$?OnFolder@CDirRemover@@UAE_NPBD00@Z$2:
  00013	8d 4d c0	 lea	 ecx, DWORD PTR _strWorkingFolder$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$?OnFolder@CDirRemover@@UAE_NPBD00@Z:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 8a 78 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-392]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnFolder@CDirRemover@@UAE_NPBD00@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnFolder@CDirRemover@@UAE_NPBD00@Z ENDP		; CDirRemover::OnFolder
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ??1CDirRemover@@UAE@XZ
_TEXT	SEGMENT
??1CDirRemover@@UAE@XZ PROC				; CDirRemover::~CDirRemover, COMDAT
; _this$ = ecx

; 467  : 		{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CDirRemover@@6B@

; 468  : 		}

  00006	e9 00 00 00 00	 jmp	 ??1CDir@@UAE@XZ		; CDir::~CDir
??1CDirRemover@@UAE@XZ ENDP				; CDirRemover::~CDirRemover
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ
text$yd	SEGMENT
??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ PROC ; `GetOnlyPathName'::`2'::`dynamic atexit destructor for 'strPathName'', COMDAT

; 434  :         return _Myres > _Small_string_capacity;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 2f		 jbe	 SHORT $LN23@dynamic
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00011	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN34@dynamic

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H
  00022	2b c2		 sub	 eax, edx

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN34@dynamic:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN23@dynamic:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00055	c3		 ret	 0
??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ ENDP ; `GetOnlyPathName'::`2'::`dynamic atexit destructor for 'strPathName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_szPath$ = -268						; size = 261
__$ArrayPad$ = -4					; size = 4
_r_str$ = 8						; size = 4
?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetExcutedFileName, COMDAT

; 577  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _r_str$[ebp]

; 578  : 	char szPath[MAX_PATH+1];
; 579  : 
; 580  : 	GetModuleFileName(NULL, szPath, MAX_PATH);

  00017	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  0001d	68 04 01 00 00	 push	 260			; 00000104H
  00022	50		 push	 eax
  00023	6a 00		 push	 0
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 581  : 	szPath[MAX_PATH] = '\0';
; 582  : 
; 583  : 	r_str = szPath;

  0002b	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  00031	c6 45 f8 00	 mov	 BYTE PTR _szPath$[ebp+260], 0
  00035	50		 push	 eax
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 584  : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	5e		 pop	 esi
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?GetExcutedFileName@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetExcutedFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
_TEXT	SEGMENT
__Ptr$1$ = -376						; size = 4
__Result$2$ = -372					; size = 4
__Result$2$ = -368					; size = 4
__Ptr$1$ = -364						; size = 4
_pstrString$GSCopy$1$ = -360				; size = 4
_c_szCharacter$GSCopy$1$ = -356				; size = 4
$T2 = -352						; size = 4
__Ptr$1$ = -352						; size = 4
__Result$1$ = -348					; size = 4
__New_size$1$ = -348					; size = 4
__Matches$3 = -344					; size = 256
_strBack$4 = -88					; size = 24
$T5 = -64						; size = 24
_strFront$6 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pstrString$ = 8					; size = 4
_c_szCharacter$ = 12					; size = 4
?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z PROC ; StringExceptCharacter, COMDAT

; 525  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _pstrString$[ebp]
  00030	8b 45 0c	 mov	 eax, DWORD PTR _c_szCharacter$[ebp]
  00033	89 8d 98 fe ff
	ff		 mov	 DWORD PTR _pstrString$GSCopy$1$[ebp], ecx
  00039	89 85 9c fe ff
	ff		 mov	 DWORD PTR _c_szCharacter$GSCopy$1$[ebp], eax
  0003f	90		 npad	 1
$LL2@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00040	8b f8		 mov	 edi, eax
  00042	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
$LL346@StringExce:
  00045	8a 07		 mov	 al, BYTE PTR [edi]
  00047	47		 inc	 edi
  00048	84 c0		 test	 al, al
  0004a	75 f9		 jne	 SHORT $LL346@StringExce
  0004c	2b fa		 sub	 edi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  0004e	89 8d a4 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], ecx

; 434  :         return _Myres > _Small_string_capacity;

  00054	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00058	8b c1		 mov	 eax, ecx

; 2661 :         return static_cast<size_type>(_Traits_find_first_of<_Traits>(

  0005a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005d	89 95 a0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx

; 426  :         if (_Large_mode_engaged()) {

  00063	76 08		 jbe	 SHORT $LN342@StringExce

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00065	8b 01		 mov	 eax, DWORD PTR [ecx]
  00067	89 85 a4 fe ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
$LN342@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 812  :     if (_Needle_size == 0 || _Start_at >= _Hay_size) { // no match possible

  0006d	85 ff		 test	 edi, edi
  0006f	0f 84 81 00 00
	00		 je	 $LN29@StringExce
  00075	85 d2		 test	 edx, edx
  00077	0f 84 79 00 00
	00		 je	 $LN29@StringExce

; 813  :         return static_cast<size_t>(-1);
; 814  :     }
; 815  : 
; 816  :     const auto _Hay_start = _Haystack + _Start_at;
; 817  :     const auto _Hay_end   = _Haystack + _Hay_size;

  0007d	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]

; 818  : 
; 819  :     if constexpr (_Is_implementation_handled_char_traits<_Traits>) {
; 820  :         if (!_STD _Is_constant_evaluated()) {
; 821  :             using _Elem = typename _Traits::char_type;
; 822  : 
; 823  : #if _USE_STD_VECTOR_ALGORITHMS
; 824  :             const bool _Try_vectorize = _Hay_size - _Start_at > _Threshold_find_first_of;
; 825  : 
; 826  :             // Additional condition for when the vectorization outperforms the table lookup
; 827  :             constexpr size_t _Find_first_of_bitmap_threshold = sizeof(_Elem) == 1 ? 48 : sizeof(_Elem) == 8 ? 8 : 16;
; 828  : 
; 829  :             const bool _Use_bitmap = !_Try_vectorize || _Needle_size > _Find_first_of_bitmap_threshold;

  00080	83 fa 10	 cmp	 edx, 16			; 00000010H
  00083	76 13		 jbe	 SHORT $LN341@StringExce
  00085	83 ff 30	 cmp	 edi, 48			; 00000030H
  00088	77 0e		 ja	 SHORT $LN341@StringExce
  0008a	8b 95 9c fe ff
	ff		 mov	 edx, DWORD PTR _c_szCharacter$GSCopy$1$[ebp]
  00090	8d 0c 3a	 lea	 ecx, DWORD PTR [edx+edi]
  00093	e9 a7 01 00 00	 jmp	 $LN344@StringExce
$LN341@StringExce:
  00098	68 00 01 00 00	 push	 256			; 00000100H
  0009d	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR __Matches$3[ebp]
  000a3	6a 00		 push	 0
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _memset

; 830  : #else // ^^^ _USE_STD_VECTOR_ALGORITHMS / !_USE_STD_VECTOR_ALGORITHMS vvv
; 831  :             const bool _Use_bitmap = true;
; 832  : #endif // ^^^ !_USE_STD_VECTOR_ALGORITHMS ^^^
; 833  : 
; 834  :             if (_Use_bitmap) {
; 835  :                 _String_bitmap<_Elem> _Matches;
; 836  : 
; 837  :                 if (_Matches._Mark(_Needle, _Needle + _Needle_size)) {

  000ab	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _c_szCharacter$GSCopy$1$[ebp]
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  000b7	50		 push	 eax
  000b8	51		 push	 ecx
  000b9	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR __Matches$3[ebp]
  000bf	e8 00 00 00 00	 call	 ?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z ; std::_String_bitmap<char,1>::_Mark
  000c4	84 c0		 test	 al, al
  000c6	0f 84 54 01 00
	00		 je	 $LN335@StringExce

; 838  :                     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  000cc	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR __Result$1$[ebp]
  000d2	8b f2		 mov	 esi, edx
  000d4	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  000da	03 ca		 add	 ecx, edx
  000dc	3b d1		 cmp	 edx, ecx
  000de	73 16		 jae	 SHORT $LN29@StringExce
$LL24@StringExce:

; 770  :         return _Matches[static_cast<unsigned char>(_Ch)];

  000e0	0f b6 06	 movzx	 eax, BYTE PTR [esi]

; 839  :                         if (_Matches._Match(*_Match_try)) {

  000e3	80 bc 05 a8 fe
	ff ff 00	 cmp	 BYTE PTR __Matches$3[ebp+eax], 0
  000eb	0f 85 28 01 00
	00		 jne	 $LN325@StringExce

; 838  :                     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  000f1	46		 inc	 esi
  000f2	3b f1		 cmp	 esi, ecx
  000f4	72 ea		 jb	 SHORT $LL24@StringExce
$LN29@StringExce:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 529  : 	while((iNextPos = pstrString->find_first_of(c_szCharacter, icurPos)) >= 0)

  000f6	83 ce ff	 or	 esi, -1
$LN21@StringExce:
  000f9	85 f6		 test	 esi, esi
  000fb	0f 88 1c 03 00
	00		 js	 $LN3@StringExce
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 450  :         if (_Mysize < _Off) {

  00101	8b bd 98 fe ff
	ff		 mov	 edi, DWORD PTR _pstrString$GSCopy$1$[ebp]

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  00107	8b ce		 mov	 ecx, esi
  00109	0f 57 c0	 xorps	 xmm0, xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0010c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFront$6[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00113	0f 11 45 d8	 movups	 XMMWORD PTR _strFront$6[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00117	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _strFront$6[ebp+20], 0

; 425  :         const value_type* _Result = _Bx._Buf;

  0011e	8b c7		 mov	 eax, edi

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  00120	39 77 10	 cmp	 DWORD PTR [edi+16], esi
  00123	0f 42 4f 10	 cmovb	 ecx, DWORD PTR [edi+16]

; 434  :         return _Myres > _Small_string_capacity;

  00127	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0012b	76 02		 jbe	 SHORT $LN343@StringExce

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0012d	8b 07		 mov	 eax, DWORD PTR [edi]
$LN343@StringExce:

; 713  :         _Construct<_Construct_strategy::_From_ptr>(

  0012f	51		 push	 ecx
  00130	50		 push	 eax
  00131	8d 4d d8	 lea	 ecx, DWORD PTR _strFront$6[ebp]
  00134	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 532  : 		std::string strBack = pstrString->substr(iNextPos+1, pstrString->length() - iNextPos - 1);

  00139	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0013c	0f 57 c0	 xorps	 xmm0, xmm0
  0013f	8b d1		 mov	 edx, ecx
  00141	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00148	2b d6		 sub	 edx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0014a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _strBack$4[ebp+16], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 532  : 		std::string strBack = pstrString->substr(iNextPos+1, pstrString->length() - iNextPos - 1);

  00151	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00152	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _strBack$4[ebp+20], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 532  : 		std::string strBack = pstrString->substr(iNextPos+1, pstrString->length() - iNextPos - 1);

  00159	4a		 dec	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0015a	0f 11 45 a8	 movups	 XMMWORD PTR _strBack$4[ebp], xmm0

; 450  :         if (_Mysize < _Off) {

  0015e	3b ce		 cmp	 ecx, esi
  00160	0f 82 dc 02 00
	00		 jb	 $LN328@StringExce

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  00166	2b ce		 sub	 ecx, esi

; 425  :         const value_type* _Result = _Bx._Buf;

  00168	8b c7		 mov	 eax, edi

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  0016a	3b ca		 cmp	 ecx, edx
  0016c	0f 42 d1	 cmovb	 edx, ecx

; 434  :         return _Myres > _Small_string_capacity;

  0016f	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00173	76 02		 jbe	 SHORT $LN119@StringExce

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00175	8b 07		 mov	 eax, DWORD PTR [edi]
$LN119@StringExce:

; 713  :         _Construct<_Construct_strategy::_From_ptr>(

  00177	03 c6		 add	 eax, esi
  00179	8d 4d a8	 lea	 ecx, DWORD PTR _strBack$4[ebp]
  0017c	52		 push	 edx
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 3115 :     if (_Left.max_size() - _Left_size < _Right_size) {

  00183	8b 4d e8	 mov	 ecx, DWORD PTR _strFront$6[ebp+16]
  00186	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0018b	8b 55 b8	 mov	 edx, DWORD PTR _strBack$4[ebp+16]
  0018e	2b c1		 sub	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 532  : 		std::string strBack = pstrString->substr(iNextPos+1, pstrString->length() - iNextPos - 1);

  00190	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3115 :     if (_Left.max_size() - _Left_size < _Right_size) {

  00194	3b c2		 cmp	 eax, edx
  00196	0f 82 a1 02 00
	00		 jb	 $LN329@StringExce

; 434  :         return _Myres > _Small_string_capacity;

  0019c	83 7d ec 0f	 cmp	 DWORD PTR _strFront$6[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  001a0	8d 75 d8	 lea	 esi, DWORD PTR _strFront$6[ebp]

; 426  :         if (_Large_mode_engaged()) {

  001a3	8b 45 d8	 mov	 eax, DWORD PTR _strFront$6[ebp]
  001a6	0f 57 c0	 xorps	 xmm0, xmm0
  001a9	0f 47 f0	 cmova	 esi, eax
  001ac	89 85 94 fe ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax

; 434  :         return _Myres > _Small_string_capacity;

  001b2	83 7d bc 0f	 cmp	 DWORD PTR _strBack$4[ebp+20], 15 ; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  001b6	8b 45 a8	 mov	 eax, DWORD PTR _strBack$4[ebp]
  001b9	89 b5 90 fe ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], esi

; 425  :         const value_type* _Result = _Bx._Buf;

  001bf	8d 75 a8	 lea	 esi, DWORD PTR _strBack$4[ebp]

; 426  :         if (_Large_mode_engaged()) {

  001c2	0f 47 f0	 cmova	 esi, eax
  001c5	89 85 88 fe ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
  001cb	89 b5 8c fe ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], esi

; 1035 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  001d1	8d 45 c0	 lea	 eax, DWORD PTR $T5[ebp]
  001d4	03 d1		 add	 edx, ecx
  001d6	89 85 a0 fe ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
  001dc	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  001e1	89 95 a4 fe ff
	ff		 mov	 DWORD PTR __New_size$1$[ebp], edx

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001e7	0f 11 45 c0	 movups	 XMMWORD PTR $T5[ebp], xmm0

; 1039 :         if (_New_capacity < _New_size) {

  001eb	3b d6		 cmp	 edx, esi
  001ed	0f 86 01 01 00
	00		 jbe	 $LN152@StringExce

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  001f3	8b f2		 mov	 esi, edx
  001f5	83 ce 0f	 or	 esi, 15			; 0000000fH
  001f8	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  001fe	0f 86 b4 00 00
	00		 jbe	 $LN168@StringExce

; 2944 :             return _Max;

  00204	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00209	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00214	e9 c6 00 00 00	 jmp	 $LN351@StringExce
$LN325@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 840  :                             return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00219	2b f2		 sub	 esi, edx

; 841  :                         }
; 842  :                     }
; 843  :                     return static_cast<size_t>(-1); // no match

  0021b	e9 d9 fe ff ff	 jmp	 $LN21@StringExce
$LN335@StringExce:

; 844  :                 }
; 845  : 
; 846  :                 // couldn't put one of the characters into the bitmap, fall back to vectorized or serial algorithms
; 847  :             }
; 848  : 
; 849  : #if _USE_STD_VECTOR_ALGORITHMS
; 850  :             if (_Try_vectorize) {

  00220	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _c_szCharacter$GSCopy$1$[ebp]
  00226	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  0022c	03 cf		 add	 ecx, edi
  0022e	83 fa 10	 cmp	 edx, 16			; 00000010H
  00231	76 37		 jbe	 SHORT $LN36@StringExce
  00233	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __Result$1$[ebp]
  00239	8b 95 9c fe ff
	ff		 mov	 edx, DWORD PTR _c_szCharacter$GSCopy$1$[ebp]
$LN344@StringExce:

; 851  :                 const _Traits_ptr_t<_Traits> _Found =

  0023f	51		 push	 ecx
  00240	52		 push	 edx
  00241	56		 push	 esi
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ??$_Find_first_of_vectorized@$$CBD$$CBD@std@@YAPBDQBD000@Z ; std::_Find_first_of_vectorized<char const ,char const >

; 852  :                     _STD _Find_first_of_vectorized(_Hay_start, _Hay_end, _Needle, _Needle + _Needle_size);
; 853  : 
; 854  :                 if (_Found != _Hay_end) {

  00248	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR __Result$1$[ebp]
  0024e	8b f0		 mov	 esi, eax
  00250	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00256	83 c4 10	 add	 esp, 16			; 00000010H
  00259	03 c1		 add	 eax, ecx
  0025b	3b f0		 cmp	 esi, eax
  0025d	0f 84 93 fe ff
	ff		 je	 $LN29@StringExce

; 855  :                     return static_cast<size_t>(_Found - _Haystack); // found a match

  00263	2b f1		 sub	 esi, ecx

; 856  :                 } else {
; 857  :                     return static_cast<size_t>(-1); // no match

  00265	e9 8f fe ff ff	 jmp	 $LN21@StringExce
$LN36@StringExce:

; 858  :                 }
; 859  :             }
; 860  : #endif // _USE_STD_VECTOR_ALGORITHMS
; 861  :         }
; 862  :     }
; 863  : 
; 864  :     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  0026a	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR __Result$1$[ebp]
  00270	8b f1		 mov	 esi, ecx
  00272	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00275	3b c8		 cmp	 ecx, eax
  00277	0f 83 79 fe ff
	ff		 jae	 $LN29@StringExce
  0027d	0f 1f 00	 npad	 3
$LL27@StringExce:

; 451  :             return __builtin_char_memchr(_First, _Ch, _Count);

  00280	0f be 06	 movsx	 eax, BYTE PTR [esi]
  00283	57		 push	 edi
  00284	50		 push	 eax
  00285	ff b5 9c fe ff
	ff		 push	 DWORD PTR _c_szCharacter$GSCopy$1$[ebp]
  0028b	e8 00 00 00 00	 call	 _memchr
  00290	83 c4 0c	 add	 esp, 12			; 0000000cH

; 865  :         if (_Traits::find(_Needle, _Needle_size, *_Match_try)) {

  00293	85 c0		 test	 eax, eax
  00295	75 16		 jne	 SHORT $LN326@StringExce

; 858  :                 }
; 859  :             }
; 860  : #endif // _USE_STD_VECTOR_ALGORITHMS
; 861  :         }
; 862  :     }
; 863  : 
; 864  :     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  00297	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0029d	46		 inc	 esi
  0029e	03 85 a4 fe ff
	ff		 add	 eax, DWORD PTR __Result$1$[ebp]
  002a4	3b f0		 cmp	 esi, eax
  002a6	72 d8		 jb	 SHORT $LL27@StringExce
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3115 :     if (_Left.max_size() - _Left_size < _Right_size) {

  002a8	e9 49 fe ff ff	 jmp	 $LN29@StringExce
$LN326@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 866  :             return static_cast<size_t>(_Match_try - _Haystack); // found a match

  002ad	2b b5 a4 fe ff
	ff		 sub	 esi, DWORD PTR __Result$1$[ebp]
  002b3	e9 41 fe ff ff	 jmp	 $LN21@StringExce
$LN168@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  002b8	83 fe 16	 cmp	 esi, 22			; 00000016H
  002bb	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  002c0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  002c3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  002c6	85 c0		 test	 eax, eax
  002c8	74 21		 je	 SHORT $LN350@StringExce
$LN182@StringExce:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  002ca	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  002cf	72 08		 jb	 SHORT $LN183@StringExce

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  002d1	50		 push	 eax
  002d2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  002d7	eb 06		 jmp	 SHORT $LN351@StringExce
$LN183@StringExce:

; 136  :         return ::operator new(_Bytes);

  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN351@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1043 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  002df	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR __New_size$1$[ebp]
  002e5	83 c4 04	 add	 esp, 4
  002e8	8b 4d e8	 mov	 ecx, DWORD PTR _strFront$6[ebp+16]
$LN350@StringExce:
  002eb	89 85 a0 fe ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
  002f1	89 45 c0	 mov	 DWORD PTR $T5[ebp], eax
$LN152@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002f4	51		 push	 ecx
  002f5	ff b5 90 fe ff
	ff		 push	 DWORD PTR __Result$2$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1046 :         _My_data._Mysize = _New_size;

  002fb	89 55 d0	 mov	 DWORD PTR $T5[ebp+16], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002fe	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1047 :         _My_data._Myres  = _New_capacity;

  002ff	89 75 d4	 mov	 DWORD PTR $T5[ebp+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00302	e8 00 00 00 00	 call	 _memcpy
  00307	ff 75 b8	 push	 DWORD PTR _strBack$4[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1049 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  0030a	8b 45 e8	 mov	 eax, DWORD PTR _strFront$6[ebp+16]
  0030d	8b b5 a0 fe ff
	ff		 mov	 esi, DWORD PTR __Ptr$1$[ebp]
  00313	03 c6		 add	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00315	ff b5 8c fe ff
	ff		 push	 DWORD PTR __Result$2$[ebp]
  0031b	50		 push	 eax
  0031c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1050 :         _Traits::assign(_Ptr[_New_size], _Elem());

  00321	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR __New_size$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00327	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1050 :         _Traits::assign(_Ptr[_New_size], _Elem());

  0032a	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 1202 :         if (this == _STD addressof(_Right)) {

  0032e	8d 45 c0	 lea	 eax, DWORD PTR $T5[ebp]
  00331	3b f8		 cmp	 edi, eax
  00333	74 1a		 je	 SHORT $LN200@StringExce

; 1203 :             return *this;
; 1204 :         }
; 1205 : 
; 1206 :         auto& _Al                 = _Getal();
; 1207 :         auto& _Right_al           = _Right._Getal();
; 1208 :         constexpr auto _Pocma_val = _Choose_pocma_v<_Alty>;
; 1209 :         if constexpr (_Pocma_val == _Pocma_values::_Propagate_allocators) {
; 1210 :             if (_Al != _Right_al) {
; 1211 :                 // intentionally slams into noexcept on OOM, TRANSITION, VSO-466800
; 1212 :                 _Mypair._Myval2._Orphan_all();
; 1213 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1214 :             }
; 1215 :         } else if constexpr (_Pocma_val == _Pocma_values::_No_propagate_allocators) {
; 1216 :             if (_Al != _Right_al) {
; 1217 :                 assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 1218 :                 return *this;
; 1219 :             }
; 1220 :         }
; 1221 : 
; 1222 :         _Tidy_deallocate();

  00335	8b cf		 mov	 ecx, edi
  00337	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0033c	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T5[ebp]
  00340	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  00343	f3 0f 7e 45 d0	 movq	 xmm0, QWORD PTR $T5[ebp+16]
  00348	66 0f d6 47 10	 movq	 QWORD PTR [edi+16], xmm0

; 434  :         return _Myres > _Small_string_capacity;

  0034d	eb 34		 jmp	 SHORT $LN231@StringExce
$LN200@StringExce:
  0034f	8b 4d d4	 mov	 ecx, DWORD PTR $T5[ebp+20]
  00352	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00355	76 2c		 jbe	 SHORT $LN231@StringExce
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00357	8b 55 c0	 mov	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0035a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0035b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0035d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00363	72 14		 jb	 SHORT $LN242@StringExce

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00365	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00368	83 c1 23	 add	 ecx, 35			; 00000023H
  0036b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0036d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00370	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00373	0f 87 bf 00 00
	00		 ja	 $LN313@StringExce
$LN242@StringExce:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00379	51		 push	 ecx
  0037a	52		 push	 edx
  0037b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00380	83 c4 08	 add	 esp, 8
$LN231@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00383	8b 45 bc	 mov	 eax, DWORD PTR _strBack$4[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 534  : 	}

  00386	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0038a	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0038d	76 31		 jbe	 SHORT $LN268@StringExce
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0038f	8b 95 88 fe ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00395	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00398	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0039a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003a0	72 14		 jb	 SHORT $LN279@StringExce

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003a2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003a5	83 c1 23	 add	 ecx, 35			; 00000023H
  003a8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003aa	83 c0 fc	 add	 eax, -4			; fffffffcH
  003ad	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003b0	0f 87 82 00 00
	00		 ja	 $LN313@StringExce
$LN279@StringExce:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003b6	51		 push	 ecx
  003b7	52		 push	 edx
  003b8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003bd	83 c4 08	 add	 esp, 8
$LN268@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003c0	8b 55 ec	 mov	 edx, DWORD PTR _strFront$6[ebp+20]

; 3047 :         if (_My_data._Large_mode_engaged()) {

  003c3	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _pstrString$GSCopy$1$[ebp]
  003c9	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _c_szCharacter$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 534  : 	}

  003cf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003d6	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  003d9	0f 86 61 fc ff
	ff		 jbe	 $LL2@StringExce

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  003df	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003e2	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
  003e8	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003f0	72 10		 jb	 SHORT $LN316@StringExce

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003f5	83 c1 23	 add	 ecx, 35			; 00000023H
  003f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  003fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00400	77 36		 ja	 SHORT $LN313@StringExce
$LN316@StringExce:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00402	51		 push	 ecx
  00403	52		 push	 edx
  00404	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 534  : 	}

  00409	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _pstrString$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0040f	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 534  : 	}

  00412	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _c_szCharacter$GSCopy$1$[ebp]
  00418	e9 23 fc ff ff	 jmp	 $LL2@StringExce
$LN3@StringExce:

; 535  : }

  0041d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00420	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00427	59		 pop	 ecx
  00428	5f		 pop	 edi
  00429	5e		 pop	 esi
  0042a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0042d	33 cd		 xor	 ecx, ebp
  0042f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00434	8b e5		 mov	 esp, ebp
  00436	5d		 pop	 ebp
  00437	c3		 ret	 0
$LN313@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00438	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN329@StringExce:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3116 :         _Xlen_string();

  0043d	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN328@StringExce:

; 451  :             _Xran();

  00442	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN348@StringExce:
  00447	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strFront$6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR _strBack$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a 88 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-376]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?StringExceptCharacter@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ENDP ; StringExceptCharacter
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?CommandLineToArgv@@YAPAPADPADPAH@Z
_TEXT	SEGMENT
__argv$1$ = -12						; size = 4
_argv$1$ = -8						; size = 4
_in_QM$1$ = -1						; size = 1
_CmdLine$ = 8						; size = 4
_in_TEXT$1$ = 11					; size = 1
__argc$ = 12						; size = 4
?CommandLineToArgv@@YAPAPADPADPAH@Z PROC		; CommandLineToArgv, COMDAT

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 600  : 	PCHAR* argv;
; 601  : 	PCHAR  _argv;
; 602  : 	ULONG   len;
; 603  : 	ULONG   argc;
; 604  : 	CHAR   a;
; 605  : 	ULONG   i, j;
; 606  : 
; 607  : 	BOOLEAN  in_QM;
; 608  : 	BOOLEAN  in_TEXT;
; 609  : 	BOOLEAN  in_SPACE;
; 610  : 
; 611  : 	len = strlen(CmdLine);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _CmdLine$[ebp]
  0000a	8b cb		 mov	 ecx, ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL26@CommandLin:
  00011	8a 01		 mov	 al, BYTE PTR [ecx]
  00013	41		 inc	 ecx
  00014	84 c0		 test	 al, al
  00016	75 f9		 jne	 SHORT $LL26@CommandLin
  00018	2b ca		 sub	 ecx, edx

; 612  : 	i = ((len+2)/2)*sizeof(PVOID) + sizeof(PVOID);

  0001a	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  0001d	d1 e8		 shr	 eax, 1
  0001f	8d 34 85 04 00
	00 00		 lea	 esi, DWORD PTR [eax*4+4]

; 613  : 
; 614  : 	argv = (PCHAR*)GlobalAlloc(GMEM_FIXED,

  00026	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00029	03 c6		 add	 eax, esi
  0002b	50		 push	 eax
  0002c	6a 00		 push	 0
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GlobalAlloc@8

; 615  : 		i + (len+2)*sizeof(CHAR));
; 616  : 
; 617  : 	_argv = (PCHAR)(((PUCHAR)argv)+i);
; 618  : 
; 619  : 	argc = 0;

  00034	33 ff		 xor	 edi, edi
  00036	89 45 f8	 mov	 DWORD PTR _argv$1$[ebp], eax

; 620  : 	argv[argc] = _argv;
; 621  : 	in_QM = FALSE;
; 622  : 	in_TEXT = FALSE;
; 623  : 	in_SPACE = TRUE;

  00039	b6 01		 mov	 dh, 1
  0003b	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]

; 624  : 	i = 0;
; 625  : 	j = 0;

  0003e	33 f6		 xor	 esi, esi
  00040	89 08		 mov	 DWORD PTR [eax], ecx

; 626  : 
; 627  : 	while( (a = CmdLine[i]) != 0 ) {

  00042	8a 13		 mov	 dl, BYTE PTR [ebx]
  00044	89 4d f4	 mov	 DWORD PTR __argv$1$[ebp], ecx
  00047	32 c9		 xor	 cl, cl
  00049	88 4d ff	 mov	 BYTE PTR _in_QM$1$[ebp], cl
  0004c	88 4d 0b	 mov	 BYTE PTR _in_TEXT$1$[ebp], cl
  0004f	84 d2		 test	 dl, dl
  00051	0f 84 86 00 00
	00		 je	 $LN3@CommandLin

; 600  : 	PCHAR* argv;
; 601  : 	PCHAR  _argv;
; 602  : 	ULONG   len;
; 603  : 	ULONG   argc;
; 604  : 	CHAR   a;
; 605  : 	ULONG   i, j;
; 606  : 
; 607  : 	BOOLEAN  in_QM;
; 608  : 	BOOLEAN  in_TEXT;
; 609  : 	BOOLEAN  in_SPACE;
; 610  : 
; 611  : 	len = strlen(CmdLine);

  00057	8b 45 f4	 mov	 eax, DWORD PTR __argv$1$[ebp]
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL2@CommandLin:

; 628  : 		if(in_QM) {

  00060	84 c9		 test	 cl, cl
  00062	74 12		 je	 SHORT $LN6@CommandLin

; 629  : 			if(a == '\"') {

  00064	80 fa 22	 cmp	 dl, 34			; 00000022H
  00067	75 07		 jne	 SHORT $LN8@CommandLin

; 630  : 				in_QM = FALSE;

  00069	32 c9		 xor	 cl, cl
  0006b	88 4d ff	 mov	 BYTE PTR _in_QM$1$[ebp], cl

; 631  : 			} else {

  0006e	eb 62		 jmp	 SHORT $LN4@CommandLin
$LN8@CommandLin:

; 632  : 				_argv[j] = a;

  00070	88 10		 mov	 BYTE PTR [eax], dl

; 633  : 				j++;

  00072	46		 inc	 esi
  00073	40		 inc	 eax

; 634  : 			}
; 635  : 		} else {

  00074	eb 5c		 jmp	 SHORT $LN4@CommandLin
$LN6@CommandLin:

; 636  : 			switch(a) {

  00076	0f be ca	 movsx	 ecx, dl
  00079	83 c1 f7	 add	 ecx, -9			; fffffff7H
  0007c	83 f9 19	 cmp	 ecx, 25			; 00000019H
  0007f	77 39		 ja	 SHORT $LN17@CommandLin
  00081	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN27@CommandLin[ecx]
  00088	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN28@CommandLin[ecx*4]
$LN10@CommandLin:

; 637  : 				case '\"':
; 638  : 					in_QM = TRUE;

  0008f	b1 01		 mov	 cl, 1
  00091	88 4d ff	 mov	 BYTE PTR _in_QM$1$[ebp], cl

; 639  : 					in_TEXT = TRUE;

  00094	88 4d 0b	 mov	 BYTE PTR _in_TEXT$1$[ebp], cl

; 640  : 					if(in_SPACE) {

  00097	84 f6		 test	 dh, dh
  00099	74 35		 je	 SHORT $LN25@CommandLin

; 641  : 						argv[argc] = _argv+j;

  0009b	8b 55 f8	 mov	 edx, DWORD PTR _argv$1$[ebp]
  0009e	89 04 ba	 mov	 DWORD PTR [edx+edi*4], eax

; 642  : 						argc++;

  000a1	47		 inc	 edi

; 643  : 					}
; 644  : 					in_SPACE = FALSE;
; 645  : 					break;

  000a2	eb 2c		 jmp	 SHORT $LN25@CommandLin
$LN12@CommandLin:

; 646  : 				case ' ':
; 647  : 				case '\t':
; 648  : 				case '\n':
; 649  : 				case '\r':
; 650  : 					if(in_TEXT) {

  000a4	80 7d 0b 00	 cmp	 BYTE PTR _in_TEXT$1$[ebp], 0
  000a8	74 05		 je	 SHORT $LN24@CommandLin

; 651  : 						_argv[j] = '\0';

  000aa	c6 00 00	 mov	 BYTE PTR [eax], 0

; 652  : 						j++;

  000ad	46		 inc	 esi
  000ae	40		 inc	 eax
$LN24@CommandLin:

; 653  : 					}
; 654  : 					in_TEXT = FALSE;
; 655  : 					in_SPACE = TRUE;
; 656  : 					break;

  000af	8a 4d ff	 mov	 cl, BYTE PTR _in_QM$1$[ebp]
  000b2	b6 01		 mov	 dh, 1
  000b4	c6 45 0b 00	 mov	 BYTE PTR _in_TEXT$1$[ebp], 0
  000b8	eb 18		 jmp	 SHORT $LN4@CommandLin
$LN17@CommandLin:

; 657  : 				default:
; 658  : 					in_TEXT = TRUE;

  000ba	c6 45 0b 01	 mov	 BYTE PTR _in_TEXT$1$[ebp], 1

; 659  : 					if(in_SPACE) {

  000be	84 f6		 test	 dh, dh
  000c0	74 07		 je	 SHORT $LN18@CommandLin

; 660  : 						argv[argc] = _argv+j;

  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _argv$1$[ebp]
  000c5	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax

; 661  : 						argc++;

  000c8	47		 inc	 edi
$LN18@CommandLin:

; 662  : 					}
; 663  : 					_argv[j] = a;
; 664  : 					j++;

  000c9	8a 4d ff	 mov	 cl, BYTE PTR _in_QM$1$[ebp]
  000cc	46		 inc	 esi
  000cd	88 10		 mov	 BYTE PTR [eax], dl
  000cf	40		 inc	 eax
$LN25@CommandLin:

; 665  : 					in_SPACE = FALSE;
; 666  : 					break;
; 667  : 			}
; 668  : 		}
; 669  : 		i++;

  000d0	32 f6		 xor	 dh, dh
$LN4@CommandLin:

; 626  : 
; 627  : 	while( (a = CmdLine[i]) != 0 ) {

  000d2	8a 53 01	 mov	 dl, BYTE PTR [ebx+1]

; 665  : 					in_SPACE = FALSE;
; 666  : 					break;
; 667  : 			}
; 668  : 		}
; 669  : 		i++;

  000d5	43		 inc	 ebx
  000d6	84 d2		 test	 dl, dl
  000d8	75 86		 jne	 SHORT $LL2@CommandLin
  000da	8b 45 f8	 mov	 eax, DWORD PTR _argv$1$[ebp]
$LN3@CommandLin:

; 670  : 	}
; 671  : 	_argv[j] = '\0';

  000dd	8b 4d f4	 mov	 ecx, DWORD PTR __argv$1$[ebp]
  000e0	c6 04 0e 00	 mov	 BYTE PTR [esi+ecx], 0

; 672  : 	argv[argc] = NULL;
; 673  : 
; 674  : 	(*_argc) = argc;

  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR __argc$[ebp]
  000e7	c7 04 b8 00 00
	00 00		 mov	 DWORD PTR [eax+edi*4], 0
  000ee	89 39		 mov	 DWORD PTR [ecx], edi

; 675  : 	return argv;

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx

; 676  : }

  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
  000f7	90		 npad	 1
$LN28@CommandLin:
  000f8	00 00 00 00	 DD	 $LN12@CommandLin
  000fc	00 00 00 00	 DD	 $LN10@CommandLin
  00100	00 00 00 00	 DD	 $LN17@CommandLin
$LN27@CommandLin:
  00104	00		 DB	 0
  00105	00		 DB	 0
  00106	02		 DB	 2
  00107	02		 DB	 2
  00108	00		 DB	 0
  00109	02		 DB	 2
  0010a	02		 DB	 2
  0010b	02		 DB	 2
  0010c	02		 DB	 2
  0010d	02		 DB	 2
  0010e	02		 DB	 2
  0010f	02		 DB	 2
  00110	02		 DB	 2
  00111	02		 DB	 2
  00112	02		 DB	 2
  00113	02		 DB	 2
  00114	02		 DB	 2
  00115	02		 DB	 2
  00116	02		 DB	 2
  00117	02		 DB	 2
  00118	02		 DB	 2
  00119	02		 DB	 2
  0011a	02		 DB	 2
  0011b	00		 DB	 0
  0011c	02		 DB	 2
  0011d	01		 DB	 1
?CommandLineToArgv@@YAPAPADPADPAH@Z ENDP		; CommandLineToArgv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?_getf@@YAPBDPBDZZ
_TEXT	SEGMENT
_c_szFormat$ = 8					; size = 4
?_getf@@YAPBDPBDZZ PROC					; _getf, COMDAT

; 587  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 0c	 lea	 eax, DWORD PTR _c_szFormat$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 08	 push	 DWORD PTR _c_szFormat$[ebp]
  0000c	68 00 01 00 00	 push	 256			; 00000100H
  00011	68 00 00 00 00	 push	 OFFSET ?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA
  00016	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	ff 70 04	 push	 DWORD PTR [eax+4]
  00020	83 c9 01	 or	 ecx, 1
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00029	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 595  : 	return szBuf;

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET ?szBuf@?1??_getf@@YAPBDPBDZZ@4PADA

; 596  : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?_getf@@YAPBDPBDZZ ENDP					; _getf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
_TEXT	SEGMENT
tv1663 = -868						; size = 4
_pkVec_strToken$GSCopy$1$ = -864			; size = 4
_beginPos$1$ = -860					; size = 4
__Hay_end$1$ = -860					; size = 4
_c_szLine$GSCopy$1$ = -860				; size = 4
__Result$2$ = -856					; size = 4
__Hay_end$1$ = -856					; size = 4
_c_szDelimeter$GSCopy$1$ = -852				; size = 4
__Mylast$1$ = -848					; size = 4
__Result$2$ = -844					; size = 4
__Hay_end$1$ = -844					; size = 4
__Result$2$ = -844					; size = 4
_strLine$1$ = -840					; size = 4
$T2 = -833						; size = 1
__Matches$3 = -832					; size = 256
__Matches$4 = -576					; size = 256
__Matches$5 = -320					; size = 256
$T6 = -64						; size = 24
_strLine$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szLine$ = 8						; size = 4
_c_szDelimeter$ = 12					; size = 4
_pkVec_strToken$ = 16					; size = 4
?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z PROC ; SplitLine, COMDAT

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 58 03 00
	00		 sub	 esp, 856		; 00000358H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 55 10	 mov	 edx, DWORD PTR _pkVec_strToken$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _c_szLine$[ebp]
  00033	8b 7d 0c	 mov	 edi, DWORD PTR _c_szDelimeter$[ebp]
  00036	89 95 a0 fc ff
	ff		 mov	 DWORD PTR _pkVec_strToken$GSCopy$1$[ebp], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003c	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0003f	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00042	2b 0a		 sub	 ecx, DWORD PTR [edx]
  00044	89 85 b0 fc ff
	ff		 mov	 DWORD PTR __Mylast$1$[ebp], eax
  0004a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004f	f7 e9		 imul	 ecx

; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00051	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR __Mylast$1$[ebp]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00057	c1 fa 02	 sar	 edx, 2
  0005a	8b ca		 mov	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 538  : {

  0005c	89 b5 a4 fc ff
	ff		 mov	 DWORD PTR _c_szLine$GSCopy$1$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00062	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00065	03 ca		 add	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 538  : {

  00067	89 bd ac fc ff
	ff		 mov	 DWORD PTR _c_szDelimeter$GSCopy$1$[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0006d	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00070	73 5e		 jae	 SHORT $LN460@SplitLine

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	8b 85 a0 fc ff
	ff		 mov	 eax, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0007a	68 f0 00 00 00	 push	 240			; 000000f0H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0007f	2b 08		 sub	 ecx, DWORD PTR [eax]
  00081	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00086	f7 e9		 imul	 ecx
  00088	c1 fa 02	 sar	 edx, 2
  0008b	8b fa		 mov	 edi, edx
  0008d	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00090	03 fa		 add	 edi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00092	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1647 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00097	8b 8d a0 fc ff
	ff		 mov	 ecx, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 256  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f0		 mov	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1647 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  0009f	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR __Mylast$1$[ebp]
  000a5	51		 push	 ecx
  000a6	56		 push	 esi
  000a7	ff 30		 push	 DWORD PTR [eax]
  000a9	ff 31		 push	 DWORD PTR [ecx]
  000ab	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1648 :         } else {
; 1649 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1650 :         }
; 1651 : 
; 1652 :         _Guard._New_begin = nullptr;
; 1653 :         _Change_array(_Newvec, _Size, _Newcapacity);

  000b0	8b 8d a0 fc ff
	ff		 mov	 ecx, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
  000b6	83 c4 14	 add	 esp, 20			; 00000014H
  000b9	6a 0a		 push	 10			; 0000000aH
  000bb	57		 push	 edi
  000bc	56		 push	 esi
  000bd	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
  000c2	8b bd ac fc ff
	ff		 mov	 edi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  000c8	8b b5 a4 fc ff
	ff		 mov	 esi, DWORD PTR _c_szLine$GSCopy$1$[ebp]
  000ce	eb 06		 jmp	 SHORT $LN49@SplitLine
$LN460@SplitLine:
  000d0	89 85 b0 fc ff
	ff		 mov	 DWORD PTR __Mylast$1$[ebp], eax
$LN49@SplitLine:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000d6	8b 95 a0 fc ff
	ff		 mov	 edx, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
  000dc	8b 8d b0 fc ff
	ff		 mov	 ecx, DWORD PTR __Mylast$1$[ebp]
  000e2	8b 02		 mov	 eax, DWORD PTR [edx]
  000e4	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000e6	3b c1		 cmp	 eax, ecx
  000e8	74 1b		 je	 SHORT $LN66@SplitLine

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  000ea	52		 push	 edx
  000eb	51		 push	 ecx
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  000f2	8b 85 a0 fc ff
	ff		 mov	 eax, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fb	8b 8d b0 fc ff
	ff		 mov	 ecx, DWORD PTR __Mylast$1$[ebp]
  00101	8b 00		 mov	 eax, DWORD PTR [eax]
  00103	89 01		 mov	 DWORD PTR [ecx], eax
$LN66@SplitLine:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00105	8b ce		 mov	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00107	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strLine$[ebp+16], 0
  0010e	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00111	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _strLine$[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00118	0f 11 45 d8	 movups	 XMMWORD PTR _strLine$[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0011c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0011f	90		 npad	 1
$LL466@SplitLine:
  00120	8a 01		 mov	 al, BYTE PTR [ecx]
  00122	41		 inc	 ecx
  00123	84 c0		 test	 al, al
  00125	75 f9		 jne	 SHORT $LL466@SplitLine
  00127	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00129	51		 push	 ecx
  0012a	56		 push	 esi
  0012b	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  0012e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 544  : 	DWORD basePos = 0;

  00133	8b 4d e8	 mov	 ecx, DWORD PTR _strLine$[ebp+16]
  00136	33 f6		 xor	 esi, esi
  00138	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0013f	89 8d b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], ecx
$LL4@SplitLine:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00145	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
$LL467@SplitLine:
  00148	8a 07		 mov	 al, BYTE PTR [edi]
  0014a	47		 inc	 edi
  0014b	84 c0		 test	 al, al
  0014d	75 f9		 jne	 SHORT $LL467@SplitLine
  0014f	2b fa		 sub	 edi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00151	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  00154	83 7d ec 0f	 cmp	 DWORD PTR _strLine$[ebp+20], 15 ; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00158	0f 47 45 d8	 cmova	 eax, DWORD PTR _strLine$[ebp]
  0015c	89 85 b4 fc ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 944  :     if (_Start_at >= _Hay_size) { // no room for match

  00162	3b f1		 cmp	 esi, ecx
  00164	73 6c		 jae	 SHORT $LN426@SplitLine

; 945  :         return static_cast<size_t>(-1);
; 946  :     }
; 947  : 
; 948  :     const auto _Hay_start = _Haystack + _Start_at;

  00166	03 f0		 add	 esi, eax

; 949  :     const auto _Hay_end   = _Haystack + _Hay_size;

  00168	03 c1		 add	 eax, ecx
  0016a	68 00 01 00 00	 push	 256			; 00000100H
  0016f	89 85 a4 fc ff
	ff		 mov	 DWORD PTR __Hay_end$1$[ebp], eax
  00175	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR __Matches$5[ebp]
  0017b	6a 00		 push	 0
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 _memset

; 950  : 
; 951  :     if constexpr (_Is_implementation_handled_char_traits<_Traits>) {
; 952  :         using _Elem = typename _Traits::char_type;
; 953  :         _String_bitmap<_Elem> _Matches;
; 954  :         if (_Matches._Mark(_Needle, _Needle + _Needle_size)) {

  00183	8b 85 ac fc ff
	ff		 mov	 eax, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  00189	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018c	8b c8		 mov	 ecx, eax
  0018e	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]

; 761  :         for (; _First != _Last; ++_First) {

  00191	3b c2		 cmp	 eax, edx
  00193	74 1b		 je	 SHORT $LN119@SplitLine
  00195	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL120@SplitLine:

; 762  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  001a0	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  001a3	41		 inc	 ecx
  001a4	c6 84 05 c0 fe
	ff ff 01	 mov	 BYTE PTR __Matches$5[ebp+eax], 1
  001ac	3b ca		 cmp	 ecx, edx
  001ae	75 f0		 jne	 SHORT $LL120@SplitLine
$LN119@SplitLine:

; 955  :             for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  001b0	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR __Hay_end$1$[ebp]
  001b6	3b f1		 cmp	 esi, ecx
  001b8	73 18		 jae	 SHORT $LN426@SplitLine
  001ba	66 0f 1f 44 00
	00		 npad	 6
$LL104@SplitLine:

; 770  :         return _Matches[static_cast<unsigned char>(_Ch)];

  001c0	0f b6 06	 movzx	 eax, BYTE PTR [esi]

; 956  :                 if (!_Matches._Match(*_Match_try)) {

  001c3	80 bc 05 c0 fe
	ff ff 00	 cmp	 BYTE PTR __Matches$5[ebp+eax], 0
  001cb	74 43		 je	 SHORT $LN420@SplitLine

; 955  :             for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  001cd	46		 inc	 esi
  001ce	3b f1		 cmp	 esi, ecx
  001d0	72 ee		 jb	 SHORT $LL104@SplitLine
$LN426@SplitLine:
  001d2	c6 85 bf fc ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
$LN13@SplitLine:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001d9	8b 55 ec	 mov	 edx, DWORD PTR _strLine$[ebp+20]
  001dc	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001df	0f 86 33 03 00
	00		 jbe	 $LN394@SplitLine
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e5	8b 4d d8	 mov	 ecx, DWORD PTR _strLine$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001e8	42		 inc	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001e9	8b c1		 mov	 eax, ecx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001eb	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  001f1	0f 82 17 03 00
	00		 jb	 $LN405@SplitLine

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001f7	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  001fa	83 c2 23	 add	 edx, 35			; 00000023H
  001fd	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ff	83 c0 fc	 add	 eax, -4			; fffffffcH
  00202	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00205	0f 87 2e 03 00
	00		 ja	 $LN402@SplitLine
  0020b	e9 fe 02 00 00	 jmp	 $LN405@SplitLine
$LN420@SplitLine:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 957  :                     return static_cast<size_t>(_Match_try - _Haystack); // found a match

  00210	2b b5 b4 fc ff
	ff		 sub	 esi, DWORD PTR __Result$2$[ebp]
  00216	89 b5 a4 fc ff
	ff		 mov	 DWORD PTR _beginPos$1$[ebp], esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 549  : 		if (beginPos < 0)

  0021c	78 b4		 js	 SHORT $LN426@SplitLine
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0021e	8b 55 ec	 mov	 edx, DWORD PTR _strLine$[ebp+20]

; 416  :         value_type* _Result = _Bx._Buf;

  00221	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]

; 417  :         if (_Large_mode_engaged()) {

  00224	8b 7d d8	 mov	 edi, DWORD PTR _strLine$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  00227	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0022a	0f 47 c7	 cmova	 eax, edi
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 554  : 		if (strLine[beginPos] == '"')

  0022d	80 3c 06 22	 cmp	 BYTE PTR [esi+eax], 34	; 00000022H
  00231	0f 85 c1 00 00
	00		 jne	 $LN6@SplitLine
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 812  :     if (_Needle_size == 0 || _Start_at >= _Hay_size) { // no match possible

  00237	8b 85 b8 fc ff
	ff		 mov	 eax, DWORD PTR _strLine$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  0023d	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 556  : 			++beginPos;

  00240	46		 inc	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00241	83 fa 0f	 cmp	 edx, 15			; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 556  : 			++beginPos;

  00244	89 b5 a4 fc ff
	ff		 mov	 DWORD PTR _beginPos$1$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0024a	0f 47 cf	 cmova	 ecx, edi
  0024d	89 8d a8 fc ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 812  :     if (_Needle_size == 0 || _Start_at >= _Hay_size) { // no match possible

  00253	3b f0		 cmp	 esi, eax
  00255	0f 83 77 ff ff
	ff		 jae	 $LN426@SplitLine

; 813  :         return static_cast<size_t>(-1);
; 814  :     }
; 815  : 
; 816  :     const auto _Hay_start = _Haystack + _Start_at;

  0025b	8d 3c 31	 lea	 edi, DWORD PTR [ecx+esi]

; 817  :     const auto _Hay_end   = _Haystack + _Hay_size;

  0025e	03 c8		 add	 ecx, eax

; 818  : 
; 819  :     if constexpr (_Is_implementation_handled_char_traits<_Traits>) {
; 820  :         if (!_STD _Is_constant_evaluated()) {
; 821  :             using _Elem = typename _Traits::char_type;
; 822  : 
; 823  : #if _USE_STD_VECTOR_ALGORITHMS
; 824  :             const bool _Try_vectorize = _Hay_size - _Start_at > _Threshold_find_first_of;

  00260	2b c6		 sub	 eax, esi
  00262	89 8d b4 fc ff
	ff		 mov	 DWORD PTR __Hay_end$1$[ebp], ecx

; 825  : 
; 826  :             // Additional condition for when the vectorization outperforms the table lookup
; 827  :             constexpr size_t _Find_first_of_bitmap_threshold = sizeof(_Elem) == 1 ? 48 : sizeof(_Elem) == 8 ? 8 : 16;
; 828  : 
; 829  :             const bool _Use_bitmap = !_Try_vectorize || _Needle_size > _Find_first_of_bitmap_threshold;

  00268	83 f8 10	 cmp	 eax, 16			; 00000010H
  0026b	77 4a		 ja	 SHORT $LN462@SplitLine
  0026d	68 00 01 00 00	 push	 256			; 00000100H
  00272	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR __Matches$4[ebp]
  00278	6a 00		 push	 0
  0027a	50		 push	 eax
  0027b	e8 00 00 00 00	 call	 _memset

; 838  :                     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  00280	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR __Hay_end$1$[ebp]
  00286	83 c4 0c	 add	 esp, 12			; 0000000cH

; 762  :             _Matches[static_cast<unsigned char>(*_First)] = true;

  00289	c6 85 e2 fd ff
	ff 01		 mov	 BYTE PTR __Matches$4[ebp+34], 1

; 838  :                     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  00290	3b f9		 cmp	 edi, ecx
  00292	0f 83 3a ff ff
	ff		 jae	 $LN426@SplitLine
  00298	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL170@SplitLine:

; 770  :         return _Matches[static_cast<unsigned char>(_Ch)];

  002a0	0f b6 07	 movzx	 eax, BYTE PTR [edi]

; 839  :                         if (_Matches._Match(*_Match_try)) {

  002a3	80 bc 05 c0 fd
	ff ff 00	 cmp	 BYTE PTR __Matches$4[ebp+eax], 0
  002ab	75 35		 jne	 SHORT $LN422@SplitLine

; 838  :                     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  002ad	47		 inc	 edi
  002ae	3b f9		 cmp	 edi, ecx
  002b0	72 ee		 jb	 SHORT $LL170@SplitLine
  002b2	e9 1b ff ff ff	 jmp	 $LN426@SplitLine
$LN462@SplitLine:

; 851  :                 const _Traits_ptr_t<_Traits> _Found =

  002b7	68 01 00 00 00	 push	 OFFSET ??_C@_01BJJEKLCA@?$CC@+1
  002bc	68 00 00 00 00	 push	 OFFSET ??_C@_01BJJEKLCA@?$CC@
  002c1	51		 push	 ecx
  002c2	57		 push	 edi
  002c3	e8 00 00 00 00	 call	 ??$_Find_first_of_vectorized@$$CBD$$CBD@std@@YAPBDQBD000@Z ; std::_Find_first_of_vectorized<char const ,char const >
  002c8	8b f8		 mov	 edi, eax
  002ca	83 c4 10	 add	 esp, 16			; 00000010H

; 852  :                     _STD _Find_first_of_vectorized(_Hay_start, _Hay_end, _Needle, _Needle + _Needle_size);
; 853  : 
; 854  :                 if (_Found != _Hay_end) {

  002cd	3b bd b4 fc ff
	ff		 cmp	 edi, DWORD PTR __Hay_end$1$[ebp]
  002d3	0f 84 f9 fe ff
	ff		 je	 $LN426@SplitLine

; 855  :                     return static_cast<size_t>(_Found - _Haystack); // found a match

  002d9	8b 45 e8	 mov	 eax, DWORD PTR _strLine$[ebp+16]
  002dc	89 85 b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], eax
$LN422@SplitLine:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 559  : 			if (endPos < 0)

  002e2	2b bd a8 fc ff
	ff		 sub	 edi, DWORD PTR __Result$2$[ebp]
  002e8	85 ff		 test	 edi, edi
  002ea	0f 88 e2 fe ff
	ff		 js	 $LN426@SplitLine

; 560  : 				return false;
; 561  : 
; 562  : 			basePos = endPos + 1;

  002f0	8d 77 01	 lea	 esi, DWORD PTR [edi+1]

; 563  : 		}

  002f3	e9 35 01 00 00	 jmp	 $LN7@SplitLine
$LN6@SplitLine:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  002f8	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  002fe	8b fa		 mov	 edi, edx
  00300	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL468@SplitLine:
  00303	8a 07		 mov	 al, BYTE PTR [edi]
  00305	47		 inc	 edi
  00306	84 c0		 test	 al, al
  00308	75 f9		 jne	 SHORT $LL468@SplitLine
  0030a	2b f9		 sub	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0030c	83 7d ec 0f	 cmp	 DWORD PTR _strLine$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00310	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]

; 426  :         if (_Large_mode_engaged()) {

  00313	0f 47 4d d8	 cmova	 ecx, DWORD PTR _strLine$[ebp]
  00317	89 8d b4 fc ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 812  :     if (_Needle_size == 0 || _Start_at >= _Hay_size) { // no match possible

  0031d	85 ff		 test	 edi, edi
  0031f	0f 84 03 01 00
	00		 je	 $LN239@SplitLine
  00325	8b 85 b8 fc ff
	ff		 mov	 eax, DWORD PTR _strLine$1$[ebp]
  0032b	3b f0		 cmp	 esi, eax
  0032d	0f 83 f5 00 00
	00		 jae	 $LN239@SplitLine

; 813  :         return static_cast<size_t>(-1);
; 814  :     }
; 815  : 
; 816  :     const auto _Hay_start = _Haystack + _Start_at;

  00333	03 f1		 add	 esi, ecx

; 817  :     const auto _Hay_end   = _Haystack + _Hay_size;

  00335	03 c8		 add	 ecx, eax

; 818  : 
; 819  :     if constexpr (_Is_implementation_handled_char_traits<_Traits>) {
; 820  :         if (!_STD _Is_constant_evaluated()) {
; 821  :             using _Elem = typename _Traits::char_type;
; 822  : 
; 823  : #if _USE_STD_VECTOR_ALGORITHMS
; 824  :             const bool _Try_vectorize = _Hay_size - _Start_at > _Threshold_find_first_of;

  00337	2b 85 a4 fc ff
	ff		 sub	 eax, DWORD PTR _beginPos$1$[ebp]
  0033d	89 8d a8 fc ff
	ff		 mov	 DWORD PTR __Hay_end$1$[ebp], ecx
  00343	89 85 9c fc ff
	ff		 mov	 DWORD PTR tv1663[ebp], eax

; 825  : 
; 826  :             // Additional condition for when the vectorization outperforms the table lookup
; 827  :             constexpr size_t _Find_first_of_bitmap_threshold = sizeof(_Elem) == 1 ? 48 : sizeof(_Elem) == 8 ? 8 : 16;
; 828  : 
; 829  :             const bool _Use_bitmap = !_Try_vectorize || _Needle_size > _Find_first_of_bitmap_threshold;

  00349	83 f8 10	 cmp	 eax, 16			; 00000010H
  0034c	76 09		 jbe	 SHORT $LN249@SplitLine
  0034e	83 ff 30	 cmp	 edi, 48			; 00000030H
  00351	0f 86 7d 00 00
	00		 jbe	 $LN461@SplitLine
$LN249@SplitLine:
  00357	68 00 01 00 00	 push	 256			; 00000100H
  0035c	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR __Matches$3[ebp]
  00362	6a 00		 push	 0
  00364	50		 push	 eax
  00365	e8 00 00 00 00	 call	 _memset

; 830  : #else // ^^^ _USE_STD_VECTOR_ALGORITHMS / !_USE_STD_VECTOR_ALGORITHMS vvv
; 831  :             const bool _Use_bitmap = true;
; 832  : #endif // ^^^ !_USE_STD_VECTOR_ALGORITHMS ^^^
; 833  : 
; 834  :             if (_Use_bitmap) {
; 835  :                 _String_bitmap<_Elem> _Matches;
; 836  : 
; 837  :                 if (_Matches._Mark(_Needle, _Needle + _Needle_size)) {

  0036a	8b 8d ac fc ff
	ff		 mov	 ecx, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  00370	83 c4 0c	 add	 esp, 12			; 0000000cH
  00373	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  00376	50		 push	 eax
  00377	51		 push	 ecx
  00378	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR __Matches$3[ebp]
  0037e	e8 00 00 00 00	 call	 ?_Mark@?$_String_bitmap@D$00@std@@QAE_NPBDQBD@Z ; std::_String_bitmap<char,1>::_Mark
  00383	8b 8d a8 fc ff
	ff		 mov	 ecx, DWORD PTR __Hay_end$1$[ebp]
  00389	84 c0		 test	 al, al
  0038b	74 32		 je	 SHORT $LN469@SplitLine

; 838  :                     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  0038d	3b f1		 cmp	 esi, ecx
  0038f	73 12		 jae	 SHORT $LN233@SplitLine
$LL234@SplitLine:

; 770  :         return _Matches[static_cast<unsigned char>(_Ch)];

  00391	0f b6 06	 movzx	 eax, BYTE PTR [esi]

; 839  :                         if (_Matches._Match(*_Match_try)) {

  00394	80 bc 05 c0 fc
	ff ff 00	 cmp	 BYTE PTR __Matches$3[ebp+eax], 0
  0039c	75 10		 jne	 SHORT $LN424@SplitLine

; 838  :                     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  0039e	46		 inc	 esi
  0039f	3b f1		 cmp	 esi, ecx
  003a1	72 ee		 jb	 SHORT $LL234@SplitLine
$LN233@SplitLine:

; 841  :                         }
; 842  :                     }
; 843  :                     return static_cast<size_t>(-1); // no match

  003a3	8b 45 e8	 mov	 eax, DWORD PTR _strLine$[ebp+16]
  003a6	89 85 b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], eax
  003ac	eb 7a		 jmp	 SHORT $LN239@SplitLine
$LN424@SplitLine:

; 840  :                             return static_cast<size_t>(_Match_try - _Haystack); // found a match

  003ae	8b 45 e8	 mov	 eax, DWORD PTR _strLine$[ebp+16]
  003b1	2b b5 b4 fc ff
	ff		 sub	 esi, DWORD PTR __Result$2$[ebp]
  003b7	89 85 b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], eax
  003bd	eb 6c		 jmp	 SHORT $LN231@SplitLine
$LN469@SplitLine:

; 830  : #else // ^^^ _USE_STD_VECTOR_ALGORITHMS / !_USE_STD_VECTOR_ALGORITHMS vvv
; 831  :             const bool _Use_bitmap = true;
; 832  : #endif // ^^^ !_USE_STD_VECTOR_ALGORITHMS ^^^
; 833  : 
; 834  :             if (_Use_bitmap) {
; 835  :                 _String_bitmap<_Elem> _Matches;
; 836  : 
; 837  :                 if (_Matches._Mark(_Needle, _Needle + _Needle_size)) {

  003bf	8b 45 e8	 mov	 eax, DWORD PTR _strLine$[ebp+16]
  003c2	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  003c8	89 85 b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], eax
  003ce	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR tv1663[ebp]
$LN461@SplitLine:

; 844  :                 }
; 845  : 
; 846  :                 // couldn't put one of the characters into the bitmap, fall back to vectorized or serial algorithms
; 847  :             }
; 848  : 
; 849  : #if _USE_STD_VECTOR_ALGORITHMS
; 850  :             if (_Try_vectorize) {

  003d4	83 f8 10	 cmp	 eax, 16			; 00000010H
  003d7	76 2a		 jbe	 SHORT $LN246@SplitLine

; 851  :                 const _Traits_ptr_t<_Traits> _Found =

  003d9	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  003dc	50		 push	 eax
  003dd	52		 push	 edx
  003de	51		 push	 ecx
  003df	56		 push	 esi
  003e0	e8 00 00 00 00	 call	 ??$_Find_first_of_vectorized@$$CBD$$CBD@std@@YAPBDQBD000@Z ; std::_Find_first_of_vectorized<char const ,char const >
  003e5	8b f0		 mov	 esi, eax
  003e7	83 c4 10	 add	 esp, 16			; 00000010H

; 852  :                     _STD _Find_first_of_vectorized(_Hay_start, _Hay_end, _Needle, _Needle + _Needle_size);
; 853  : 
; 854  :                 if (_Found != _Hay_end) {

  003ea	8b 45 e8	 mov	 eax, DWORD PTR _strLine$[ebp+16]
  003ed	89 85 b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], eax
  003f3	3b b5 a8 fc ff
	ff		 cmp	 esi, DWORD PTR __Hay_end$1$[ebp]
  003f9	74 2d		 je	 SHORT $LN239@SplitLine
$LN425@SplitLine:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 566  : 			endPos = strLine.find_first_of(c_szDelimeter, beginPos);

  003fb	2b b5 b4 fc ff
	ff		 sub	 esi, DWORD PTR __Result$2$[ebp]
  00401	eb 28		 jmp	 SHORT $LN231@SplitLine
$LN246@SplitLine:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 864  :     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  00403	3b f1		 cmp	 esi, ecx
  00405	73 21		 jae	 SHORT $LN239@SplitLine
$LL237@SplitLine:

; 451  :             return __builtin_char_memchr(_First, _Ch, _Count);

  00407	0f be 06	 movsx	 eax, BYTE PTR [esi]
  0040a	57		 push	 edi
  0040b	50		 push	 eax
  0040c	52		 push	 edx
  0040d	e8 00 00 00 00	 call	 _memchr
  00412	83 c4 0c	 add	 esp, 12			; 0000000cH

; 865  :         if (_Traits::find(_Needle, _Needle_size, *_Match_try)) {

  00415	85 c0		 test	 eax, eax
  00417	75 e2		 jne	 SHORT $LN425@SplitLine

; 864  :     for (auto _Match_try = _Hay_start; _Match_try < _Hay_end; ++_Match_try) {

  00419	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  0041f	46		 inc	 esi
  00420	3b b5 a8 fc ff
	ff		 cmp	 esi, DWORD PTR __Hay_end$1$[ebp]
  00426	72 df		 jb	 SHORT $LL237@SplitLine
$LN239@SplitLine:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 566  : 			endPos = strLine.find_first_of(c_szDelimeter, beginPos);

  00428	83 ce ff	 or	 esi, -1
$LN231@SplitLine:
  0042b	8b fe		 mov	 edi, esi
$LN7@SplitLine:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 450  :         if (_Mysize < _Off) {

  0042d	8b 8d a4 fc ff
	ff		 mov	 ecx, DWORD PTR _beginPos$1$[ebp]
  00433	0f 57 c0	 xorps	 xmm0, xmm0
  00436	8b 85 b8 fc ff
	ff		 mov	 eax, DWORD PTR _strLine$1$[ebp]

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0043c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00443	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0044a	0f 11 45 c0	 movups	 XMMWORD PTR $T6[ebp], xmm0

; 450  :         if (_Mysize < _Off) {

  0044e	3b c1		 cmp	 eax, ecx
  00450	0f 82 e8 00 00
	00		 jb	 $LN429@SplitLine

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  00456	2b c1		 sub	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 570  : 		pkVec_strToken->push_back(strLine.substr(beginPos, endPos - beginPos));

  00458	2b f9		 sub	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  0045a	3b c7		 cmp	 eax, edi
  0045c	0f 42 f8	 cmovb	 edi, eax

; 434  :         return _Myres > _Small_string_capacity;

  0045f	83 7d ec 0f	 cmp	 DWORD PTR _strLine$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00463	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]

; 426  :         if (_Large_mode_engaged()) {

  00466	0f 47 45 d8	 cmova	 eax, DWORD PTR _strLine$[ebp]

; 713  :         _Construct<_Construct_strategy::_From_ptr>(

  0046a	03 c1		 add	 eax, ecx
  0046c	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  0046f	57		 push	 edi
  00470	50		 push	 eax
  00471	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00476	8b 95 b0 fc ff
	ff		 mov	 edx, DWORD PTR __Mylast$1$[ebp]
  0047c	8b 8d a0 fc ff
	ff		 mov	 ecx, DWORD PTR _pkVec_strToken$GSCopy$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 570  : 		pkVec_strToken->push_back(strLine.substr(beginPos, endPos - beginPos));

  00482	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00486	8b 02		 mov	 eax, DWORD PTR [edx]
  00488	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0048b	74 1f		 je	 SHORT $LN301@SplitLine
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0048d	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T6[ebp]

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;
; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00491	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00496	c6 45 c0 00	 mov	 BYTE PTR $T6[ebp], 0
  0049a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0049d	f3 0f 7e 45 d0	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  004a2	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  004a7	83 02 18	 add	 DWORD PTR [edx], 24	; 00000018H

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  004aa	eb 0d		 jmp	 SHORT $LN300@SplitLine
$LN301@SplitLine:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  004ac	8d 55 c0	 lea	 edx, DWORD PTR $T6[ebp]
  004af	52		 push	 edx
  004b0	50		 push	 eax
  004b1	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  004b6	8b 4d d4	 mov	 ecx, DWORD PTR $T6[ebp+20]
$LN300@SplitLine:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 570  : 		pkVec_strToken->push_back(strLine.substr(beginPos, endPos - beginPos));

  004b9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004bd	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004c0	76 28		 jbe	 SHORT $LN357@SplitLine
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004c2	8b 55 c0	 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004c5	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004c6	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004c8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004ce	72 10		 jb	 SHORT $LN368@SplitLine

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004d0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004d3	83 c1 23	 add	 ecx, 35			; 00000023H
  004d6	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004d8	83 c0 fc	 add	 eax, -4			; fffffffcH
  004db	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004de	77 59		 ja	 SHORT $LN402@SplitLine
$LN368@SplitLine:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004e0	51		 push	 ecx
  004e1	52		 push	 edx
  004e2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004e7	83 c4 08	 add	 esp, 8
$LN357@SplitLine:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 571  : 	} while (basePos < strLine.length());

  004ea	8b 4d e8	 mov	 ecx, DWORD PTR _strLine$[ebp+16]
  004ed	89 8d b8 fc ff
	ff		 mov	 DWORD PTR _strLine$1$[ebp], ecx
  004f3	3b f1		 cmp	 esi, ecx
  004f5	73 0b		 jae	 SHORT $LN471@SplitLine
  004f7	8b bd ac fc ff
	ff		 mov	 edi, DWORD PTR _c_szDelimeter$GSCopy$1$[ebp]
  004fd	e9 43 fc ff ff	 jmp	 $LL4@SplitLine
$LN471@SplitLine:

; 573  : 	return true;

  00502	c6 85 bf fc ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  00509	e9 cb fc ff ff	 jmp	 $LN13@SplitLine
$LN405@SplitLine:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0050e	52		 push	 edx
  0050f	51		 push	 ecx
  00510	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00515	83 c4 08	 add	 esp, 8
$LN394@SplitLine:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 573  : 	return true;

  00518	8a 85 bf fc ff
	ff		 mov	 al, BYTE PTR $T2[ebp]

; 574  : }

  0051e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00521	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00528	59		 pop	 ecx
  00529	5f		 pop	 edi
  0052a	5e		 pop	 esi
  0052b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0052e	33 cd		 xor	 ecx, ebp
  00530	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00535	8b e5		 mov	 esp, ebp
  00537	5d		 pop	 ebp
  00538	c3		 ret	 0
$LN402@SplitLine:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00539	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN429@SplitLine:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 451  :             _Xran();

  0053e	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN473@SplitLine:
  00543	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 8a 9c fc ff
	ff		 mov	 ecx, DWORD PTR [edx-868]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SplitLine@@YA_NPBD0PAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@Z ENDP ; SplitLine
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?RemoveAllDirectory@@YAXPBD@Z
_TEXT	SEGMENT
_c_szDirectoryName$GSCopy$1$ = -348			; size = 4
_remover$3 = -344					; size = 328
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szDirectoryName$ = 8					; size = 4
?RemoveAllDirectory@@YAXPBD@Z PROC			; RemoveAllDirectory, COMDAT

; 515  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RemoveAllDirectory@@YAXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 5d 08	 mov	 ebx, DWORD PTR _c_szDirectoryName$[ebp]

; 464  : 		{

  00031	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]

; 515  : {

  00037	89 9d a4 fe ff
	ff		 mov	 DWORD PTR _c_szDirectoryName$GSCopy$1$[ebp], ebx

; 464  : 		{

  0003d	e8 00 00 00 00	 call	 ??0CDir@@QAE@XZ		; CDir::CDir
  00042	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$3[ebp], OFFSET ??_7CDirRemover@@6B@

; 516  : 	{
; 517  : 		CDirRemover remover;
; 518  : 		remover.Create("*.*", c_szDirectoryName);

  0004c	6a 00		 push	 0
  0004e	53		 push	 ebx
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_03EMIMMIHL@?$CK?4?$CK@
  00054	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	e8 00 00 00 00	 call	 ?Create@CDir@@QAE_NPBD0H@Z ; CDir::Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 252  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  00066	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+12
  0006c	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1297 :             _Myproxy = _Parent->_Myproxy;

  0006e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A
  00074	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__RemoveDirectoryA@4
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL10@RemoveAllD:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 899  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00080	a1 10 00 00 00	 mov	 eax, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+16
  00085	03 c1		 add	 eax, ecx

; 353  :         return this->_Myoff == _Right._Myoff;

  00087	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 499  : 			for (std::deque<std::string>::iterator itor = ms_strDirectoryDeque.begin(); itor != ms_strDirectoryDeque.end(); ++itor)

  00089	74 2a		 je	 SHORT $LN9@RemoveAllD
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1305 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  0008b	85 ff		 test	 edi, edi
  0008d	74 04		 je	 SHORT $LN72@RemoveAllD
  0008f	8b 07		 mov	 eax, DWORD PTR [edi]
  00091	eb 02		 jmp	 SHORT $LN73@RemoveAllD
$LN72@RemoveAllD:
  00093	33 c0		 xor	 eax, eax
$LN73@RemoveAllD:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  00095	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00098	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 560  :         return static_cast<_Map_difference_type>((_Off / _Block_size) & (_Mapsize - 1));

  0009b	49		 dec	 ecx
  0009c	23 ce		 and	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  0009e	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 434  :         return _Myres > _Small_string_capacity;

  000a1	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  000a5	76 02		 jbe	 SHORT $LN85@RemoveAllD

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
$LN85@RemoveAllD:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 502  : 				RemoveDirectory(c_rstrDirectory.c_str());

  000a9	50		 push	 eax
  000aa	ff d3		 call	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\deque

; 278  :         ++_Myoff;

  000ac	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A+12
  000b2	46		 inc	 esi
  000b3	eb cb		 jmp	 SHORT $LL10@RemoveAllD
$LN9@RemoveAllD:

; 1577 :         _Tidy();

  000b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_strDirectoryDeque@CDirRemover@@1V?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@A ; CDirRemover::ms_strDirectoryDeque
  000ba	e8 00 00 00 00	 call	 ?_Tidy@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 468  : 		}

  000bf	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]
  000c5	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _remover$3[ebp], OFFSET ??_7CDirRemover@@6B@
  000cf	e8 00 00 00 00	 call	 ??1CDir@@UAE@XZ		; CDir::~CDir

; 519  : 		CDirRemover::RemoveAllDirectory();
; 520  : 	}
; 521  : 	RemoveDirectory(c_szDirectoryName);

  000d4	ff b5 a4 fe ff
	ff		 push	 DWORD PTR _c_szDirectoryName$GSCopy$1$[ebp]
  000da	ff d3		 call	 ebx

; 522  : }

  000dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e6	59		 pop	 ecx
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RemoveAllDirectory@@YAXPBD@Z$0:
  00000	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _remover$3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CDirRemover@@UAE@XZ	; CDirRemover::~CDirRemover
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?RemoveAllDirectory@@YAXPBD@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RemoveAllDirectory@@YAXPBD@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RemoveAllDirectory@@YAXPBD@Z ENDP			; RemoveAllDirectory
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?MyCreateDirectory@@YAXPBD@Z
_TEXT	SEGMENT
_len$1$ = -4						; size = 4
_path$ = 8						; size = 4
tv184 = 8						; size = 4
?MyCreateDirectory@@YAXPBD@Z PROC			; MyCreateDirectory, COMDAT

; 427  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 428  : 	if (!path || !*path)

  00005	8b 75 08	 mov	 esi, DWORD PTR _path$[ebp]
  00008	85 f6		 test	 esi, esi
  0000a	0f 84 99 00 00
	00		 je	 $LN5@MyCreateDi
  00010	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00013	0f 84 90 00 00
	00		 je	 $LN5@MyCreateDi

; 429  : 		return;
; 430  : 
; 431  : 	char * dir;
; 432  : 	const char * p;
; 433  : 
; 434  : 	if (strlen(path) >= 3)

  00019	8b ce		 mov	 ecx, esi
  0001b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0001e	66 90		 npad	 2
$LL15@MyCreateDi:
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	41		 inc	 ecx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL15@MyCreateDi
  00027	2b ca		 sub	 ecx, edx
  00029	83 f9 03	 cmp	 ecx, 3
  0002c	72 09		 jb	 SHORT $LN7@MyCreateDi

; 435  : 	{
; 436  : 		if (*(path + 1) == ':')

  0002e	80 7e 01 3a	 cmp	 BYTE PTR [esi+1], 58	; 0000003aH
  00032	75 03		 jne	 SHORT $LN7@MyCreateDi

; 437  : 			path += 3;

  00034	83 c6 03	 add	 esi, 3
$LN7@MyCreateDi:

; 438  : 	}
; 439  : 
; 440  : 	p = path;
; 441  : 
; 442  : 	int len = strlen(path) + 1;

  00037	8b ce		 mov	 ecx, esi
  00039	53		 push	 ebx
  0003a	57		 push	 edi
  0003b	8b fe		 mov	 edi, esi
  0003d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL16@MyCreateDi:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL16@MyCreateDi
  00047	2b ca		 sub	 ecx, edx
  00049	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 443  : 	dir = new char[len];

  0004c	50		 push	 eax
  0004d	89 45 fc	 mov	 DWORD PTR _len$1$[ebp], eax
  00050	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00055	8b d8		 mov	 ebx, eax
  00057	83 c4 04	 add	 esp, 4

; 444  : 
; 445  : 	while (*p)

  0005a	8a 06		 mov	 al, BYTE PTR [esi]
  0005c	84 c0		 test	 al, al
  0005e	74 3e		 je	 SHORT $LN3@MyCreateDi
  00060	33 c9		 xor	 ecx, ecx
  00062	89 4d 08	 mov	 DWORD PTR tv184[ebp], ecx
$LL2@MyCreateDi:

; 446  : 	{
; 447  : 		if (*p == '/' || *p == '\\')

  00065	3c 2f		 cmp	 al, 47			; 0000002fH
  00067	74 05		 je	 SHORT $LN9@MyCreateDi
  00069	80 3f 5c	 cmp	 BYTE PTR [edi], 92	; 0000005cH
  0006c	75 24		 jne	 SHORT $LN8@MyCreateDi
$LN9@MyCreateDi:

; 448  : 		{
; 449  : 			memset(dir, 0, len);

  0006e	ff 75 fc	 push	 DWORD PTR _len$1$[ebp]
  00071	6a 00		 push	 0
  00073	53		 push	 ebx
  00074	e8 00 00 00 00	 call	 _memset

; 450  : 			strncpy(dir, path, p - path);

  00079	ff 75 08	 push	 DWORD PTR tv184[ebp]
  0007c	56		 push	 esi
  0007d	53		 push	 ebx
  0007e	e8 00 00 00 00	 call	 _strncpy
  00083	83 c4 18	 add	 esp, 24			; 00000018H

; 451  : 			CreateDirectory(dir, NULL);

  00086	6a 00		 push	 0
  00088	53		 push	 ebx
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR tv184[ebp]
$LN8@MyCreateDi:

; 452  : 		}
; 453  : 
; 454  : 		++p;

  00092	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00095	47		 inc	 edi
  00096	41		 inc	 ecx
  00097	89 4d 08	 mov	 DWORD PTR tv184[ebp], ecx
  0009a	84 c0		 test	 al, al
  0009c	75 c7		 jne	 SHORT $LL2@MyCreateDi
$LN3@MyCreateDi:

; 455  : 	}
; 456  : 
; 457  : 	delete [] dir;

  0009e	53		 push	 ebx
  0009f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000a4	83 c4 04	 add	 esp, 4
  000a7	5f		 pop	 edi
  000a8	5b		 pop	 ebx
$LN5@MyCreateDi:
  000a9	5e		 pop	 esi

; 458  : }

  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
?MyCreateDirectory@@YAXPBD@Z ENDP			; MyCreateDirectory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?fMINMAX@@YAMMMM@Z
_TEXT	SEGMENT
_min$ = 8						; size = 4
tv128 = 8						; size = 4
_value$ = 12						; size = 4
_max$ = 16						; size = 4
?fMINMAX@@YAMMMM@Z PROC					; fMINMAX, COMDAT

; 409  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 410  :     register float tv;
; 411  : 
; 412  :     tv = (min > value ? min : value);

  00003	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _min$[ebp]
  00008	f3 0f 5f 4d 0c	 maxss	 xmm1, DWORD PTR _value$[ebp]

; 413  :     return (max < tv) ? max : tv;

  0000d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _max$[ebp]
  00012	f3 0f 5d c1	 minss	 xmm0, xmm1
  00016	f3 0f 11 45 08	 movss	 DWORD PTR tv128[ebp], xmm0
  0001b	d9 45 08	 fld	 DWORD PTR tv128[ebp]

; 414  : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?fMINMAX@@YAMMMM@Z ENDP					; fMINMAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?fMAX@@YAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
tv65 = 8						; size = 4
_b$ = 12						; size = 4
?fMAX@@YAMMM@Z PROC					; fMAX, COMDAT

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 405  :     return a > b ? a : b;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	f3 0f 5f 45 0c	 maxss	 xmm0, DWORD PTR _b$[ebp]
  0000d	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  00012	d9 45 08	 fld	 DWORD PTR tv65[ebp]

; 406  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?fMAX@@YAMMM@Z ENDP					; fMAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?fMIN@@YAMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
tv65 = 8						; size = 4
_b$ = 12						; size = 4
?fMIN@@YAMMM@Z PROC					; fMIN, COMDAT

; 399  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 400  :     return a < b ? a : b;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	f3 0f 5d 45 0c	 minss	 xmm0, DWORD PTR _b$[ebp]
  0000d	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  00012	d9 45 08	 fld	 DWORD PTR tv65[ebp]

; 401  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?fMIN@@YAMMM@Z ENDP					; fMIN
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?MINMAX@@YAHHHH@Z
_TEXT	SEGMENT
_min$ = 8						; size = 4
_value$ = 12						; size = 4
_max$ = 16						; size = 4
?MINMAX@@YAHHHH@Z PROC					; MINMAX, COMDAT

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 390  : 	if (max < min)

  00003	8b 55 10	 mov	 edx, DWORD PTR _max$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _min$[ebp]
  00009	3b d1		 cmp	 edx, ecx
  0000b	7d 0e		 jge	 SHORT $LN2@MINMAX

; 391  : 		return MAX(min, value);

  0000d	ff 75 0c	 push	 DWORD PTR _value$[ebp]
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ?MAX@@YAHHH@Z		; MAX
  00016	83 c4 08	 add	 esp, 8

; 396  : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN2@MINMAX:

; 392  : 
; 393  :     register int tv;
; 394  :     tv = (min > value ? min : value);

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _value$[ebp]
  0001e	3b c8		 cmp	 ecx, eax
  00020	0f 4f c1	 cmovg	 eax, ecx

; 395  :     return (max < tv) ? max : tv;

  00023	3b d0		 cmp	 edx, eax
  00025	0f 4c c2	 cmovl	 eax, edx

; 396  : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?MINMAX@@YAHHHH@Z ENDP					; MINMAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?MAX@@YAHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?MAX@@YAHHH@Z PROC					; MAX, COMDAT

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 385  :     return a > b ? a : b;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	39 45 08	 cmp	 DWORD PTR _a$[ebp], eax
  00009	0f 4f 45 08	 cmovg	 eax, DWORD PTR _a$[ebp]

; 386  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?MAX@@YAHHH@Z ENDP					; MAX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?MIN@@YAHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?MIN@@YAHHH@Z PROC					; MIN, COMDAT

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 380  :     return a < b ? a : b;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	39 45 08	 cmp	 DWORD PTR _a$[ebp], eax
  00009	0f 4c 45 08	 cmovl	 eax, DWORD PTR _a$[ebp]

; 381  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?MIN@@YAHHH@Z ENDP					; MIN
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?IsGlobalFileName@@YA_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?IsGlobalFileName@@YA_NPBD@Z PROC			; IsGlobalFileName, COMDAT

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 423  : 	return strchr(c_szFileName, ':') != NULL;

  00003	6a 3a		 push	 58			; 0000003aH
  00005	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00008	e8 00 00 00 00	 call	 _strchr
  0000d	83 c4 08	 add	 esp, 8
  00010	85 c0		 test	 eax, eax
  00012	0f 95 c0	 setne	 al

; 424  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?IsGlobalFileName@@YA_NPBD@Z ENDP			; IsGlobalFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?IsFile@@YA_NPBD@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?IsFile@@YA_NPBD@Z PROC					; IsFile, COMDAT

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 418  : 	return _access(filename, 0) == 0 ? true : false;

  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  00008	e8 00 00 00 00	 call	 __access
  0000d	83 c4 08	 add	 esp, 8
  00010	85 c0		 test	 eax, eax
  00012	0f 94 c0	 sete	 al

; 419  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?IsFile@@YA_NPBD@Z ENDP					; IsFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?PrintAsciiData@@YAXPBXH@Z
_TEXT	SEGMENT
_void_data$ = 8						; size = 4
_bytes$ = 12						; size = 4
?PrintAsciiData@@YAXPBXH@Z PROC				; PrintAsciiData, COMDAT

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 332  :     int                 i, j, k;
; 333  :     const unsigned char* p;
; 334  : 	const unsigned char* data;
; 335  : 
; 336  : 	data = (const unsigned char*) void_data;
; 337  : 
; 338  :     fprintf(stdout, "------------------------------------------------------------------\n");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
  00008	6a 01		 push	 1
  0000a	e8 00 00 00 00	 call	 ___acrt_iob_func
  0000f	83 c4 04	 add	 esp, 4
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _fprintf
  00018	8b 45 08	 mov	 eax, DWORD PTR _void_data$[ebp]
  0001b	83 c4 08	 add	 esp, 8
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _bytes$[ebp]

; 339  :     j = bytes;

  00021	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@PrintAscii:

; 340  :     while (1)
; 341  :     {
; 342  :         k = j >= 16 ? 16 : j;

  00030	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00033	8b d9		 mov	 ebx, ecx
  00035	0f 4d da	 cmovge	 ebx, edx
  00038	33 f6		 xor	 esi, esi
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL6@PrintAscii:

; 346  :         {
; 347  :             if (i >= k)

  00040	3b f3		 cmp	 esi, ebx
  00042	7c 1a		 jl	 SHORT $LN10@PrintAscii

; 348  :                 fprintf(stdout, "   ");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_03NDEAONJP@?5?5?5@
  00049	6a 01		 push	 1
  0004b	e8 00 00 00 00	 call	 ___acrt_iob_func
  00050	83 c4 04	 add	 esp, 4
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 _fprintf
  00059	83 c4 08	 add	 esp, 8
  0005c	eb 1a		 jmp	 SHORT $LN11@PrintAscii
$LN10@PrintAscii:

; 349  :             else
; 350  :                 fprintf(stdout, "%02x ", *p);

  0005e	0f b6 3c 06	 movzx	 edi, BYTE PTR [esi+eax]
  00062	6a 01		 push	 1
  00064	e8 00 00 00 00	 call	 ___acrt_iob_func
  00069	57		 push	 edi
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_05CNDJFPDP@?$CF02x?5@
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _fprintf
  00075	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@PrintAscii:

; 343  : 
; 344  :         p = data;
; 345  :         for (i = 0; i < 16; ++i)

  00078	8b 45 08	 mov	 eax, DWORD PTR _void_data$[ebp]
  0007b	46		 inc	 esi
  0007c	83 fe 10	 cmp	 esi, 16			; 00000010H
  0007f	7c bf		 jl	 SHORT $LL6@PrintAscii

; 351  :             p++;
; 352  :         }
; 353  : 
; 354  :         fprintf(stdout, "| ");

  00081	68 00 00 00 00	 push	 OFFSET ??_C@_02MINBJDHL@?$HM?5@
  00086	6a 01		 push	 1
  00088	e8 00 00 00 00	 call	 ___acrt_iob_func
  0008d	83 c4 04	 add	 esp, 4
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _fprintf

; 355  : 
; 356  :         p = data;

  00096	8b 75 08	 mov	 esi, DWORD PTR _void_data$[ebp]
  00099	83 c4 08	 add	 esp, 8
  0009c	33 ff		 xor	 edi, edi

; 357  :         for (i = 0; i < k; ++i)

  0009e	85 db		 test	 ebx, ebx
  000a0	7e 41		 jle	 SHORT $LN8@PrintAscii
$LL12@PrintAscii:

; 358  :         {
; 359  :             if (i >= k)
; 360  :                 fprintf(stdout, " ");
; 361  :             else
; 362  :                 fprintf(stdout, "%c", ishprint(*p) ? *p : '.');

  000a2	8a 0e		 mov	 cl, BYTE PTR [esi]
  000a4	8a c1		 mov	 al, cl
  000a6	24 e0		 and	 al, 224			; 000000e0H
  000a8	3c 90		 cmp	 al, 144			; 00000090H
  000aa	77 15		 ja	 SHORT $LN33@PrintAscii
  000ac	0f b6 c1	 movzx	 eax, cl
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _isprint
  000b5	83 c4 04	 add	 esp, 4
  000b8	85 c0		 test	 eax, eax
  000ba	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  000bf	74 03		 je	 SHORT $LN17@PrintAscii
$LN33@PrintAscii:
  000c1	0f b6 06	 movzx	 eax, BYTE PTR [esi]
$LN17@PrintAscii:
  000c4	50		 push	 eax
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  000ca	6a 01		 push	 1
  000cc	e8 00 00 00 00	 call	 ___acrt_iob_func
  000d1	83 c4 04	 add	 esp, 4
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 _fprintf
  000da	47		 inc	 edi
  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 363  :             p++;

  000de	46		 inc	 esi
  000df	3b fb		 cmp	 edi, ebx
  000e1	7c bf		 jl	 SHORT $LL12@PrintAscii
$LN8@PrintAscii:

; 364  :         }
; 365  : 
; 366  :         fprintf(stdout, "\n");

  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  000e8	6a 01		 push	 1
  000ea	e8 00 00 00 00	 call	 ___acrt_iob_func
  000ef	83 c4 04	 add	 esp, 4
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _fprintf

; 367  : 
; 368  :         j       -= 16;

  000f8	8b 4d 0c	 mov	 ecx, DWORD PTR _bytes$[ebp]
  000fb	83 c4 08	 add	 esp, 8

; 369  :         data    += 16;

  000fe	8b 45 08	 mov	 eax, DWORD PTR _void_data$[ebp]
  00101	83 e9 10	 sub	 ecx, 16			; 00000010H
  00104	83 c0 10	 add	 eax, 16			; 00000010H
  00107	89 4d 0c	 mov	 DWORD PTR _bytes$[ebp], ecx
  0010a	89 45 08	 mov	 DWORD PTR _void_data$[ebp], eax

; 370  : 
; 371  :         if (j <= 0)

  0010d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00112	85 c9		 test	 ecx, ecx
  00114	0f 8f 16 ff ff
	ff		 jg	 $LL2@PrintAscii
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx

; 372  :             break;
; 373  :     }
; 374  : 
; 375  :     fprintf(stdout, "------------------------------------------------------------------\n");

  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@CAMDODON@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
  00122	6a 01		 push	 1
  00124	e8 00 00 00 00	 call	 ___acrt_iob_func
  00129	83 c4 04	 add	 esp, 4
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 _fprintf
  00132	83 c4 08	 add	 esp, 8

; 376  : }

  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
?PrintAsciiData@@YAXPBXH@Z ENDP				; PrintAsciiData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_szSrc$ = 8						; size = 4
_rString$ = 12						; size = 4
tv75 = 12						; size = 4
tv245 = 12						; size = 4
?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; StringPath, COMDAT

; 315  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7d 0c	 mov	 edi, DWORD PTR _rString$[ebp]

; 316  : 	rString = "";

  00009	8b cf		 mov	 ecx, edi
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00010	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 317  : 	rString.resize(strlen(c_szSrc));

  00015	8b 55 08	 mov	 edx, DWORD PTR _c_szSrc$[ebp]
  00018	8b ca		 mov	 ecx, edx
  0001a	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0001d	0f 1f 00	 npad	 3
$LL52@StringPath:
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	41		 inc	 ecx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL52@StringPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2360 :         const size_type _Old_size = size();

  00027	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 317  : 	rString.resize(strlen(c_szSrc));

  0002a	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2361 :         if (_New_size <= _Old_size) {

  0002c	3b c8		 cmp	 ecx, eax
  0002e	77 13		 ja	 SHORT $LN9@StringPath

; 3040 :         _Mypair._Myval2._Mysize = _New_size;

  00030	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 416  :         value_type* _Result = _Bx._Buf;

  00033	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  00035	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00039	76 02		 jbe	 SHORT $LN49@StringPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 07		 mov	 eax, DWORD PTR [edi]
$LN49@StringPath:

; 3041 :         _Traits::assign(_Mypair._Myval2._Myptr()[_New_size], _Elem());

  0003d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 2363 :         } else {

  00041	eb 0f		 jmp	 SHORT $LN10@StringPath
$LN9@StringPath:

; 2364 :             append(_New_size - _Old_size, _Ch);

  00043	2b c8		 sub	 ecx, eax
  00045	6a 00		 push	 0
  00047	51		 push	 ecx
  00048	8b cf		 mov	 ecx, edi
  0004a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0004f	8b 55 08	 mov	 edx, DWORD PTR _c_szSrc$[ebp]
$LN10@StringPath:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 319  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  00052	8b ca		 mov	 ecx, edx
  00054	33 f6		 xor	 esi, esi
  00056	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00059	89 45 0c	 mov	 DWORD PTR tv245[ebp], eax
  0005c	0f 1f 40 00	 npad	 4
$LL53@StringPath:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL53@StringPath
  00067	2b 4d 0c	 sub	 ecx, DWORD PTR tv245[ebp]
  0006a	74 4a		 je	 SHORT $LN3@StringPath
  0006c	0f 1f 40 00	 npad	 4
$LL4@StringPath:

; 320  : 	{
; 321  : 		if (c_szSrc[i] == '\\')

  00070	8a 04 32	 mov	 al, BYTE PTR [edx+esi]
  00073	3c 5c		 cmp	 al, 92			; 0000005cH
  00075	75 10		 jne	 SHORT $LN5@StringPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00077	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  0007b	8b c7		 mov	 eax, edi

; 417  :         if (_Large_mode_engaged()) {

  0007d	76 02		 jbe	 SHORT $LN51@StringPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0007f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN51@StringPath:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 322  : 			rString[i] = '/';

  00081	c6 04 30 2f	 mov	 BYTE PTR [eax+esi], 47	; 0000002fH
  00085	eb 19		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:

; 324  : 			rString[i] = korean_tolower(c_szSrc[i]);

  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  0008d	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  00090	8b cf		 mov	 ecx, edi

; 434  :         return _Myres > _Small_string_capacity;

  00092	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00096	76 02		 jbe	 SHORT $LN50@StringPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00098	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN50@StringPath:
  0009a	8b 55 08	 mov	 edx, DWORD PTR _c_szSrc$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 324  : 			rString[i] = korean_tolower(c_szSrc[i]);

  0009d	88 04 31	 mov	 BYTE PTR [ecx+esi], al
$LN2@StringPath:

; 319  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  000a0	8b c2		 mov	 eax, edx
  000a2	46		 inc	 esi
  000a3	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL54@StringPath:
  000a6	8a 08		 mov	 cl, BYTE PTR [eax]
  000a8	40		 inc	 eax
  000a9	84 c9		 test	 cl, cl
  000ab	75 f9		 jne	 SHORT $LL54@StringPath
  000ad	2b c2		 sub	 eax, edx
  000af	8b 55 08	 mov	 edx, DWORD PTR _c_szSrc$[ebp]
  000b2	3b f0		 cmp	 esi, eax
  000b4	72 ba		 jb	 SHORT $LL4@StringPath
$LN3@StringPath:
  000b6	5f		 pop	 edi

; 325  : 	}
; 326  : }

  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXPBDPAD@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_c_szSrc$ = 8						; size = 4
_szDest$ = 12						; size = 4
?StringPath@@YAXPBDPAD@Z PROC				; StringPath, COMDAT

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 305  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _c_szSrc$[ebp]
  00008	8b cb		 mov	 ecx, ebx
  0000a	57		 push	 edi
  0000b	33 ff		 xor	 edi, edi
  0000d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL12@StringPath:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL12@StringPath
  00017	2b ca		 sub	 ecx, edx
  00019	74 33		 je	 SHORT $LN3@StringPath
  0001b	56		 push	 esi
  0001c	8b 75 0c	 mov	 esi, DWORD PTR _szDest$[ebp]
  0001f	2b de		 sub	 ebx, esi
$LL4@StringPath:

; 306  : 	{
; 307  : 		if (c_szSrc[i] == '\\')

  00021	8a 04 33	 mov	 al, BYTE PTR [ebx+esi]
  00024	3c 5c		 cmp	 al, 92			; 0000005cH
  00026	75 04		 jne	 SHORT $LN5@StringPath

; 308  : 			szDest[i] = '/';

  00028	b0 2f		 mov	 al, 47			; 0000002fH
  0002a	eb 09		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:

; 309  : 		else
; 310  : 			szDest[i] = korean_tolower(c_szSrc[i]);

  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00032	83 c4 04	 add	 esp, 4
$LN2@StringPath:

; 305  : 	for (DWORD i = 0; i < strlen(c_szSrc); ++i)

  00035	88 06		 mov	 BYTE PTR [esi], al
  00037	47		 inc	 edi
  00038	8b 45 08	 mov	 eax, DWORD PTR _c_szSrc$[ebp]
  0003b	46		 inc	 esi
  0003c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0003f	90		 npad	 1
$LL13@StringPath:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL13@StringPath
  00047	2b c2		 sub	 eax, edx
  00049	3b f8		 cmp	 edi, eax
  0004b	72 d4		 jb	 SHORT $LL4@StringPath
  0004d	5e		 pop	 esi
$LN3@StringPath:
  0004e	5f		 pop	 edi

; 311  : 	}
; 312  : }

  0004f	5b		 pop	 ebx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?StringPath@@YAXPBDPAD@Z ENDP				; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXPAD@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_pString$ = 8						; size = 4
?StringPath@@YAXPAD@Z PROC				; StringPath, COMDAT

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7d 08	 mov	 edi, DWORD PTR _pString$[ebp]

; 294  : 	for (DWORD i = 0; i < strlen(pString); ++i)

  00009	33 f6		 xor	 esi, esi
  0000b	8b cf		 mov	 ecx, edi
  0000d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL12@StringPath:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL12@StringPath
  00017	2b ca		 sub	 ecx, edx
  00019	74 32		 je	 SHORT $LN3@StringPath
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@StringPath:

; 295  : 	{
; 296  : 		if (pString[i] == '\\')

  00020	8a 04 37	 mov	 al, BYTE PTR [edi+esi]
  00023	3c 5c		 cmp	 al, 92			; 0000005cH
  00025	75 04		 jne	 SHORT $LN5@StringPath

; 297  : 			pString[i] = '/';

  00027	b0 2f		 mov	 al, 47			; 0000002fH
  00029	eb 09		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:

; 298  : 		else
; 299  : 			pString[i] = korean_tolower(pString[i]);

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00031	83 c4 04	 add	 esp, 4
$LN2@StringPath:

; 294  : 	for (DWORD i = 0; i < strlen(pString); ++i)

  00034	88 04 37	 mov	 BYTE PTR [edi+esi], al
  00037	8b c7		 mov	 eax, edi
  00039	46		 inc	 esi
  0003a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0003d	0f 1f 00	 npad	 3
$LL13@StringPath:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $LL13@StringPath
  00047	2b c2		 sub	 eax, edx
  00049	3b f0		 cmp	 esi, eax
  0004b	72 d3		 jb	 SHORT $LL4@StringPath
$LN3@StringPath:
  0004d	5f		 pop	 edi

; 300  : 	}
; 301  : }

  0004e	5e		 pop	 esi
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?StringPath@@YAXPAD@Z ENDP				; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_rString$ = 8						; size = 4
?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; StringPath, COMDAT

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 283  : 	for (DWORD i = 0; i < rString.length(); ++i)

  00004	8b 75 08	 mov	 esi, DWORD PTR _rString$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	39 7e 10	 cmp	 DWORD PTR [esi+16], edi
  0000d	76 49		 jbe	 SHORT $LN3@StringPath
  0000f	90		 npad	 1
$LL4@StringPath:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00010	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 416  :         value_type* _Result = _Bx._Buf;

  00013	8b ce		 mov	 ecx, esi

; 434  :         return _Myres > _Small_string_capacity;

  00015	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00018	76 02		 jbe	 SHORT $LN59@StringPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN59@StringPath:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 285  : 		if (rString[i] == '\\')

  0001c	80 3c 39 5c	 cmp	 BYTE PTR [ecx+edi], 92	; 0000005cH
  00020	8b ce		 mov	 ecx, esi
  00022	75 0d		 jne	 SHORT $LN5@StringPath
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00024	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00027	76 02		 jbe	 SHORT $LN56@StringPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00029	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN56@StringPath:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 286  : 			rString[i] = '/';

  0002b	c6 04 39 2f	 mov	 BYTE PTR [ecx+edi], 47	; 0000002fH
  0002f	eb 21		 jmp	 SHORT $LN2@StringPath
$LN5@StringPath:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00031	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00034	76 02		 jbe	 SHORT $LN57@StringPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00036	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN57@StringPath:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 288  : 			rString[i] = korean_tolower(rString[i]);

  00038	0f b6 04 39	 movzx	 eax, BYTE PTR [ecx+edi]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  00042	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  00045	8b ce		 mov	 ecx, esi

; 434  :         return _Myres > _Small_string_capacity;

  00047	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0004b	76 02		 jbe	 SHORT $LN58@StringPath

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0004d	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN58@StringPath:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 288  : 			rString[i] = korean_tolower(rString[i]);

  0004f	88 04 39	 mov	 BYTE PTR [ecx+edi], al
$LN2@StringPath:

; 283  : 	for (DWORD i = 0; i < rString.length(); ++i)

  00052	47		 inc	 edi
  00053	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  00056	72 b8		 jb	 SHORT $LL4@StringPath
$LN3@StringPath:
  00058	5f		 pop	 edi

; 289  : 	}
; 290  : }

  00059	5e		 pop	 esi
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?StringPath@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; StringPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?StringLowers@@YAXPAD@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_String$ = 8						; size = 4
?StringLowers@@YAXPAD@Z PROC				; StringLowers, COMDAT

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7d 08	 mov	 edi, DWORD PTR _String$[ebp]

; 275  : 	for (DWORD i = 0; i < strlen(String); ++i)

  00009	33 f6		 xor	 esi, esi
  0000b	8b cf		 mov	 ecx, edi
  0000d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL10@StringLowe:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL10@StringLowe
  00017	2b ca		 sub	 ecx, edx
  00019	74 28		 je	 SHORT $LN3@StringLowe
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@StringLowe:

; 276  : 	{
; 277  : 		String[i] = korean_tolower(String[i]);

  00020	0f b6 04 37	 movzx	 eax, BYTE PTR [edi+esi]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?korean_tolower@@YADD@Z	; korean_tolower
  0002a	88 04 37	 mov	 BYTE PTR [edi+esi], al
  0002d	83 c4 04	 add	 esp, 4
  00030	8b c7		 mov	 eax, edi
  00032	46		 inc	 esi
  00033	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL11@StringLowe:

; 275  : 	for (DWORD i = 0; i < strlen(String); ++i)

  00036	8a 08		 mov	 cl, BYTE PTR [eax]
  00038	40		 inc	 eax
  00039	84 c9		 test	 cl, cl
  0003b	75 f9		 jne	 SHORT $LL11@StringLowe
  0003d	2b c2		 sub	 eax, edx
  0003f	3b f0		 cmp	 esi, eax
  00041	72 dd		 jb	 SHORT $LL4@StringLowe
$LN3@StringLowe:
  00043	5f		 pop	 edi

; 278  : 	}
; 279  : }

  00044	5e		 pop	 esi
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?StringLowers@@YAXPAD@Z ENDP				; StringLowers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_buf$ = -136						; size = 129
__$ArrayPad$ = -4					; size = 4
_strFileName$ = 8					; size = 4
?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetWorkingFolder, COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _strFileName$[ebp]

; 267  : 	char buf[128+1];
; 268  : 	_getcwd(buf, 128);

  00017	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0001d	57		 push	 edi
  0001e	68 80 00 00 00	 push	 128			; 00000080H
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __getcwd

; 269  : 	strcat(buf, "/");

  00029	8d bd 78 ff ff
	ff		 lea	 edi, DWORD PTR _buf$[ebp]
  0002f	83 c4 08	 add	 esp, 8
  00032	4f		 dec	 edi
$LL3@GetWorking:
  00033	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00036	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00039	84 c0		 test	 al, al
  0003b	75 f6		 jne	 SHORT $LL3@GetWorking
  0003d	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ??_C@_01KMDKNFGN@?1@

; 270  : 	strFileName = buf;

  00043	8b ce		 mov	 ecx, esi
  00045	66 89 07	 mov	 WORD PTR [edi], ax
  00048	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 271  : }

  00054	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00057	5f		 pop	 edi
  00058	33 cd		 xor	 ecx, ebp
  0005a	5e		 pop	 esi
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?GetWorkingFolder@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetWorkingFolder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_sz_Name$ = 8						; size = 4
_OnlyFileName$ = 12					; size = 4
?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetExceptionPathName, COMDAT

; 205  : 	GetOnlyFileName(sz_Name, OnlyFileName);

  00000	e9 00 00 00 00	 jmp	 ?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyFileName
?GetExceptionPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetExceptionPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_szFullPathFileName$GSCopy$1$ = -100			; size = 4
__Ptr$1$ = -96						; size = 4
_pstrLocalFileName$GSCopy$1$ = -96			; size = 4
$T2 = -89						; size = 1
_strLocalFileName$ = -88				; size = 24
_strGlobalPath$ = -64					; size = 24
_strFullPathFileName$ = -40				; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szGlobalPath$ = 8					; size = 4
_c_szFullPathFileName$ = 12				; size = 4
_pstrLocalFileName$ = 16				; size = 4
?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetLocalFileName, COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 75 0c	 mov	 esi, DWORD PTR _c_szFullPathFileName$[ebp]
  0002d	0f 57 c0	 xorps	 xmm0, xmm0
  00030	8b 4d 10	 mov	 ecx, DWORD PTR _pstrLocalFileName$[ebp]
  00033	8b 45 08	 mov	 eax, DWORD PTR _c_szGlobalPath$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00036	0f 11 45 a8	 movups	 XMMWORD PTR _strLocalFileName$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 242  : {

  0003a	89 75 9c	 mov	 DWORD PTR _c_szFullPathFileName$GSCopy$1$[ebp], esi
  0003d	89 4d a0	 mov	 DWORD PTR _pstrLocalFileName$GSCopy$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  00040	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00047	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _strLocalFileName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 45 a8 00	 mov	 BYTE PTR _strLocalFileName$[ebp], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00052	0f 11 45 c0	 movups	 XMMWORD PTR _strGlobalPath$[ebp], xmm0
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 243  : 	std::string strLocalFileName;

  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  0005d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _strGlobalPath$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  00064	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _strGlobalPath$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006b	c6 45 c0 00	 mov	 BYTE PTR _strGlobalPath$[ebp], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0006f	0f 11 45 d8	 movups	 XMMWORD PTR _strFullPathFileName$[ebp], xmm0

; 836  :         _My_data._Mysize = 0;

  00073	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strFullPathFileName$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0007a	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _strFullPathFileName$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00081	c6 45 d8 00	 mov	 BYTE PTR _strFullPathFileName$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 247  : 	StringPath(c_szGlobalPath, strGlobalPath);

  00085	8d 4d c0	 lea	 ecx, DWORD PTR _strGlobalPath$[ebp]
  00088	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0008c	51		 push	 ecx
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath

; 248  : 	StringPath(c_szFullPathFileName, strFullPathFileName);

  00093	8d 45 d8	 lea	 eax, DWORD PTR _strFullPathFileName$[ebp]
  00096	50		 push	 eax
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ?StringPath@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; StringPath

; 249  : 
; 250  : 	if (strGlobalPath.length() >= strFullPathFileName.length())

  0009d	8b 75 d0	 mov	 esi, DWORD PTR _strGlobalPath$[ebp+16]
  000a0	83 c4 10	 add	 esp, 16			; 00000010H
  000a3	8b 7d c0	 mov	 edi, DWORD PTR _strGlobalPath$[ebp]
  000a6	3b 75 e8	 cmp	 esi, DWORD PTR _strFullPathFileName$[ebp+16]
  000a9	73 3c		 jae	 SHORT $LN298@GetLocalFi

; 251  : 		return false;
; 252  : 
; 253  : 	DWORD length = min(strGlobalPath.length(), strFullPathFileName.length());
; 254  : 	for (DWORD dwPos = 0; dwPos < length; ++dwPos)

  000ab	33 d2		 xor	 edx, edx
  000ad	85 f6		 test	 esi, esi
  000af	74 22		 je	 SHORT $LN3@GetLocalFi
$LL4@GetLocalFi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b1	83 7d d4 0f	 cmp	 DWORD PTR _strGlobalPath$[ebp+20], 15 ; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  000b5	8d 45 c0	 lea	 eax, DWORD PTR _strGlobalPath$[ebp]
  000b8	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathFileName$[ebp]

; 417  :         if (_Large_mode_engaged()) {

  000bb	0f 47 c7	 cmova	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  000be	83 7d ec 0f	 cmp	 DWORD PTR _strFullPathFileName$[ebp+20], 15 ; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000c2	0f 47 4d d8	 cmova	 ecx, DWORD PTR _strFullPathFileName$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 256  : 		if (strGlobalPath[dwPos] != strFullPathFileName[dwPos])

  000c6	8a 04 10	 mov	 al, BYTE PTR [eax+edx]
  000c9	3a 04 11	 cmp	 al, BYTE PTR [ecx+edx]
  000cc	75 19		 jne	 SHORT $LN298@GetLocalFi

; 251  : 		return false;
; 252  : 
; 253  : 	DWORD length = min(strGlobalPath.length(), strFullPathFileName.length());
; 254  : 	for (DWORD dwPos = 0; dwPos < length; ++dwPos)

  000ce	42		 inc	 edx
  000cf	3b d6		 cmp	 edx, esi
  000d1	72 de		 jb	 SHORT $LL4@GetLocalFi
$LN3@GetLocalFi:

; 257  : 			return false;
; 258  : 	}
; 259  : 
; 260  : 	*pstrLocalFileName = &c_szFullPathFileName[length];

  000d3	8b 45 9c	 mov	 eax, DWORD PTR _c_szFullPathFileName$GSCopy$1$[ebp]
  000d6	8b 4d a0	 mov	 ecx, DWORD PTR _pstrLocalFileName$GSCopy$1$[ebp]
  000d9	03 c6		 add	 eax, esi
  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 262  : 	return true;

  000e1	c6 45 a7 01	 mov	 BYTE PTR $T2[ebp], 1
  000e5	eb 04		 jmp	 SHORT $LN14@GetLocalFi
$LN298@GetLocalFi:
  000e7	c6 45 a7 00	 mov	 BYTE PTR $T2[ebp], 0
$LN14@GetLocalFi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000eb	8b 45 ec	 mov	 eax, DWORD PTR _strFullPathFileName$[ebp+20]
  000ee	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000f1	76 30		 jbe	 SHORT $LN35@GetLocalFi

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000f3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f6	8b 45 d8	 mov	 eax, DWORD PTR _strFullPathFileName$[ebp]
  000f9	8b d0		 mov	 edx, eax

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000fb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00101	72 16		 jb	 SHORT $LN46@GetLocalFi

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00103	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  00106	83 c1 23	 add	 ecx, 35			; 00000023H
  00109	2b d0		 sub	 edx, eax
  0010b	89 45 a0	 mov	 DWORD PTR __Ptr$1$[ebp], eax

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010e	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00111	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00114	77 5a		 ja	 SHORT $LN81@GetLocalFi
  00116	8b 45 a0	 mov	 eax, DWORD PTR __Ptr$1$[ebp]
$LN46@GetLocalFi:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00119	51		 push	 ecx
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00120	83 c4 08	 add	 esp, 8
$LN35@GetLocalFi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00123	8b 45 d4	 mov	 eax, DWORD PTR _strGlobalPath$[ebp+20]
  00126	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00129	76 27		 jbe	 SHORT $LN73@GetLocalFi

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0012b	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0012e	8b c7		 mov	 eax, edi

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00130	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00136	72 10		 jb	 SHORT $LN84@GetLocalFi

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00138	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  0013b	83 c1 23	 add	 ecx, 35			; 00000023H
  0013e	2b c7		 sub	 eax, edi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00140	83 c0 fc	 add	 eax, -4			; fffffffcH
  00143	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00146	77 28		 ja	 SHORT $LN81@GetLocalFi
$LN84@GetLocalFi:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00148	51		 push	 ecx
  00149	57		 push	 edi
  0014a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0014f	83 c4 08	 add	 esp, 8
$LN73@GetLocalFi:
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 262  : 	return true;

  00152	8a 45 a7	 mov	 al, BYTE PTR $T2[ebp]

; 263  : }

  00155	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00158	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015f	59		 pop	 ecx
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00165	33 cd		 xor	 ecx, ebp
  00167	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
$LN81@GetLocalFi:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00170	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN304@GetLocalFi:
  00175	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR _strLocalFileName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR _strGlobalPath$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR _strFullPathFileName$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetLocalFileName@@YA_NPBD0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetLocalFileName
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetOnlyPathName@@YAPBDPBD@Z
_TEXT	SEGMENT
_c_szName$ = 8						; size = 4
?GetOnlyPathName@@YAPBDPBD@Z PROC			; GetOnlyPathName, COMDAT

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 235  : 	static std::string strPathName;

  00003	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0000f	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
  00017	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0001d	7f 25		 jg	 SHORT $LN35@GetOnlyPat
$LN2@GetOnlyPat:

; 236  : 	GetOnlyPathName(c_szName, strPathName);

  0001f	68 00 00 00 00	 push	 OFFSET ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00024	ff 75 08	 push	 DWORD PTR _c_szName$[ebp]
  00027	e8 00 00 00 00	 call	 ?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; GetOnlyPathName
  0002c	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  0002f	b8 00 00 00 00	 mov	 eax, OFFSET ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 434  :         return _Myres > _Small_string_capacity;

  00034	83 3d 14 00 00
	00 0f		 cmp	 DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  0003b	0f 47 05 00 00
	00 00		 cmova	 eax, DWORD PTR ?strPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 239  : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN35@GetOnlyPat:

; 235  : 	static std::string strPathName;

  00044	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
  00049	e8 00 00 00 00	 call	 __Init_thread_header
  0004e	83 c4 04	 add	 esp, 4
  00051	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA, -1
  00058	75 c5		 jne	 SHORT $LN2@GetOnlyPat
  0005a	68 00 00 00 00	 push	 OFFSET ??__FstrPathName@?1??GetOnlyPathName@@YAPBDPBD@Z@YAXXZ ; `GetOnlyPathName'::`2'::`dynamic atexit destructor for 'strPathName''
  0005f	e8 00 00 00 00	 call	 _atexit
  00064	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetOnlyPathName@@YAPBDPBD@Z@4HA
  00069	e8 00 00 00 00	 call	 __Init_thread_footer
  0006e	83 c4 08	 add	 esp, 8
  00071	eb ac		 jmp	 SHORT $LN2@GetOnlyPat
?GetOnlyPathName@@YAPBDPBD@Z ENDP			; GetOnlyPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv199 = -4						; size = 4
_sz_Name$ = 8						; size = 4
_OnlyPathName$ = 12					; size = 4
?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetOnlyPathName, COMDAT

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR _sz_Name$[ebp]

; 210  : 	int i;
; 211  : 	for (i = strlen(sz_Name) - 1; i >= 0; --i)

  0000a	8b cf		 mov	 ecx, edi
  0000c	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0000f	90		 npad	 1
$LL30@GetOnlyPat:
  00010	8a 01		 mov	 al, BYTE PTR [ecx]
  00012	41		 inc	 ecx
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL30@GetOnlyPat
  00017	2b ca		 sub	 ecx, edx
  00019	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0001c	85 c0		 test	 eax, eax
  0001e	78 15		 js	 SHORT $LN3@GetOnlyPat
$LL4@GetOnlyPat:

; 212  : 	{
; 213  : 		if ('\\' == sz_Name[i] || '/' == sz_Name[i])

  00020	8a 0c 38	 mov	 cl, BYTE PTR [eax+edi]
  00023	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00026	74 0c		 je	 SHORT $LN23@GetOnlyPat
  00028	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  0002b	74 07		 je	 SHORT $LN23@GetOnlyPat

; 210  : 	int i;
; 211  : 	for (i = strlen(sz_Name) - 1; i >= 0; --i)

  0002d	83 e8 01	 sub	 eax, 1
  00030	79 ee		 jns	 SHORT $LL4@GetOnlyPat

; 212  : 	{
; 213  : 		if ('\\' == sz_Name[i] || '/' == sz_Name[i])

  00032	eb 01		 jmp	 SHORT $LN3@GetOnlyPat
$LN23@GetOnlyPat:

; 214  : 		{
; 215  : 			++i;

  00034	40		 inc	 eax
$LN3@GetOnlyPat:

; 216  : 			break;
; 217  : 		}
; 218  : 	}
; 219  : 
; 220  : 	if (i == -1)
; 221  : 		i = 0;
; 222  : 
; 223  : 	OnlyPathName.reserve(strlen(sz_Name));

  00035	33 c9		 xor	 ecx, ecx
  00037	83 f8 ff	 cmp	 eax, -1
  0003a	0f 45 c8	 cmovne	 ecx, eax
  0003d	89 4d fc	 mov	 DWORD PTR tv199[ebp], ecx
  00040	8b cf		 mov	 ecx, edi
  00042	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL31@GetOnlyPat:
  00045	8a 01		 mov	 al, BYTE PTR [ecx]
  00047	41		 inc	 ecx
  00048	84 c0		 test	 al, al
  0004a	75 f9		 jne	 SHORT $LL31@GetOnlyPat
  0004c	8b 5d 0c	 mov	 ebx, DWORD PTR _OnlyPathName$[ebp]
  0004f	2b ca		 sub	 ecx, edx
  00051	51		 push	 ecx
  00052	8b cb		 mov	 ecx, ebx
  00054	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 224  : 	OnlyPathName = "";

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0005e	8b cb		 mov	 ecx, ebx
  00060	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00065	33 f6		 xor	 esi, esi

; 226  : 	for (int j=0; j<i; ++j)

  00067	39 75 fc	 cmp	 DWORD PTR tv199[ebp], esi
  0006a	7e 16		 jle	 SHORT $LN6@GetOnlyPat
  0006c	0f 1f 40 00	 npad	 4
$LL7@GetOnlyPat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1454 :         push_back(_Ch);

  00070	0f b6 04 37	 movzx	 eax, BYTE PTR [edi+esi]
  00074	8b cb		 mov	 ecx, ebx
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 226  : 	for (int j=0; j<i; ++j)

  0007c	46		 inc	 esi
  0007d	3b 75 fc	 cmp	 esi, DWORD PTR tv199[ebp]
  00080	7c ee		 jl	 SHORT $LL7@GetOnlyPat
$LN6@GetOnlyPat:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00082	6a 00		 push	 0
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  00089	8b cb		 mov	 ecx, ebx
  0008b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 231  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?GetOnlyPathName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetOnlyPathName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_sz_Name$ = 8						; size = 4
_strFileName$ = 12					; size = 4
?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetOnlyFileName, COMDAT

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 180  : 	strFileName = "";

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _strFileName$[ebp]
  00007	8b cb		 mov	 ecx, ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _sz_Name$[ebp]
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00013	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 181  : 
; 182  : 	int i;
; 183  : 	for (i=strlen(sz_Name)-1; i>=0; --i)

  00018	8b cf		 mov	 ecx, edi
  0001a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0001d	0f 1f 00	 npad	 3
$LL30@GetOnlyFil:
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	41		 inc	 ecx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL30@GetOnlyFil
  00027	2b ca		 sub	 ecx, edx
  00029	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0002c	85 c0		 test	 eax, eax
  0002e	78 15		 js	 SHORT $LN3@GetOnlyFil
$LL4@GetOnlyFil:

; 184  : 	{
; 185  : 		if ('\\' == sz_Name[i] || '/' == sz_Name[i])

  00030	8a 0c 38	 mov	 cl, BYTE PTR [eax+edi]
  00033	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00036	74 0c		 je	 SHORT $LN23@GetOnlyFil
  00038	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  0003b	74 07		 je	 SHORT $LN23@GetOnlyFil

; 181  : 
; 182  : 	int i;
; 183  : 	for (i=strlen(sz_Name)-1; i>=0; --i)

  0003d	83 e8 01	 sub	 eax, 1
  00040	79 ee		 jns	 SHORT $LL4@GetOnlyFil

; 184  : 	{
; 185  : 		if ('\\' == sz_Name[i] || '/' == sz_Name[i])

  00042	eb 01		 jmp	 SHORT $LN3@GetOnlyFil
$LN23@GetOnlyFil:

; 186  : 		{
; 187  : 			++i;

  00044	40		 inc	 eax
$LN3@GetOnlyFil:

; 195  : 	for (size_t j = i; j < strlen(sz_Name); ++j)

  00045	33 f6		 xor	 esi, esi
  00047	8b cf		 mov	 ecx, edi
  00049	83 f8 ff	 cmp	 eax, -1
  0004c	0f 45 f0	 cmovne	 esi, eax
  0004f	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL31@GetOnlyFil:
  00052	8a 01		 mov	 al, BYTE PTR [ecx]
  00054	41		 inc	 ecx
  00055	84 c0		 test	 al, al
  00057	75 f9		 jne	 SHORT $LL31@GetOnlyFil
  00059	2b ca		 sub	 ecx, edx
  0005b	3b f1		 cmp	 esi, ecx
  0005d	73 20		 jae	 SHORT $LN6@GetOnlyFil
  0005f	90		 npad	 1
$LL7@GetOnlyFil:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1454 :         push_back(_Ch);

  00060	0f b6 04 37	 movzx	 eax, BYTE PTR [edi+esi]
  00064	8b cb		 mov	 ecx, ebx
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 195  : 	for (size_t j = i; j < strlen(sz_Name); ++j)

  0006c	8b c7		 mov	 eax, edi
  0006e	46		 inc	 esi
  0006f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL32@GetOnlyFil:
  00072	8a 08		 mov	 cl, BYTE PTR [eax]
  00074	40		 inc	 eax
  00075	84 c9		 test	 cl, cl
  00077	75 f9		 jne	 SHORT $LL32@GetOnlyFil
  00079	2b c2		 sub	 eax, edx
  0007b	3b f0		 cmp	 esi, eax
  0007d	72 e1		 jb	 SHORT $LL7@GetOnlyFil
$LN6@GetOnlyFil:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007f	6a 00		 push	 0
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_01LOCGONAA@?$AA@
  00086	8b cb		 mov	 ecx, ebx
  00088	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp

; 201  : }

  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?GetOnlyFileName@@YAXPBDAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetOnlyFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetIndexingName@@YAXPADK@Z
_TEXT	SEGMENT
_szName$ = 8						; size = 4
_Index$ = 12						; size = 4
?GetIndexingName@@YAXPADK@Z PROC			; GetIndexingName, COMDAT

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 175  : 	sprintf(szName + strlen(szName), "%u", Index);

  00003	8b 55 08	 mov	 edx, DWORD PTR _szName$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL3@GetIndexin:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@GetIndexin
  00017	ff 75 0c	 push	 DWORD PTR _Index$[ebp]
  0001a	2b c6		 sub	 eax, esi
  0001c	03 c2		 add	 eax, edx
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 _sprintf
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	5e		 pop	 esi

; 176  : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetIndexingName@@YAXPADK@Z ENDP			; GetIndexingName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetOldIndexingName@@YAXPADH@Z
_TEXT	SEGMENT
_sign$ = -524						; size = 4
_dec$ = -520						; size = 4
_Temp$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_szName$ = 8						; size = 4
_Index$ = 12						; size = 4
?GetOldIndexingName@@YAXPADH@Z PROC			; GetOldIndexingName, COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _Index$[ebp]

; 164  : 	int dec, sign;
; 165  : 	char Temp[512];
; 166  : 
; 167  : 	strcpy(Temp, _ecvt(Index, 256, &dec, &sign));

  00016	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR _sign$[ebp]
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8b 7d 08	 mov	 edi, DWORD PTR _szName$[ebp]
  00021	51		 push	 ecx
  00022	8d 8d f8 fd ff
	ff		 lea	 ecx, DWORD PTR _dec$[ebp]
  00028	66 0f 6e c0	 movd	 xmm0, eax
  0002c	51		 push	 ecx
  0002d	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00031	68 00 01 00 00	 push	 256			; 00000100H
  00036	83 ec 08	 sub	 esp, 8
  00039	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 __ecvt
  00043	8d 95 fc fd ff
	ff		 lea	 edx, DWORD PTR _Temp$[ebp]
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	2b d0		 sub	 edx, eax
  0004e	66 90		 npad	 2
$LL3@GetOldInde:
  00050	8a 08		 mov	 cl, BYTE PTR [eax]
  00052	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  00055	88 4c 02 ff	 mov	 BYTE PTR [edx+eax-1], cl
  00059	84 c9		 test	 cl, cl
  0005b	75 f3		 jne	 SHORT $LL3@GetOldInde

; 168  : 	Temp[dec] = '\0';

  0005d	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR _dec$[ebp]
  00063	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  00068	73 4c		 jae	 SHORT $LN4@GetOldInde

; 169  : 
; 170  : 	strcat(szName, Temp);

  0006a	8d 95 fc fd ff
	ff		 lea	 edx, DWORD PTR _Temp$[ebp]
  00070	88 8c 05 fc fd
	ff ff		 mov	 BYTE PTR _Temp$[ebp+eax], cl
  00077	8b f2		 mov	 esi, edx
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@GetOldInde:
  00080	8a 02		 mov	 al, BYTE PTR [edx]
  00082	42		 inc	 edx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL9@GetOldInde
  00087	2b d6		 sub	 edx, esi
  00089	4f		 dec	 edi
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL10@GetOldInde:
  00090	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00093	47		 inc	 edi
  00094	84 c0		 test	 al, al
  00096	75 f8		 jne	 SHORT $LL10@GetOldInde
  00098	8b ca		 mov	 ecx, edx
  0009a	c1 e9 02	 shr	 ecx, 2
  0009d	f3 a5		 rep movsd
  0009f	8b ca		 mov	 ecx, edx
  000a1	83 e1 03	 and	 ecx, 3
  000a4	f3 a4		 rep movsb

; 171  : }

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	5f		 pop	 edi
  000aa	33 cd		 xor	 ecx, ebp
  000ac	5e		 pop	 esi
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
$LN4@GetOldInde:

; 168  : 	Temp[dec] = '\0';

  000b6	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN15@GetOldInde:
  000bb	cc		 int	 3
?GetOldIndexingName@@YAXPADH@Z ENDP			; GetOldIndexingName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetFileNameParts@@YAXPBDHPAD11@Z
_TEXT	SEGMENT
tv503 = -4						; size = 4
_c_szFile$ = 8						; size = 4
_len$ = 12						; size = 4
_count$1$ = 12						; size = 4
_pszPath$ = 16						; size = 4
_pszName$ = 20						; size = 4
_pszExt$ = 24						; size = 4
?GetFileNameParts@@YAXPBDHPAD11@Z PROC			; GetFileNameParts, COMDAT

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 101  : 	assert(pszPath!=NULL);
; 102  : 	assert(pszName!=NULL);
; 103  : 	assert(pszExt!=NULL);
; 104  : 
; 105  : 	int ext=len;

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp]
  00008	8b d3		 mov	 edx, ebx

; 106  : 	int pos=len;

  0000a	8b c3		 mov	 eax, ebx
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR _c_szFile$[ebp]
  00010	57		 push	 edi

; 107  : 	while (pos>0)

  00011	85 db		 test	 ebx, ebx
  00013	7e 33		 jle	 SHORT $LN52@GetFileNam
$LL2@GetFileNam:

; 108  : 	{
; 109  : 		--pos;
; 110  : 		char c=c_szFile[pos];

  00015	8a 4c 30 ff	 mov	 cl, BYTE PTR [eax+esi-1]
  00019	48		 dec	 eax

; 111  : 		if (ext==len && c=='.')

  0001a	80 f9 2e	 cmp	 cl, 46			; 0000002eH
  0001d	74 10		 je	 SHORT $LN31@GetFileNam

; 114  : 			break;
; 115  : 		}
; 116  : 
; 117  : 		if (c=='/') break;

  0001f	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  00022	74 0d		 je	 SHORT $LN39@GetFileNam

; 118  : 		else if (c=='\\') break;

  00024	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00027	74 08		 je	 SHORT $LN39@GetFileNam

; 107  : 	while (pos>0)

  00029	85 c0		 test	 eax, eax
  0002b	7f e8		 jg	 SHORT $LL2@GetFileNam
  0002d	eb 19		 jmp	 SHORT $LN52@GetFileNam
$LN31@GetFileNam:

; 112  : 		{
; 113  : 			ext=pos;

  0002f	8b d0		 mov	 edx, eax
$LN39@GetFileNam:

; 119  : 	}
; 120  : 
; 121  : 	while (pos>0)

  00031	85 c0		 test	 eax, eax
  00033	7e 15		 jle	 SHORT $LN70@GetFileNam
$LL4@GetFileNam:

; 122  : 	{
; 123  : 		--pos;
; 124  : 		char c=c_szFile[pos];

  00035	8a 4c 30 ff	 mov	 cl, BYTE PTR [eax+esi-1]
  00039	48		 dec	 eax

; 125  : 
; 126  : 		if (c=='/') break;

  0003a	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  0003d	74 09		 je	 SHORT $LN52@GetFileNam

; 127  : 		else if (c=='\\') break;

  0003f	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00042	74 04		 je	 SHORT $LN52@GetFileNam

; 119  : 	}
; 120  : 
; 121  : 	while (pos>0)

  00044	85 c0		 test	 eax, eax
  00046	7f ed		 jg	 SHORT $LL4@GetFileNam
$LN52@GetFileNam:

; 128  : 	}
; 129  : 
; 130  : 	if (pos)

  00048	85 c0		 test	 eax, eax
$LN70@GetFileNam:
  0004a	74 2f		 je	 SHORT $LN22@GetFileNam

; 131  : 	{
; 132  : 		++pos;

  0004c	40		 inc	 eax

; 133  : 		for (int i = 0; i < pos; ++i)

  0004d	85 c0		 test	 eax, eax
  0004f	7e 23		 jle	 SHORT $LN7@GetFileNam

; 131  : 	{
; 132  : 		++pos;

  00051	8b 7d 10	 mov	 edi, DWORD PTR _pszPath$[ebp]
  00054	8b d8		 mov	 ebx, eax
  00056	2b f7		 sub	 esi, edi
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL40@GetFileNam:

; 134  : 		{
; 135  : 			pszPath[i] = c_szFile[i];

  00060	8a 0c 3e	 mov	 cl, BYTE PTR [esi+edi]
  00063	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00066	88 4f ff	 mov	 BYTE PTR [edi-1], cl
  00069	83 eb 01	 sub	 ebx, 1
  0006c	75 f2		 jne	 SHORT $LL40@GetFileNam
  0006e	8b 75 08	 mov	 esi, DWORD PTR _c_szFile$[ebp]
  00071	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp]
$LN7@GetFileNam:

; 136  : 		}
; 137  : 		pszPath[pos] = '\0';

  00074	8b 4d 10	 mov	 ecx, DWORD PTR _pszPath$[ebp]
  00077	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN22@GetFileNam:

; 138  : 	}
; 139  : 
; 140  : 	if (ext>pos)

  0007b	3b d0		 cmp	 edx, eax
  0007d	7e 26		 jle	 SHORT $LN23@GetFileNam

; 141  : 	{
; 142  : 		int count = 0;
; 143  : 		for (int i = pos; i < ext; ++i)

  0007f	8b 7d 14	 mov	 edi, DWORD PTR _pszName$[ebp]
  00082	8b ca		 mov	 ecx, edx
  00084	2b f8		 sub	 edi, eax
  00086	2b c8		 sub	 ecx, eax
  00088	89 4d 0c	 mov	 DWORD PTR _count$1$[ebp], ecx
  0008b	0f 1f 44 00 00	 npad	 5
$LL11@GetFileNam:

; 144  : 		{
; 145  : 			pszName[count++] = c_szFile[i];

  00090	8a 0c 06	 mov	 cl, BYTE PTR [esi+eax]
  00093	88 0c 07	 mov	 BYTE PTR [edi+eax], cl
  00096	40		 inc	 eax
  00097	3b c2		 cmp	 eax, edx
  00099	7c f5		 jl	 SHORT $LL11@GetFileNam

; 146  : 		}
; 147  : 		pszName[count] = '\0';

  0009b	8b 45 0c	 mov	 eax, DWORD PTR _count$1$[ebp]
  0009e	8b 4d 14	 mov	 ecx, DWORD PTR _pszName$[ebp]
  000a1	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
$LN23@GetFileNam:

; 148  : 	}
; 149  : 
; 150  : 	++ext;

  000a5	42		 inc	 edx

; 151  : 	if (len > ext)

  000a6	3b da		 cmp	 ebx, edx
  000a8	7e 1b		 jle	 SHORT $LN24@GetFileNam

; 152  : 	{
; 153  : 		int count = 0;
; 154  : 		for (int i = ext; i < len; ++i)

  000aa	8b 4d 18	 mov	 ecx, DWORD PTR _pszExt$[ebp]
  000ad	8b fb		 mov	 edi, ebx
  000af	2b ca		 sub	 ecx, edx
  000b1	2b fa		 sub	 edi, edx
$LL14@GetFileNam:

; 155  : 		{
; 156  : 			pszExt[count++] = c_szFile[i];

  000b3	8a 04 32	 mov	 al, BYTE PTR [edx+esi]
  000b6	88 04 11	 mov	 BYTE PTR [ecx+edx], al
  000b9	42		 inc	 edx
  000ba	3b d3		 cmp	 edx, ebx
  000bc	7c f5		 jl	 SHORT $LL14@GetFileNam

; 157  : 		}
; 158  : 		pszExt[count] = '\0';

  000be	8b 45 18	 mov	 eax, DWORD PTR _pszExt$[ebp]
  000c1	c6 04 07 00	 mov	 BYTE PTR [edi+eax], 0
$LN24@GetFileNam:

; 159  : 	}
; 160  : }

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
?GetFileNameParts@@YAXPBDHPAD11@Z ENDP			; GetFileNameParts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_c_szFile$ = 8						; size = 4
_len$ = 12						; size = 4
_pstExt$ = 16						; size = 4
?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; GetFileExtension, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   : 	int ext = len;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _len$[ebp]

; 79   : 	int pos = len;

  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b f2		 mov	 esi, edx
  0000b	57		 push	 edi

; 80   : 	while (pos > 0)

  0000c	8b 7d 08	 mov	 edi, DWORD PTR _c_szFile$[ebp]
  0000f	85 d2		 test	 edx, edx
  00011	7e 1c		 jle	 SHORT $LN14@GetFileExt
$LL2@GetFileExt:

; 81   : 	{
; 82   : 		--pos;
; 83   : 		char c=c_szFile[pos];

  00013	8a 4c 38 ff	 mov	 cl, BYTE PTR [eax+edi-1]
  00017	48		 dec	 eax

; 84   : 		if (ext==len && c=='.')

  00018	80 f9 2e	 cmp	 cl, 46			; 0000002eH
  0001b	74 10		 je	 SHORT $LN11@GetFileExt

; 87   : 			break;
; 88   : 		}
; 89   : 
; 90   : 		if (c=='/') break;

  0001d	80 f9 2f	 cmp	 cl, 47			; 0000002fH
  00020	74 0d		 je	 SHORT $LN14@GetFileExt

; 91   : 		else if (c=='\\') break;

  00022	80 f9 5c	 cmp	 cl, 92			; 0000005cH
  00025	74 08		 je	 SHORT $LN14@GetFileExt

; 80   : 	while (pos > 0)

  00027	85 c0		 test	 eax, eax
  00029	7f e8		 jg	 SHORT $LL2@GetFileExt
  0002b	eb 02		 jmp	 SHORT $LN14@GetFileExt
$LN11@GetFileExt:

; 85   : 		{
; 86   : 			ext=pos;

  0002d	8b f0		 mov	 esi, eax
$LN14@GetFileExt:

; 92   : 	}
; 93   : 
; 94   : 	++ext;

  0002f	46		 inc	 esi

; 95   : 	if (len>ext)

  00030	3b d6		 cmp	 edx, esi
  00032	7e 0f		 jle	 SHORT $LN8@GetFileExt

; 96   : 		pstExt->append(c_szFile+ext, len-ext);

  00034	8b 4d 10	 mov	 ecx, DWORD PTR _pstExt$[ebp]
  00037	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0003a	2b d6		 sub	 edx, esi
  0003c	52		 push	 edx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN8@GetFileExt:

; 97   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?GetFileExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; GetFileExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z
_TEXT	SEGMENT
_c_szFile$ = 8						; size = 4
_len$ = 12						; size = 4
_pstPath$ = 16						; size = 4
_pstName$ = 20						; size = 4
_pstExt$ = 24						; size = 4
?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z PROC ; GetFilePathNameExtension, COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 	assert(pstPath != NULL);
; 31   : 	assert(pstName != NULL);
; 32   : 	assert(pstExt != NULL);
; 33   : 
; 34   : 	int ext = len;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  00006	53		 push	 ebx
  00007	8b d8		 mov	 ebx, eax
  00009	56		 push	 esi

; 35   : 	int pos = len;

  0000a	8b f0		 mov	 esi, eax
  0000c	57		 push	 edi

; 36   : 
; 37   : 	while (pos > 0)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR _c_szFile$[ebp]
  00010	85 c0		 test	 eax, eax
  00012	7e 2e		 jle	 SHORT $LN25@GetFilePat
$LL2@GetFilePat:

; 38   : 	{
; 39   : 		--pos;
; 40   : 		char c = c_szFile[pos];

  00014	8a 44 3e ff	 mov	 al, BYTE PTR [esi+edi-1]
  00018	4e		 dec	 esi

; 41   : 
; 42   : 		if (ext == len && c == '.')

  00019	3c 2e		 cmp	 al, 46			; 0000002eH
  0001b	74 0e		 je	 SHORT $LN17@GetFilePat

; 45   : 			break;
; 46   : 		}
; 47   : 
; 48   : 		if (c == '/' || c == '\\')

  0001d	3c 2f		 cmp	 al, 47			; 0000002fH
  0001f	74 0c		 je	 SHORT $LN20@GetFilePat
  00021	3c 5c		 cmp	 al, 92			; 0000005cH
  00023	74 08		 je	 SHORT $LN20@GetFilePat

; 36   : 
; 37   : 	while (pos > 0)

  00025	85 f6		 test	 esi, esi
  00027	7f eb		 jg	 SHORT $LL2@GetFilePat
  00029	eb 17		 jmp	 SHORT $LN25@GetFilePat
$LN17@GetFilePat:

; 43   : 		{
; 44   : 			ext = pos;

  0002b	8b de		 mov	 ebx, esi
$LN20@GetFilePat:

; 49   : 			break;
; 50   : 	}
; 51   : 
; 52   : 	while (pos > 0)

  0002d	85 f6		 test	 esi, esi
  0002f	7e 13		 jle	 SHORT $LN36@GetFilePat
$LL4@GetFilePat:

; 53   : 	{
; 54   : 		--pos;
; 55   : 		char c = c_szFile[pos];

  00031	8a 44 3e ff	 mov	 al, BYTE PTR [esi+edi-1]
  00035	4e		 dec	 esi

; 56   : 
; 57   : 		if (c == '/' || c == '\\')

  00036	3c 2f		 cmp	 al, 47			; 0000002fH
  00038	74 08		 je	 SHORT $LN25@GetFilePat
  0003a	3c 5c		 cmp	 al, 92			; 0000005cH
  0003c	74 04		 je	 SHORT $LN25@GetFilePat

; 49   : 			break;
; 50   : 	}
; 51   : 
; 52   : 	while (pos > 0)

  0003e	85 f6		 test	 esi, esi
  00040	7f ef		 jg	 SHORT $LL4@GetFilePat
$LN25@GetFilePat:

; 58   : 			break;
; 59   : 	}
; 60   : 
; 61   : 	if (pos)

  00042	85 f6		 test	 esi, esi
$LN36@GetFilePat:
  00044	74 0b		 je	 SHORT $LN11@GetFilePat

; 62   : 	{
; 63   : 		++pos;
; 64   : 		pstPath->append(c_szFile, pos);

  00046	8b 4d 10	 mov	 ecx, DWORD PTR _pstPath$[ebp]
  00049	46		 inc	 esi
  0004a	56		 push	 esi
  0004b	57		 push	 edi
  0004c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN11@GetFilePat:

; 65   : 	}
; 66   : 
; 67   : 	if (ext > pos)

  00051	3b de		 cmp	 ebx, esi
  00053	7e 11		 jle	 SHORT $LN12@GetFilePat

; 68   : 		pstName->append(c_szFile + pos, ext - pos);

  00055	8b 4d 14	 mov	 ecx, DWORD PTR _pstName$[ebp]
  00058	8b c3		 mov	 eax, ebx
  0005a	2b c6		 sub	 eax, esi
  0005c	50		 push	 eax
  0005d	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN12@GetFilePat:

; 69   : 
; 70   : 	++ext;
; 71   : 
; 72   : 	if (len > ext)

  00066	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  00069	43		 inc	 ebx
  0006a	3b c3		 cmp	 eax, ebx
  0006c	7e 0f		 jle	 SHORT $LN13@GetFilePat

; 73   : 		pstExt->append(c_szFile + ext, len - ext);

  0006e	8b 4d 18	 mov	 ecx, DWORD PTR _pstExt$[ebp]
  00071	2b c3		 sub	 eax, ebx
  00073	50		 push	 eax
  00074	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN13@GetFilePat:

; 74   : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?GetFilePathNameExtension@@YAXPBDHPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@11@Z ENDP ; GetFilePathNameExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Utils.cpp
;	COMDAT ?CreateTempFileName@@YAPBDPBD@Z
_TEXT	SEGMENT
_szTempPath$ = -268					; size = 261
__$ArrayPad$ = -4					; size = 4
_c_pszPrefix$ = 8					; size = 4
?CreateTempFileName@@YAPBDPBD@Z PROC			; CreateTempFileName, COMDAT

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _c_pszPrefix$[ebp]

; 15   : 	char szTempPath[MAX_PATH + 1];
; 16   : 	static char szTempName[MAX_PATH + 1];
; 17   : 
; 18   : 	GetTempPath(MAX_PATH, szTempPath);

  00017	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempPath$[ebp]
  0001d	50		 push	 eax
  0001e	68 04 01 00 00	 push	 260			; 00000104H
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempPathA@8

; 19   : 
; 20   : 	GetTempFileName(szTempPath,									// directory for temp files

  00029	33 c0		 xor	 eax, eax
  0002b	85 f6		 test	 esi, esi
  0002d	68 00 00 00 00	 push	 OFFSET ?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA
  00032	0f 95 c0	 setne	 al
  00035	85 f6		 test	 esi, esi
  00037	50		 push	 eax
  00038	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03NGHAOOHL@etb@
  0003d	0f 45 c6	 cmovne	 eax, esi
  00040	50		 push	 eax
  00041	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szTempPath$[ebp]
  00047	50		 push	 eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTempFileNameA@16

; 21   : 					c_pszPrefix ? c_pszPrefix : "etb",		    // temp file name prefix
; 22   : 					c_pszPrefix ? true : false,					// create unique name
; 23   : 					szTempName);								// buffer for name
; 24   : 
; 25   : 	return (szTempName);
; 26   : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	b8 00 00 00 00	 mov	 eax, OFFSET ?szTempName@?1??CreateTempFileName@@YAPBDPBD@Z@4PADA
  00056	33 cd		 xor	 ecx, ebp
  00058	5e		 pop	 esi
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?CreateTempFileName@@YAPBDPBD@Z ENDP			; CreateTempFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3044 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3045 :         auto& _My_data = _Mypair._Myval2;
; 3046 :         _My_data._Orphan_all();
; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN16@Tidy_deall
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN27@Tidy_deall

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN24@Tidy_deall

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN27@Tidy_deall:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN16@Tidy_deall:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3058 :     }

  00044	c3		 ret	 0
$LN24@Tidy_deall:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN35@Tidy_deall:
  0004a	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Old_size$1$ = -8					; size = 4
$T1 = -4						; size = 4
__Newcap$ = 8						; size = 4
$T2 = 8							; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 2428 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcap = 0) { // determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 2429 :         if (_Mypair._Myval2._Mysize > _Newcap) { // requested capacity is not large enough for current size, ignore

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newcap$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00010	89 45 f8	 mov	 DWORD PTR __Old_size$1$[ebp], eax
  00013	3b c3		 cmp	 eax, ebx
  00015	0f 87 54 01 00
	00		 ja	 $LN5@reserve

; 2430 :             return; // nothing to do
; 2431 :         }
; 2432 : 
; 2433 :         if (_Mypair._Myval2._Myres == _Newcap) { // we're already at the requested capacity

  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	89 55 08	 mov	 DWORD PTR $T2[ebp], edx
  00021	3b d3		 cmp	 edx, ebx
  00023	0f 84 46 01 00
	00		 je	 $LN5@reserve

; 2434 :             return; // nothing to do
; 2435 :         }
; 2436 : 
; 2437 :         if (_Mypair._Myval2._Myres < _Newcap) { // reallocate to grow

  00029	57		 push	 edi
  0002a	0f 83 f7 00 00
	00		 jae	 $LN4@reserve

; 2438 :             const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2439 :             _Reallocate_grow_by(_Newcap - _Old_size,

  00030	8b cb		 mov	 ecx, ebx
  00032	2b c8		 sub	 ecx, eax

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00034	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00039	2b 45 f8	 sub	 eax, DWORD PTR __Old_size$1$[ebp]
  0003c	3b c1		 cmp	 eax, ecx
  0003e	0f 82 38 01 00
	00		 jb	 $LN123@reserve

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00044	8b fb		 mov	 edi, ebx
  00046	83 cf 0f	 or	 edi, 15			; 0000000fH
  00049	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0004f	76 12		 jbe	 SHORT $LN16@reserve

; 2944 :             return _Max;

  00051	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00056	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	eb 45		 jmp	 SHORT $LN121@reserve
$LN16@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00063	8b ca		 mov	 ecx, edx
  00065	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0006a	d1 e9		 shr	 ecx, 1
  0006c	2b c1		 sub	 eax, ecx
  0006e	3b d0		 cmp	 edx, eax
  00070	76 12		 jbe	 SHORT $LN17@reserve

; 2948 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 24		 jmp	 SHORT $LN121@reserve
$LN17@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00084	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00087	3b f8		 cmp	 edi, eax
  00089	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0008c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0008f	85 c0		 test	 eax, eax
  00091	74 1b		 je	 SHORT $LN120@reserve
$LN30@reserve:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00093	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00098	72 08		 jb	 SHORT $LN31@reserve

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	eb 06		 jmp	 SHORT $LN121@reserve
$LN31@reserve:

; 136  :         return ::operator new(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000a8	8b 55 08	 mov	 edx, DWORD PTR $T2[ebp]
  000ab	83 c4 04	 add	 esp, 4
$LN120@reserve:
  000ae	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b1	8b 5d f8	 mov	 ebx, DWORD PTR __Old_size$1$[ebp]
  000b4	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  000b7	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ba	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000bd	51		 push	 ecx
  000be	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000c1	76 49		 jbe	 SHORT $LN9@reserve

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c3	8b 3e		 mov	 edi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	57		 push	 edi
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000cc	8b 4d 08	 mov	 ecx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000d3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000d9	72 16		 jb	 SHORT $LN59@reserve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000db	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000de	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e1	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e3	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000e6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000e9	0f 87 88 00 00
	00		 ja	 $LN95@reserve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ef	8b fa		 mov	 edi, edx
$LN59@reserve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f1	51		 push	 ecx
  000f2	57		 push	 edi
  000f3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000fb	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  000fe	89 06		 mov	 DWORD PTR [esi], eax
  00100	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi

; 2448 :             // deallocate everything; switch back to "small" mode
; 2449 :             _Become_small();
; 2450 :             return;
; 2451 :         }
; 2452 : 
; 2453 :         // ignore requests to reserve to [_Small_string_capacity + 1, _Myres)
; 2454 :     }

  00105	5b		 pop	 ebx
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 04 00	 ret	 4
$LN9@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010c	56		 push	 esi
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  00113	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00116	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2443 :             _Mypair._Myval2._Mysize = _Old_size;

  00119	89 06		 mov	 DWORD PTR [esi], eax
  0011b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi

; 2448 :             // deallocate everything; switch back to "small" mode
; 2449 :             _Become_small();
; 2450 :             return;
; 2451 :         }
; 2452 : 
; 2453 :         // ignore requests to reserve to [_Small_string_capacity + 1, _Myres)
; 2454 :     }

  00120	5b		 pop	 ebx
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
$LN4@reserve:

; 2444 :             return;
; 2445 :         }
; 2446 : 
; 2447 :         if (_Newcap <= _Small_string_capacity && _Mypair._Myval2._Large_mode_engaged()) {

  00127	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  0012a	77 42		 ja	 SHORT $LN118@reserve

; 434  :         return _Myres > _Small_string_capacity;

  0012c	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 2444 :             return;
; 2445 :         }
; 2446 : 
; 2447 :         if (_Newcap <= _Small_string_capacity && _Mypair._Myval2._Large_mode_engaged()) {

  0012f	76 3d		 jbe	 SHORT $LN118@reserve

; 3030 :         const pointer _Ptr = _My_data._Bx._Ptr;

  00131	8b 3e		 mov	 edi, DWORD PTR [esi]

; 3031 :         _My_data._Bx._Switch_to_buf();
; 3032 :         _Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);

  00133	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00134	50		 push	 eax
  00135	57		 push	 edi
  00136	56		 push	 esi
  00137	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0013c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0013f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00142	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00143	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00149	72 12		 jb	 SHORT $LN98@reserve

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0014b	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0014e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00151	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00153	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00156	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00159	77 1c		 ja	 SHORT $LN95@reserve

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0015b	8b fa		 mov	 edi, edx
$LN98@reserve:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0015d	51		 push	 ecx
  0015e	57		 push	 edi
  0015f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00164	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3035 :         _My_data._Myres = _Small_string_capacity;

  00167	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
$LN118@reserve:
  0016e	5f		 pop	 edi
$LN5@reserve:
  0016f	5e		 pop	 esi

; 2448 :             // deallocate everything; switch back to "small" mode
; 2449 :             _Become_small();
; 2450 :             return;
; 2451 :         }
; 2452 : 
; 2453 :         // ignore requests to reserve to [_Small_string_capacity + 1, _Myres)
; 2454 :     }

  00170	5b		 pop	 ebx
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 04 00	 ret	 4
$LN95@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00177	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@reserve:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN119@reserve:
  00181	cc		 int	 3
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
tv515 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 2265 :     _CONSTEXPR20 void push_back(const _Elem _Ch) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 2266 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2267 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0000a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000d	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00010	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00013	3b d9		 cmp	 ebx, ecx
  00015	73 20		 jae	 SHORT $LN2@push_back

; 2268 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + 1);
; 2269 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00017	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 434  :         return _Myres > _Small_string_capacity;

  0001d	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00020	76 02		 jbe	 SHORT $LN5@push_back

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00022	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@push_back:

; 2270 :             _Elem* const _Ptr       = _Mypair._Myval2._Myptr();
; 2271 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00024	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00027	88 04 1e	 mov	 BYTE PTR [esi+ebx], al

; 2272 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0002a	c6 44 1e 01 00	 mov	 BYTE PTR [esi+ebx+1], 0
  0002f	5e		 pop	 esi

; 2285 :     }

  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN2@push_back:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00037	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  0003c	8b c2		 mov	 eax, edx
  0003e	2b c3		 sub	 eax, ebx
  00040	83 f8 01	 cmp	 eax, 1
  00043	0f 82 e6 00 00
	00		 jb	 $LN90@push_back
  00049	57		 push	 edi

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0004a	8d 7b 01	 lea	 edi, DWORD PTR [ebx+1]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0004d	83 cf 0f	 or	 edi, 15			; 0000000fH
  00050	3b fa		 cmp	 edi, edx

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00052	76 0f		 jbe	 SHORT $LN20@push_back

; 2944 :             return _Max;

  00054	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00059	8b fa		 mov	 edi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	eb 3f		 jmp	 SHORT $LN87@push_back
$LN20@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00063	8b c1		 mov	 eax, ecx
  00065	d1 e8		 shr	 eax, 1
  00067	2b d0		 sub	 edx, eax
  00069	3b ca		 cmp	 ecx, edx
  0006b	76 12		 jbe	 SHORT $LN21@push_back

; 2948 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	eb 23		 jmp	 SHORT $LN87@push_back
$LN21@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0007f	03 c1		 add	 eax, ecx
  00081	3b f8		 cmp	 edi, eax
  00083	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00086	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00089	85 c0		 test	 eax, eax
  0008b	74 1b		 je	 SHORT $LN86@push_back
$LN34@push_back:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0008d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00092	72 08		 jb	 SHORT $LN35@push_back

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009a	eb 06		 jmp	 SHORT $LN87@push_back
$LN35@push_back:

; 136  :         return ::operator new(_Bytes);

  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN87@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000a2	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  000a5	83 c4 04	 add	 esp, 4
$LN86@push_back:

; 3006 :         _My_data._Myres       = _New_capacity;

  000a8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ab	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  000ae	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax

; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b1	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  000b4	89 56 10	 mov	 DWORD PTR [esi+16], edx
  000b7	89 7d f4	 mov	 DWORD PTR tv515[ebp], edi

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000ba	53		 push	 ebx
  000bb	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  000be	76 4e		 jbe	 SHORT $LN13@push_back

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c0	8b 3e		 mov	 edi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR tv515[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  000cf	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  000d2	88 01		 mov	 BYTE PTR [ecx], al

; 2282 :                     _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  000d4	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d8	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  000db	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000dc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e2	72 12		 jb	 SHORT $LN63@push_back

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000e4	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000e7	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000ea	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ec	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000ef	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f2	77 40		 ja	 SHORT $LN60@push_back

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f4	8b fa		 mov	 edi, edx
$LN63@push_back:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f6	51		 push	 ecx
  000f7	57		 push	 edi
  000f8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000fd	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00100	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00103	89 06		 mov	 DWORD PTR [esi], eax
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi

; 2285 :     }

  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 04 00	 ret	 4
$LN13@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010e	56		 push	 esi
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  00115	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00118	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  0011b	88 07		 mov	 BYTE PTR [edi], al

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]

; 2282 :                     _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00120	c6 47 01 00	 mov	 BYTE PTR [edi+1], 0
  00124	5f		 pop	 edi

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00125	89 06		 mov	 DWORD PTR [esi], eax
  00127	5e		 pop	 esi

; 2285 :     }

  00128	5b		 pop	 ebx
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 04 00	 ret	 4
$LN90@push_back:

; 2994 :             _Xlen_string(); // result too long

  0012f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN60@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00134	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@push_back:
  00139	cc		 int	 3
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
tv512 = -12						; size = 4
$T1 = -8						; size = 4
__Old_size$1$ = -4					; size = 4
tv528 = -4						; size = 4
__Count$ = 8						; size = 4
$T2 = 8							; size = 4
tv517 = 8						; size = 4
__Ch$ = 12						; size = 1
tv519 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1513 :     _CONSTEXPR20 basic_string& append(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1514 :         // append _Count * _Ch
; 1515 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1516 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 30		 ja	 SHORT $LN2@append

; 1517 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1518 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 1519 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 1520 :             _Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  00031	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00034	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00038	53		 push	 ebx
  00039	50		 push	 eax
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1521 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00043	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1534 :     }

  00047	8b c7		 mov	 eax, edi
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00052	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00057	2b c1		 sub	 eax, ecx
  00059	3b c3		 cmp	 eax, ebx
  0005b	0f 82 17 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00061	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00064	83 ce 0f	 or	 esi, 15			; 0000000fH
  00067	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006d	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  0006f	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00074	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007f	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00081	8b c2		 mov	 eax, edx
  00083	d1 e8		 shr	 eax, 1
  00085	89 45 08	 mov	 DWORD PTR tv517[ebp], eax
  00088	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0008d	2b 45 08	 sub	 eax, DWORD PTR tv517[ebp]
  00090	3b d0		 cmp	 edx, eax
  00092	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00094	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00099	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a4	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a6	8b 45 08	 mov	 eax, DWORD PTR tv517[ebp]
  000a9	03 c2		 add	 eax, edx
  000ab	3b f0		 cmp	 esi, eax
  000ad	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b0	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b3	85 c0		 test	 eax, eax
  000b5	74 1b		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000b7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bc	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c4	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cf	83 c4 04	 add	 esp, 4
$LN95@append:

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000d2	83 7d f8 0f	 cmp	 DWORD PTR $T1[ebp], 15	; 0000000fH
  000d6	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000d9	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000dc	0f be 75 0c	 movsx	 esi, BYTE PTR __Ch$[ebp]
  000e0	89 75 0c	 mov	 DWORD PTR tv519[ebp], esi
  000e3	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e6	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000e9	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000ec	89 45 08	 mov	 DWORD PTR $T2[ebp], eax
  000ef	89 75 fc	 mov	 DWORD PTR tv528[ebp], esi
  000f2	89 55 f4	 mov	 DWORD PTR tv512[ebp], edx
  000f5	51		 push	 ecx
  000f6	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000f8	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fa	56		 push	 esi
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _memcpy

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00101	53		 push	 ebx
  00102	ff 75 0c	 push	 DWORD PTR tv519[ebp]
  00105	ff 75 fc	 push	 DWORD PTR tv528[ebp]
  00108	e8 00 00 00 00	 call	 _memset
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0010d	8b 45 f4	 mov	 eax, DWORD PTR tv512[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00110	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00113	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00116	41		 inc	 ecx

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00117	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00120	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00122	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00125	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00128	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012a	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0012d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00130	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00132	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00134	51		 push	 ecx
  00135	56		 push	 esi
  00136	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1525 :         return _Reallocate_grow_by(

  0013b	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0013e	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1525 :         return _Reallocate_grow_by(

  00141	89 07		 mov	 DWORD PTR [edi], eax

; 1534 :     }

  00143	8b c7		 mov	 eax, edi
  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0014e	57		 push	 edi
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 _memcpy

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00155	53		 push	 ebx
  00156	ff 75 0c	 push	 DWORD PTR tv519[ebp]
  00159	56		 push	 esi
  0015a	e8 00 00 00 00	 call	 _memset
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0015f	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00162	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00165	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1525 :         return _Reallocate_grow_by(

  00168	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  0016b	89 07		 mov	 DWORD PTR [edi], eax

; 1534 :     }

  0016d	8b c7		 mov	 eax, edi
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	5b		 pop	 ebx
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  00178	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00182	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv520 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
tv510 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv505 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv510[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv510[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv510[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR $T1[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv520[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv505[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv520[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv505[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0000b	8b f2		 mov	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1421 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00010	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL82@operator:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL82@operator
  0001a	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001c	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001f	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00022	3b f1		 cmp	 esi, ecx
  00024	77 26		 ja	 SHORT $LN9@operator

; 416  :         value_type* _Result = _Bx._Buf;

  00026	8b df		 mov	 ebx, edi

; 434  :         return _Myres > _Small_string_capacity;

  00028	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002b	76 02		 jbe	 SHORT $LN12@operator

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002d	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN12@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002f	56		 push	 esi
  00030	52		 push	 edx
  00031	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  00032	89 77 10	 mov	 DWORD PTR [edi+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003d	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 1422 :         return assign(_Ptr);

  00041	8b c7		 mov	 eax, edi

; 1423 :     }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN9@operator:

; 2962 :         if (_New_size > max_size()) {

  0004c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00052	0f 87 c7 00 00
	00		 ja	 $LN97@operator

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00058	8b de		 mov	 ebx, esi
  0005a	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0005d	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	76 12		 jbe	 SHORT $LN30@operator

; 2944 :             return _Max;

  00065	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006a	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00075	eb 45		 jmp	 SHORT $LN95@operator
$LN30@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00077	8b d1		 mov	 edx, ecx
  00079	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007e	d1 ea		 shr	 edx, 1
  00080	2b c2		 sub	 eax, edx
  00082	3b c8		 cmp	 ecx, eax
  00084	76 12		 jbe	 SHORT $LN31@operator

; 2948 :             return _Max;

  00086	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0008b	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00096	eb 24		 jmp	 SHORT $LN95@operator
$LN31@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00098	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0009b	3b d8		 cmp	 ebx, eax
  0009d	0f 42 d8	 cmovb	 ebx, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000a0	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000a3	85 c0		 test	 eax, eax
  000a5	74 18		 je	 SHORT $LN94@operator
$LN44@operator:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000a7	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ac	72 08		 jb	 SHORT $LN45@operator

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b4	eb 06		 jmp	 SHORT $LN95@operator
$LN45@operator:

; 136  :         return ::operator new(_Bytes);

  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN95@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000bc	83 c4 04	 add	 esp, 4
$LN94@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	56		 push	 esi
  000c0	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c3	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c6	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c7	89 77 10	 mov	 DWORD PTR [edi+16], esi

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000ca	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d2	8b 5d fc	 mov	 ebx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000d8	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000db	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000df	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000e2	76 29		 jbe	 SHORT $LN23@operator

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000e4	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	8b 07		 mov	 eax, DWORD PTR [edi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000e9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ef	72 12		 jb	 SHORT $LN73@operator

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f4	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f7	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f9	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ff	77 19		 ja	 SHORT $LN70@operator

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00101	8b c2		 mov	 eax, edx
$LN73@operator:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00103	51		 push	 ecx
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010a	83 c4 08	 add	 esp, 8
$LN23@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1604 :         return _Reallocate_for(

  0010d	89 1f		 mov	 DWORD PTR [edi], ebx

; 1422 :         return assign(_Ptr);

  0010f	8b c7		 mov	 eax, edi

; 1423 :     }

  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 04 00	 ret	 4
$LN70@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN97@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  0011f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN93@operator:
  00124	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 463  :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1771 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);
; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1777 : 
; 1778 :         __crt_va_end(_ArgList);
; 1779 :         return _Result;
; 1780 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);
; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 842  :         __crt_va_end(_ArgList);
; 843  :         return _Result;
; 844  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
