; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterBase\Distribute\lzo.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_dwFourCC@CLZObject@@2KA			; CLZObject::ms_dwFourCC
PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
_DATA	SEGMENT
?ms_dwFourCC@CLZObject@@2KA DD 05a4f434dH		; CLZObject::ms_dwFourCC
_DATA	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CLZObject@@QAE@XZ				; CLZObject::CLZObject
PUBLIC	??1CLZObject@@QAE@XZ				; CLZObject::~CLZObject
PUBLIC	?Clear@CLZObject@@QAEXXZ			; CLZObject::Clear
PUBLIC	?BeginCompress@CLZObject@@QAEXPBXI@Z		; CLZObject::BeginCompress
PUBLIC	?BeginCompressInBuffer@CLZObject@@QAEXPBXIPAX@Z	; CLZObject::BeginCompressInBuffer
PUBLIC	?Compress@CLZObject@@QAE_NXZ			; CLZObject::Compress
PUBLIC	?BeginDecompress@CLZObject@@QAE_NPBX@Z		; CLZObject::BeginDecompress
PUBLIC	?Decompress@CLZObject@@QAE_NPAK@Z		; CLZObject::Decompress
PUBLIC	?Encrypt@CLZObject@@QAE_NPAK@Z			; CLZObject::Encrypt
PUBLIC	?__Decrypt@CLZObject@@QAE_NPAKPAE@Z		; CLZObject::__Decrypt
PUBLIC	?GetSize@CLZObject@@QAEKXZ			; CLZObject::GetSize
PUBLIC	?AllocBuffer@CLZObject@@QAEXK@Z			; CLZObject::AllocBuffer
PUBLIC	?Initialize@CLZObject@@AAEXXZ			; CLZObject::Initialize
PUBLIC	??1?$CSingleton@VCLZO@@@@UAE@XZ			; CSingleton<CLZO>::~CSingleton<CLZO>
PUBLIC	??_G?$CSingleton@VCLZO@@@@UAEPAXI@Z		; CSingleton<CLZO>::`scalar deleting destructor'
PUBLIC	??0CLZO@@QAE@XZ					; CLZO::CLZO
PUBLIC	??1CLZO@@UAE@XZ					; CLZO::~CLZO
PUBLIC	?CompressMemory@CLZO@@QAE_NAAVCLZObject@@PBXI@Z	; CLZO::CompressMemory
PUBLIC	?CompressEncryptedMemory@CLZO@@QAE_NAAVCLZObject@@PBXIPAK@Z ; CLZO::CompressEncryptedMemory
PUBLIC	?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z	; CLZO::Decompress
PUBLIC	?GetWorkMemory@CLZO@@QAEPAEXZ			; CLZO::GetWorkMemory
PUBLIC	??_GCLZO@@UAEPAXI@Z				; CLZO::`scalar deleting destructor'
PUBLIC	?_Xlength@?$vector@PAEV?$allocator@PAE@std@@@std@@CAXXZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Xlength
PUBLIC	??1DecryptBuffer@@QAE@XZ			; DecryptBuffer::~DecryptBuffer
PUBLIC	??$_Emplace_reallocate@ABQAE@?$vector@PAEV?$allocator@PAE@std@@@std@@AAEPAPAEQAPAEABQAE@Z ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Emplace_reallocate<unsigned char * const &>
PUBLIC	??$_Copy_memmove@PAPAEPAPAE@std@@YAPAPAEPAPAE00@Z ; std::_Copy_memmove<unsigned char * *,unsigned char * *>
PUBLIC	??$_Copy_memmove_tail@PAPAE@std@@YAPAPAEQBDQAPAEII@Z ; std::_Copy_memmove_tail<unsigned char * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A	; CSingleton<CLZO>::ms_singleton
PUBLIC	??_7?$CSingleton@VCLZO@@@@6B@			; CSingleton<CLZO>::`vftable'
PUBLIC	??_7CLZO@@6B@					; CLZO::`vftable'
PUBLIC	??_C@_0BP@LNIOABIE@LZO?3?5lzo1x_999_compress?5failed@ ; `string'
PUBLIC	??_C@_0BL@BHMEHIOE@LZObject?3?5not?5a?5valid?5data@ ; `string'
PUBLIC	?count@?1???0DecryptBuffer@@QAE@I@Z@4IA		; `DecryptBuffer::DecryptBuffer'::`2'::count
PUBLIC	?sum@?1???0DecryptBuffer@@QAE@I@Z@4IA		; `DecryptBuffer::DecryptBuffer'::`2'::sum
PUBLIC	?maxSize@?1???0DecryptBuffer@@QAE@I@Z@4IA	; `DecryptBuffer::DecryptBuffer'::`2'::maxSize
PUBLIC	??_C@_0BI@LOICJMKN@LZObject?3?5key?5incorrect@	; `string'
PUBLIC	??_C@_0CN@JNKNGBBC@LZObject?3?5Decompress?5failed?$CIdec@ ; `string'
PUBLIC	??_C@_0DJ@JONLEDGH@LZObject?3?5Decompress?5failed?5?3?5r@ ; `string'
PUBLIC	??_C@_0BH@MGOIPKD@LZObject?3?5Size?5differs@	; `string'
PUBLIC	??_C@_0BH@CNLKBJA@LZO?3?5cannot?5initialize@	; `string'
PUBLIC	??_C@_0BJ@HNOINGEF@LZO?3?5cannot?5alloc?5memory@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CLZO@@6B@					; CLZO::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLZO@@@8				; CLZO `RTTI Type Descriptor'
PUBLIC	??_R3CLZO@@8					; CLZO::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLZO@@8					; CLZO::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLZO@@8				; CLZO::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCLZO@@@@8		; CSingleton<CLZO>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCLZO@@@@@8		; CSingleton<CLZO> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCLZO@@@@8			; CSingleton<CLZO>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCLZO@@@@8			; CSingleton<CLZO>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCLZO@@@@6B@			; CSingleton<CLZO>::`RTTI Complete Object Locator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	___lzo_init_v2:PROC
EXTRN	_lzo1x_decompress:PROC
EXTRN	_lzo1x_999_compress:PROC
EXTRN	??_E?$CSingleton@VCLZO@@@@UAEPAXI@Z:PROC	; CSingleton<CLZO>::`vector deleting destructor'
EXTRN	??_ECLZO@@UAEPAXI@Z:PROC			; CLZO::`vector deleting destructor'
EXTRN	_tea_encrypt:PROC
EXTRN	_tea_decrypt:PROC
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A DD 01H DUP (?) ; CSingleton<CLZO>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A DB 0cH DUP (?)	; gs_freeMemMgr
_BSS	ENDS
;	COMDAT ?count@?1???0DecryptBuffer@@QAE@I@Z@4IA
_BSS	SEGMENT
?count@?1???0DecryptBuffer@@QAE@I@Z@4IA DD 01H DUP (?)	; `DecryptBuffer::DecryptBuffer'::`2'::count
_BSS	ENDS
;	COMDAT ?sum@?1???0DecryptBuffer@@QAE@I@Z@4IA
_BSS	SEGMENT
?sum@?1???0DecryptBuffer@@QAE@I@Z@4IA DD 01H DUP (?)	; `DecryptBuffer::DecryptBuffer'::`2'::sum
_BSS	ENDS
;	COMDAT ?maxSize@?1???0DecryptBuffer@@QAE@I@Z@4IA
_BSS	SEGMENT
?maxSize@?1???0DecryptBuffer@@QAE@I@Z@4IA DD 01H DUP (?) ; `DecryptBuffer::DecryptBuffer'::`2'::maxSize
_BSS	ENDS
CRT$XCU	SEGMENT
?gs_freeMemMgr$initializer$@@3P6AXXZA DD FLAT:??__Egs_freeMemMgr@@YAXXZ ; gs_freeMemMgr$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R4?$CSingleton@VCLZO@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCLZO@@@@6B@ DD 00H			; CSingleton<CLZO>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCLZO@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCLZO@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCLZO@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCLZO@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCLZO@@@@8 ; CSingleton<CLZO>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCLZO@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCLZO@@@@8 DD 00H			; CSingleton<CLZO>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCLZO@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCLZO@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCLZO@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CLZO> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCLZO@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCLZO@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCLZO@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCLZO@@@@@8 ; CSingleton<CLZO>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCLZO@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLZO@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLZO@@8 DD FLAT:??_R0?AVCLZO@@@8		; CLZO::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLZO@@8
rdata$r	ENDS
;	COMDAT ??_R2CLZO@@8
rdata$r	SEGMENT
??_R2CLZO@@8 DD	FLAT:??_R1A@?0A@EA@CLZO@@8		; CLZO::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCLZO@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CLZO@@8
rdata$r	SEGMENT
??_R3CLZO@@8 DD	00H					; CLZO::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CLZO@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLZO@@@8
data$rs	SEGMENT
??_R0?AVCLZO@@@8 DD FLAT:??_7type_info@@6B@		; CLZO `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLZO@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLZO@@6B@
rdata$r	SEGMENT
??_R4CLZO@@6B@ DD 00H					; CLZO::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLZO@@@8
	DD	FLAT:??_R3CLZO@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HNOINGEF@LZO?3?5cannot?5alloc?5memory@
CONST	SEGMENT
??_C@_0BJ@HNOINGEF@LZO?3?5cannot?5alloc?5memory@ DB 'LZO: cannot alloc me'
	DB	'mory', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CNLKBJA@LZO?3?5cannot?5initialize@
CONST	SEGMENT
??_C@_0BH@CNLKBJA@LZO?3?5cannot?5initialize@ DB 'LZO: cannot initialize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MGOIPKD@LZObject?3?5Size?5differs@
CONST	SEGMENT
??_C@_0BH@MGOIPKD@LZObject?3?5Size?5differs@ DB 'LZObject: Size differs', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@JONLEDGH@LZObject?3?5Decompress?5failed?5?3?5r@
CONST	SEGMENT
??_C@_0DJ@JONLEDGH@LZObject?3?5Decompress?5failed?5?3?5r@ DB 'LZObject: D'
	DB	'ecompress failed : ret %d, CompressedSize %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JNKNGBBC@LZObject?3?5Decompress?5failed?$CIdec@
CONST	SEGMENT
??_C@_0CN@JNKNGBBC@LZObject?3?5Decompress?5failed?$CIdec@ DB 'LZObject: D'
	DB	'ecompress failed(decrypt) ret %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LOICJMKN@LZObject?3?5key?5incorrect@
CONST	SEGMENT
??_C@_0BI@LOICJMKN@LZObject?3?5key?5incorrect@ DB 'LZObject: key incorrec'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BHMEHIOE@LZObject?3?5not?5a?5valid?5data@
CONST	SEGMENT
??_C@_0BL@BHMEHIOE@LZObject?3?5not?5a?5valid?5data@ DB 'LZObject: not a v'
	DB	'alid data', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LNIOABIE@LZO?3?5lzo1x_999_compress?5failed@
CONST	SEGMENT
??_C@_0BP@LNIOABIE@LZO?3?5lzo1x_999_compress?5failed@ DB 'LZO: lzo1x_999_'
	DB	'compress failed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CLZO@@6B@
CONST	SEGMENT
??_7CLZO@@6B@ DD FLAT:??_R4CLZO@@6B@			; CLZO::`vftable'
	DD	FLAT:??_ECLZO@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCLZO@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCLZO@@@@6B@ DD FLAT:??_R4?$CSingleton@VCLZO@@@@6B@ ; CSingleton<CLZO>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCLZO@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLZO@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLZO@@QAE@XZ$0
__ehfuncinfo$??0CLZO@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CLZO@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Decompress@CLZObject@@QAE_NPAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Decompress@CLZObject@@QAE_NPAK@Z$0
__ehfuncinfo$?Decompress@CLZObject@@QAE_NPAK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Decompress@CLZObject@@QAE_NPAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CLZObject@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAE@std@@YAPAPAEQBDQAPAEII@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAE@std@@YAPAPAEQBDQAPAEII@Z PROC ; std::_Copy_memmove_tail<unsigned char * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAE@std@@YAPAPAEQBDQAPAEII@Z ENDP ; std::_Copy_memmove_tail<unsigned char * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAEPAPAE@std@@YAPAPAEPAPAE00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAEPAPAE@std@@YAPAPAEPAPAE00@Z PROC	; std::_Copy_memmove<unsigned char * *,unsigned char * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAE@std@@YAPAPAEQBDQAPAEII@Z ; std::_Copy_memmove_tail<unsigned char * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAEPAPAE@std@@YAPAPAEPAPAE00@Z ENDP	; std::_Copy_memmove<unsigned char * *,unsigned char * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAE@?$vector@PAEV?$allocator@PAE@std@@@std@@AAEPAPAEQAPAEABQAE@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv652 = -8						; size = 4
tv650 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAE@?$vector@PAEV?$allocator@PAE@std@@@std@@AAEPAPAEQAPAEABQAE@Z PROC ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Emplace_reallocate<unsigned char * const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 09 01 00
	00		 je	 $LN123@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004a	c7 45 f8 fc ff
	ff ff		 mov	 DWORD PTR tv652[ebp], -4 ; fffffffcH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN121@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00069	0f 87 c7 00 00
	00		 ja	 $LN124@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00076	89 45 f8	 mov	 DWORD PTR tv652[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN121@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN121@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0009e	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 01		 mov	 DWORD PTR [ecx], eax
  000ab	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b4	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b7	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b9	eb 16		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	57		 push	 edi
  000bc	53		 push	 ebx
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAEPAPAE@std@@YAPAPAEPAPAE00@Z ; std::_Copy_memmove<unsigned char * *,unsigned char * *>
  000c3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c6	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c8	8b 5d fc	 mov	 ebx, DWORD PTR tv650[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN52@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d1	52		 push	 edx
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAEPAPAE@std@@YAPAPAEPAPAE00@Z ; std::_Copy_memmove<unsigned char * *,unsigned char * *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000d9	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000db	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000de	85 c0		 test	 eax, eax
  000e0	74 2c		 je	 SHORT $LN72@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e5	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e7	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ea	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f0	72 12		 jb	 SHORT $LN83@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f5	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fa	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fd	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00100	77 2a		 ja	 SHORT $LN80@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00102	8b c2		 mov	 eax, edx
$LN83@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00104	51		 push	 ecx
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010b	83 c4 08	 add	 esp, 8
$LN72@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0010e	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00111	89 3e		 mov	 DWORD PTR [esi], edi
  00113	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  00116	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00118	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011b	8b 4d f8	 mov	 ecx, DWORD PTR tv652[ebp]
  0011e	03 cf		 add	 ecx, edi

; 903  :     }

  00120	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN123@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00131	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAEV?$allocator@PAE@std@@@std@@CAXXZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Xlength
$LN124@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00136	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN120@Emplace_re:
  0013b	cc		 int	 3
??$_Emplace_reallocate@ABQAE@?$vector@PAEV?$allocator@PAE@std@@@std@@AAEPAPAEQAPAEABQAE@Z ENDP ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Emplace_reallocate<unsigned char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ??1DecryptBuffer@@QAE@XZ
_TEXT	SEGMENT
??1DecryptBuffer@@QAE@XZ PROC				; DecryptBuffer::~DecryptBuffer, COMDAT
; _this$ = ecx

; 235  : 		if (m_local_buf != m_buf)

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00005	3b c2		 cmp	 eax, edx
  00007	74 07		 je	 SHORT $LN2@DecryptBuf

; 236  : 		{
; 237  : 			dbg_printf("DecruptBuffer - FreeHeap\n");
; 238  : 			delete [] m_buf;

  00009	52		 push	 edx
  0000a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0000f	59		 pop	 ecx
$LN2@DecryptBuf:

; 239  : 		}
; 240  : 		else
; 241  : 		{
; 242  : 			dbg_printf("DecruptBuffer - FreeStack\n");
; 243  : 		}
; 244  : 	}

  00010	c3		 ret	 0
??1DecryptBuffer@@QAE@XZ ENDP				; DecryptBuffer::~DecryptBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??__Fgs_freeMemMgr@@YAXXZ
text$yd	SEGMENT
??__Fgs_freeMemMgr@@YAXXZ PROC				; `dynamic atexit destructor for 'gs_freeMemMgr'', COMDAT
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00000	a1 04 00 00 00	 mov	 eax, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4
  00005	56		 push	 esi
  00006	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A
  0000c	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 22   : 		for (i = m_freeVector.begin(); i != m_freeVector.end(); ++i)

  0000e	74 28		 je	 SHORT $LN47@dynamic
$LL6@dynamic:

; 23   : 			delete *i;

  00010	6a 01		 push	 1
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00019	a1 04 00 00 00	 mov	 eax, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4

; 82   :         ++_Ptr;

  0001e	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 23   : 			delete *i;

  00021	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 166  :         return _Ptr == _Right._Ptr;

  00024	3b f0		 cmp	 esi, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 22   : 		for (i = m_freeVector.begin(); i != m_freeVector.end(); ++i)

  00026	75 e8		 jne	 SHORT $LL6@dynamic
  00028	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002e	3b f0		 cmp	 esi, eax
  00030	74 06		 je	 SHORT $LN47@dynamic

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00032	89 35 04 00 00
	00		 mov	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4, esi
$LN47@dynamic:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00038	85 f6		 test	 esi, esi
  0003a	74 4d		 je	 SHORT $LN55@dynamic

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003c	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00042	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00044	2b ce		 sub	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00046	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00049	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0004f	72 10		 jb	 SHORT $LN74@dynamic

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00051	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  00054	83 c1 23	 add	 ecx, 35			; 00000023H
  00057	2b c6		 sub	 eax, esi

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00059	83 c0 fc	 add	 eax, -4			; fffffffcH
  0005c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0005f	77 2a		 ja	 SHORT $LN94@dynamic
$LN74@dynamic:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00061	51		 push	 ecx
  00062	56		 push	 esi
  00063	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00068	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0006b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A, 0

; 2081 :             _Mylast  = nullptr;

  00075	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4, 0

; 2082 :             _Myend   = nullptr;

  0007f	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+8, 0
$LN55@dynamic:
  00089	5e		 pop	 esi
  0008a	c3		 ret	 0
$LN94@dynamic:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN91@dynamic:
  00090	cc		 int	 3
??__Fgs_freeMemMgr@@YAXXZ ENDP				; `dynamic atexit destructor for 'gs_freeMemMgr''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ??__Egs_freeMemMgr@@YAXXZ
text$di	SEGMENT
??__Egs_freeMemMgr@@YAXXZ PROC				; `dynamic initializer for 'gs_freeMemMgr'', COMDAT

; 64   : } gs_freeMemMgr;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_freeMemMgr@@YAXXZ ; `dynamic atexit destructor for 'gs_freeMemMgr''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_freeMemMgr@@YAXXZ ENDP				; `dynamic initializer for 'gs_freeMemMgr''
text$di	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAEV?$allocator@PAE@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAEV?$allocator@PAE@std@@@std@@CAXXZ PROC ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAEV?$allocator@PAE@std@@@std@@CAXXZ ENDP ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLZO@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLZO@@UAEPAXI@Z PROC				; CLZO::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLZO@@UAE@XZ		; CLZO::~CLZO
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 08		 push	 8
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCLZO@@UAEPAXI@Z ENDP				; CLZO::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?GetWorkMemory@CLZO@@QAEPAEXZ
_TEXT	SEGMENT
?GetWorkMemory@CLZO@@QAEPAEXZ PROC			; CLZO::GetWorkMemory, COMDAT
; _this$ = ecx

; 403  :     return m_pWorkMem;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 404  : }

  00003	c3		 ret	 0
?GetWorkMemory@CLZO@@QAEPAEXZ ENDP			; CLZO::GetWorkMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z
_TEXT	SEGMENT
_rObj$ = 8						; size = 4
_pbBuf$ = 12						; size = 4
_pdwKey$ = 16						; size = 4
?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z PROC	; CLZO::Decompress, COMDAT
; _this$ = ecx

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 391  :     if (!rObj.BeginDecompress(pbBuf))

  00003	ff 75 0c	 push	 DWORD PTR _pbBuf$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _rObj$[ebp]
  00009	e8 00 00 00 00	 call	 ?BeginDecompress@CLZObject@@QAE_NPBX@Z ; CLZObject::BeginDecompress
  0000e	84 c0		 test	 al, al
  00010	74 14		 je	 SHORT $LN5@Decompress

; 392  : 		return false;
; 393  : 
; 394  :     if (!rObj.Decompress(pdwKey))

  00012	ff 75 10	 push	 DWORD PTR _pdwKey$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _rObj$[ebp]
  00018	e8 00 00 00 00	 call	 ?Decompress@CLZObject@@QAE_NPAK@Z ; CLZObject::Decompress
  0001d	84 c0		 test	 al, al
  0001f	0f 95 c0	 setne	 al

; 396  : 
; 397  :     return true;
; 398  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Decompress:

; 395  : 		return false;

  00026	32 c0		 xor	 al, al

; 396  : 
; 397  :     return true;
; 398  : }

  00028	5d		 pop	 ebp
  00029	c2 0c 00	 ret	 12			; 0000000cH
?Decompress@CLZO@@QAE_NAAVCLZObject@@PBEPAK@Z ENDP	; CLZO::Decompress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?CompressEncryptedMemory@CLZO@@QAE_NAAVCLZObject@@PBXIPAK@Z
_TEXT	SEGMENT
_rObj$ = 8						; size = 4
_pIn$ = 12						; size = 4
_uiInLen$ = 16						; size = 4
_pdwKey$ = 20						; size = 4
?CompressEncryptedMemory@CLZO@@QAE_NAAVCLZObject@@PBXIPAK@Z PROC ; CLZO::CompressEncryptedMemory, COMDAT
; _this$ = ecx

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 376  :     rObj.BeginCompress(pIn, uiInLen);

  00004	ff 75 10	 push	 DWORD PTR _uiInLen$[ebp]
  00007	8b 75 08	 mov	 esi, DWORD PTR _rObj$[ebp]
  0000a	8b ce		 mov	 ecx, esi
  0000c	ff 75 0c	 push	 DWORD PTR _pIn$[ebp]
  0000f	e8 00 00 00 00	 call	 ?BeginCompress@CLZObject@@QAEXPBXI@Z ; CLZObject::BeginCompress

; 377  : 
; 378  :     if (rObj.Compress())

  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ?Compress@CLZObject@@QAE_NXZ ; CLZObject::Compress
  0001b	84 c0		 test	 al, al
  0001d	74 15		 je	 SHORT $LN2@CompressEn

; 379  :     {
; 380  : 		if (rObj.Encrypt(pdwKey))

  0001f	ff 75 14	 push	 DWORD PTR _pdwKey$[ebp]
  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?Encrypt@CLZObject@@QAE_NPAK@Z ; CLZObject::Encrypt
  00029	84 c0		 test	 al, al
  0002b	74 07		 je	 SHORT $LN2@CompressEn

; 381  : 			return true;

  0002d	b0 01		 mov	 al, 1
  0002f	5e		 pop	 esi

; 387  : }

  00030	5d		 pop	 ebp
  00031	c2 10 00	 ret	 16			; 00000010H
$LN2@CompressEn:

; 382  : 
; 383  : 		return false;
; 384  :     }
; 385  : 
; 386  :     return false;

  00034	32 c0		 xor	 al, al
  00036	5e		 pop	 esi

; 387  : }

  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
?CompressEncryptedMemory@CLZO@@QAE_NAAVCLZObject@@PBXIPAK@Z ENDP ; CLZO::CompressEncryptedMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?CompressMemory@CLZO@@QAE_NAAVCLZObject@@PBXI@Z
_TEXT	SEGMENT
_rObj$ = 8						; size = 4
_pIn$ = 12						; size = 4
_uiInLen$ = 16						; size = 4
?CompressMemory@CLZO@@QAE_NAAVCLZObject@@PBXI@Z PROC	; CLZO::CompressMemory, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 370  :     rObj.BeginCompress(pIn, uiInLen);

  00003	ff 75 10	 push	 DWORD PTR _uiInLen$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _rObj$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR _pIn$[ebp]
  0000c	e8 00 00 00 00	 call	 ?BeginCompress@CLZObject@@QAEXPBXI@Z ; CLZObject::BeginCompress

; 371  :     return rObj.Compress();

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _rObj$[ebp]
  00014	e8 00 00 00 00	 call	 ?Compress@CLZObject@@QAE_NXZ ; CLZObject::Compress

; 372  : }

  00019	5d		 pop	 ebp
  0001a	c2 0c 00	 ret	 12			; 0000000cH
?CompressMemory@CLZO@@QAE_NAAVCLZObject@@PBXI@Z ENDP	; CLZO::CompressMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ??1CLZO@@UAE@XZ
_TEXT	SEGMENT
??1CLZO@@UAE@XZ PROC					; CLZO::~CLZO, COMDAT
; _this$ = ecx

; 360  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 361  :     if (m_pWorkMem)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLZO@@6B@
  0000c	85 c0		 test	 eax, eax
  0000e	74 10		 je	 SHORT $LN8@CLZO

; 362  :     {
; 363  : 		free(m_pWorkMem);

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _free
  00016	83 c4 04	 add	 esp, 4

; 364  : 		m_pWorkMem = NULL;

  00019	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN8@CLZO:

; 365  :     }
; 366  : }

  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCLZO@@@@6B@
  00026	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A, 0 ; CSingleton<CLZO>::ms_singleton
  00030	5e		 pop	 esi
  00031	c3		 ret	 0
??1CLZO@@UAE@XZ ENDP					; CLZO::~CLZO
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Singleton.h
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ??0CLZO@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLZO@@QAE@XZ PROC					; CLZO::CLZO, COMDAT
; _this$ = ecx

; 339  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CLZO@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00029	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A, esi ; CSingleton<CLZO>::ms_singleton
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 340  :     if (lzo_init() != LZO_E_OK)

  0002f	6a 18		 push	 24			; 00000018H
  00031	6a 04		 push	 4
  00033	6a 04		 push	 4
  00035	6a 04		 push	 4
  00037	6a 04		 push	 4
  00039	6a 04		 push	 4
  0003b	6a 04		 push	 4
  0003d	6a 04		 push	 4
  0003f	6a 02		 push	 2
  00041	68 a0 20 00 00	 push	 8352			; 000020a0H
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLZO@@6B@
  00053	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0005a	e8 00 00 00 00	 call	 ___lzo_init_v2
  0005f	83 c4 28	 add	 esp, 40			; 00000028H
  00062	85 c0		 test	 eax, eax
  00064	74 07		 je	 SHORT $LN2@CLZO

; 341  :     {
; 342  : 		TraceError("LZO: cannot initialize");

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CNLKBJA@LZO?3?5cannot?5initialize@

; 343  : 		return;

  0006b	eb 19		 jmp	 SHORT $LN10@CLZO
$LN2@CLZO:

; 344  :     }
; 345  : 
; 346  : #if defined( LZO1X_999_MEM_COMPRESS )
; 347  :     m_pWorkMem = (BYTE *) malloc(LZO1X_999_MEM_COMPRESS);

  0006d	68 00 00 07 00	 push	 458752			; 00070000H
  00072	e8 00 00 00 00	 call	 _malloc
  00077	83 c4 04	 add	 esp, 4
  0007a	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 348  : #else
; 349  :     m_pWorkMem = (BYTE *) malloc(LZO1X_1_MEM_COMPRESS);
; 350  : #endif
; 351  : 
; 352  :     if (NULL == m_pWorkMem)

  0007d	85 c0		 test	 eax, eax
  0007f	75 0d		 jne	 SHORT $LN8@CLZO

; 353  :     {
; 354  : 		TraceError("LZO: cannot alloc memory");

  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@HNOINGEF@LZO?3?5cannot?5alloc?5memory@
$LN10@CLZO:

; 355  : 		return;
; 356  :     }
; 357  : }

  00086	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0008b	83 c4 04	 add	 esp, 4
$LN8@CLZO:
  0008e	8b c6		 mov	 eax, esi
  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	5e		 pop	 esi
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLZO@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCLZO@@@@UAE@XZ ; CSingleton<CLZO>::~CSingleton<CLZO>
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CLZO@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CLZO@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CLZO@@QAE@XZ ENDP					; CLZO::CLZO
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCLZO@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCLZO@@@@UAEPAXI@Z PROC		; CSingleton<CLZO>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCLZO@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A, 0 ; CSingleton<CLZO>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN8@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCLZO@@@@UAEPAXI@Z ENDP		; CSingleton<CLZO>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCLZO@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCLZO@@@@UAE@XZ PROC			; CSingleton<CLZO>::~CSingleton<CLZO>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCLZO@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A, 0 ; CSingleton<CLZO>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCLZO@@@@UAE@XZ ENDP			; CSingleton<CLZO>::~CSingleton<CLZO>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?Initialize@CLZObject@@AAEXXZ
_TEXT	SEGMENT
?Initialize@CLZObject@@AAEXXZ PROC			; CLZObject::Initialize, COMDAT
; _this$ = ecx

; 77   : 	m_bInBuffer = false;
; 78   :     m_pbBuffer = NULL;
; 79   :     m_dwBufferSize = 0;
; 80   : 
; 81   :     m_pHeader = NULL;
; 82   :     m_pbIn = NULL;
; 83   :     m_bCompressed = false;

  00000	66 c7 41 10 00
	00		 mov	 WORD PTR [ecx+16], 0
  00006	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000c	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 84   : }

  00021	c3		 ret	 0
?Initialize@CLZObject@@AAEXXZ ENDP			; CLZObject::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?AllocBuffer@CLZObject@@QAEXK@Z
_TEXT	SEGMENT
_ptr$ = -4						; size = 4
_dwSrcSize$ = 8						; size = 4
?AllocBuffer@CLZObject@@QAEXK@Z PROC			; CLZObject::AllocBuffer, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 324  :     if (m_pbBuffer && !m_bInBuffer)

  00008	8b 06		 mov	 eax, DWORD PTR [esi]
  0000a	85 c0		 test	 eax, eax
  0000c	74 45		 je	 SHORT $LN27@AllocBuffe
  0000e	80 7e 11 00	 cmp	 BYTE PTR [esi+17], 0
  00012	75 3f		 jne	 SHORT $LN27@AllocBuffe

; 52   : 		if (capacity < REUSING_CAPACITY)

  00014	81 7e 04 00 00
	01 00		 cmp	 DWORD PTR [esi+4], 65536 ; 00010000H

; 325  : 		gs_freeMemMgr.Free(m_pbBuffer, m_dwBufferSize);

  0001b	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax

; 52   : 		if (capacity < REUSING_CAPACITY)

  0001e	73 2a		 jae	 SHORT $LN5@AllocBuffe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00020	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4
  00026	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+8
  0002c	74 0b		 je	 SHORT $LN10@AllocBuffe

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0002e	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00030	83 05 04 00 00
	00 04		 add	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4, 4

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00037	eb 1a		 jmp	 SHORT $LN27@AllocBuffe
$LN10@AllocBuffe:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00039	8d 45 fc	 lea	 eax, DWORD PTR _ptr$[ebp]
  0003c	50		 push	 eax
  0003d	51		 push	 ecx
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A
  00043	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAE@?$vector@PAEV?$allocator@PAE@std@@@std@@AAEPAPAEQAPAEABQAE@Z ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Emplace_reallocate<unsigned char * const &>
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 56   : 			return;

  00048	eb 09		 jmp	 SHORT $LN27@AllocBuffe
$LN5@AllocBuffe:

; 57   : 		}
; 58   : 
; 59   : 		dbg_printf("lzo.real_free\t%p(%d)\n", ptr, capacity);
; 60   : 		delete [] ptr;

  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00050	83 c4 04	 add	 esp, 4
$LN27@AllocBuffe:

; 30   : 		if (capacity < REUSING_CAPACITY)

  00053	8b 7d 08	 mov	 edi, DWORD PTR _dwSrcSize$[ebp]
  00056	81 ff 00 00 01
	00		 cmp	 edi, 65536		; 00010000H
  0005c	73 2c		 jae	 SHORT $LN15@AllocBuffe
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0005e	a1 04 00 00 00	 mov	 eax, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4
  00063	39 05 00 00 00
	00		 cmp	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 32   : 			if (!m_freeVector.empty())

  00069	74 18		 je	 SHORT $LN16@AllocBuffe

; 33   : 			{
; 34   : 				BYTE* freeMem = m_freeVector.back();

  0006b	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1974 :         return _My_data._Mylast[-1];

  0006e	83 c0 fc	 add	 eax, -4			; fffffffcH

; 1744 :         --_Mylast;

  00071	a3 04 00 00 00	 mov	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 329  : }

  00076	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00079	5f		 pop	 edi
  0007a	89 0e		 mov	 DWORD PTR [esi], ecx
  0007c	5e		 pop	 esi
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
$LN16@AllocBuffe:

; 40   : 			BYTE* newMem = new BYTE[REUSING_CAPACITY];

  00083	68 00 00 01 00	 push	 65536			; 00010000H

; 41   : 			dbg_printf("lzo.reuse_alloc\t%p(%d) real\n", newMem, capacity);
; 42   : 			return newMem;

  00088	eb 01		 jmp	 SHORT $LN35@AllocBuffe
$LN15@AllocBuffe:

; 43   : 		}
; 44   : 		BYTE* newMem = new BYTE[capacity];

  0008a	57		 push	 edi
$LN35@AllocBuffe:

; 329  : }

  0008b	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00090	83 c4 04	 add	 esp, 4
  00093	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00096	89 06		 mov	 DWORD PTR [esi], eax
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
?AllocBuffer@CLZObject@@QAEXK@Z ENDP			; CLZObject::AllocBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?GetSize@CLZObject@@QAEKXZ
_TEXT	SEGMENT
?GetSize@CLZObject@@QAEKXZ PROC				; CLZObject::GetSize, COMDAT
; _this$ = ecx

; 106  : 	assert(m_pHeader);
; 107  : 
; 108  : 	if (m_bCompressed)

  00000	80 79 10 00	 cmp	 BYTE PTR [ecx+16], 0
  00004	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00007	74 12		 je	 SHORT $LN2@GetSize

; 109  : 	{
; 110  : 		if (m_pHeader->dwEncryptSize)

  00009	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 04		 je	 SHORT $LN4@GetSize

; 111  : 			return sizeof(THeader) + sizeof(DWORD) + m_pHeader->dwEncryptSize;

  00010	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]

; 117  : }

  00013	c3		 ret	 0
$LN4@GetSize:

; 112  : 		else
; 113  : 			return sizeof(THeader) + sizeof(DWORD) + m_pHeader->dwCompressedSize;

  00014	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00017	83 c0 14	 add	 eax, 20			; 00000014H

; 117  : }

  0001a	c3		 ret	 0
$LN2@GetSize:

; 114  : 	}
; 115  : 	else
; 116  : 		return m_pHeader->dwRealSize;

  0001b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 117  : }

  0001e	c3		 ret	 0
?GetSize@CLZObject@@QAEKXZ ENDP				; CLZObject::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?__Decrypt@CLZObject@@QAE_NPAKPAE@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
_data$ = 12						; size = 4
?__Decrypt@CLZObject@@QAE_NPAKPAE@Z PROC		; CLZObject::__Decrypt, COMDAT
; _this$ = ecx

; 315  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 316  :     assert(m_pbBuffer);
; 317  : 
; 318  :     tea_decrypt((DWORD *) data, (const DWORD *) (m_pbIn - sizeof(DWORD)), key, m_pHeader->dwEncryptSize);

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	ff 70 04	 push	 DWORD PTR [eax+4]
  00009	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000c	ff 75 08	 push	 DWORD PTR _key$[ebp]
  0000f	83 e8 04	 sub	 eax, 4
  00012	50		 push	 eax
  00013	ff 75 0c	 push	 DWORD PTR _data$[ebp]
  00016	e8 00 00 00 00	 call	 _tea_decrypt
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 319  :     return true;

  0001e	b0 01		 mov	 al, 1

; 320  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?__Decrypt@CLZObject@@QAE_NPAKPAE@Z ENDP		; CLZObject::__Decrypt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?Encrypt@CLZObject@@QAE_NPAK@Z
_TEXT	SEGMENT
_pdwKey$ = 8						; size = 4
?Encrypt@CLZObject@@QAE_NPAK@Z PROC			; CLZObject::Encrypt, COMDAT
; _this$ = ecx

; 302  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 303  :     if (!m_bCompressed)

  00006	80 7e 10 00	 cmp	 BYTE PTR [esi+16], 0
  0000a	75 07		 jne	 SHORT $LN2@Encrypt

; 304  :     {
; 305  : 		assert(!"not compressed yet");
; 306  : 		return false;

  0000c	32 c0		 xor	 al, al
  0000e	5e		 pop	 esi

; 312  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@Encrypt:

; 307  :     }
; 308  : 
; 309  :     BYTE * pbBuffer = m_pbBuffer + sizeof(THeader);
; 310  :     m_pHeader->dwEncryptSize = tea_encrypt((DWORD *) pbBuffer, (const DWORD *) pbBuffer, pdwKey, m_pHeader->dwCompressedSize + 19);

  00013	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00016	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00018	83 c1 10	 add	 ecx, 16			; 00000010H
  0001b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001e	83 c0 13	 add	 eax, 19			; 00000013H
  00021	50		 push	 eax
  00022	ff 75 08	 push	 DWORD PTR _pdwKey$[ebp]
  00025	51		 push	 ecx
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 _tea_encrypt
  0002c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002f	83 c4 10	 add	 esp, 16			; 00000010H
  00032	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 311  :     return true;

  00035	b0 01		 mov	 al, 1
  00037	5e		 pop	 esi

; 312  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?Encrypt@CLZObject@@QAE_NPAK@Z ENDP			; CLZObject::Encrypt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?Decompress@CLZObject@@QAE_NPAK@Z
_TEXT	SEGMENT
_uiSize$ = -8216					; size = 4
_buf$2 = -8212						; size = 8196
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pdwKey$ = 8						; size = 4
?Decompress@CLZObject@@QAE_NPAK@Z PROC			; CLZObject::Decompress, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Decompress@CLZObject@@QAE_NPAK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 0c 20 00 00	 mov	 eax, 8204		; 0000200cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b f9		 mov	 edi, ecx

; 257  :     UINT uiSize;
; 258  :     int r;
; 259  : 
; 260  :     if (m_pHeader->dwEncryptSize)

  00034	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00037	8b 5d 08	 mov	 ebx, DWORD PTR _pdwKey$[ebp]
  0003a	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0003d	85 c9		 test	 ecx, ecx
  0003f	0f 84 f0 00 00
	00		 je	 $LN2@Decompress

; 221  : 		maxSize = max(size, maxSize);

  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?maxSize@?1???0DecryptBuffer@@QAE@I@Z@4IA ; `DecryptBuffer::DecryptBuffer'::`2'::maxSize
  0004a	01 0d 00 00 00
	00		 add	 DWORD PTR ?sum@?1???0DecryptBuffer@@QAE@I@Z@4IA, ecx ; `DecryptBuffer::DecryptBuffer'::`2'::sum
  00050	ff 05 00 00 00
	00		 inc	 DWORD PTR ?count@?1???0DecryptBuffer@@QAE@I@Z@4IA ; `DecryptBuffer::DecryptBuffer'::`2'::count
  00056	3b c8		 cmp	 ecx, eax
  00058	0f 47 c1	 cmova	 eax, ecx
  0005b	a3 00 00 00 00	 mov	 DWORD PTR ?maxSize@?1???0DecryptBuffer@@QAE@I@Z@4IA, eax ; `DecryptBuffer::DecryptBuffer'::`2'::maxSize

; 222  : 		if (size >= LOCAL_BUF_SIZE)

  00060	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00066	72 0d		 jb	 SHORT $LN12@Decompress

; 223  : 		{
; 224  : 			m_buf = new char[size];

  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0006e	83 c4 04	 add	 esp, 4
  00071	8b f0		 mov	 esi, eax

; 225  : 			dbg_printf("DecryptBuffer - AllocHeap %d max(%d) ave(%d)\n", size, maxSize/1024, sum/count);
; 226  : 		}

  00073	eb 06		 jmp	 SHORT $LN31@Decompress
$LN12@Decompress:

; 227  : 		else
; 228  : 		{
; 229  : 			dbg_printf("DecryptBuffer - AllocStack %d max(%d) ave(%d)\n", size, maxSize/1024, sum/count);
; 230  : 			m_buf = m_local_buf;

  00075	8d b5 f0 df ff
	ff		 lea	 esi, DWORD PTR _buf$2[ebp+4]
$LN31@Decompress:

; 261  :     {
; 262  : 		DecryptBuffer buf(m_pHeader->dwEncryptSize);

  0007b	89 b5 ec df ff
	ff		 mov	 DWORD PTR _buf$2[ebp], esi

; 263  : 
; 264  : 		BYTE* pbDecryptedBuffer = (BYTE*)buf.GetBufferPtr();
; 265  : 
; 266  : 		__Decrypt(pdwKey, pbDecryptedBuffer);

  00081	56		 push	 esi
  00082	53		 push	 ebx
  00083	8b cf		 mov	 ecx, edi
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008c	e8 00 00 00 00	 call	 ?__Decrypt@CLZObject@@QAE_NPAKPAE@Z ; CLZObject::__Decrypt

; 267  : 
; 268  : 		if (*(DWORD *) pbDecryptedBuffer != ms_dwFourCC)

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?ms_dwFourCC@CLZObject@@2KA ; CLZObject::ms_dwFourCC
  00099	74 0f		 je	 SHORT $LN4@Decompress

; 269  : 		{
; 270  : 			TraceError("LZObject: key incorrect");

  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LOICJMKN@LZObject?3?5key?5incorrect@
  000a0	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000a5	83 c4 04	 add	 esp, 4
  000a8	eb 2f		 jmp	 SHORT $LN10@Decompress
$LN4@Decompress:

; 271  : 			return false;
; 272  : 		}
; 273  : 
; 274  : 		if (LZO_E_OK != (r = lzo1x_decompress(pbDecryptedBuffer + sizeof(DWORD), m_pHeader->dwCompressedSize, m_pbBuffer, (lzo_uint*) &uiSize, NULL)))

  000aa	6a 00		 push	 0
  000ac	8d 85 e8 df ff
	ff		 lea	 eax, DWORD PTR _uiSize$[ebp]
  000b2	50		 push	 eax
  000b3	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000b6	ff 37		 push	 DWORD PTR [edi]
  000b8	ff 70 08	 push	 DWORD PTR [eax+8]
  000bb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _lzo1x_decompress
  000c4	83 c4 14	 add	 esp, 20			; 00000014H
  000c7	85 c0		 test	 eax, eax
  000c9	74 2b		 je	 SHORT $LN5@Decompress

; 275  : 		{
; 276  : 			TraceError("LZObject: Decompress failed(decrypt) ret %d\n", r);

  000cb	50		 push	 eax
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@JNKNGBBC@LZObject?3?5Decompress?5failed?$CIdec@
  000d1	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000d6	83 c4 08	 add	 esp, 8
$LN10@Decompress:

; 235  : 		if (m_local_buf != m_buf)

  000d9	8b 85 ec df ff
	ff		 mov	 eax, DWORD PTR _buf$2[ebp]
  000df	8d 8d f0 df ff
	ff		 lea	 ecx, DWORD PTR _buf$2[ebp+4]
  000e5	3b c8		 cmp	 ecx, eax
  000e7	74 09		 je	 SHORT $LN21@Decompress

; 236  : 		{
; 237  : 			dbg_printf("DecruptBuffer - FreeHeap\n");
; 238  : 			delete [] m_buf;

  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  000ef	83 c4 04	 add	 esp, 4
$LN21@Decompress:

; 277  : 			return false;

  000f2	32 c0		 xor	 al, al
  000f4	eb 7f		 jmp	 SHORT $LN1@Decompress
$LN5@Decompress:

; 235  : 		if (m_local_buf != m_buf)

  000f6	8b 85 ec df ff
	ff		 mov	 eax, DWORD PTR _buf$2[ebp]
  000fc	8d 8d f0 df ff
	ff		 lea	 ecx, DWORD PTR _buf$2[ebp+4]

; 278  : 		}
; 279  :     }

  00102	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 235  : 		if (m_local_buf != m_buf)

  00109	3b c8		 cmp	 ecx, eax
  0010b	74 09		 je	 SHORT $LN6@Decompress

; 236  : 		{
; 237  : 			dbg_printf("DecruptBuffer - FreeHeap\n");
; 238  : 			delete [] m_buf;

  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00113	83 c4 04	 add	 esp, 4
$LN6@Decompress:

; 289  : 		}
; 290  :     }
; 291  : 
; 292  :     if (uiSize != m_pHeader->dwRealSize)

  00116	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00119	8b 85 e8 df ff
	ff		 mov	 eax, DWORD PTR _uiSize$[ebp]
  0011f	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  00122	74 4f		 je	 SHORT $LN7@Decompress

; 293  :     {
; 294  : 		TraceError("LZObject: Size differs");

  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@MGOIPKD@LZObject?3?5Size?5differs@
  00129	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0012e	83 c4 04	 add	 esp, 4

; 295  : 		return false;

  00131	32 c0		 xor	 al, al
  00133	eb 40		 jmp	 SHORT $LN1@Decompress
$LN2@Decompress:

; 280  :     else
; 281  :     {
; 282  : 		uiSize = m_pHeader->dwRealSize;

  00135	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00138	89 85 e8 df ff
	ff		 mov	 DWORD PTR _uiSize$[ebp], eax

; 283  : 
; 284  : 		//if (LZO_E_OK != (r = lzo1x_decompress_safe(m_pbIn, m_pHeader->dwCompressedSize, m_pbBuffer, (lzo_uint*) &uiSize, NULL)))
; 285  : 		if (LZO_E_OK != (r = lzo1x_decompress(m_pbIn, m_pHeader->dwCompressedSize, m_pbBuffer, (lzo_uint*) &uiSize, NULL)))

  0013e	8d 85 e8 df ff
	ff		 lea	 eax, DWORD PTR _uiSize$[ebp]
  00144	6a 00		 push	 0
  00146	50		 push	 eax
  00147	ff 37		 push	 DWORD PTR [edi]
  00149	ff 72 08	 push	 DWORD PTR [edx+8]
  0014c	ff 77 0c	 push	 DWORD PTR [edi+12]
  0014f	e8 00 00 00 00	 call	 _lzo1x_decompress
  00154	83 c4 14	 add	 esp, 20			; 00000014H
  00157	85 c0		 test	 eax, eax
  00159	74 bb		 je	 SHORT $LN6@Decompress

; 286  : 		{
; 287  : 			TraceError("LZObject: Decompress failed : ret %d, CompressedSize %d\n", r, m_pHeader->dwCompressedSize);

  0015b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0015e	ff 71 08	 push	 DWORD PTR [ecx+8]
  00161	50		 push	 eax
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@JONLEDGH@LZObject?3?5Decompress?5failed?5?3?5r@
  00167	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0016c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 288  : 			return false;

  0016f	32 c0		 xor	 al, al
  00171	eb 02		 jmp	 SHORT $LN1@Decompress
$LN7@Decompress:

; 296  :     }
; 297  : 
; 298  :     return true;

  00173	b0 01		 mov	 al, 1
$LN1@Decompress:

; 299  : }

  00175	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00178	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017f	59		 pop	 ecx
  00180	5f		 pop	 edi
  00181	5e		 pop	 esi
  00182	5b		 pop	 ebx
  00183	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00186	33 cd		 xor	 ecx, ebp
  00188	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Decompress@CLZObject@@QAE_NPAK@Z$0:
  00000	8d 8d ec df ff
	ff		 lea	 ecx, DWORD PTR _buf$2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1DecryptBuffer@@QAE@XZ ; DecryptBuffer::~DecryptBuffer
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?Decompress@CLZObject@@QAE_NPAK@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a e4 df ff
	ff		 mov	 ecx, DWORD PTR [edx-8220]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Decompress@CLZObject@@QAE_NPAK@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Decompress@CLZObject@@QAE_NPAK@Z ENDP			; CLZObject::Decompress
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?BeginDecompress@CLZObject@@QAE_NPBX@Z
_TEXT	SEGMENT
_pvIn$ = 8						; size = 4
?BeginDecompress@CLZObject@@QAE_NPBX@Z PROC		; CLZObject::BeginDecompress, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 180  :     THeader * pHeader = (THeader *) pvIn;
; 181  : 
; 182  :     if (pHeader->dwFourCC != ms_dwFourCC)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pvIn$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?ms_dwFourCC@CLZObject@@2KA ; CLZObject::ms_dwFourCC
  00012	74 15		 je	 SHORT $LN2@BeginDecom

; 183  :     {
; 184  : 		TraceError("LZObject: not a valid data");

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@BHMEHIOE@LZObject?3?5not?5a?5valid?5data@
  00019	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0001e	83 c4 04	 add	 esp, 4

; 185  : 		return false;

  00021	32 c0		 xor	 al, al
  00023	5f		 pop	 edi

; 202  : }

  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN2@BeginDecom:

; 186  :     }
; 187  : 
; 188  :     m_pHeader	= pHeader;
; 189  :     m_pbIn	= (const BYTE *) pvIn + (sizeof(THeader) + sizeof(DWORD));

  00029	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 190  : 
; 191  : 	/*
; 192  : 	static unsigned sum = 0;
; 193  : 	static unsigned count = 0;
; 194  : 	sum += pHeader->dwRealSize;
; 195  : 	count++;
; 196  : 	printf("decompress cur: %d, ave: %d\n", pHeader->dwRealSize, sum/count);
; 197  : 	*/
; 198  : 	m_dwBufferSize = pHeader->dwRealSize;

  00032	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00035	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 30   : 		if (capacity < REUSING_CAPACITY)

  00038	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  0003d	73 21		 jae	 SHORT $LN5@BeginDecom
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  0003f	a1 04 00 00 00	 mov	 eax, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4
  00044	39 05 00 00 00
	00		 cmp	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 32   : 			if (!m_freeVector.empty())

  0004a	74 0d		 je	 SHORT $LN6@BeginDecom

; 33   : 			{
; 34   : 				BYTE* freeMem = m_freeVector.back();

  0004c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1974 :         return _My_data._Mylast[-1];

  0004f	83 c0 fc	 add	 eax, -4			; fffffffcH

; 1744 :         --_Mylast;

  00052	a3 04 00 00 00	 mov	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 38   : 				return freeMem;

  00057	eb 12		 jmp	 SHORT $LN4@BeginDecom
$LN6@BeginDecom:

; 39   : 			}
; 40   : 			BYTE* newMem = new BYTE[REUSING_CAPACITY];

  00059	68 00 00 01 00	 push	 65536			; 00010000H

; 41   : 			dbg_printf("lzo.reuse_alloc\t%p(%d) real\n", newMem, capacity);
; 42   : 			return newMem;

  0005e	eb 01		 jmp	 SHORT $LN20@BeginDecom
$LN5@BeginDecom:

; 43   : 		}
; 44   : 		BYTE* newMem = new BYTE[capacity];

  00060	50		 push	 eax
$LN20@BeginDecom:

; 199  : 	m_pbBuffer = gs_freeMemMgr.Alloc(m_dwBufferSize);

  00061	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00066	8b c8		 mov	 ecx, eax
  00068	83 c4 04	 add	 esp, 4
$LN4@BeginDecom:
  0006b	89 0f		 mov	 DWORD PTR [edi], ecx

; 200  :     memset(m_pbBuffer, 0, pHeader->dwRealSize);

  0006d	ff 76 0c	 push	 DWORD PTR [esi+12]
  00070	6a 00		 push	 0
  00072	51		 push	 ecx
  00073	e8 00 00 00 00	 call	 _memset
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH

; 201  :     return true;

  0007b	b0 01		 mov	 al, 1
  0007d	5f		 pop	 edi

; 202  : }

  0007e	5e		 pop	 esi
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
?BeginDecompress@CLZObject@@QAE_NPBX@Z ENDP		; CLZObject::BeginDecompress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?Compress@CLZObject@@QAE_NXZ
_TEXT	SEGMENT
_iOutLen$ = -4						; size = 4
?Compress@CLZObject@@QAE_NXZ PROC			; CLZObject::Compress, COMDAT
; _this$ = ecx

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 154  :     UINT	iOutLen;
; 155  :     BYTE *	pbBuffer;
; 156  : 
; 157  :     pbBuffer = m_pbBuffer + sizeof(THeader);
; 158  :     *(DWORD *) pbBuffer = ms_dwFourCC;

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_dwFourCC@CLZObject@@2KA ; CLZObject::ms_dwFourCC
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 37		 mov	 esi, DWORD PTR [edi]
  0000f	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 159  :     pbBuffer += sizeof(DWORD);
; 160  : 
; 161  : #if defined( LZO1X_999_MEM_COMPRESS )
; 162  :     int r = lzo1x_999_compress((BYTE *) m_pbIn, m_pHeader->dwRealSize, pbBuffer, (lzo_uint*) &iOutLen, CLZO::Instance().GetWorkMemory());

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCLZO@@@@0PAVCLZO@@A ; CSingleton<CLZO>::ms_singleton
  00018	e8 00 00 00 00	 call	 ?GetWorkMemory@CLZO@@QAEPAEXZ ; CLZO::GetWorkMemory
  0001d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00020	50		 push	 eax
  00021	8d 45 fc	 lea	 eax, DWORD PTR _iOutLen$[ebp]
  00024	50		 push	 eax
  00025	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  00028	50		 push	 eax
  00029	ff 71 0c	 push	 DWORD PTR [ecx+12]
  0002c	ff 77 0c	 push	 DWORD PTR [edi+12]
  0002f	e8 00 00 00 00	 call	 _lzo1x_999_compress
  00034	83 c4 14	 add	 esp, 20			; 00000014H

; 163  : #else
; 164  :     int r = lzo1x_1_compress((BYTE *) m_pbIn, m_pHeader->dwRealSize, pbBuffer, (lzo_uint*) &iOutLen, CLZO::Instance().GetWorkMemory());
; 165  : #endif
; 166  : 
; 167  :     if (LZO_E_OK != r)

  00037	85 c0		 test	 eax, eax
  00039	74 15		 je	 SHORT $LN2@Compress

; 168  :     {
; 169  : 		TraceError("LZO: lzo1x_999_compress failed");

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@LNIOABIE@LZO?3?5lzo1x_999_compress?5failed@
  00040	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00045	83 c4 04	 add	 esp, 4

; 170  : 		return false;

  00048	32 c0		 xor	 al, al
  0004a	5f		 pop	 edi

; 176  : }

  0004b	5e		 pop	 esi
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
$LN2@Compress:

; 171  :     }
; 172  : 
; 173  :     m_pHeader->dwCompressedSize = iOutLen;

  00050	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00053	8b 45 fc	 mov	 eax, DWORD PTR _iOutLen$[ebp]
  00056	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 174  :     m_bCompressed = true;
; 175  :     return true;

  00059	b0 01		 mov	 al, 1
  0005b	c6 47 10 01	 mov	 BYTE PTR [edi+16], 1
  0005f	5f		 pop	 edi

; 176  : }

  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?Compress@CLZObject@@QAE_NXZ ENDP			; CLZObject::Compress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?BeginCompressInBuffer@CLZObject@@QAEXPBXIPAX@Z
_TEXT	SEGMENT
_pvIn$ = 8						; size = 4
_uiInLen$ = 12						; size = 4
___formal$ = 16						; size = 4
?BeginCompressInBuffer@CLZObject@@QAEXPBXIPAX@Z PROC	; CLZObject::BeginCompressInBuffer, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 137  :     m_pbIn = (const BYTE *) pvIn;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvIn$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 138  : 
; 139  :     // sizeof(SHeader) +
; 140  :     m_dwBufferSize = sizeof(THeader) + sizeof(DWORD) + (uiInLen + uiInLen / 64 + 16 + 3) + 8;

  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _uiInLen$[ebp]
  0000d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00010	8b c7		 mov	 eax, edi
  00012	c1 e8 06	 shr	 eax, 6
  00015	83 c0 2f	 add	 eax, 47			; 0000002fH
  00018	03 c7		 add	 eax, edi
  0001a	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 30   : 		if (capacity < REUSING_CAPACITY)

  0001d	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00022	73 21		 jae	 SHORT $LN4@BeginCompr
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00024	a1 04 00 00 00	 mov	 eax, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4
  00029	39 05 00 00 00
	00		 cmp	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 32   : 			if (!m_freeVector.empty())

  0002f	74 0d		 je	 SHORT $LN5@BeginCompr

; 33   : 			{
; 34   : 				BYTE* freeMem = m_freeVector.back();

  00031	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1974 :         return _My_data._Mylast[-1];

  00034	83 c0 fc	 add	 eax, -4			; fffffffcH

; 1744 :         --_Mylast;

  00037	a3 04 00 00 00	 mov	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 38   : 				return freeMem;

  0003c	eb 12		 jmp	 SHORT $LN3@BeginCompr
$LN5@BeginCompr:

; 39   : 			}
; 40   : 			BYTE* newMem = new BYTE[REUSING_CAPACITY];

  0003e	68 00 00 01 00	 push	 65536			; 00010000H

; 41   : 			dbg_printf("lzo.reuse_alloc\t%p(%d) real\n", newMem, capacity);
; 42   : 			return newMem;

  00043	eb 01		 jmp	 SHORT $LN18@BeginCompr
$LN4@BeginCompr:

; 43   : 		}
; 44   : 		BYTE* newMem = new BYTE[capacity];

  00045	50		 push	 eax
$LN18@BeginCompr:

; 141  : 
; 142  :     m_pbBuffer = gs_freeMemMgr.Alloc(m_dwBufferSize);

  00046	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0004b	8b c8		 mov	 ecx, eax
  0004d	83 c4 04	 add	 esp, 4
$LN3@BeginCompr:

; 143  :     memset(m_pbBuffer, 0, m_dwBufferSize);

  00050	ff 76 04	 push	 DWORD PTR [esi+4]
  00053	89 0e		 mov	 DWORD PTR [esi], ecx
  00055	6a 00		 push	 0
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 _memset

; 144  : 
; 145  :     m_pHeader = (THeader *) m_pbBuffer;

  0005d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 146  :     m_pHeader->dwFourCC = ms_dwFourCC;

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_dwFourCC@CLZObject@@2KA ; CLZObject::ms_dwFourCC
  0006a	89 01		 mov	 DWORD PTR [ecx], eax

; 147  :     m_pHeader->dwEncryptSize = m_pHeader->dwCompressedSize = m_pHeader->dwRealSize = 0;

  0006c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00079	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00080	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00083	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 148  :     m_pHeader->dwRealSize = uiInLen;

  0008a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0008d	89 78 0c	 mov	 DWORD PTR [eax+12], edi

; 149  : 	m_bInBuffer = true;

  00090	5f		 pop	 edi
  00091	c6 46 11 01	 mov	 BYTE PTR [esi+17], 1
  00095	5e		 pop	 esi

; 150  : }

  00096	5d		 pop	 ebp
  00097	c2 0c 00	 ret	 12			; 0000000cH
?BeginCompressInBuffer@CLZObject@@QAEXPBXIPAX@Z ENDP	; CLZObject::BeginCompressInBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?BeginCompress@CLZObject@@QAEXPBXI@Z
_TEXT	SEGMENT
_pvIn$ = 8						; size = 4
_uiInLen$ = 12						; size = 4
?BeginCompress@CLZObject@@QAEXPBXI@Z PROC		; CLZObject::BeginCompress, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  :     m_pbIn = (const BYTE *) pvIn;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pvIn$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 122  : 
; 123  :     // sizeof(SHeader) +
; 124  :     m_dwBufferSize = sizeof(THeader) + sizeof(DWORD) + (uiInLen + uiInLen / 64 + 16 + 3) + 8;

  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _uiInLen$[ebp]
  0000d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00010	8b c7		 mov	 eax, edi
  00012	c1 e8 06	 shr	 eax, 6
  00015	83 c0 2f	 add	 eax, 47			; 0000002fH
  00018	03 c7		 add	 eax, edi
  0001a	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 30   : 		if (capacity < REUSING_CAPACITY)

  0001d	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00022	73 21		 jae	 SHORT $LN4@BeginCompr
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  00024	a1 04 00 00 00	 mov	 eax, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4
  00029	39 05 00 00 00
	00		 cmp	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 32   : 			if (!m_freeVector.empty())

  0002f	74 0d		 je	 SHORT $LN5@BeginCompr

; 33   : 			{
; 34   : 				BYTE* freeMem = m_freeVector.back();

  00031	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1974 :         return _My_data._Mylast[-1];

  00034	83 c0 fc	 add	 eax, -4			; fffffffcH

; 1744 :         --_Mylast;

  00037	a3 04 00 00 00	 mov	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 38   : 				return freeMem;

  0003c	eb 12		 jmp	 SHORT $LN3@BeginCompr
$LN5@BeginCompr:

; 39   : 			}
; 40   : 			BYTE* newMem = new BYTE[REUSING_CAPACITY];

  0003e	68 00 00 01 00	 push	 65536			; 00010000H

; 41   : 			dbg_printf("lzo.reuse_alloc\t%p(%d) real\n", newMem, capacity);
; 42   : 			return newMem;

  00043	eb 01		 jmp	 SHORT $LN18@BeginCompr
$LN4@BeginCompr:

; 43   : 		}
; 44   : 		BYTE* newMem = new BYTE[capacity];

  00045	50		 push	 eax
$LN18@BeginCompr:

; 125  : 
; 126  :     m_pbBuffer = gs_freeMemMgr.Alloc(m_dwBufferSize);

  00046	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0004b	8b c8		 mov	 ecx, eax
  0004d	83 c4 04	 add	 esp, 4
$LN3@BeginCompr:

; 127  :     memset(m_pbBuffer, 0, m_dwBufferSize);

  00050	ff 76 04	 push	 DWORD PTR [esi+4]
  00053	89 0e		 mov	 DWORD PTR [esi], ecx
  00055	6a 00		 push	 0
  00057	51		 push	 ecx
  00058	e8 00 00 00 00	 call	 _memset

; 128  : 
; 129  :     m_pHeader = (THeader *) m_pbBuffer;

  0005d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 130  :     m_pHeader->dwFourCC = ms_dwFourCC;

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_dwFourCC@CLZObject@@2KA ; CLZObject::ms_dwFourCC
  0006a	89 01		 mov	 DWORD PTR [ecx], eax

; 131  :     m_pHeader->dwEncryptSize = m_pHeader->dwCompressedSize = m_pHeader->dwRealSize = 0;

  0006c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00076	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00079	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00080	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00083	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 132  :     m_pHeader->dwRealSize = uiInLen;

  0008a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0008d	89 78 0c	 mov	 DWORD PTR [eax+12], edi
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi

; 133  : }

  00092	5d		 pop	 ebp
  00093	c2 08 00	 ret	 8
?BeginCompress@CLZObject@@QAEXPBXI@Z ENDP		; CLZObject::BeginCompress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ?Clear@CLZObject@@QAEXXZ
_TEXT	SEGMENT
_ptr$ = -4						; size = 4
?Clear@CLZObject@@QAEXXZ PROC				; CLZObject::Clear, COMDAT
; _this$ = ecx

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 88   :     if (m_pbBuffer && !m_bInBuffer)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	85 c0		 test	 eax, eax
  0000b	74 59		 je	 SHORT $LN5@Clear
  0000d	80 7e 11 00	 cmp	 BYTE PTR [esi+17], 0
  00011	75 53		 jne	 SHORT $LN5@Clear

; 52   : 		if (capacity < REUSING_CAPACITY)

  00013	81 7e 04 00 00
	01 00		 cmp	 DWORD PTR [esi+4], 65536 ; 00010000H

; 89   : 		gs_freeMemMgr.Free(m_pbBuffer, m_dwBufferSize);

  0001a	89 45 fc	 mov	 DWORD PTR _ptr$[ebp], eax

; 52   : 		if (capacity < REUSING_CAPACITY)

  0001d	73 3e		 jae	 SHORT $LN6@Clear
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  0001f	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4
  00025	3b 0d 08 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+8
  0002b	74 15		 je	 SHORT $LN11@Clear

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0002d	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 96   :     Initialize();

  0002f	8b ce		 mov	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  00031	83 05 04 00 00
	00 04		 add	 DWORD PTR ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A+4, 4
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 96   :     Initialize();

  00038	e8 00 00 00 00	 call	 ?Initialize@CLZObject@@AAEXXZ ; CLZObject::Initialize
  0003d	5e		 pop	 esi

; 97   : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
$LN11@Clear:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00042	8d 45 fc	 lea	 eax, DWORD PTR _ptr$[ebp]
  00045	50		 push	 eax
  00046	51		 push	 ecx
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_freeMemMgr@@3VLZOFreeMemoryMgr@@A
  0004c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAE@?$vector@PAEV?$allocator@PAE@std@@@std@@AAEPAPAEQAPAEABQAE@Z ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Emplace_reallocate<unsigned char * const &>
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp

; 96   :     Initialize();

  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?Initialize@CLZObject@@AAEXXZ ; CLZObject::Initialize
  00058	5e		 pop	 esi

; 97   : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN6@Clear:

; 60   : 		delete [] ptr;

  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00063	83 c4 04	 add	 esp, 4
$LN5@Clear:

; 96   :     Initialize();

  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?Initialize@CLZObject@@AAEXXZ ; CLZObject::Initialize
  0006d	5e		 pop	 esi

; 97   : }

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?Clear@CLZObject@@QAEXXZ ENDP				; CLZObject::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ??1CLZObject@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CLZObject@@QAE@XZ PROC				; CLZObject::~CLZObject, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CLZObject@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 101  :     Clear();

  00022	e8 00 00 00 00	 call	 ?Clear@CLZObject@@QAEXXZ ; CLZObject::Clear

; 102  : }

  00027	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0002a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00031	59		 pop	 ecx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
  00036	cc		 int	 3
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CLZObject@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CLZObject@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CLZObject@@QAE@XZ ENDP				; CLZObject::~CLZObject
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\lzo.cpp
;	COMDAT ??0CLZObject@@QAE@XZ
_TEXT	SEGMENT
??0CLZObject@@QAE@XZ PROC				; CLZObject::CLZObject, COMDAT
; _this$ = ecx

; 71   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 72   :     Initialize();

  00003	e8 00 00 00 00	 call	 ?Initialize@CLZObject@@AAEXXZ ; CLZObject::Initialize

; 73   : }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0CLZObject@@QAE@XZ ENDP				; CLZObject::CLZObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
