; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterBase\Distribute\error.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?fException@@3PAU_iobuf@@A			; fException
_BSS	SEGMENT
?fException@@3PAU_iobuf@@A DD 01H DUP (?)		; fException
_BSS	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??$_Integral_to_string@DH@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@H@Z ; std::_Integral_to_string<char,int>
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z	; std::_UIntegral_to_buff<char,unsigned int>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??0_System_error@std@@QAE@ABV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UAEPAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	?name@_Iostream_error_category2@std@@UBEPBDXZ	; std::_Iostream_error_category2::name
PUBLIC	?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category2::message
PUBLIC	??_G_Iostream_error_category2@std@@UAEPAXI@Z	; std::_Iostream_error_category2::`scalar deleting destructor'
PUBLIC	??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??_Gios_base@std@@UAEPAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	?_Is_valid_strftime_tm_data@std@@YA_NDQBUtm@@@Z	; std::_Is_valid_strftime_tm_data
PUBLIC	?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z	; make_minidump
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
PUBLIC	??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$put_time@D@std@@YA?AU?$_Timeobj@DPBUtm@@@0@PBUtm@@PBD@Z ; std::put_time<char>
PUBLIC	??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z ; std::operator<<<char,std::char_traits<char> >
PUBLIC	?EterExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; EterExceptionFilter
PUBLIC	?SetEterExceptionHandler@@YAXXZ			; SetEterExceptionHandler
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
PUBLIC	??1?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	??_G?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
PUBLIC	??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
PUBLIC	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
PUBLIC	??_7_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream@			; `string'
PUBLIC	?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@	; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@	; `string'
PUBLIC	__TI5?AVfailure@ios_base@std@@
PUBLIC	__CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	?_Valid_strftime_specifiers@std@@3QBDB		; std::_Valid_strftime_specifiers
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_C@_07MOMJMPG@dbghelp@			; `string'
PUBLIC	??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@		; `string'
PUBLIC	??_C@_0O@GHHCBHKH@?$CFY?$CFm?$CFd_?$CFH?$CFM?$CFS@ ; `string'
PUBLIC	??_C@_04JMFINIFG@?4dmp@				; `string'
PUBLIC	??_C@_0O@BMPKPIOH@metin2client_@		; `string'
PUBLIC	?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??_C@_04IHCGILC@?$CB?$CFx?$AA@			; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category2@std@@@8	; std::_Iostream_error_category2 `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category2@std@@8	; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__errno:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__SetUnhandledExceptionFilter@4:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__localtime64:PROC
EXTRN	__time64:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_free:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?_Xruntime_error@std@@YAXPBD@Z:PROC		; std::_Xruntime_error
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_E_System_error@std@@UAEPAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Iostream_error_category2@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category2::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__Gettnames:PROC
EXTRN	__Strftime:PROC
EXTRN	__Getctype:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	___security_cookie:DWORD
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D'
	DB	'@std@@@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$rs	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$rs	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$rs	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$rs	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$rs	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category2@std@@8 DD FLAT:??_R0?AV_Iostream_error_category2@std@@@8 ; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category2@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category2@std@@8 ; std::_Iostream_error_category2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category2@std@@8 DD 00H		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category2@std@@@8
data$rs	SEGMENT
??_R0?AV_Iostream_error_category2@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category2@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Iostream_error_category2@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category2@std@@6B@ DD 00H		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category2@std@@@8
	DD	FLAT:??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD FLAT:??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 00H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$rs	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allo'
	DB	'cator@D@2@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	050H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$rs	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$rs	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_04IHCGILC@?$CB?$CFx?$AA@
CONST	SEGMENT
??_C@_04IHCGILC@?$CB?$CFx?$AA@ DB '!%x', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z
CONST	ENDS
;	COMDAT ?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A
_DATA	SEGMENT
?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A DD FLAT:??_7_Iostream_error_category2@std@@6B@ ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static
	DD	05H
_DATA	ENDS
;	COMDAT ??_C@_0O@BMPKPIOH@metin2client_@
CONST	SEGMENT
??_C@_0O@BMPKPIOH@metin2client_@ DB 'metin2client_', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMFINIFG@?4dmp@
CONST	SEGMENT
??_C@_04JMFINIFG@?4dmp@ DB '.dmp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GHHCBHKH@?$CFY?$CFm?$CFd_?$CFH?$CFM?$CFS@
CONST	SEGMENT
??_C@_0O@GHHCBHKH@?$CFY?$CFm?$CFd_?$CFH?$CFM?$CFS@ DB '%Y%m%d_%H%M%S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@
CONST	SEGMENT
??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@ DB 'MiniDumpWriteDump', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MOMJMPG@dbghelp@
CONST	SEGMENT
??_C@_07MOMJMPG@dbghelp@ DB 'dbghelp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	050H
CONST	ENDS
;	COMDAT ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?_Valid_strftime_specifiers@std@@3QBDB
CONST	SEGMENT
?_Valid_strftime_specifiers@std@@3QBDB DB 061H		; std::_Valid_strftime_specifiers
	DB	041H
	DB	062H
	DB	042H
	DB	063H
	DB	043H
	DB	064H
	DB	044H
	DB	065H
	DB	046H
	DB	067H
	DB	047H
	DB	068H
	DB	048H
	DB	049H
	DB	06aH
	DB	06dH
	DB	04dH
	DB	06eH
	DB	070H
	DB	072H
	DB	052H
	DB	053H
	DB	074H
	DB	054H
	DB	075H
	DB	055H
	DB	056H
	DB	077H
	DB	057H
	DB	078H
	DB	058H
	DB	079H
	DB	059H
	DB	07aH
	DB	05aH
CONST	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT __CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI5?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@ DB 'ios_base::failbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB
CONST	SEGMENT
?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB DB 069H ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
	DB	06fH
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	065H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	00H
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream@ DB 'iostream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category2@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category2@std@@6B@ DD FLAT:??_R4_Iostream_error_category2@std@@6B@ ; std::_Iostream_error_category2::`vftable'
	DD	FLAT:??_E_Iostream_error_category2@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category2@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0_System_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DD FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DD	FLAT:??_E_System_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z$0
__ehfuncinfo$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z$0
__ehfuncinfo$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$0
__tryblocktable$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$7
__ehfuncinfo$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
__ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$1
	DD	01H
	DD	FLAT:___std_terminate
__ehfuncinfo$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
__tryblocktable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$12
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$2
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z$1
__ehfuncinfo$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z DD 019930522H
	DD	01aH
	DD	FLAT:__unwindtable$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$15
	DD	01H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$16
	DD	02H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$1
	DD	04H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$2
	DD	05H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$3
	DD	06H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$4
	DD	07H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$5
	DD	08H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$6
	DD	09H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$7
	DD	0aH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$8
	DD	0bH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$9
	DD	0cH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$10
	DD	0dH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$11
	DD	0eH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	0dH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	0aH
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	09H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	08H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	07H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	06H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	05H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
	DD	04H
	DD	FLAT:__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_Gios_base@std@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??_Gios_base@std@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_Gios_base@std@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Init@ios_base@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?_Init@ios_base@std@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Init@ios_base@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ios_base@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1
__ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$6
__ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
__ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z
_TEXT	SEGMENT
tv450 = -12						; size = 4
__New_size$1$ = -8					; size = 4
tv447 = -8						; size = 4
__Old_size$1$ = -4					; size = 4
tv449 = -4						; size = 4
__Size_increase$ = 8					; size = 4
$T1 = 8							; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 2988 :     _CONSTEXPR20 basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 2989 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 2990 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 2991 :         auto& _My_data            = _Mypair._Myval2;
; 2992 :         const size_type _Old_size = _My_data._Mysize;
; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00008	8b 75 08	 mov	 esi, DWORD PTR __Size_increase$[ebp]
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00013	8b c1		 mov	 eax, ecx
  00015	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00018	2b c2		 sub	 eax, edx
  0001a	89 55 fc	 mov	 DWORD PTR __Old_size$1$[ebp], edx
  0001d	3b c6		 cmp	 eax, esi
  0001f	0f 82 2c 01 00
	00		 jb	 $LN86@Reallocate

; 2998 :         const size_type _Old_capacity = _My_data._Myres;

  00025	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00028	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0002b	8b f0		 mov	 esi, eax

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0002d	89 45 f8	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00030	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2998 :         const size_type _Old_capacity = _My_data._Myres;

  00033	89 5d 08	 mov	 DWORD PTR $T1[ebp], ebx

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00036	3b f1		 cmp	 esi, ecx

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00038	76 0f		 jbe	 SHORT $LN10@Reallocate

; 2944 :             return _Max;

  0003a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0003f	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00047	eb 43		 jmp	 SHORT $LN84@Reallocate
$LN10@Reallocate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00049	8b c3		 mov	 eax, ebx
  0004b	d1 e8		 shr	 eax, 1
  0004d	2b c8		 sub	 ecx, eax
  0004f	3b d9		 cmp	 ebx, ecx
  00051	76 12		 jbe	 SHORT $LN11@Reallocate

; 2948 :             return _Max;

  00053	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00058	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00063	eb 27		 jmp	 SHORT $LN84@Reallocate
$LN11@Reallocate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00065	03 c3		 add	 eax, ebx
  00067	3b f0		 cmp	 esi, eax
  00069	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0006c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0006f	85 c0		 test	 eax, eax
  00071	75 04		 jne	 SHORT $LN24@Reallocate

; 228  :         return nullptr;

  00073	33 db		 xor	 ebx, ebx
  00075	eb 1d		 jmp	 SHORT $LN23@Reallocate
$LN24@Reallocate:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00077	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007c	72 08		 jb	 SHORT $LN25@Reallocate

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00084	eb 06		 jmp	 SHORT $LN84@Reallocate
$LN25@Reallocate:

; 136  :         return ::operator new(_Bytes);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN84@Reallocate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  0008c	8b 55 fc	 mov	 edx, DWORD PTR __Old_size$1$[ebp]
  0008f	8b d8		 mov	 ebx, eax
  00091	83 c4 04	 add	 esp, 4
$LN23@Reallocate:
  00094	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00097	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  0009a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0009d	2b d0		 sub	 edx, eax
  0009f	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000a2	50		 push	 eax
  000a3	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  000a6	89 4d fc	 mov	 DWORD PTR tv449[ebp], ecx
  000a9	8d 34 03	 lea	 esi, DWORD PTR [ebx+eax]
  000ac	8b 4d 18	 mov	 ecx, DWORD PTR _<_Args_2>$[ebp]
  000af	03 ce		 add	 ecx, esi
  000b1	89 75 f4	 mov	 DWORD PTR tv450[ebp], esi
  000b4	83 7d 08 0f	 cmp	 DWORD PTR $T1[ebp], 15	; 0000000fH
  000b8	89 4d f8	 mov	 DWORD PTR tv447[ebp], ecx
  000bb	76 60		 jbe	 SHORT $LN3@Reallocate

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000bd	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bf	56		 push	 esi
  000c0	53		 push	 ebx
  000c1	e8 00 00 00 00	 call	 _memcpy
  000c6	ff 75 18	 push	 DWORD PTR _<_Args_2>$[ebp]
  000c9	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  000cc	ff 75 f4	 push	 DWORD PTR tv450[ebp]
  000cf	e8 00 00 00 00	 call	 _memcpy
  000d4	ff 75 fc	 push	 DWORD PTR tv449[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1749 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  000d7	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000da	03 c6		 add	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000dc	50		 push	 eax
  000dd	ff 75 f8	 push	 DWORD PTR tv447[ebp]
  000e0	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000e5	8b 4d 08	 mov	 ecx, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e8	83 c4 24	 add	 esp, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000eb	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ec	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f2	72 12		 jb	 SHORT $LN59@Reallocate

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f4	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000f7	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fa	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fc	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000ff	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00102	77 52		 ja	 SHORT $LN56@Reallocate

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00104	8b f2		 mov	 esi, edx
$LN59@Reallocate:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00106	51		 push	 ecx
  00107	56		 push	 esi
  00108	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010d	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3019 :         return *this;

  00110	89 1f		 mov	 DWORD PTR [edi], ebx
  00112	8b c7		 mov	 eax, edi

; 3020 :     }

  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 14 00	 ret	 20			; 00000014H
$LN3@Reallocate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	57		 push	 edi
  0011e	53		 push	 ebx
  0011f	e8 00 00 00 00	 call	 _memcpy
  00124	ff 75 18	 push	 DWORD PTR _<_Args_2>$[ebp]
  00127	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  0012a	56		 push	 esi
  0012b	e8 00 00 00 00	 call	 _memcpy
  00130	ff 75 fc	 push	 DWORD PTR tv449[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1749 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00133	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00136	03 c7		 add	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00138	50		 push	 eax
  00139	ff 75 f8	 push	 DWORD PTR tv447[ebp]
  0013c	e8 00 00 00 00	 call	 _memcpy
  00141	83 c4 24	 add	 esp, 36			; 00000024H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3019 :         return *this;

  00144	89 1f		 mov	 DWORD PTR [edi], ebx
  00146	8b c7		 mov	 eax, edi

; 3020 :     }

  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c2 14 00	 ret	 20			; 00000014H
$LN86@Reallocate:

; 2994 :             _Xlen_string(); // result too long

  00151	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@Reallocate:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00156	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN83@Reallocate:
  0015b	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
;	COMDAT ??_G?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 864  :     __CLR_OR_THIS_CALL ~time_put() noexcept override {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 116  :         _CSTD free(_Timeptr);

  00006	ff 76 08	 push	 DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 864  :     __CLR_OR_THIS_CALL ~time_put() noexcept override {}

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 116  :         _CSTD free(_Timeptr);

  0000f	e8 00 00 00 00	 call	 _free
  00014	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 864  :     __CLR_OR_THIS_CALL ~time_put() noexcept override {}

  00017	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0001d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00021	74 0b		 je	 SHORT $LN13@scalar
  00023	6a 0c		 push	 12			; 0000000cH
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
$LN13@scalar:
  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??_G?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
;	COMDAT ?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z
_TEXT	SEGMENT
$T2 = -116						; size = 20
__Iosbase$GSCopy$1$ = -96				; size = 4
__Pt$GSCopy$1$ = -92					; size = 4
_this$GSCopy$1$ = -88					; size = 4
$T3 = -84						; size = 8
__Dest$ = -84						; size = 8
__Old_errno$1$ = -80					; size = 4
___$ReturnUdt$GSCopy$1$ = -76				; size = 4
__Errno_ref$1$ = -72					; size = 4
tv1157 = -68						; size = 4
__Old_capacity$1$ = -64					; size = 4
__Old_size$1$ = -60					; size = 4
__Back_shift$1$ = -60					; size = 4
$T4 = -53						; size = 1
tv1158 = -52						; size = 4
tv1171 = -52						; size = 4
tv1179 = -52						; size = 4
$T5 = -52						; size = 4
__Str$ = -48						; size = 24
__Fmt$ = -24						; size = 5
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
___formal$ = 24						; size = 1
__Pt$ = 28						; size = 4
__Specifier$ = 32					; size = 1
__Modifier$ = 36					; size = 1
?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z PROC ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 871  :         char _Modifier = '\0') const { // put formatted time from _Pt to _Dest for [_Fmtfirst, _Fmtlast)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d a8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	89 45 b4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  00036	8b 45 14	 mov	 eax, DWORD PTR __Iosbase$[ebp]
  00039	89 45 a0	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], eax
  0003c	8b 45 1c	 mov	 eax, DWORD PTR __Pt$[ebp]
  0003f	89 45 a4	 mov	 DWORD PTR __Pt$GSCopy$1$[ebp], eax

; 872  :         char _Fmt[5] = "!%x\0"; // '!' for nonzero count, null for modifier

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04IHCGILC@?$CB?$CFx?$AA@
  00047	89 45 e8	 mov	 DWORD PTR __Fmt$[ebp], eax
  0004a	0f b6 05 04 00
	00 00		 movzx	 eax, BYTE PTR ??_C@_04IHCGILC@?$CB?$CFx?$AA@+4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00051	0f 11 45 d0	 movups	 XMMWORD PTR __Str$[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 872  :         char _Fmt[5] = "!%x\0"; // '!' for nonzero count, null for modifier

  00055	88 45 ec	 mov	 BYTE PTR __Fmt$[ebp+4], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 836  :         _My_data._Mysize = 0;

  00058	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Str$[ebp+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0005f	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR __Str$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00066	c6 45 d0 00	 mov	 BYTE PTR __Str$[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 877  :         if (_Modifier == '\0') {

  0006a	8a 45 24	 mov	 al, BYTE PTR __Modifier$[ebp]
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	84 c0		 test	 al, al
  00076	75 08		 jne	 SHORT $LN5@do_put

; 878  :             _Fmt[2] = _Specifier;

  00078	8a 45 20	 mov	 al, BYTE PTR __Specifier$[ebp]
  0007b	88 45 ea	 mov	 BYTE PTR __Fmt$[ebp+2], al

; 879  :         } else { // add both modifier and specifier

  0007e	eb 09		 jmp	 SHORT $LN6@do_put
$LN5@do_put:

; 880  :             _Fmt[2] = _Modifier;

  00080	88 45 ea	 mov	 BYTE PTR __Fmt$[ebp+2], al

; 881  :             _Fmt[3] = _Specifier;

  00083	8a 45 20	 mov	 al, BYTE PTR __Specifier$[ebp]
  00086	88 45 eb	 mov	 BYTE PTR __Fmt$[ebp+3], al
$LN6@do_put:

; 882  :         }
; 883  : 
; 884  :         int& _Errno_ref      = errno; // Nonzero cost, pay it once

  00089	e8 00 00 00 00	 call	 __errno
  0008e	89 45 b8	 mov	 DWORD PTR __Errno_ref$1$[ebp], eax

; 885  :         const int _Old_errno = _Errno_ref;
; 886  : 
; 887  :         for (_Num = 16;; _Num *= 2) { // convert into ever larger string buffer until success

  00091	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 45 b0	 mov	 DWORD PTR __Old_errno$1$[ebp], eax
  0009b	0f 1f 44 00 00	 npad	 5
$LL4@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1515 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  000a0	8b 75 e4	 mov	 esi, DWORD PTR __Str$[ebp+20]
  000a3	8b c6		 mov	 eax, esi
  000a5	8b 55 e0	 mov	 edx, DWORD PTR __Str$[ebp+16]
  000a8	2b c2		 sub	 eax, edx
  000aa	89 55 c4	 mov	 DWORD PTR __Old_size$1$[ebp], edx
  000ad	89 75 c0	 mov	 DWORD PTR __Old_capacity$1$[ebp], esi

; 1516 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  000b0	3b f8		 cmp	 edi, eax
  000b2	77 2b		 ja	 SHORT $LN33@do_put

; 1517 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1518 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  000b4	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]

; 434  :         return _Myres > _Small_string_capacity;

  000b7	83 fe 0f	 cmp	 esi, 15			; 0000000fH

; 1518 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  000ba	89 45 e0	 mov	 DWORD PTR __Str$[ebp+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  000bd	8d 45 d0	 lea	 eax, DWORD PTR __Str$[ebp]

; 417  :         if (_Large_mode_engaged()) {

  000c0	0f 47 45 d0	 cmova	 eax, DWORD PTR __Str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  000c4	57		 push	 edi
  000c5	6a 00		 push	 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1520 :             _Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  000c7	8d 34 10	 lea	 esi, DWORD PTR [eax+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  000ca	56		 push	 esi
  000cb	e8 00 00 00 00	 call	 _memset
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1521 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  000d0	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1522 :             return *this;

  000d7	8b 75 d0	 mov	 esi, DWORD PTR __Str$[ebp]
  000da	e9 20 01 00 00	 jmp	 $LN48@do_put
$LN33@do_put:

; 2992 :         const size_type _Old_size = _My_data._Mysize;

  000df	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000e4	2b c2		 sub	 eax, edx

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  000e6	3b c7		 cmp	 eax, edi
  000e8	0f 82 89 02 00
	00		 jb	 $LN267@do_put

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  000ee	8d 0c 17	 lea	 ecx, DWORD PTR [edi+edx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000f1	83 c9 0f	 or	 ecx, 15			; 0000000fH
  000f4	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000fa	76 15		 jbe	 SHORT $LN54@do_put

; 2944 :             return _Max;

  000fc	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00101	89 45 cc	 mov	 DWORD PTR $T5[ebp], eax
  00104	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0010f	eb 55		 jmp	 SHORT $LN280@do_put
$LN54@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00111	8b c6		 mov	 eax, esi
  00113	d1 e8		 shr	 eax, 1
  00115	89 45 cc	 mov	 DWORD PTR tv1171[ebp], eax
  00118	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0011d	2b 45 cc	 sub	 eax, DWORD PTR tv1171[ebp]
  00120	3b f0		 cmp	 esi, eax
  00122	76 15		 jbe	 SHORT $LN55@do_put

; 2948 :             return _Max;

  00124	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00129	89 45 cc	 mov	 DWORD PTR $T5[ebp], eax
  0012c	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00137	eb 2d		 jmp	 SHORT $LN280@do_put
$LN55@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00139	8b 45 cc	 mov	 eax, DWORD PTR tv1171[ebp]
  0013c	03 c6		 add	 eax, esi
  0013e	3b c8		 cmp	 ecx, eax
  00140	0f 42 c8	 cmovb	 ecx, eax
  00143	89 4d cc	 mov	 DWORD PTR $T5[ebp], ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  00146	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00149	85 c0		 test	 eax, eax
  0014b	75 04		 jne	 SHORT $LN68@do_put

; 228  :         return nullptr;

  0014d	33 f6		 xor	 esi, esi
  0014f	eb 20		 jmp	 SHORT $LN67@do_put
$LN68@do_put:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00151	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00156	72 08		 jb	 SHORT $LN69@do_put

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0015e	eb 06		 jmp	 SHORT $LN280@do_put
$LN69@do_put:

; 136  :         return ::operator new(_Bytes);

  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN280@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  00166	8b 55 c4	 mov	 edx, DWORD PTR __Old_size$1$[ebp]
  00169	8b f0		 mov	 esi, eax
  0016b	8b 4d cc	 mov	 ecx, DWORD PTR $T5[ebp]
  0016e	83 c4 04	 add	 esp, 4
$LN67@do_put:
  00171	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]

; 3006 :         _My_data._Myres       = _New_capacity;

  00174	89 4d e4	 mov	 DWORD PTR __Str$[ebp+20], ecx
  00177	89 45 e0	 mov	 DWORD PTR __Str$[ebp+16], eax

; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  0017a	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  0017d	89 45 cc	 mov	 DWORD PTR tv1158[ebp], eax
  00180	03 c7		 add	 eax, edi

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  00182	83 7d c0 0f	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 15 ; 0000000fH
  00186	89 45 bc	 mov	 DWORD PTR tv1157[ebp], eax
  00189	52		 push	 edx
  0018a	76 52		 jbe	 SHORT $LN47@do_put

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  0018c	8b 45 d0	 mov	 eax, DWORD PTR __Str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0018f	50		 push	 eax
  00190	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00191	89 45 c4	 mov	 DWORD PTR __Back_shift$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00194	e8 00 00 00 00	 call	 _memcpy

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00199	57		 push	 edi
  0019a	6a 00		 push	 0
  0019c	ff 75 cc	 push	 DWORD PTR tv1158[ebp]
  0019f	e8 00 00 00 00	 call	 _memset
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  001a4	8b 45 bc	 mov	 eax, DWORD PTR tv1157[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  001a7	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001aa	8b 4d c0	 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]
  001ad	41		 inc	 ecx

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  001ae	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b1	8b 45 c4	 mov	 eax, DWORD PTR __Back_shift$1$[ebp]
  001b4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ba	72 16		 jb	 SHORT $LN100@do_put

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001bc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001bf	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001c2	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c4	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001ca	0f 87 ee 01 00
	00		 ja	 $LN255@do_put

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001d0	8b c2		 mov	 eax, edx
$LN100@do_put:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001d2	51		 push	 ecx
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d9	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3013 :         } else {

  001dc	eb 1e		 jmp	 SHORT $LN281@do_put
$LN47@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001de	8d 45 d0	 lea	 eax, DWORD PTR __Str$[ebp]
  001e1	50		 push	 eax
  001e2	56		 push	 esi
  001e3	e8 00 00 00 00	 call	 _memcpy

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  001e8	57		 push	 edi
  001e9	6a 00		 push	 0
  001eb	ff 75 cc	 push	 DWORD PTR tv1158[ebp]
  001ee	e8 00 00 00 00	 call	 _memset
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  001f3	8b 45 bc	 mov	 eax, DWORD PTR tv1157[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 467  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  001f6	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1531 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  001f9	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN281@do_put:

; 416  :         value_type* _Result = _Bx._Buf;

  001fc	89 75 d0	 mov	 DWORD PTR __Str$[ebp], esi
$LN48@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 889  :             _Count = _Strftime(&_Str[0], _Str.size(), _Fmt, _Pt, _Tnames._Getptr());

  001ff	8b 4d a8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  00202	8d 45 d0	 lea	 eax, DWORD PTR __Str$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  00205	83 7d e4 0f	 cmp	 DWORD PTR __Str$[ebp+20], 15 ; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00209	0f 47 c6	 cmova	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 889  :             _Count = _Strftime(&_Str[0], _Str.size(), _Fmt, _Pt, _Tnames._Getptr());

  0020c	ff 71 08	 push	 DWORD PTR [ecx+8]
  0020f	8d 4d e8	 lea	 ecx, DWORD PTR __Fmt$[ebp]
  00212	ff 75 a4	 push	 DWORD PTR __Pt$GSCopy$1$[ebp]
  00215	51		 push	 ecx
  00216	ff 75 e0	 push	 DWORD PTR __Str$[ebp+16]
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 __Strftime
  0021f	8b c8		 mov	 ecx, eax
  00221	83 c4 14	 add	 esp, 20			; 00000014H

; 890  :             if (0 < _Count) {

  00224	8b 45 b8	 mov	 eax, DWORD PTR __Errno_ref$1$[ebp]
  00227	85 c9		 test	 ecx, ecx
  00229	0f 85 87 00 00
	00		 jne	 $LN268@do_put

; 891  :                 break;
; 892  :             } else if (_Errno_ref == EINVAL) {

  0022f	83 38 16	 cmp	 DWORD PTR [eax], 22	; 00000016H
  00232	74 07		 je	 SHORT $LN269@do_put

; 885  :         const int _Old_errno = _Errno_ref;
; 886  : 
; 887  :         for (_Num = 16;; _Num *= 2) { // convert into ever larger string buffer until success

  00234	03 ff		 add	 edi, edi
  00236	e9 65 fe ff ff	 jmp	 $LL4@do_put
$LN269@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 196  :         clear(rdstate() | _State, false);

  0023b	8b 4d a0	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  0023e	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00241	83 e0 13	 and	 eax, 19			; 00000013H

; 155  :         _State &= _Statmask;

  00244	83 c8 04	 or	 eax, 4

; 156  :         _Mystate             = _State;

  00247	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 157  :         const auto _Filtered = _State & _Except;

  0024a	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0024d	23 c8		 and	 ecx, eax

; 158  :         if (_Filtered) {

  0024f	0f 85 27 01 00
	00		 jne	 $LN283@do_put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 894  :                 return _Dest;

  00255	8b 7d b4	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  00258	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp+4]
  0025b	8b 45 0c	 mov	 eax, DWORD PTR __Dest$[ebp]
  0025e	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00261	8b 4d e4	 mov	 ecx, DWORD PTR __Str$[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 894  :                 return _Dest;

  00264	89 07		 mov	 DWORD PTR [edi], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00266	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00269	76 2c		 jbe	 SHORT $LN247@do_put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0026b	8b 55 d0	 mov	 edx, DWORD PTR __Str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0026e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0026f	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00271	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00277	72 14		 jb	 SHORT $LN258@do_put

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00279	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0027c	83 c1 23	 add	 ecx, 35			; 00000023H
  0027f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00281	83 c0 fc	 add	 eax, -4			; fffffffcH
  00284	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00287	0f 87 31 01 00
	00		 ja	 $LN255@do_put
$LN258@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 899  :         return _STD copy(&_Str[1], &_Str[_Count], _Dest);

  0028d	51		 push	 ecx
  0028e	52		 push	 edx
  0028f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00294	83 c4 08	 add	 esp, 8
$LN247@do_put:
  00297	8b c7		 mov	 eax, edi

; 900  :     }

  00299	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0029c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002a3	59		 pop	 ecx
  002a4	5f		 pop	 edi
  002a5	5e		 pop	 esi
  002a6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a9	33 cd		 xor	 ecx, ebp
  002ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b0	8b e5		 mov	 esp, ebp
  002b2	5d		 pop	 ebp
  002b3	c2 20 00	 ret	 32			; 00000020H
$LN268@do_put:

; 898  :         _Errno_ref = _Old_errno;

  002b6	8b 55 b0	 mov	 edx, DWORD PTR __Old_errno$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  002b9	8d 7d d0	 lea	 edi, DWORD PTR __Str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 898  :         _Errno_ref = _Old_errno;

  002bc	89 10		 mov	 DWORD PTR [eax], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  002be	8d 45 d0	 lea	 eax, DWORD PTR __Str$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  002c1	83 7d e4 0f	 cmp	 DWORD PTR __Str$[ebp+20], 15 ; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  002c5	8b 55 d0	 mov	 edx, DWORD PTR __Str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4881 :     _STD _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _STD move(_UDest)));

  002c8	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 417  :         if (_Large_mode_engaged()) {

  002cb	0f 47 c2	 cmova	 eax, edx

; 2247 :         return _Mypair._Myval2._Myptr()[_Off];

  002ce	03 c1		 add	 eax, ecx

; 434  :         return _Myres > _Small_string_capacity;

  002d0	83 7d e4 0f	 cmp	 DWORD PTR __Str$[ebp+20], 15 ; 0000000fH

; 2247 :         return _Mypair._Myval2._Myptr()[_Off];

  002d4	89 45 cc	 mov	 DWORD PTR tv1179[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4881 :     _STD _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _STD move(_UDest)));

  002d7	8b 45 0c	 mov	 eax, DWORD PTR __Dest$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 417  :         if (_Large_mode_engaged()) {

  002da	0f 47 fa	 cmova	 edi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4881 :     _STD _Seek_wrapped(_Dest, _STD _Copy_unchecked(_UFirst, _ULast, _STD move(_UDest)));

  002dd	89 45 ac	 mov	 DWORD PTR __Dest$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2247 :         return _Mypair._Myval2._Myptr()[_Off];

  002e0	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  002e1	8b 45 cc	 mov	 eax, DWORD PTR tv1179[ebp]
  002e4	3b f8		 cmp	 edi, eax
  002e6	74 52		 je	 SHORT $LN199@do_put
$LL200@do_put:

; 4868 :             *_Dest = *_First;

  002e8	8a 0f		 mov	 cl, BYTE PTR [edi]
  002ea	88 4d cb	 mov	 BYTE PTR $T4[ebp], cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  002ed	85 f6		 test	 esi, esi
  002ef	74 3d		 je	 SHORT $LN204@do_put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  002f1	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  002f4	83 38 00	 cmp	 DWORD PTR [eax], 0
  002f7	74 20		 je	 SHORT $LN208@do_put
  002f9	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  002fc	8b 02		 mov	 eax, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  002fe	85 c0		 test	 eax, eax
  00300	7e 17		 jle	 SHORT $LN208@do_put

; 256  :         --*_IPcount;

  00302	48		 dec	 eax
  00303	89 02		 mov	 DWORD PTR [edx], eax

; 257  :         return (*_IPnext)++;

  00305	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00308	8b 11		 mov	 edx, DWORD PTR [ecx]
  0030a	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0030d	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0030f	8a 45 cb	 mov	 al, BYTE PTR $T4[ebp]
  00312	88 02		 mov	 BYTE PTR [edx], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  00314	0f b6 c0	 movzx	 eax, al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00317	eb 0d		 jmp	 SHORT $LN209@do_put
$LN208@do_put:
  00319	8b 06		 mov	 eax, DWORD PTR [esi]
  0031b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  0031e	0f b6 c1	 movzx	 eax, cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00321	8b ce		 mov	 ecx, esi
  00323	50		 push	 eax
  00324	ff d2		 call	 edx
$LN209@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  00326	83 f8 ff	 cmp	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00329	8b 45 cc	 mov	 eax, DWORD PTR tv1179[ebp]
  0032c	75 04		 jne	 SHORT $LN198@do_put
$LN204@do_put:

; 527  :             _Failed = true;

  0032e	c6 45 ac 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN198@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4867 :         for (; _First != _Last; ++_Dest, (void) ++_First) {

  00332	47		 inc	 edi
  00333	3b f8		 cmp	 edi, eax
  00335	75 b1		 jne	 SHORT $LL200@do_put
  00337	8b 55 d0	 mov	 edx, DWORD PTR __Str$[ebp]
$LN199@do_put:

; 4882 :     return _Dest;

  0033a	8b 7d b4	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0033d	8b 45 ac	 mov	 eax, DWORD PTR __Dest$[ebp]
  00340	89 07		 mov	 DWORD PTR [edi], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00342	8b 45 e4	 mov	 eax, DWORD PTR __Str$[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 4882 :     return _Dest;

  00345	89 77 04	 mov	 DWORD PTR [edi+4], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00348	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0034b	0f 86 46 ff ff
	ff		 jbe	 $LN247@do_put

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00351	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00354	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00356	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0035c	0f 82 2b ff ff
	ff		 jb	 $LN258@do_put

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00362	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00365	83 c1 23	 add	 ecx, 35			; 00000023H
  00368	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0036a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0036d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00370	77 4c		 ja	 SHORT $LN255@do_put
  00372	e9 16 ff ff ff	 jmp	 $LN258@do_put
$LN267@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2994 :             _Xlen_string(); // result too long

  00377	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN283@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  0037c	f6 c1 04	 test	 cl, 4
  0037f	74 07		 je	 SHORT $LN130@do_put

; 165  :                 _Msg = "ios_base::badbit set";

  00381	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00386	eb 10		 jmp	 SHORT $LN132@do_put
$LN130@do_put:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00388	f6 c1 02	 test	 cl, 2
  0038b	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00390	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00395	0f 44 f0	 cmove	 esi, eax
$LN132@do_put:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  00398	8d 45 ac	 lea	 eax, DWORD PTR $T3[ebp]
  0039b	6a 01		 push	 1
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  003a3	83 c4 08	 add	 esp, 8
  003a6	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  003a9	50		 push	 eax
  003aa	56		 push	 esi
  003ab	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  003b0	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  003b5	8d 45 8c	 lea	 eax, DWORD PTR $T2[ebp]
  003b8	50		 push	 eax
  003b9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN255@do_put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003be	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN279@do_put:
  003c3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@DD@Z ENDP ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
;	COMDAT ??1?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 864  :     __CLR_OR_THIS_CALL ~time_put() noexcept override {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 116  :         _CSTD free(_Timeptr);

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 864  :     __CLR_OR_THIS_CALL ~time_put() noexcept override {}

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 116  :         _CSTD free(_Timeptr);

  0000c	e8 00 00 00 00	 call	 _free
  00011	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 864  :     __CLR_OR_THIS_CALL ~time_put() noexcept override {}

  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
;	COMDAT ?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z
_TEXT	SEGMENT
$T2 = -52						; size = 8
_this$1$ = -44						; size = 4
$T3 = -40						; size = 8
__Ch$ = -36						; size = 1
__Ch$ = -32						; size = 1
__Ch$ = -28						; size = 1
__Modifier$4 = -24					; size = 1
__Specifier$5 = -20					; size = 1
__Ctype_fac$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Pt$ = 28						; size = 4
__Fmtfirst$ = 32					; size = 4
__Percent$1$ = 35					; size = 1
__Fmtlast$ = 36						; size = 4
?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z PROC ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 788  :         const _Elem* _Fmtlast) const { // put formatted time from _Pt to _Dest for [_Fmtfirst, _Fmtlast)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d d4	 mov	 DWORD PTR _this$1$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 289  :         return *_Ploc;

  0002b	8b 45 14	 mov	 eax, DWORD PTR __Iosbase$[ebp]
  0002e	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 266  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00031	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 267  :         _Ptr->_Incref();

  00034	8b ce		 mov	 ecx, esi
  00036	89 75 dc	 mov	 DWORD PTR $T3[ebp+4], esi
  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	ff 50 04	 call	 DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 789  :         const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(_Iosbase.getloc());

  0003e	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0004e	83 c4 04	 add	 esp, 4
  00051	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	8b c8		 mov	 ecx, eax
  0005a	89 4d f0	 mov	 DWORD PTR __Ctype_fac$1$[ebp], ecx
  0005d	85 f6		 test	 esi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 352  :         if (_Ptr) {

  0005f	74 16		 je	 SHORT $LN86@put

; 353  :             delete _Ptr->_Decref();

  00061	8b 16		 mov	 edx, DWORD PTR [esi]
  00063	8b ce		 mov	 ecx, esi
  00065	ff 52 08	 call	 DWORD PTR [edx+8]
  00068	85 c0		 test	 eax, eax
  0006a	74 08		 je	 SHORT $LN293@put
  0006c	8b 10		 mov	 edx, DWORD PTR [eax]
  0006e	8b c8		 mov	 ecx, eax
  00070	6a 01		 push	 1
  00072	ff 12		 call	 DWORD PTR [edx]
$LN293@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 791  :         for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst) {

  00074	8b 4d f0	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
$LN86@put:
  00077	8b 75 20	 mov	 esi, DWORD PTR __Fmtfirst$[ebp]
  0007a	8b 5d 24	 mov	 ebx, DWORD PTR __Fmtlast$[ebp]
  0007d	3b f3		 cmp	 esi, ebx
  0007f	0f 84 0d 03 00
	00		 je	 $LN292@put
$LL4@put:

; 792  :             if (_Ctype_fac.narrow(*_Fmtfirst) != '%') {

  00085	8a 06		 mov	 al, BYTE PTR [esi]
  00087	8b fe		 mov	 edi, esi
  00089	88 45 e4	 mov	 BYTE PTR __Ch$[ebp], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2761 :         return do_narrow(_Ch, _Dflt);

  0008c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008e	6a 00		 push	 0
  00090	ff 75 e4	 push	 DWORD PTR __Ch$[ebp]
  00093	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00096	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 792  :             if (_Ctype_fac.narrow(*_Fmtfirst) != '%') {

  00098	3c 25		 cmp	 al, 37			; 00000025H
  0009a	74 43		 je	 SHORT $LN5@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  0009c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 793  :                 *_Dest++ = *_Fmtfirst; // copy literal element

  0009f	8a 1e		 mov	 bl, BYTE PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  000a1	85 c0		 test	 eax, eax
  000a3	0f 84 49 02 00
	00		 je	 $LN252@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  000a9	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000ac	83 39 00	 cmp	 DWORD PTR [ecx], 0
  000af	74 20		 je	 SHORT $LN29@put
  000b1	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  000b4	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000b6	85 c9		 test	 ecx, ecx
  000b8	7e 17		 jle	 SHORT $LN29@put

; 256  :         --*_IPcount;

  000ba	49		 dec	 ecx
  000bb	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  000bd	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c2	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000c5	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000c7	88 1a		 mov	 BYTE PTR [edx], bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  000c9	0f b6 c3	 movzx	 eax, bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000cc	e9 19 02 00 00	 jmp	 $LN30@put
$LN29@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 791  :         for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst) {

  000d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000d6	0f b6 cb	 movzx	 ecx, bl
  000d9	51		 push	 ecx
  000da	e9 07 02 00 00	 jmp	 $LN295@put
$LN5@put:

; 794  :             } else if (++_Fmtfirst == _Fmtlast) { // treat trailing % as %%

  000df	46		 inc	 esi
  000e0	3b f3		 cmp	 esi, ebx
  000e2	0f 84 ce 02 00
	00		 je	 $LN278@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2761 :         return do_narrow(_Ch, _Dflt);

  000e8	8b 4d f0	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 798  :                 char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);

  000eb	8a 06		 mov	 al, BYTE PTR [esi]
  000ed	88 45 e0	 mov	 BYTE PTR __Ch$[ebp], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2761 :         return do_narrow(_Ch, _Dflt);

  000f0	6a 00		 push	 0
  000f2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f4	ff 75 e0	 push	 DWORD PTR __Ch$[ebp]
  000f7	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  000fa	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 798  :                 char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);

  000fc	8a d8		 mov	 bl, al

; 799  :                 char _Modifier  = '\0';

  000fe	32 ff		 xor	 bh, bh

; 800  :                 _Elem _Percent  = _Fmtfirst[-1];

  00100	8a 07		 mov	 al, BYTE PTR [edi]
  00102	88 5d ec	 mov	 BYTE PTR __Specifier$5[ebp], bl
  00105	88 7d e8	 mov	 BYTE PTR __Modifier$4[ebp], bh
  00108	88 45 23	 mov	 BYTE PTR __Percent$1$[ebp], al

; 801  : 
; 802  :                 if (_Specifier == 'E' || _Specifier == 'O' || _Specifier == 'Q' || _Specifier == '#') {

  0010b	80 fb 45	 cmp	 bl, 69			; 00000045H
  0010e	74 0f		 je	 SHORT $LN10@put
  00110	80 fb 4f	 cmp	 bl, 79			; 0000004fH
  00113	74 0a		 je	 SHORT $LN10@put
  00115	80 fb 51	 cmp	 bl, 81			; 00000051H
  00118	74 05		 je	 SHORT $LN10@put
  0011a	80 fb 23	 cmp	 bl, 35			; 00000023H
  0011d	75 28		 jne	 SHORT $LN9@put
$LN10@put:

; 803  :                     if (++_Fmtfirst == _Fmtlast) { // no specifier, copy %[E0Q#] as literal elements

  0011f	46		 inc	 esi
  00120	3b 75 24	 cmp	 esi, DWORD PTR __Fmtlast$[ebp]
  00123	0f 84 e1 01 00
	00		 je	 $LN279@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2761 :         return do_narrow(_Ch, _Dflt);

  00129	8b 4d f0	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 810  :                     _Modifier  = _Specifier;

  0012c	8a fb		 mov	 bh, bl

; 811  :                     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);

  0012e	8a 06		 mov	 al, BYTE PTR [esi]
  00130	88 45 dc	 mov	 BYTE PTR __Ch$[ebp], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2761 :         return do_narrow(_Ch, _Dflt);

  00133	6a 00		 push	 0
  00135	8b 01		 mov	 eax, DWORD PTR [ecx]
  00137	ff 75 dc	 push	 DWORD PTR __Ch$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 810  :                     _Modifier  = _Specifier;

  0013a	88 7d e8	 mov	 BYTE PTR __Modifier$4[ebp], bh
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2761 :         return do_narrow(_Ch, _Dflt);

  0013d	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00140	ff d0		 call	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 811  :                     _Specifier = _Ctype_fac.narrow(*_Fmtfirst);

  00142	8a d8		 mov	 bl, al
  00144	88 5d ec	 mov	 BYTE PTR __Specifier$5[ebp], bl
$LN9@put:

; 812  :                 }
; 813  : 
; 814  :                 if (_Specifier == '%' && _Modifier == '\0') {

  00147	80 fb 25	 cmp	 bl, 37			; 00000025H
  0014a	75 49		 jne	 SHORT $LN12@put
  0014c	84 ff		 test	 bh, bh
  0014e	75 45		 jne	 SHORT $LN12@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00150	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  00153	85 c0		 test	 eax, eax
  00155	0f 84 97 01 00
	00		 je	 $LN252@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  0015b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0015e	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00161	74 23		 je	 SHORT $LN203@put
  00163	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00166	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00168	85 c9		 test	 ecx, ecx
  0016a	7e 1a		 jle	 SHORT $LN203@put

; 256  :         --*_IPcount;

  0016c	49		 dec	 ecx
  0016d	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  0016f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00172	8b 11		 mov	 edx, DWORD PTR [ecx]
  00174	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00177	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00179	8a 45 23	 mov	 al, BYTE PTR __Percent$1$[ebp]
  0017c	88 02		 mov	 BYTE PTR [edx], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  0017e	0f b6 c0	 movzx	 eax, al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00181	e9 64 01 00 00	 jmp	 $LN30@put
$LN203@put:
  00186	8b 08		 mov	 ecx, DWORD PTR [eax]
  00188	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  0018b	0f b6 4d 23	 movzx	 ecx, BYTE PTR __Percent$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0018f	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 817  :                 } else if (!_Is_valid_strftime_specifier(_Specifier)) {

  00190	e9 51 01 00 00	 jmp	 $LN295@put
$LN12@put:

; 660  :     for (const auto& _Valid_specifier : _Valid_strftime_specifiers) {

  00195	b8 00 00 00 00	 mov	 eax, OFFSET ?_Valid_strftime_specifiers@std@@3QBDB ; std::_Valid_strftime_specifiers
  0019a	66 0f 1f 44 00
	00		 npad	 6
$LL144@put:

; 661  :         if (_Specifier == _Valid_specifier) {

  001a0	3a 18		 cmp	 bl, BYTE PTR [eax]
  001a2	0f 84 cc 00 00
	00		 je	 $LN14@put

; 660  :     for (const auto& _Valid_specifier : _Valid_strftime_specifiers) {

  001a8	40		 inc	 eax
  001a9	3d 24 00 00 00	 cmp	 eax, OFFSET ?_Valid_strftime_specifiers@std@@3QBDB+36
  001ae	75 f0		 jne	 SHORT $LL144@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  001b0	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  001b3	85 c0		 test	 eax, eax
  001b5	74 3e		 je	 SHORT $LN149@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  001b7	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001ba	83 39 00	 cmp	 DWORD PTR [ecx], 0
  001bd	74 20		 je	 SHORT $LN153@put
  001bf	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  001c2	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001c4	85 c9		 test	 ecx, ecx
  001c6	7e 17		 jle	 SHORT $LN153@put

; 256  :         --*_IPcount;

  001c8	49		 dec	 ecx
  001c9	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  001cb	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001ce	8b 11		 mov	 edx, DWORD PTR [ecx]
  001d0	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  001d3	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001d5	8a 45 23	 mov	 al, BYTE PTR __Percent$1$[ebp]
  001d8	88 02		 mov	 BYTE PTR [edx], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  001da	0f b6 c0	 movzx	 eax, al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001dd	eb 0e		 jmp	 SHORT $LN154@put
$LN153@put:
  001df	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  001e4	0f b6 4d 23	 movzx	 ecx, BYTE PTR __Percent$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001e8	51		 push	 ecx
  001e9	8b c8		 mov	 ecx, eax
  001eb	ff d2		 call	 edx
$LN154@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  001ed	83 f8 ff	 cmp	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  001f0	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  001f3	75 04		 jne	 SHORT $LN148@put
$LN149@put:

; 527  :             _Failed = true;

  001f5	c6 45 0c 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN148@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 820  :                     if (_Modifier != '\0') {

  001f9	84 ff		 test	 bh, bh
  001fb	74 42		 je	 SHORT $LN226@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  001fd	85 c0		 test	 eax, eax
  001ff	74 3a		 je	 SHORT $LN227@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  00201	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00204	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00207	74 1d		 je	 SHORT $LN231@put
  00209	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  0020c	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0020e	85 c9		 test	 ecx, ecx
  00210	7e 14		 jle	 SHORT $LN231@put

; 256  :         --*_IPcount;

  00212	49		 dec	 ecx
  00213	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  00215	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00218	8b 11		 mov	 edx, DWORD PTR [ecx]
  0021a	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0021d	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0021f	88 3a		 mov	 BYTE PTR [edx], bh
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  00221	0f b6 c7	 movzx	 eax, bh
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00224	eb 0d		 jmp	 SHORT $LN232@put
$LN231@put:
  00226	8b 08		 mov	 ecx, DWORD PTR [eax]
  00228	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  0022b	0f b6 cf	 movzx	 ecx, bh
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0022e	51		 push	 ecx
  0022f	8b c8		 mov	 ecx, eax
  00231	ff d2		 call	 edx
$LN232@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  00233	83 f8 ff	 cmp	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00236	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  00239	75 04		 jne	 SHORT $LN226@put
$LN227@put:

; 527  :             _Failed = true;

  0023b	c6 45 0c 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN226@put:

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  0023f	85 c0		 test	 eax, eax
  00241	0f 84 ab 00 00
	00		 je	 $LN252@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  00247	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0024a	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0024d	0f 84 7e fe ff
	ff		 je	 $LN29@put
  00253	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00256	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00258	85 c9		 test	 ecx, ecx
  0025a	0f 8e 71 fe ff
	ff		 jle	 $LN29@put

; 256  :         --*_IPcount;

  00260	49		 dec	 ecx
  00261	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  00263	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00266	8b 11		 mov	 edx, DWORD PTR [ecx]
  00268	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0026b	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0026d	88 1a		 mov	 BYTE PTR [edx], bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  0026f	0f b6 c3	 movzx	 eax, bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00272	eb 76		 jmp	 SHORT $LN30@put
$LN14@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 825  :                     if (_Is_valid_strftime_tm_data(_Specifier, _Pt)) {

  00274	8b 5d 1c	 mov	 ebx, DWORD PTR __Pt$[ebp]
  00277	8b 7d ec	 mov	 edi, DWORD PTR __Specifier$5[ebp]
  0027a	53		 push	 ebx
  0027b	57		 push	 edi
  0027c	e8 00 00 00 00	 call	 ?_Is_valid_strftime_tm_data@std@@YA_NDQBUtm@@@Z ; std::_Is_valid_strftime_tm_data
  00281	83 c4 08	 add	 esp, 8
  00284	84 c0		 test	 al, al
  00286	74 2a		 je	 SHORT $LN17@put

; 826  :                         _Dest = do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier); // convert a single field

  00288	ff 75 e8	 push	 DWORD PTR __Modifier$4[ebp]
  0028b	8b 4d d4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0028e	8d 55 cc	 lea	 edx, DWORD PTR $T2[ebp]
  00291	57		 push	 edi
  00292	53		 push	 ebx
  00293	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00296	8b 01		 mov	 eax, DWORD PTR [ecx]
  00298	ff 75 14	 push	 DWORD PTR __Iosbase$[ebp]
  0029b	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0029e	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  002a1	52		 push	 edx
  002a2	ff 50 0c	 call	 DWORD PTR [eax+12]
  002a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002aa	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  002ad	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax

; 827  :                     } else {

  002b0	eb 44		 jmp	 SHORT $LN2@put
$LN17@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  002b2	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  002b5	85 c0		 test	 eax, eax
  002b7	74 39		 je	 SHORT $LN252@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  002b9	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002bc	83 39 00	 cmp	 DWORD PTR [ecx], 0
  002bf	74 1e		 je	 SHORT $LN256@put
  002c1	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  002c4	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  002c6	85 c9		 test	 ecx, ecx
  002c8	7e 15		 jle	 SHORT $LN256@put

; 256  :         --*_IPcount;

  002ca	49		 dec	 ecx
  002cb	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  002cd	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  002d2	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  002d5	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  002d7	c6 02 3f	 mov	 BYTE PTR [edx], 63	; 0000003fH
$LN289@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 791  :         for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst) {

  002da	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  002dd	eb 17		 jmp	 SHORT $LN2@put
$LN256@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  002df	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e1	6a 3f		 push	 63			; 0000003fH
  002e3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
$LN295@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 791  :         for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst) {

  002e6	8b c8		 mov	 ecx, eax
  002e8	ff d2		 call	 edx
$LN30@put:
  002ea	83 f8 ff	 cmp	 eax, -1
  002ed	75 eb		 jne	 SHORT $LN289@put
  002ef	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
$LN252@put:
  002f2	c6 45 0c 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN2@put:
  002f6	8b 5d 24	 mov	 ebx, DWORD PTR __Fmtlast$[ebp]
  002f9	46		 inc	 esi
  002fa	8b 4d f0	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
  002fd	3b f3		 cmp	 esi, ebx
  002ff	0f 85 80 fd ff
	ff		 jne	 $LL4@put

; 803  :                     if (++_Fmtfirst == _Fmtlast) { // no specifier, copy %[E0Q#] as literal elements

  00305	e9 8b 00 00 00	 jmp	 $LN49@put
$LN279@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  0030a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0030d	85 c0		 test	 eax, eax
  0030f	74 3e		 je	 SHORT $LN91@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  00311	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00314	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00317	74 20		 je	 SHORT $LN95@put
  00319	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  0031c	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0031e	85 c9		 test	 ecx, ecx
  00320	7e 17		 jle	 SHORT $LN95@put

; 256  :         --*_IPcount;

  00322	49		 dec	 ecx
  00323	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  00325	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00328	8b 11		 mov	 edx, DWORD PTR [ecx]
  0032a	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0032d	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0032f	8a 4d 23	 mov	 cl, BYTE PTR __Percent$1$[ebp]
  00332	88 0a		 mov	 BYTE PTR [edx], cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  00334	0f b6 c1	 movzx	 eax, cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00337	eb 0e		 jmp	 SHORT $LN96@put
$LN95@put:
  00339	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  0033e	0f b6 4d 23	 movzx	 ecx, BYTE PTR __Percent$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00342	51		 push	 ecx
  00343	8b c8		 mov	 ecx, eax
  00345	ff d2		 call	 edx
$LN96@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  00347	83 f8 ff	 cmp	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  0034a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0034d	75 04		 jne	 SHORT $LN90@put
$LN91@put:

; 527  :             _Failed = true;

  0034f	c6 45 0c 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN90@put:

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00353	85 c0		 test	 eax, eax
  00355	0f 84 9e 00 00
	00		 je	 $LN50@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  0035b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0035e	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00361	74 1d		 je	 SHORT $LN120@put
  00363	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00366	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00368	85 c9		 test	 ecx, ecx
  0036a	7e 14		 jle	 SHORT $LN120@put

; 256  :         --*_IPcount;

  0036c	49		 dec	 ecx
  0036d	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  0036f	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00372	8b 11		 mov	 edx, DWORD PTR [ecx]
  00374	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00377	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00379	88 1a		 mov	 BYTE PTR [edx], bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  0037b	0f b6 c3	 movzx	 eax, bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0037e	eb 0d		 jmp	 SHORT $LN121@put
$LN120@put:
  00380	8b 08		 mov	 ecx, DWORD PTR [eax]
  00382	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  00385	0f b6 cb	 movzx	 ecx, bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00388	51		 push	 ecx
  00389	8b c8		 mov	 ecx, eax
  0038b	ff d2		 call	 edx
$LN121@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  0038d	83 f8 ff	 cmp	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00390	74 64		 je	 SHORT $LN291@put
$LN292@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 834  :         return _Dest;

  00392	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
$LN49@put:
  00395	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00398	8b 4d 0c	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0039b	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0039e	8b c2		 mov	 eax, edx
  003a0	89 0a		 mov	 DWORD PTR [edx], ecx

; 835  :     }

  003a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003ac	59		 pop	 ecx
  003ad	5f		 pop	 edi
  003ae	5e		 pop	 esi
  003af	5b		 pop	 ebx
  003b0	8b e5		 mov	 esp, ebp
  003b2	5d		 pop	 ebp
  003b3	c2 20 00	 ret	 32			; 00000020H
$LN278@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  003b6	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 795  :                 *_Dest++ = _Fmtfirst[-1];

  003b9	8a 1f		 mov	 bl, BYTE PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  003bb	85 c0		 test	 eax, eax
  003bd	74 3a		 je	 SHORT $LN50@put
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  003bf	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  003c2	83 39 00	 cmp	 DWORD PTR [ecx], 0
  003c5	74 1d		 je	 SHORT $LN54@put
  003c7	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  003ca	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  003cc	85 c9		 test	 ecx, ecx
  003ce	7e 14		 jle	 SHORT $LN54@put

; 256  :         --*_IPcount;

  003d0	49		 dec	 ecx
  003d1	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  003d3	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  003d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  003d8	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  003db	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  003dd	88 1a		 mov	 BYTE PTR [edx], bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  003df	0f b6 c3	 movzx	 eax, bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  003e2	eb 0d		 jmp	 SHORT $LN55@put
$LN54@put:
  003e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e6	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  003e9	0f b6 cb	 movzx	 ecx, bl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  003ec	51		 push	 ecx
  003ed	8b c8		 mov	 ecx, eax
  003ef	ff d2		 call	 edx
$LN55@put:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  003f1	83 f8 ff	 cmp	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  003f4	75 9c		 jne	 SHORT $LN292@put
$LN291@put:
  003f6	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp+4]
$LN50@put:

; 527  :             _Failed = true;

  003f9	c6 45 0c 01	 mov	 BYTE PTR __Dest$[ebp], 1

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  003fd	eb 96		 jmp	 SHORT $LN49@put
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z ENDP ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -84						; size = 52
$T3 = -32						; size = 4
__Lock$4 = -28						; size = 4
$T5 = -24						; size = 4
__Psave$1$ = -24					; size = 4
__Lock$6 = -20						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
__Psave_guard$8 = 8					; size = 4
??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 432  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 433  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp], 0
  00034	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 89   :             if (_Id == 0) { // still zero, allocate stamp

  00039	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id

; 434  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	89 45 e8	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 89   :             if (_Id == 0) { // still zero, allocate stamp

  0004e	85 f6		 test	 esi, esi
  00050	75 2f		 jne	 SHORT $LN11@use_facet

; 90   :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00052	56		 push	 esi
  00053	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00056	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 91   :                 if (_Id == 0) {

  0005b	39 35 00 00 00
	00		 cmp	 DWORD PTR ?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, esi ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00061	75 10		 jne	 SHORT $LN12@use_facet

; 92   :                     _Id = static_cast<size_t>(++_Id_cnt);

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00068	40		 inc	 eax
  00069	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006e	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, eax ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN12@use_facet:

; 93   :                 }
; 94   :                 _END_LOCK()

  00073	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00076	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?id@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN11@use_facet:

; 375  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00081	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00084	8d 1c b5 00 00
	00 00		 lea	 ebx, DWORD PTR [esi*4]
  0008b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0008e	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  00091	73 10		 jae	 SHORT $LN19@use_facet
  00093	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00096	8b 3c 03	 mov	 edi, DWORD PTR [ebx+eax]

; 376  :         if (_Facptr || !_Ptr->_Xparent) {

  00099	85 ff		 test	 edi, edi
  0009b	0f 85 dc 00 00
	00		 jne	 $LN82@use_facet
  000a1	eb 02		 jmp	 SHORT $LN86@use_facet
$LN19@use_facet:

; 372  :     }
; 373  : 
; 374  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 375  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  000a3	33 ff		 xor	 edi, edi
$LN86@use_facet:

; 376  :         if (_Facptr || !_Ptr->_Xparent) {

  000a5	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  000a9	74 10		 je	 SHORT $LN14@use_facet

; 377  :             return _Facptr; // found facet or not transparent
; 378  :         }
; 379  : 
; 380  :         // look in current locale
; 381  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000ab	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 382  :         if (_Id < _Ptr0->_Facetcount) {

  000b0	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  000b3	73 0e		 jae	 SHORT $LN87@use_facet

; 383  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000b5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b8	8b 3c 03	 mov	 edi, DWORD PTR [ebx+eax]
$LN14@use_facet:

; 435  : 
; 436  :     const size_t _Id         = _Facet::id._Get_index();
; 437  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 438  : 
; 439  :     if (!_Pf) {

  000bb	85 ff		 test	 edi, edi
  000bd	0f 85 ba 00 00
	00		 jne	 $LN82@use_facet
$LN87@use_facet:

; 440  :         if (_Psave) {

  000c3	8b 45 e8	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000c6	85 c0		 test	 eax, eax
  000c8	74 07		 je	 SHORT $LN3@use_facet

; 441  :             _Pf = _Psave; // lazy facet already allocated

  000ca	8b f8		 mov	 edi, eax

; 442  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000cc	e9 ac 00 00 00	 jmp	 $LN82@use_facet
$LN3@use_facet:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 857  :             *_Ppf = new time_put<_Elem, _OutIt>(_Locinfo(_Ploc->_C_str()));

  000d1	6a 0c		 push	 12			; 0000000cH
  000d3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d8	8b f8		 mov	 edi, eax
  000da	83 c4 04	 add	 esp, 4
  000dd	89 7d e8	 mov	 DWORD PTR $T5[ebp], edi
  000e0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000e4	85 ff		 test	 edi, edi
  000e6	74 68		 je	 SHORT $LN24@use_facet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 371  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000e8	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000eb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ee	85 c9		 test	 ecx, ecx
  000f0	74 0c		 je	 SHORT $LN32@use_facet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 190  :         return _Myptr ? _Myptr : &_Nul;

  000f2	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000f5	85 c0		 test	 eax, eax
  000f7	75 0a		 jne	 SHORT $LN33@use_facet
  000f9	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 371  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000fc	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 857  :             *_Ppf = new time_put<_Elem, _OutIt>(_Locinfo(_Ploc->_C_str()));

  00103	50		 push	 eax
  00104	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  00107	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 141  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  0010c	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 850  :     __CLR_OR_THIS_CALL time_put(const _Locinfo& _Lobj, size_t _Refs = 0) : locale::facet(_Refs) {

  00113	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  00116	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 857  :             *_Ppf = new time_put<_Elem, _OutIt>(_Locinfo(_Ploc->_C_str()));

  0011c	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T7[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 109  :     explicit __CLR_OR_THIS_CALL _Timevec(void* _Ptr = nullptr) : _Timeptr(_Ptr) {}

  00123	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 289  :         return _Timevec(::_Gettnames());

  00129	e8 00 00 00 00	 call	 __Gettnames

; 109  :     explicit __CLR_OR_THIS_CALL _Timevec(void* _Ptr = nullptr) : _Timeptr(_Ptr) {}

  0012e	8b f0		 mov	 esi, eax

; 120  :         if (this != &_Right) {

  00130	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  00133	3b d8		 cmp	 ebx, eax
  00135	74 0e		 je	 SHORT $LN59@use_facet

; 121  :             _CSTD free(_Timeptr);

  00137	ff 33		 push	 DWORD PTR [ebx]
  00139	e8 00 00 00 00	 call	 _free
  0013e	83 c4 04	 add	 esp, 4

; 122  :             _Timeptr                               = _Right._Timeptr;

  00141	89 33		 mov	 DWORD PTR [ebx], esi

; 123  :             const_cast<_Timevec&>(_Right)._Timeptr = nullptr; // TRANSITION, should be movable-only

  00143	33 f6		 xor	 esi, esi
$LN59@use_facet:

; 116  :         _CSTD free(_Timeptr);

  00145	56		 push	 esi
  00146	e8 00 00 00 00	 call	 _free
  0014b	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime

; 857  :             *_Ppf = new time_put<_Elem, _OutIt>(_Locinfo(_Ploc->_C_str()));

  0014e	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  00150	33 ff		 xor	 edi, edi
$LN25@use_facet:
  00152	f6 45 f0 01	 test	 BYTE PTR $T7[ebp], 1
  00156	74 08		 je	 SHORT $LN29@use_facet
  00158	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  0015b	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1527 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00160	89 7d 08	 mov	 DWORD PTR __Psave_guard$8[ebp], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 455  :             _Facet_Register(_Pfmod);

  00163	57		 push	 edi
  00164	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00168	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 456  : #endif // ^^^ !defined(_M_CEE) ^^^
; 457  : 
; 458  :             _Pfmod->_Incref();

  0016d	8b 17		 mov	 edx, DWORD PTR [edi]
  0016f	83 c4 04	 add	 esp, 4
  00172	8b cf		 mov	 ecx, edi
  00174	ff 52 04	 call	 DWORD PTR [edx+4]

; 459  :             _Facetptr<_Facet>::_Psave = _Psave;

  00177	89 3d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, edi ; std::_Facetptr<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
$LN82@use_facet:

; 460  :             _Pf                       = _Psave;
; 461  : 
; 462  :             (void) _Psave_guard.release();
; 463  :         }
; 464  :     }
; 465  : 
; 466  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  0017d	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00180	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00185	8b c7		 mov	 eax, edi

; 467  :     _END_LOCK()
; 468  : } // end of use_facet body

  00187	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00191	59		 pop	 ecx
  00192	5f		 pop	 edi
  00193	5e		 pop	 esi
  00194	5b		 pop	 ebx
  00195	8b e5		 mov	 esp, ebp
  00197	5d		 pop	 ebp
  00198	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$2:
  00008	6a 0c		 push	 12			; 0000000cH
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$8[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 107  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 108  : #if !_HAS_EXCEPTIONS
; 109  :             const bool _Zero_uncaught_exceptions = true;
; 110  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00025	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  0002a	84 c0		 test	 al, al
  0002c	75 07		 jne	 SHORT $LN2@sentry

; 117  :                 this->_Myostr._Osfx();

  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN2@sentry:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  00047	85 c9		 test	 ecx, ecx
  00049	74 05		 je	 SHORT $LN6@sentry

; 79   :                 _Rdbuf->_Unlock();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN6@sentry:

; 118  :             }
; 119  :         }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 90   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 69   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  0002a	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002d	89 37		 mov	 DWORD PTR [edi], esi

; 70   :             const auto _Rdbuf = _Myostr.rdbuf();

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]

; 71   :             if (_Rdbuf) {

  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN8@sentry

; 72   :                 _Rdbuf->_Lock();

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@sentry:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 90   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  0004a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004d	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00052	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 91   :             if (!_Ostr.good()) {

  00055	74 04		 je	 SHORT $LN2@sentry

; 92   :                 _Ok = false;

  00057	32 c0		 xor	 al, al

; 93   :                 return;

  00059	eb 21		 jmp	 SHORT $LN17@sentry
$LN2@sentry:

; 94   :             }
; 95   : 
; 96   :             const auto _Tied = _Ostr.tie();

  0005b	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]

; 97   :             if (!_Tied || _Tied == _STD addressof(_Ostr)) {

  0005e	85 c9		 test	 ecx, ecx
  00060	74 18		 je	 SHORT $LN4@sentry
  00062	3b ce		 cmp	 ecx, esi
  00064	74 14		 je	 SHORT $LN4@sentry

; 99   :                 return;
; 100  :             }
; 101  : 
; 102  :             _Tied->flush();

  00066	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00070	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00075	0f 94 c0	 sete	 al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 103  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00078	eb 02		 jmp	 SHORT $LN17@sentry
$LN4@sentry:

; 98   :                 _Ok = true;

  0007a	b0 01		 mov	 al, 1
$LN17@sentry:

; 104  :         }

  0007c	88 47 04	 mov	 BYTE PTR [edi+4], al
  0007f	8b c7		 mov	 eax, edi
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 76   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 79   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 80   :             }
; 81   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 3408 :         if (_Mypair._Myval2) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN7@unique_ptr

; 3299 :         delete _Ptr;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN7@unique_ptr:

; 3409 :             _Mypair._Get_first()(_Mypair._Myval2);
; 3410 :         }
; 3411 :     }

  0000c	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 52   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp+4]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax
  0000e	8b c1		 mov	 eax, ecx
  00010	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00021	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
;	COMDAT ?SetEterExceptionHandler@@YAXXZ
_TEXT	SEGMENT
?SetEterExceptionHandler@@YAXXZ PROC			; SetEterExceptionHandler, COMDAT

; 72   : 	SetUnhandledExceptionFilter(EterExceptionFilter);

  00000	68 00 00 00 00	 push	 OFFSET ?EterExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; EterExceptionFilter
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetUnhandledExceptionFilter@4

; 73   : }

  0000b	c3		 ret	 0
?SetEterExceptionHandler@@YAXXZ ENDP			; SetEterExceptionHandler
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
;	COMDAT ?EterExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z
_TEXT	SEGMENT
_pExceptionInfo$ = 8					; size = 4
?EterExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z PROC ; EterExceptionFilter, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : #ifdef ENABLE_CRASH_MINIDUMP
; 63   : 	make_minidump(pExceptionInfo);

  00003	ff 75 08	 push	 DWORD PTR _pExceptionInfo$[ebp]
  00006	e8 00 00 00 00	 call	 ?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z ; make_minidump
  0000b	83 c4 04	 add	 esp, 4

; 64   : #else
; 65   : 	// eterlog trash
; 66   : #endif
; 67   : 	return EXCEPTION_EXECUTE_HANDLER;

  0000e	b8 01 00 00 00	 mov	 eax, 1

; 68   : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?EterExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ENDP ; EterExceptionFilter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip
;	COMDAT ??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z
_TEXT	SEGMENT
$T2 = -60						; size = 20
$T3 = -40						; size = 8
$T4 = -40						; size = 8
$T5 = -40						; size = 8
__Ok$ = -32						; size = 8
$T6 = -24						; size = 8
__Tput_fac$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Manip$ = 12						; size = 4
??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z PROC ; std::operator<<<char,std::char_traits<char> >, COMDAT

; 138  :     friend basic_ostream<_Elem2, _Traits>& operator<<(basic_ostream<_Elem2, _Traits>& _Ostr, const _Timeobj& _Manip) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 139  :         // put time information to output stream
; 140  :         static_assert(is_same_v<_Elem, _Elem2>, "wrong character type for put_time");
; 141  : 
; 142  :         using _Myos   = basic_ostream<_Elem, _Traits>;
; 143  :         using _Iter   = ostreambuf_iterator<_Elem, _Traits>;
; 144  :         using _Mytput = time_put<_Elem, _Iter>;
; 145  : 
; 146  :         const typename _Myos::sentry _Ok(_Ostr);

  0002b	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002e	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 147  : 
; 148  :         if (_Ok) { // state okay, insert monetary amount

  00037	80 7d e4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00042	0f 84 ba 00 00
	00		 je	 $LN11@operator

; 149  :             const _Mytput& _Tput_fac = _STD use_facet<_Mytput>(_Ostr.getloc());

  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 289  :         return *_Ploc;

  0004d	8b 44 30 30	 mov	 eax, DWORD PTR [eax+esi+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 266  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00051	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 267  :         _Ptr->_Incref();

  00054	8b ce		 mov	 ecx, esi
  00056	89 75 ec	 mov	 DWORD PTR $T6[ebp+4], esi
  00059	8b 06		 mov	 eax, DWORD PTR [esi]
  0005b	ff 50 04	 call	 DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip

; 149  :             const _Mytput& _Tput_fac = _STD use_facet<_Mytput>(_Ostr.getloc());

  0005e	8d 45 e8	 lea	 eax, DWORD PTR $T6[ebp]
  00061	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$use_facet@V?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 45 ec	 mov	 DWORD PTR __Tput_fac$1$[ebp], eax
  00071	85 f6		 test	 esi, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 352  :         if (_Ptr) {

  00073	74 15		 je	 SHORT $LN23@operator

; 353  :             delete _Ptr->_Decref();

  00075	8b 06		 mov	 eax, DWORD PTR [esi]
  00077	8b ce		 mov	 ecx, esi
  00079	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0007c	ff d0		 call	 eax
  0007e	8b c8		 mov	 ecx, eax
  00080	85 c9		 test	 ecx, ecx
  00082	74 06		 je	 SHORT $LN23@operator
  00084	8b 01		 mov	 eax, DWORD PTR [ecx]
  00086	6a 01		 push	 1
  00088	ff 10		 call	 DWORD PTR [eax]
$LN23@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip

; 153  :                     .failed()) {

  0008a	8b 45 0c	 mov	 eax, DWORD PTR __Manip$[ebp]
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00090	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00094	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00097	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0009a	8b 38		 mov	 edi, DWORD PTR [eax]
  0009c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009e	52		 push	 edx
  0009f	56		 push	 esi
  000a0	57		 push	 edi
  000a1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a4	03 c8		 add	 ecx, eax
  000a6	8a 41 40	 mov	 al, BYTE PTR [ecx+64]
  000a9	50		 push	 eax
  000aa	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iterator

; 550  :     bool _Failed = false; // true if any stores have failed

  000ab	c6 45 d8 00	 mov	 BYTE PTR $T3[ebp], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip

; 153  :                     .failed()) {

  000af	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  000b2	ff 71 38	 push	 DWORD PTR [ecx+56]
  000b5	8b 4d ec	 mov	 ecx, DWORD PTR __Tput_fac$1$[ebp]
  000b8	ff 75 d8	 push	 DWORD PTR $T3[ebp]
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?put@?$time_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBUtm@@PBD3@Z ; std::time_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
  000c1	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  000c4	80 38 00	 cmp	 BYTE PTR [eax], 0
  000c7	74 39		 je	 SHORT $LN11@operator

; 154  :                 _Ostr.setstate(ios_base::badbit);

  000c9	8b 06		 mov	 eax, DWORD PTR [esi]
  000cb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 155  :         _State &= _Statmask;

  000ce	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  000d2	83 e0 13	 and	 eax, 19			; 00000013H
  000d5	83 c8 04	 or	 eax, 4

; 156  :         _Mystate             = _State;

  000d8	89 44 31 0c	 mov	 DWORD PTR [ecx+esi+12], eax

; 157  :         const auto _Filtered = _State & _Except;

  000dc	8b 4c 31 10	 mov	 ecx, DWORD PTR [ecx+esi+16]
  000e0	23 c8		 and	 ecx, eax

; 158  :         if (_Filtered) {

  000e2	75 5f		 jne	 SHORT $LN64@operator
  000e4	eb 1c		 jmp	 SHORT $LN11@operator
__catch$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip

; 156  :             _CATCH_IO_(ios_base, _Ostr)

  000e6	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e9	6a 01		 push	 1
  000eb	6a 04		 push	 4
  000ed	8b 02		 mov	 eax, DWORD PTR [edx]
  000ef	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f2	03 ca		 add	 ecx, edx
  000f4	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000f9	b8 00 00 00 00	 mov	 eax, $LN59@operator
  000fe	c3		 ret	 0
$LN59@operator:
  000ff	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
$LN11@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00102	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  00107	84 c0		 test	 al, al
  00109	75 08		 jne	 SHORT $LN48@operator

; 117  :                 this->_Myostr._Osfx();

  0010b	8b 4d e0	 mov	 ecx, DWORD PTR __Ok$[ebp]
  0010e	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN48@operator:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00113	8b 4d e0	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00116	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  0011d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00122	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  00126	85 c9		 test	 ecx, ecx
  00128	74 05		 je	 SHORT $LN54@operator

; 79   :                 _Rdbuf->_Unlock();

  0012a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012c	ff 52 08	 call	 DWORD PTR [edx+8]
$LN54@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip

; 159  :         return _Ostr;

  0012f	8b c6		 mov	 eax, esi

; 160  :     }

  00131	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00134	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013b	59		 pop	 ecx
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
$LN64@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  00143	f6 c1 04	 test	 cl, 4
  00146	74 07		 je	 SHORT $LN39@operator

; 165  :                 _Msg = "ios_base::badbit set";

  00148	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  0014d	eb 10		 jmp	 SHORT $LN41@operator
$LN39@operator:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  0014f	f6 c1 02	 test	 cl, 2
  00152	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00157	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0015c	0f 44 f0	 cmove	 esi, eax
$LN41@operator:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  0015f	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  00162	6a 01		 push	 1
  00164	50		 push	 eax
  00165	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0016a	83 c4 08	 add	 esp, 8
  0016d	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  00170	50		 push	 eax
  00171	56		 push	 esi
  00172	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00177	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0017c	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN62@operator:
  00185	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z$3:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iomanip
;	COMDAT ??$put_time@D@std@@YA?AU?$_Timeobj@DPBUtm@@@0@PBUtm@@PBD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Tptr_arg$ = 12					; size = 4
__Fmt_arg$ = 16						; size = 4
??$put_time@D@std@@YA?AU?$_Timeobj@DPBUtm@@@0@PBUtm@@PBD@Z PROC ; std::put_time<char>, COMDAT

; 173  : _NODISCARD _Timeobj<_Elem, const tm*> put_time(const tm* _Tptr_arg, const _Elem* _Fmt_arg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 108  :     _Timeobj(_Ptr _Tptr_arg, const _Elem* _Fmt_arg) : _Tptr(_Tptr_arg), _Fmtfirst(_Fmt_arg) {

  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Fmt_arg$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Tptr_arg$[ebp]

; 109  :         for (_Fmtlast = _Fmtfirst; *_Fmtlast != 0; ++_Fmtlast) { // find end of format string

  0000c	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00017	74 10		 je	 SHORT $LN12@put_time
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@put_time:
  00020	41		 inc	 ecx
  00021	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00024	75 fa		 jne	 SHORT $LL6@put_time
  00026	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN12@put_time:

; 174  :     return _Timeobj<_Elem, const tm*>(_Tptr_arg, _Fmt_arg);
; 175  : }

  00029	8b c2		 mov	 eax, edx
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$put_time@D@std@@YA?AU?$_Timeobj@DPBUtm@@@0@PBUtm@@PBD@Z ENDP ; std::put_time<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
;	COMDAT ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 795  :     ~basic_ostringstream() noexcept override {}

  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	8d 7e 50	 lea	 edi, DWORD PTR [esi+80]
  0002b	8d 4f b4	 lea	 ecx, DWORD PTR [edi-76]
  0002e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00031	c7 44 38 b0 00
	00 00 00	 mov	 DWORD PTR [eax+edi-80], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00039	8b 06		 mov	 eax, DWORD PTR [esi]
  0003b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003e	8d 42 b0	 lea	 eax, DWORD PTR [edx-80]
  00041	89 44 3a ac	 mov	 DWORD PTR [edx+edi-84], eax
  00045	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 61   :     __CLR_OR_THIS_CALL ~basic_ostream() noexcept override {}

  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004f	c7 44 38 b0 00
	00 00 00	 mov	 DWORD PTR [eax+edi-80], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00057	8b 06		 mov	 eax, DWORD PTR [esi]
  00059	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005c	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0005f	89 44 39 ac	 mov	 DWORD PTR [ecx+edi-84], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 368  :         _Ios_base_dtor(this);

  00063	57		 push	 edi
  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ios_base@std@@6B@
  00071	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00076	83 c4 04	 add	 esp, 4
  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
  0008a	cc		 int	 3
  0008b	cc		 int	 3
  0008c	cc		 int	 3
  0008d	cc		 int	 3
  0008e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8d 71 b0	 lea	 esi, DWORD PTR [ecx-80]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
  0000e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00012	74 0e		 je	 SHORT $LN5@scalar
  00014	68 98 00 00 00	 push	 152			; 00000098H
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
$LN5@scalar:
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN5@scalar
  00011	6a 44		 push	 68			; 00000044H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
tv213 = -20						; size = 4
__Seeklow$1$ = -16					; size = 4
__Gptr_old$1$ = -12					; size = 4
__Off$2$ = -8						; size = 4
tv174 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 460  :     pos_type seekpos(pos_type _Pos, ios_base::openmode _Mode = ios_base::in | ios_base::out) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 461  :         const bool _Need_read_but_cannot  = (_Mode & ios_base::in) != 0 && (_Mystate & _Noread) != 0;

  00007	8b 5d 24	 mov	 ebx, DWORD PTR __Mode$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	f6 c3 01	 test	 bl, 1
  00011	74 0a		 je	 SHORT $LN47@seekpos
  00013	f6 46 3c 04	 test	 BYTE PTR [esi+60], 4
  00017	74 04		 je	 SHORT $LN47@seekpos
  00019	b2 01		 mov	 dl, 1
  0001b	eb 02		 jmp	 SHORT $LN13@seekpos
$LN47@seekpos:
  0001d	32 d2		 xor	 dl, dl
$LN13@seekpos:

; 462  :         const bool _Need_write_but_cannot = (_Mode & ios_base::out) != 0 && (_Mystate & _Constant) != 0;

  0001f	f6 c3 02	 test	 bl, 2
  00022	74 0a		 je	 SHORT $LN48@seekpos
  00024	f6 46 3c 02	 test	 BYTE PTR [esi+60], 2
  00028	74 04		 je	 SHORT $LN48@seekpos
  0002a	b0 01		 mov	 al, 1
  0002c	eb 02		 jmp	 SHORT $LN15@seekpos
$LN48@seekpos:
  0002e	32 c0		 xor	 al, al
$LN15@seekpos:

; 463  :         if (_Need_read_but_cannot || _Need_write_but_cannot) {

  00030	84 d2		 test	 dl, dl
  00032	0f 85 f1 00 00
	00		 jne	 $LN3@seekpos
  00038	84 c0		 test	 al, al
  0003a	0f 85 e9 00 00
	00		 jne	 $LN3@seekpos
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd

; 67   :         return _Myoff + _Fpos;

  00040	8b 7d 0c	 mov	 edi, DWORD PTR __Pos$[ebp]
  00043	03 7d 14	 add	 edi, DWORD PTR __Pos$[ebp+8]
  00046	8b 45 10	 mov	 eax, DWORD PTR __Pos$[ebp+4]
  00049	13 45 18	 adc	 eax, DWORD PTR __Pos$[ebp+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 470  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  0004c	f6 46 3c 02	 test	 BYTE PTR [esi+60], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd

; 67   :         return _Myoff + _Fpos;

  00050	89 45 f8	 mov	 DWORD PTR __Off$2$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 184  :         return *_IGnext;

  00053	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 469  :         const auto _Gptr_old = _Mysb::gptr();

  00056	8b 00		 mov	 eax, DWORD PTR [eax]
  00058	89 45 f4	 mov	 DWORD PTR __Gptr_old$1$[ebp], eax

; 470  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  0005b	74 04		 je	 SHORT $LN16@seekpos
  0005d	33 c9		 xor	 ecx, ecx
  0005f	eb 11		 jmp	 SHORT $LN4@seekpos
$LN16@seekpos:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 192  :         return *_IPnext;

  00061	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 470  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  00064	8b 08		 mov	 ecx, DWORD PTR [eax]

; 471  :         if (_Pptr_old && _Seekhigh < _Pptr_old) { // update high-water pointer

  00066	85 c9		 test	 ecx, ecx
  00068	74 08		 je	 SHORT $LN4@seekpos
  0006a	39 4e 38	 cmp	 DWORD PTR [esi+56], ecx
  0006d	73 03		 jae	 SHORT $LN4@seekpos

; 472  :             _Seekhigh = _Pptr_old;

  0006f	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
$LN4@seekpos:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 180  :         return *_IGfirst;

  00072	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 475  :         const auto _Seeklow  = _Mysb::eback();

  00075	8b 10		 mov	 edx, DWORD PTR [eax]

; 476  :         const auto _Seekdist = _Seekhigh - _Seeklow;

  00077	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0007a	89 45 fc	 mov	 DWORD PTR tv174[ebp], eax
  0007d	2b c2		 sub	 eax, edx
  0007f	89 55 f0	 mov	 DWORD PTR __Seeklow$1$[ebp], edx

; 477  :         if (static_cast<unsigned long long>(_Off) > static_cast<unsigned long long>(_Seekdist)) {

  00082	99		 cdq
  00083	39 55 f8	 cmp	 DWORD PTR __Off$2$[ebp], edx
  00086	0f 87 9d 00 00
	00		 ja	 $LN3@seekpos
  0008c	72 08		 jb	 SHORT $LN50@seekpos
  0008e	3b f8		 cmp	 edi, eax
  00090	0f 87 93 00 00
	00		 ja	 $LN3@seekpos
$LN50@seekpos:

; 478  :             return pos_type{off_type{-1}};
; 479  :         }
; 480  : 
; 481  :         if (_Off != 0 && (((_Mode & ios_base::in) && !_Gptr_old) || ((_Mode & ios_base::out) && !_Pptr_old))) {

  00096	8b c7		 mov	 eax, edi
  00098	0b 45 f8	 or	 eax, DWORD PTR __Off$2$[ebp]
  0009b	74 2c		 je	 SHORT $LN6@seekpos
  0009d	f6 c3 01	 test	 bl, 1
  000a0	74 06		 je	 SHORT $LN8@seekpos
  000a2	83 7d f4 00	 cmp	 DWORD PTR __Gptr_old$1$[ebp], 0
  000a6	74 09		 je	 SHORT $LN7@seekpos
$LN8@seekpos:
  000a8	f6 c3 02	 test	 bl, 2
  000ab	74 1c		 je	 SHORT $LN6@seekpos
  000ad	85 c9		 test	 ecx, ecx
  000af	75 18		 jne	 SHORT $LN6@seekpos
$LN7@seekpos:

; 482  :             return pos_type{off_type{-1}};

  000b1	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000b4	6a ff		 push	 -1
  000b6	6a ff		 push	 -1
  000b8	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000bd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000c0	5f		 pop	 edi

; 495  :     }

  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 20 00	 ret	 32			; 00000020H
$LN6@seekpos:

; 483  :         }
; 484  : 
; 485  :         const auto _Newptr = _Seeklow + _Off; // may perform nullptr + 0

  000c9	8b 45 f0	 mov	 eax, DWORD PTR __Seeklow$1$[ebp]
  000cc	8d 14 07	 lea	 edx, DWORD PTR [edi+eax]

; 486  :         if ((_Mode & ios_base::in) && _Gptr_old) {

  000cf	f6 c3 01	 test	 bl, 1
  000d2	74 1e		 je	 SHORT $LN35@seekpos
  000d4	83 7d f4 00	 cmp	 DWORD PTR __Gptr_old$1$[ebp], 0
  000d8	74 18		 je	 SHORT $LN35@seekpos
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 207  :         *_IGfirst = _First;

  000da	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]

; 208  :         *_IGnext  = _Next;
; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  000dd	29 55 fc	 sub	 DWORD PTR tv174[ebp], edx
  000e0	89 03		 mov	 DWORD PTR [ebx], eax
  000e2	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000e5	8b 5d 24	 mov	 ebx, DWORD PTR __Mode$[ebp]
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000ed	8b 55 fc	 mov	 edx, DWORD PTR tv174[ebp]
  000f0	89 10		 mov	 DWORD PTR [eax], edx
$LN35@seekpos:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 490  :         if ((_Mode & ios_base::out) && _Pptr_old) {

  000f2	f6 c3 02	 test	 bl, 2
  000f5	74 25		 je	 SHORT $LN41@seekpos
  000f7	85 c9		 test	 ecx, ecx
  000f9	74 21		 je	 SHORT $LN41@seekpos
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 213  :         return *_IPnext + *_IPcount;

  000fb	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000fe	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]

; 250  :         *_IPfirst = _First;

  00101	8b 5d f0	 mov	 ebx, DWORD PTR __Seeklow$1$[ebp]

; 213  :         return *_IPnext + *_IPcount;

  00104	8b 10		 mov	 edx, DWORD PTR [eax]

; 250  :         *_IPfirst = _First;

  00106	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 213  :         return *_IPnext + *_IPcount;

  00109	03 11		 add	 edx, DWORD PTR [ecx]

; 251  :         *_IPnext  = _Next;

  0010b	8d 0c 1f	 lea	 ecx, DWORD PTR [edi+ebx]

; 252  :         *_IPcount = static_cast<int>(_Last - _Next);

  0010e	2b d1		 sub	 edx, ecx
  00110	89 18		 mov	 DWORD PTR [eax], ebx
  00112	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00115	89 08		 mov	 DWORD PTR [eax], ecx
  00117	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0011a	89 10		 mov	 DWORD PTR [eax], edx
$LN41@seekpos:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd

; 52   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  0011c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0011f	8b 4d f8	 mov	 ecx, DWORD PTR __Off$2$[ebp]
  00122	89 38		 mov	 DWORD PTR [eax], edi
  00124	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 494  :         return pos_type{_Off};

  00127	eb 10		 jmp	 SHORT $LN69@seekpos
$LN3@seekpos:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd

; 52   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00129	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0012c	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00132	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
$LN69@seekpos:
  00139	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 495  :     }

  0013a	0f 57 c0	 xorps	 xmm0, xmm0
  0013d	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00144	5e		 pop	 esi
  00145	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0014c	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  00151	5b		 pop	 ebx
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
__Newoff$ = -16						; size = 8
__Off$1$ = -12						; size = 4
__Seeklow$1$ = -8					; size = 4
__Seekdist$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
__Off$2$ = 20						; size = 4
__Mode$ = 24						; size = 4
__Gptr_old$1$ = 24					; size = 4
__Newptr$1$ = 24					; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 394  :         off_type _Off, ios_base::seekdir _Way, ios_base::openmode _Mode = ios_base::in | ios_base::out) override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 395  :         const bool _Need_read_but_cannot  = (_Mode & ios_base::in) != 0 && (_Mystate & _Noread) != 0;

  00007	8b 5d 18	 mov	 ebx, DWORD PTR __Mode$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	f6 c3 01	 test	 bl, 1
  00011	74 0a		 je	 SHORT $LN59@seekoff
  00013	f6 46 3c 04	 test	 BYTE PTR [esi+60], 4
  00017	74 04		 je	 SHORT $LN59@seekoff
  00019	b2 01		 mov	 dl, 1
  0001b	eb 02		 jmp	 SHORT $LN26@seekoff
$LN59@seekoff:
  0001d	32 d2		 xor	 dl, dl
$LN26@seekoff:

; 396  :         const bool _Need_write_but_cannot = (_Mode & ios_base::out) != 0 && (_Mystate & _Constant) != 0;

  0001f	f6 c3 02	 test	 bl, 2
  00022	74 0a		 je	 SHORT $LN60@seekoff
  00024	f6 46 3c 02	 test	 BYTE PTR [esi+60], 2
  00028	74 04		 je	 SHORT $LN60@seekoff
  0002a	b0 01		 mov	 al, 1
  0002c	eb 02		 jmp	 SHORT $LN28@seekoff
$LN60@seekoff:
  0002e	32 c0		 xor	 al, al
$LN28@seekoff:

; 397  :         if (_Need_read_but_cannot || _Need_write_but_cannot) {

  00030	84 d2		 test	 dl, dl
  00032	0f 85 6b 01 00
	00		 jne	 $LN5@seekoff
  00038	84 c0		 test	 al, al
  0003a	0f 85 63 01 00
	00		 jne	 $LN5@seekoff

; 403  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  00040	f6 46 3c 02	 test	 BYTE PTR [esi+60], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 184  :         return *_IGnext;

  00044	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 402  :         const auto _Gptr_old = _Mysb::gptr();

  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	89 55 18	 mov	 DWORD PTR __Gptr_old$1$[ebp], edx

; 403  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  0004c	74 04		 je	 SHORT $LN29@seekoff
  0004e	33 ff		 xor	 edi, edi
  00050	eb 11		 jmp	 SHORT $LN6@seekoff
$LN29@seekoff:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 192  :         return *_IPnext;

  00052	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 403  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  00055	8b 38		 mov	 edi, DWORD PTR [eax]

; 404  :         if (_Pptr_old && _Seekhigh < _Pptr_old) { // update high-water pointer

  00057	85 ff		 test	 edi, edi
  00059	74 08		 je	 SHORT $LN6@seekoff
  0005b	39 7e 38	 cmp	 DWORD PTR [esi+56], edi
  0005e	73 03		 jae	 SHORT $LN6@seekoff

; 405  :             _Seekhigh = _Pptr_old;

  00060	89 7e 38	 mov	 DWORD PTR [esi+56], edi
$LN6@seekoff:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 180  :         return *_IGfirst;

  00063	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 408  :         const auto _Seeklow  = _Mysb::eback();

  00066	8b 08		 mov	 ecx, DWORD PTR [eax]

; 409  :         const auto _Seekdist = _Seekhigh - _Seeklow;

  00068	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0006b	2b c1		 sub	 eax, ecx
  0006d	89 4d f8	 mov	 DWORD PTR __Seeklow$1$[ebp], ecx
  00070	89 45 fc	 mov	 DWORD PTR __Seekdist$1$[ebp], eax

; 410  :         off_type _Newoff;
; 411  :         switch (_Way) {

  00073	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
  00076	83 e8 00	 sub	 eax, 0
  00079	74 61		 je	 SHORT $LN7@seekoff
  0007b	83 e8 01	 sub	 eax, 1
  0007e	74 13		 je	 SHORT $LN9@seekoff
  00080	83 e8 01	 sub	 eax, 1
  00083	0f 85 1a 01 00
	00		 jne	 $LN5@seekoff

; 414  :             break;
; 415  :         case ios_base::end:
; 416  :             _Newoff = _Seekdist;

  00089	8b 45 fc	 mov	 eax, DWORD PTR __Seekdist$1$[ebp]
  0008c	99		 cdq
  0008d	8b c8		 mov	 ecx, eax
  0008f	8b c2		 mov	 eax, edx

; 417  :             break;

  00091	eb 57		 jmp	 SHORT $LN2@seekoff
$LN9@seekoff:

; 418  :         case ios_base::cur:
; 419  :             {
; 420  :                 constexpr auto _Both = ios_base::in | ios_base::out;
; 421  :                 if ((_Mode & _Both) != _Both) { // prohibited by N4950 [tab:stringbuf.seekoff.pos]

  00093	8b c3		 mov	 eax, ebx
  00095	83 e0 03	 and	 eax, 3
  00098	3c 03		 cmp	 al, 3
  0009a	0f 84 03 01 00
	00		 je	 $LN5@seekoff

; 422  :                     if (_Mode & ios_base::in) {

  000a0	f6 c3 01	 test	 bl, 1
  000a3	74 17		 je	 SHORT $LN11@seekoff

; 423  :                         if (_Gptr_old || !_Seeklow) {

  000a5	85 d2		 test	 edx, edx
  000a7	75 08		 jne	 SHORT $LN14@seekoff
  000a9	85 c9		 test	 ecx, ecx
  000ab	0f 85 f2 00 00
	00		 jne	 $LN5@seekoff
$LN14@seekoff:

; 424  :                             _Newoff = _Gptr_old - _Seeklow;

  000b1	8b c2		 mov	 eax, edx
  000b3	2b c1		 sub	 eax, ecx
  000b5	99		 cdq
  000b6	8b c8		 mov	 ecx, eax
  000b8	8b c2		 mov	 eax, edx

; 425  :                             break;

  000ba	eb 2e		 jmp	 SHORT $LN2@seekoff
$LN11@seekoff:

; 426  :                         }
; 427  :                     } else if ((_Mode & ios_base::out) && (_Pptr_old || !_Seeklow)) {

  000bc	f6 c3 02	 test	 bl, 2
  000bf	0f 84 de 00 00
	00		 je	 $LN5@seekoff
  000c5	85 ff		 test	 edi, edi
  000c7	75 08		 jne	 SHORT $LN16@seekoff
  000c9	85 c9		 test	 ecx, ecx
  000cb	0f 85 d2 00 00
	00		 jne	 $LN5@seekoff
$LN16@seekoff:

; 428  :                         _Newoff = _Pptr_old - _Seeklow;

  000d1	8b c7		 mov	 eax, edi
  000d3	2b c1		 sub	 eax, ecx
  000d5	99		 cdq
  000d6	8b c8		 mov	 ecx, eax
  000d8	8b c2		 mov	 eax, edx

; 429  :                         break;

  000da	eb 0e		 jmp	 SHORT $LN2@seekoff
$LN7@seekoff:
  000dc	0f 57 c0	 xorps	 xmm0, xmm0

; 412  :         case ios_base::beg:
; 413  :             _Newoff = 0;

  000df	66 0f 13 45 f0	 movlpd	 QWORD PTR __Newoff$[ebp], xmm0
  000e4	8b 45 f4	 mov	 eax, DWORD PTR __Newoff$[ebp+4]
  000e7	8b 4d f0	 mov	 ecx, DWORD PTR __Newoff$[ebp]
$LN2@seekoff:

; 430  :                     }
; 431  :                 }
; 432  :             }
; 433  : 
; 434  :             _FALLTHROUGH;
; 435  :         default:
; 436  :             return pos_type{off_type{-1}};
; 437  :         }
; 438  : 
; 439  :         if (static_cast<unsigned long long>(_Off) + _Newoff > static_cast<unsigned long long>(_Seekdist)) {

  000ea	03 4d 0c	 add	 ecx, DWORD PTR __Off$[ebp]
  000ed	89 4d f4	 mov	 DWORD PTR __Off$1$[ebp], ecx
  000f0	13 45 10	 adc	 eax, DWORD PTR __Off$[ebp+4]
  000f3	89 45 14	 mov	 DWORD PTR __Off$2$[ebp], eax
  000f6	8b 45 fc	 mov	 eax, DWORD PTR __Seekdist$1$[ebp]
  000f9	99		 cdq
  000fa	39 55 14	 cmp	 DWORD PTR __Off$2$[ebp], edx
  000fd	0f 87 a0 00 00
	00		 ja	 $LN5@seekoff
  00103	72 08		 jb	 SHORT $LN62@seekoff
  00105	3b c8		 cmp	 ecx, eax
  00107	0f 87 96 00 00
	00		 ja	 $LN5@seekoff
$LN62@seekoff:

; 440  :             return pos_type{off_type{-1}};
; 441  :         }
; 442  : 
; 443  :         _Off += _Newoff;
; 444  :         if (_Off != 0 && (((_Mode & ios_base::in) && !_Gptr_old) || ((_Mode & ios_base::out) && !_Pptr_old))) {

  0010d	8b c1		 mov	 eax, ecx
  0010f	0b 45 14	 or	 eax, DWORD PTR __Off$2$[ebp]
  00112	8b 45 18	 mov	 eax, DWORD PTR __Gptr_old$1$[ebp]
  00115	74 2a		 je	 SHORT $LN19@seekoff
  00117	f6 c3 01	 test	 bl, 1
  0011a	74 04		 je	 SHORT $LN21@seekoff
  0011c	85 c0		 test	 eax, eax
  0011e	74 09		 je	 SHORT $LN20@seekoff
$LN21@seekoff:
  00120	f6 c3 02	 test	 bl, 2
  00123	74 1c		 je	 SHORT $LN19@seekoff
  00125	85 ff		 test	 edi, edi
  00127	75 18		 jne	 SHORT $LN19@seekoff
$LN20@seekoff:

; 445  :             return pos_type{off_type{-1}};

  00129	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0012c	6a ff		 push	 -1
  0012e	6a ff		 push	 -1
  00130	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00135	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00138	5f		 pop	 edi

; 458  :     }

  00139	5e		 pop	 esi
  0013a	5b		 pop	 ebx
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c2 14 00	 ret	 20			; 00000014H
$LN19@seekoff:

; 446  :         }
; 447  : 
; 448  :         const auto _Newptr = _Seeklow + _Off; // may perform nullptr + 0

  00141	8b 55 f8	 mov	 edx, DWORD PTR __Seeklow$1$[ebp]
  00144	03 ca		 add	 ecx, edx
  00146	89 4d 18	 mov	 DWORD PTR __Newptr$1$[ebp], ecx

; 449  :         if ((_Mode & ios_base::in) && _Gptr_old) {

  00149	f6 c3 01	 test	 bl, 1
  0014c	74 1b		 je	 SHORT $LN47@seekoff
  0014e	85 c0		 test	 eax, eax
  00150	74 17		 je	 SHORT $LN47@seekoff
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 207  :         *_IGfirst = _First;

  00152	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 450  :             _Mysb::setg(_Seeklow, _Newptr, _Seekhigh);

  00155	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 207  :         *_IGfirst = _First;

  00158	89 10		 mov	 DWORD PTR [eax], edx

; 208  :         *_IGnext  = _Next;

  0015a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0015d	8b 55 18	 mov	 edx, DWORD PTR __Newptr$1$[ebp]

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  00160	2b ca		 sub	 ecx, edx
  00162	89 10		 mov	 DWORD PTR [eax], edx
  00164	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00167	89 08		 mov	 DWORD PTR [eax], ecx
$LN47@seekoff:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 453  :         if ((_Mode & ios_base::out) && _Pptr_old) {

  00169	f6 c3 02	 test	 bl, 2
  0016c	74 25		 je	 SHORT $LN53@seekoff
  0016e	85 ff		 test	 edi, edi
  00170	74 21		 je	 SHORT $LN53@seekoff
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 213  :         return *_IPnext + *_IPcount;

  00172	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00175	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00178	8b 10		 mov	 edx, DWORD PTR [eax]

; 250  :         *_IPfirst = _First;

  0017a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 213  :         return *_IPnext + *_IPcount;

  0017d	03 11		 add	 edx, DWORD PTR [ecx]

; 250  :         *_IPfirst = _First;

  0017f	8b 4d f8	 mov	 ecx, DWORD PTR __Seeklow$1$[ebp]
  00182	89 08		 mov	 DWORD PTR [eax], ecx

; 251  :         *_IPnext  = _Next;

  00184	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00187	8b 4d 18	 mov	 ecx, DWORD PTR __Newptr$1$[ebp]

; 252  :         *_IPcount = static_cast<int>(_Last - _Next);

  0018a	2b d1		 sub	 edx, ecx
  0018c	89 08		 mov	 DWORD PTR [eax], ecx
  0018e	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00191	89 10		 mov	 DWORD PTR [eax], edx
$LN53@seekoff:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd

; 52   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00193	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00196	8b 4d f4	 mov	 ecx, DWORD PTR __Off$1$[ebp]
  00199	89 08		 mov	 DWORD PTR [eax], ecx
  0019b	8b 4d 14	 mov	 ecx, DWORD PTR __Off$2$[ebp]
  0019e	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 457  :         return pos_type{_Off};

  001a1	eb 10		 jmp	 SHORT $LN91@seekoff
$LN5@seekoff:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd

; 52   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  001a3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001a6	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  001ac	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
$LN91@seekoff:
  001b3	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 458  :     }

  001b4	0f 57 c0	 xorps	 xmm0, xmm0
  001b7	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  001be	5e		 pop	 esi
  001bf	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  001c6	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  001cb	5b		 pop	 ebx
  001cc	8b e5		 mov	 esp, ebp
  001ce	5d		 pop	 ebp
  001cf	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
tv228 = -4						; size = 4
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 367  :     int_type underflow() override { // get an element from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b d1		 mov	 edx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 184  :         return *_IGnext;

  00008	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 368  :         const auto _Gptr = _Mysb::gptr();

  0000b	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 369  :         if (!_Gptr) { // no character buffer, fail

  0000d	85 c9		 test	 ecx, ecx
  0000f	74 4d		 je	 SHORT $LN5@underflow
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 196  :         return *_IGnext + *_IGcount;

  00011	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	03 c1		 add	 eax, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 373  :         if (_Gptr < _Mysb::egptr()) {

  00018	3b c8		 cmp	 ecx, eax
  0001a	73 09		 jae	 SHORT $LN3@underflow
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  0001c	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0001f	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 391  :     }

  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
$LN3@underflow:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 192  :         return *_IPnext;

  00025	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 378  :         const auto _Pptr = _Mysb::pptr();

  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	85 c0		 test	 eax, eax

; 379  :         if (!_Pptr || (_Mystate & _Noread)) { // no put area or read disallowed

  0002c	74 30		 je	 SHORT $LN5@underflow
  0002e	f6 42 3c 04	 test	 BYTE PTR [edx+60], 4
  00032	75 2a		 jne	 SHORT $LN5@underflow
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 77   :     return _Left < _Right ? _Right : _Left;

  00034	8b 72 38	 mov	 esi, DWORD PTR [edx+56]
  00037	3b f0		 cmp	 esi, eax
  00039	0f 42 f0	 cmovb	 esi, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 384  :         if (_Local_highwater <= _Gptr) { // nothing in the put area to take

  0003c	3b f1		 cmp	 esi, ecx
  0003e	76 1e		 jbe	 SHORT $LN5@underflow

; 385  :             return _Traits::eof();
; 386  :         }
; 387  : 
; 388  :         _Seekhigh = _Local_highwater;

  00040	89 72 38	 mov	 DWORD PTR [edx+56], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 208  :         *_IGnext  = _Next;

  00043	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 389  :         _Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Local_highwater);

  00045	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  00047	2b f1		 sub	 esi, ecx
  00049	5f		 pop	 edi

; 208  :         *_IGnext  = _Next;

  0004a	89 08		 mov	 DWORD PTR [eax], ecx

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  0004c	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0004f	89 30		 mov	 DWORD PTR [eax], esi

; 184  :         return *_IGnext;

  00051	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 391  :     }

  00054	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 184  :         return *_IGnext;

  00055	8b 00		 mov	 eax, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  00057	0f b6 00	 movzx	 eax, BYTE PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 391  :     }

  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN5@underflow:
  0005e	5f		 pop	 edi

; 380  :             return _Traits::eof();

  0005f	83 c8 ff	 or	 eax, -1

; 391  :     }

  00062	5e		 pop	 esi
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 350  :     int_type pbackfail(int_type _Meta = _Traits::eof()) override { // put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 184  :         return *_IGnext;

  00003	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 350  :     int_type pbackfail(int_type _Meta = _Traits::eof()) override { // put an element back to stream

  00006	56		 push	 esi

; 351  :         const auto _Gptr = _Mysb::gptr();

  00007	8b 30		 mov	 esi, DWORD PTR [eax]

; 353  :             || (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])

  00009	85 f6		 test	 esi, esi
  0000b	74 3f		 je	 SHORT $LN3@pbackfail
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 180  :         return *_IGfirst;

  0000d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 353  :             || (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])

  00010	3b 30		 cmp	 esi, DWORD PTR [eax]
  00012	76 38		 jbe	 SHORT $LN3@pbackfail
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  00014	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00017	83 fa ff	 cmp	 edx, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 353  :             || (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])

  0001a	74 0b		 je	 SHORT $LN2@pbackfail
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 480  :         return _Left == _Right;

  0001c	3a 56 ff	 cmp	 dl, BYTE PTR [esi-1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 353  :             || (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])

  0001f	74 06		 je	 SHORT $LN2@pbackfail
  00021	f6 41 3c 02	 test	 BYTE PTR [ecx+60], 2
  00025	75 25		 jne	 SHORT $LN3@pbackfail
$LN2@pbackfail:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 201  :         *_IGcount -= _Off;

  00027	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0002a	ff 00		 inc	 DWORD PTR [eax]

; 202  :         *_IGnext += _Off;

  0002c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0002f	ff 08		 dec	 DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  00031	83 fa ff	 cmp	 edx, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 360  :         if (!_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  00034	74 07		 je	 SHORT $LN4@pbackfail
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 184  :         return *_IGnext;

  00036	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00039	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 361  :             *_Mysb::gptr() = _Traits::to_char_type(_Meta);

  0003b	88 11		 mov	 BYTE PTR [ecx], dl
$LN4@pbackfail:

; 362  :         }
; 363  : 
; 364  :         return _Traits::not_eof(_Meta);

  0003d	33 c0		 xor	 eax, eax
  0003f	83 fa ff	 cmp	 edx, -1
  00042	5e		 pop	 esi
  00043	0f 44 d0	 cmove	 edx, eax
  00046	8b c2		 mov	 eax, edx

; 365  :     }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN3@pbackfail:

; 354  :                 && (_Mystate & _Constant))) { // can't put back, fail
; 355  :             return _Traits::eof();

  0004c	83 c8 ff	 or	 eax, -1
  0004f	5e		 pop	 esi

; 365  :     }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
tv146 = -16						; size = 4
tv537 = -16						; size = 4
__Newsize$3$ = -12					; size = 4
$T1 = -8						; size = 4
__Oldptr$2$ = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 293  :     int_type overflow(int_type _Meta = _Traits::eof()) override { // put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 294  :         if (_Mystate & _Constant) {

  0000b	f6 47 3c 02	 test	 BYTE PTR [edi+60], 2
  0000f	0f 85 75 01 00
	00		 jne	 $LN10@overflow
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  00015	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]
  00018	83 fb ff	 cmp	 ebx, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 298  :         if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  0001b	75 0b		 jne	 SHORT $LN3@overflow

; 348  :     }

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	33 c0		 xor	 eax, eax
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN3@overflow:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 192  :         return *_IPnext;

  00028	8b 47 20	 mov	 eax, DWORD PTR [edi+32]

; 213  :         return *_IPnext + *_IPcount;

  0002b	8b 57 30	 mov	 edx, DWORD PTR [edi+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 302  :         const auto _Pptr  = _Mysb::pptr();

  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 213  :         return *_IPnext + *_IPcount;

  00030	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00032	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 304  :         if (_Pptr && _Pptr < _Epptr) { // room in buffer, store it

  00035	85 c0		 test	 eax, eax
  00037	0f 84 8b 00 00
	00		 je	 $LN70@overflow
  0003d	3b c6		 cmp	 eax, esi
  0003f	73 20		 jae	 SHORT $LN72@overflow
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 256  :         --*_IPcount;

  00041	49		 dec	 ecx
  00042	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  00044	8b 57 20	 mov	 edx, DWORD PTR [edi+32]
  00047	8b 32		 mov	 esi, DWORD PTR [edx]
  00049	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0004c	89 0a		 mov	 DWORD PTR [edx], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 306  :             _Seekhigh        = _Pptr + 1;

  0004e	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00051	88 1e		 mov	 BYTE PTR [esi], bl

; 307  :             return _Meta;

  00053	8b c3		 mov	 eax, ebx
  00055	89 4f 38	 mov	 DWORD PTR [edi+56], ecx
  00058	5f		 pop	 edi

; 348  :     }

  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN72@overflow:

; 313  :         if (_Pptr) {
; 314  :             _Oldsize = static_cast<_Mysize_type>(_Epptr - _Oldptr);
; 315  :         }
; 316  : 
; 317  :         _Mysize_type _Newsize;
; 318  :         if (_Oldsize < _MINSIZE) {

  00061	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00064	8d 5f 0c	 lea	 ebx, DWORD PTR [edi+12]
  00067	8b 00		 mov	 eax, DWORD PTR [eax]
  00069	2b f0		 sub	 esi, eax
  0006b	89 45 fc	 mov	 DWORD PTR __Oldptr$2$[ebp], eax
  0006e	8b d6		 mov	 edx, esi
  00070	83 fe 20	 cmp	 esi, 32			; 00000020H
  00073	72 5d		 jb	 SHORT $LN86@overflow

; 320  :         } else if (_Oldsize < INT_MAX / 2) { // grow by 50 percent

  00075	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0007b	73 21		 jae	 SHORT $LN8@overflow

; 321  :             _Newsize = _Oldsize << 1;

  0007d	8d 0c 36	 lea	 ecx, DWORD PTR [esi+esi]
  00080	89 4d f4	 mov	 DWORD PTR __Newsize$3$[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00083	85 c9		 test	 ecx, ecx
  00085	75 0d		 jne	 SHORT $LN38@overflow

; 228  :         return nullptr;

  00087	33 d2		 xor	 edx, edx
  00089	89 4d f4	 mov	 DWORD PTR __Newsize$3$[ebp], ecx
  0008c	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0008f	89 45 fc	 mov	 DWORD PTR __Oldptr$2$[ebp], eax
  00092	eb 5a		 jmp	 SHORT $LN37@overflow
$LN38@overflow:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00094	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009a	72 41		 jb	 SHORT $LN39@overflow
  0009c	eb 17		 jmp	 SHORT $LN73@overflow
$LN8@overflow:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 322  :         } else if (_Oldsize < INT_MAX) {

  0009e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  000a4	0f 83 e0 00 00
	00		 jae	 $LN10@overflow

; 323  :             _Newsize = INT_MAX;

  000aa	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  000af	8d 5f 0c	 lea	 ebx, DWORD PTR [edi+12]
  000b2	89 4d f4	 mov	 DWORD PTR __Newsize$3$[ebp], ecx
$LN73@overflow:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000bb	8b d0		 mov	 edx, eax
  000bd	8b 45 fc	 mov	 eax, DWORD PTR __Oldptr$2$[ebp]
  000c0	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  000c3	89 45 fc	 mov	 DWORD PTR __Oldptr$2$[ebp], eax
  000c6	eb 23		 jmp	 SHORT $LN87@overflow
$LN70@overflow:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 180  :         return *_IGfirst;

  000c8	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000cb	8d 5f 0c	 lea	 ebx, DWORD PTR [edi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 311  :         _Mysize_type _Oldsize = 0;

  000ce	33 f6		 xor	 esi, esi

; 312  :         const auto _Oldptr    = _Mysb::eback();

  000d0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN86@overflow:

; 319  :             _Newsize = _MINSIZE;

  000d2	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000d7	89 45 fc	 mov	 DWORD PTR __Oldptr$2$[ebp], eax
  000da	89 4d f4	 mov	 DWORD PTR __Newsize$3$[ebp], ecx
$LN39@overflow:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000dd	51		 push	 ecx
  000de	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  000e3	8b d0		 mov	 edx, eax
  000e5	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  000e8	8b 45 fc	 mov	 eax, DWORD PTR __Oldptr$2$[ebp]
$LN87@overflow:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000eb	83 c4 04	 add	 esp, 4
$LN37@overflow:
  000ee	56		 push	 esi
  000ef	50		 push	 eax
  000f0	52		 push	 edx
  000f1	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 331  :         const auto _New_pnext = _Newptr + _Oldsize;

  000f6	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 331  :         const auto _New_pnext = _Newptr + _Oldsize;

  000fc	8d 14 31	 lea	 edx, DWORD PTR [ecx+esi]

; 332  :         _Seekhigh             = _New_pnext + 1; // to include _Meta

  000ff	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00102	89 47 38	 mov	 DWORD PTR [edi+56], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 250  :         *_IPfirst = _First;

  00105	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00108	89 08		 mov	 DWORD PTR [eax], ecx

; 251  :         *_IPnext  = _Next;
; 252  :         *_IPcount = static_cast<int>(_Last - _Next);

  0010a	2b ca		 sub	 ecx, edx
  0010c	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0010f	03 4d f4	 add	 ecx, DWORD PTR __Newsize$3$[ebp]
  00112	89 10		 mov	 DWORD PTR [eax], edx
  00114	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00117	89 08		 mov	 DWORD PTR [eax], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 335  :         if (_Mystate & _Noread) { // maintain eback() == allocated pointer invariant

  00119	f6 47 3c 04	 test	 BYTE PTR [edi+60], 4
  0011d	74 17		 je	 SHORT $LN12@overflow
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 207  :         *_IGfirst = _First;

  0011f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00121	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00124	89 08		 mov	 DWORD PTR [eax], ecx

; 208  :         *_IGnext  = _Next;

  00126	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00129	89 08		 mov	 DWORD PTR [eax], ecx

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  0012b	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0012e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 337  :         } else { // if readable, set the get area to initialized region

  00134	eb 21		 jmp	 SHORT $LN62@overflow
$LN12@overflow:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 184  :         return *_IGnext;

  00136	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 338  :             _Mysb::setg(_Newptr, _Newptr + (_Mysb::gptr() - _Oldptr), _Seekhigh);

  00139	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 184  :         return *_IGnext;

  0013c	8b 08		 mov	 ecx, DWORD PTR [eax]

; 207  :         *_IGfirst = _First;

  0013e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00140	8b 5d f8	 mov	 ebx, DWORD PTR $T1[ebp]

; 184  :         return *_IGnext;

  00143	2b 4d fc	 sub	 ecx, DWORD PTR __Oldptr$2$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 338  :             _Mysb::setg(_Newptr, _Newptr + (_Mysb::gptr() - _Oldptr), _Seekhigh);

  00146	03 4d f8	 add	 ecx, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 207  :         *_IGfirst = _First;

  00149	89 18		 mov	 DWORD PTR [eax], ebx

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  0014b	2b d1		 sub	 edx, ecx
  0014d	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00150	89 08		 mov	 DWORD PTR [eax], ecx
  00152	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00155	89 10		 mov	 DWORD PTR [eax], edx
$LN62@overflow:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 341  :         if (_Mystate & _Allocated) {

  00157	f6 47 3c 01	 test	 BYTE PTR [edi+60], 1
  0015b	74 0c		 je	 SHORT $LN14@overflow

; 342  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Oldptr), _Oldsize);

  0015d	56		 push	 esi
  0015e	ff 75 fc	 push	 DWORD PTR __Oldptr$2$[ebp]
  00161	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00164	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN14@overflow:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 256  :         --*_IPcount;

  00169	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 345  :         _Mystate |= _Allocated;

  0016c	83 4f 3c 01	 or	 DWORD PTR [edi+60], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 256  :         --*_IPcount;

  00170	ff 08		 dec	 DWORD PTR [eax]

; 257  :         return (*_IPnext)++;

  00172	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  00175	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 348  :     }

  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 257  :         return (*_IPnext)++;

  00178	8b 11		 mov	 edx, DWORD PTR [ecx]
  0017a	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0017d	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 346  :         *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0017f	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00182	88 02		 mov	 BYTE PTR [edx], al

; 348  :     }

  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c2 04 00	 ret	 4
$LN10@overflow:
  0018a	5f		 pop	 edi
  0018b	5e		 pop	 esi
  0018c	83 c8 ff	 or	 eax, -1
  0018f	5b		 pop	 ebx
  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c2 04 00	 ret	 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
__View$ = -40						; size = 12
tv750 = -28						; size = 4
$T2 = -24						; size = 4
__View$1$ = -20						; size = 4
$T3 = -16						; size = 4
tv741 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T4 = 8							; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 218  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b d1		 mov	 edx, ecx
  00029	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00030	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00033	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00036	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00039	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00040	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 836  :         _My_data._Mysize = 0;

  00047	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0004e	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00055	c6 07 00	 mov	 BYTE PTR [edi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 197  :         if ((!(_Mystate & _Constant) || (_Mystate & _From_rvalue)) && _Mysb::pptr()) {

  00058	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  0005b	8b c1		 mov	 eax, ecx
  0005d	24 22		 and	 al, 34			; 00000022H

; 224  :         return _Result;

  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00066	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR $T2[ebp], 1

; 196  :         _Buffer_view _Result{};

  0006d	66 0f d6 45 d8	 movq	 QWORD PTR __View$[ebp], xmm0
  00072	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __View$[ebp+8], 0

; 197  :         if ((!(_Mystate & _Constant) || (_Mystate & _From_rvalue)) && _Mysb::pptr()) {

  00079	3c 02		 cmp	 al, 2
  0007b	74 1b		 je	 SHORT $LN27@str
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 192  :         return *_IPnext;

  0007d	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 197  :         if ((!(_Mystate & _Constant) || (_Mystate & _From_rvalue)) && _Mysb::pptr()) {

  00080	8b 30		 mov	 esi, DWORD PTR [eax]
  00082	85 f6		 test	 esi, esi
  00084	74 12		 je	 SHORT $LN27@str
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 188  :         return *_IPfirst;

  00086	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\utility

; 77   :     return _Left < _Right ? _Right : _Left;

  00089	3b 72 38	 cmp	 esi, DWORD PTR [edx+56]
  0008c	0f 42 72 38	 cmovb	 esi, DWORD PTR [edx+56]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 199  :             const auto _Base = _Mysb::pbase();

  00090	8b 08		 mov	 ecx, DWORD PTR [eax]

; 200  :             _Result._Ptr     = _Base;
; 201  :             _Result._Size    = static_cast<_Mysize_type>((_STD max)(_Mysb::pptr(), _Seekhigh) - _Base);

  00092	2b f1		 sub	 esi, ecx
  00094	8b c1		 mov	 eax, ecx

; 202  :             _Result._Res     = static_cast<_Mysize_type>(_Mysb::epptr() - _Base);

  00096	eb 2f		 jmp	 SHORT $LN133@str
$LN27@str:

; 203  :         } else if (!(_Mystate & _Noread) && _Mysb::gptr()) {

  00098	f6 c1 04	 test	 cl, 4
  0009b	0f 85 e0 00 00
	00		 jne	 $LN73@str
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 184  :         return *_IGnext;

  000a1	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 203  :         } else if (!(_Mystate & _Noread) && _Mysb::gptr()) {

  000a4	33 f6		 xor	 esi, esi
  000a6	8b 00		 mov	 eax, DWORD PTR [eax]
  000a8	89 45 f0	 mov	 DWORD PTR tv741[ebp], eax
  000ab	85 c0		 test	 eax, eax
  000ad	74 13		 je	 SHORT $LN130@str
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 180  :         return *_IGfirst;

  000af	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 205  :             const auto _Base = _Mysb::eback();

  000b2	8b 08		 mov	 ecx, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 196  :         return *_IGnext + *_IGcount;

  000b4	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  000b7	8b 30		 mov	 esi, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 207  :             _Result._Size    = static_cast<_Mysize_type>(_Mysb::egptr() - _Base);

  000b9	8b c1		 mov	 eax, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 196  :         return *_IGnext + *_IGcount;

  000bb	2b f1		 sub	 esi, ecx
  000bd	03 75 f0	 add	 esi, DWORD PTR tv741[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 203  :         } else if (!(_Mystate & _Noread) && _Mysb::gptr()) {

  000c0	eb 05		 jmp	 SHORT $LN133@str
$LN130@str:
  000c2	8b 4d d8	 mov	 ecx, DWORD PTR __View$[ebp]
  000c5	33 c0		 xor	 eax, eax
$LN133@str:

; 219  :         _Mystr _Result(_Al);
; 220  :         const auto _View = _Get_buffer_view();
; 221  :         if (_View._Ptr) {

  000c7	89 4d ec	 mov	 DWORD PTR __View$1$[ebp], ecx
  000ca	8b d6		 mov	 edx, esi
  000cc	89 55 e4	 mov	 DWORD PTR tv750[ebp], edx
  000cf	85 c0		 test	 eax, eax
  000d1	0f 84 aa 00 00
	00		 je	 $LN73@str
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  000d7	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  000da	77 14		 ja	 SHORT $LN58@str
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000dc	56		 push	 esi
  000dd	51		 push	 ecx
  000de	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  000df	89 77 10	 mov	 DWORD PTR [edi+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000e2	e8 00 00 00 00	 call	 _memmove
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  000e7	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 1600 :             _ASAN_STRING_CREATE(*this);
; 1601 :             return *this;

  000eb	e9 8e 00 00 00	 jmp	 $LN134@str
$LN58@str:

; 2962 :         if (_New_size > max_size()) {

  000f0	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  000f6	0f 87 9a 00 00
	00		 ja	 $LN137@str

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000fc	8b c6		 mov	 eax, esi
  000fe	83 c8 0f	 or	 eax, 15			; 0000000fH
  00101	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00106	76 19		 jbe	 SHORT $LN80@str

; 2944 :             return _Max;

  00108	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  0010d	c7 45 f0 ff ff
	ff 7f		 mov	 DWORD PTR $T3[ebp], 2147483647 ; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00114	51		 push	 ecx
  00115	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0011a	8b c8		 mov	 ecx, eax
  0011c	89 4d 08	 mov	 DWORD PTR $T4[ebp], ecx
  0011f	eb 3e		 jmp	 SHORT $LN135@str
$LN80@str:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00121	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00126	8b f2		 mov	 esi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00128	3b c1		 cmp	 eax, ecx
  0012a	0f 42 c1	 cmovb	 eax, ecx
  0012d	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00130	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00133	85 c9		 test	 ecx, ecx
  00135	75 05		 jne	 SHORT $LN93@str

; 228  :         return nullptr;

  00137	89 4d 08	 mov	 DWORD PTR $T4[ebp], ecx
  0013a	eb 29		 jmp	 SHORT $LN92@str
$LN93@str:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0013c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00142	72 0d		 jb	 SHORT $LN94@str

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00144	51		 push	 ecx
  00145	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0014a	8b c8		 mov	 ecx, eax
  0014c	89 4d 08	 mov	 DWORD PTR $T4[ebp], ecx
  0014f	eb 0e		 jmp	 SHORT $LN135@str
$LN94@str:

; 136  :         return ::operator new(_Bytes);

  00151	51		 push	 ecx
  00152	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  00157	8b 75 e4	 mov	 esi, DWORD PTR tv750[ebp]
  0015a	8b c8		 mov	 ecx, eax
  0015c	89 45 08	 mov	 DWORD PTR $T4[ebp], eax
$LN135@str:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  0015f	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00162	83 c4 04	 add	 esp, 4
$LN92@str:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00165	56		 push	 esi
  00166	ff 75 ec	 push	 DWORD PTR __View$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  00169	89 77 10	 mov	 DWORD PTR [edi+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016c	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  0016d	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00170	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00175	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  00178	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2980 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0017c	89 07		 mov	 DWORD PTR [edi], eax
$LN134@str:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 224  :         return _Result;

  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN73@str:
  00181	8b c7		 mov	 eax, edi

; 225  :     }

  00183	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00186	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018d	59		 pop	 ecx
  0018e	5f		 pop	 edi
  0018f	5e		 pop	 esi
  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c2 04 00	 ret	 4
$LN137@str:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  00196	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN132@str:
  0019b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN5@str
  0000c	83 65 e8 fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@str:
  00018	c3		 ret	 0
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
__ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  0001e	90		 npad	 1
  0001f	90		 npad	 1
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
tv361 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 172  :     ~basic_stringbuf() noexcept override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 559  :         if (_Mystate & _Allocated) {

  0000a	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1

; 172  :     ~basic_stringbuf() noexcept override {

  0000e	57		 push	 edi

; 559  :         if (_Mystate & _Allocated) {

  0000f	8d 7e 3c	 lea	 edi, DWORD PTR [esi+60]
  00012	8d 56 2c	 lea	 edx, DWORD PTR [esi+44]

; 172  :     ~basic_stringbuf() noexcept override {

  00015	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 559  :         if (_Mystate & _Allocated) {

  0001b	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0001e	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
  00021	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  00024	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
  00027	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
  0002a	74 69		 je	 SHORT $LN67@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 192  :         return *_IPnext;

  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 560  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	89 45 f0	 mov	 DWORD PTR tv361[ebp], eax
  00033	85 c0		 test	 eax, eax
  00035	74 0a		 je	 SHORT $LN7@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 213  :         return *_IPnext + *_IPcount;

  00037	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0003a	8b 10		 mov	 edx, DWORD PTR [eax]
  0003c	03 55 f0	 add	 edx, DWORD PTR tv361[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 560  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0003f	eb 14		 jmp	 SHORT $LN8@basic_stri
$LN7@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 196  :         return *_IGnext + *_IGcount;

  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00045	8b 10		 mov	 edx, DWORD PTR [eax]
  00047	8d 46 2c	 lea	 eax, DWORD PTR [esi+44]
  0004a	03 11		 add	 edx, DWORD PTR [ecx]
  0004c	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0004f	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
  00052	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN8@basic_stri:

; 180  :         return *_IGfirst;

  00055	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 560  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00058	8b 00		 mov	 eax, DWORD PTR [eax]
  0005a	2b d0		 sub	 edx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0005c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00062	72 1f		 jb	 SHORT $LN41@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00064	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00067	83 c2 23	 add	 edx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006a	2b c1		 sub	 eax, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00072	0f 87 97 00 00
	00		 ja	 $LN38@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c1		 mov	 eax, ecx
  0007a	8d 7e 3c	 lea	 edi, DWORD PTR [esi+60]
  0007d	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00080	89 4d fc	 mov	 DWORD PTR $T3[ebp], ecx
$LN41@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00083	52		 push	 edx
  00084	50		 push	 eax
  00085	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp]
  0008d	83 c4 08	 add	 esp, 8
  00090	8b 55 f4	 mov	 edx, DWORD PTR $T1[ebp]
  00093	eb 03		 jmp	 SHORT $LN30@basic_stri
$LN67@basic_stri:
  00095	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
$LN30@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 207  :         *_IGfirst = _First;

  00098	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0009b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 208  :         *_IGnext  = _Next;

  000a1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a3	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  000a9	8b 02		 mov	 eax, DWORD PTR [edx]
  000ab	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 243  :         *_IPfirst = _First;

  000b1	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000b4	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 244  :         *_IPnext  = _First;

  000ba	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  000bd	8b 00		 mov	 eax, DWORD PTR [eax]
  000bf	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 245  :         *_IPcount = static_cast<int>(_Last - _First);

  000c5	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  000c8	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 568  :         _Mystate &= ~_Allocated;

  000ce	83 27 fe	 and	 DWORD PTR [edi], -2	; fffffffeH
  000d1	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 67   :     virtual __CLR_OR_THIS_CALL ~basic_streambuf() noexcept {

  000d8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@

; 68   :         delete _Plocale;

  000de	8b 76 34	 mov	 esi, DWORD PTR [esi+52]
  000e1	85 f6		 test	 esi, esi
  000e3	74 23		 je	 SHORT $LN58@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 352  :         if (_Ptr) {

  000e5	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000e8	85 c9		 test	 ecx, ecx
  000ea	74 11		 je	 SHORT $LN64@basic_stri

; 353  :             delete _Ptr->_Decref();

  000ec	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ee	ff 50 08	 call	 DWORD PTR [eax+8]
  000f1	85 c0		 test	 eax, eax
  000f3	74 08		 je	 SHORT $LN64@basic_stri
  000f5	8b 10		 mov	 edx, DWORD PTR [eax]
  000f7	8b c8		 mov	 ecx, eax
  000f9	6a 01		 push	 1
  000fb	ff 12		 call	 DWORD PTR [edx]
$LN64@basic_stri:
  000fd	6a 08		 push	 8
  000ff	56		 push	 esi
  00100	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00105	83 c4 08	 add	 esp, 8
$LN58@basic_stri:
  00108	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 174  :     }

  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
$LN38@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN75@basic_stri:
  00114	cc		 int	 3
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 67   :     virtual __CLR_OR_THIS_CALL ~basic_streambuf() noexcept {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 68   :         delete _Plocale;

  00007	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00010	85 ff		 test	 edi, edi
  00012	74 23		 je	 SHORT $LN11@scalar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 352  :         if (_Ptr) {

  00014	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 11		 je	 SHORT $LN17@scalar

; 353  :             delete _Ptr->_Decref();

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	ff 50 08	 call	 DWORD PTR [eax+8]
  00020	85 c0		 test	 eax, eax
  00022	74 08		 je	 SHORT $LN17@scalar
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	8b c8		 mov	 ecx, eax
  00028	6a 01		 push	 1
  0002a	ff 12		 call	 DWORD PTR [edx]
$LN17@scalar:
  0002c	6a 08		 push	 8
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00034	83 c4 08	 add	 esp, 8
$LN11@scalar:
  00037	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003b	74 0b		 je	 SHORT $LN20@scalar
  0003d	6a 38		 push	 56			; 00000038H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN20@scalar:
  00048	5f		 pop	 edi
  00049	8b c6		 mov	 eax, esi
  0004b	5e		 pop	 esi
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 380  :     virtual void __CLR_OR_THIS_CALL imbue(const locale&) {} // set locale to argument (do nothing)

  00000	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 377  :         return 0;

  00000	33 c0		 xor	 eax, eax

; 378  :     }

  00002	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 372  :         // offer buffer to external agent (do nothing)
; 373  :         return this;

  00000	8b c1		 mov	 eax, ecx

; 374  :     }

  00002	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 366  :     virtual pos_type __CLR_OR_THIS_CALL seekpos(pos_type, ios_base::openmode = ios_base::in | ios_base::out) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd

; 52   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0000f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  00016	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00024	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 369  :     }

  00029	5d		 pop	 ebp
  0002a	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 361  :         off_type, ios_base::seekdir, ios_base::openmode = ios_base::in | ios_base::out) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iosfwd

; 52   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  0000f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  00016	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00024	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 364  :     }

  00029	5d		 pop	 ebp
  0002a	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
__Start_count$2$ = -16					; size = 4
__Start_count$1$ = -12					; size = 4
tv237 = -8						; size = 4
_this$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
__Size$2$ = 16						; size = 4
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 335  :     virtual streamsize __CLR_OR_THIS_CALL xsputn(const _Elem* _Ptr, streamsize _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 336  :         // put _Count characters to stream
; 337  :         const streamsize _Start_count = _Count;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000a	8b d3		 mov	 edx, ebx
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	89 55 f0	 mov	 DWORD PTR __Start_count$2$[ebp], edx
  00012	57		 push	 edi
  00013	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00016	8b c7		 mov	 eax, edi
  00018	89 45 f4	 mov	 DWORD PTR __Start_count$1$[ebp], eax

; 338  :         while (0 < _Count) {

  0001b	85 db		 test	 ebx, ebx
  0001d	0f 8c a4 00 00
	00		 jl	 $LN37@xsputn
  00023	7f 08		 jg	 SHORT $LN49@xsputn
  00025	85 ff		 test	 edi, edi
  00027	0f 84 9a 00 00
	00		 je	 $LN37@xsputn
$LN49@xsputn:
  0002d	56		 push	 esi
  0002e	66 90		 npad	 2
$LL2@xsputn:

; 261  :         return *_IPnext ? *_IPcount : 0;

  00030	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	89 45 f8	 mov	 DWORD PTR tv237[ebp], eax
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN12@xsputn
  0003c	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	eb 02		 jmp	 SHORT $LN13@xsputn
$LN12@xsputn:
  00043	33 c0		 xor	 eax, eax
$LN13@xsputn:
  00045	99		 cdq

; 339  :             streamsize _Size = _Pnavail();

  00046	8b f0		 mov	 esi, eax
  00048	8b c2		 mov	 eax, edx
  0004a	89 45 10	 mov	 DWORD PTR __Size$2$[ebp], eax

; 340  :             if (0 < _Size) { // copy to write buffer

  0004d	85 c0		 test	 eax, eax
  0004f	7c 39		 jl	 SHORT $LN4@xsputn
  00051	7f 04		 jg	 SHORT $LN35@xsputn
  00053	85 f6		 test	 esi, esi
  00055	74 33		 je	 SHORT $LN4@xsputn
$LN35@xsputn:

; 341  :                 if (_Count < _Size) {

  00057	3b d8		 cmp	 ebx, eax
  00059	7f 0b		 jg	 SHORT $LN6@xsputn
  0005b	7c 04		 jl	 SHORT $LN36@xsputn
  0005d	3b fe		 cmp	 edi, esi
  0005f	73 05		 jae	 SHORT $LN6@xsputn
$LN36@xsputn:

; 342  :                     _Size = _Count;

  00061	8b f7		 mov	 esi, edi
  00063	89 5d 10	 mov	 DWORD PTR __Size$2$[ebp], ebx
$LN6@xsputn:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00066	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00069	56		 push	 esi
  0006a	50		 push	 eax
  0006b	ff 75 f8	 push	 DWORD PTR tv237[ebp]
  0006e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 237  :         *_IPcount -= _Off;

  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 347  :                 _Count -= _Size;

  00079	2b fe		 sub	 edi, esi
  0007b	1b 5d 10	 sbb	 ebx, DWORD PTR __Size$2$[ebp]

; 237  :         *_IPcount -= _Off;

  0007e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00081	29 30		 sub	 DWORD PTR [eax], esi

; 238  :         *_IPnext += _Off;

  00083	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00086	01 30		 add	 DWORD PTR [eax], esi

; 239  :     }

  00088	eb 21		 jmp	 SHORT $LN8@xsputn
$LN4@xsputn:

; 349  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  0008a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008c	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  0008f	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00092	0f b6 00	 movzx	 eax, BYTE PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 349  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  00095	50		 push	 eax
  00096	ff d2		 call	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  00098	83 f8 ff	 cmp	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 349  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {

  0009b	74 23		 je	 SHORT $LN38@xsputn

; 350  :                 break; // single character put failed, quit
; 351  :             } else { // count character successfully put
; 352  :                 ++_Ptr;
; 353  :                 --_Count;

  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a0	83 c7 ff	 add	 edi, -1
  000a3	be 01 00 00 00	 mov	 esi, 1
  000a8	83 d3 ff	 adc	 ebx, -1
$LN8@xsputn:

; 338  :         while (0 < _Count) {

  000ab	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi
  000ae	85 db		 test	 ebx, ebx
  000b0	0f 8f 7a ff ff
	ff		 jg	 $LL2@xsputn
  000b6	7c 08		 jl	 SHORT $LN38@xsputn
  000b8	85 ff		 test	 edi, edi
  000ba	0f 85 70 ff ff
	ff		 jne	 $LL2@xsputn
$LN38@xsputn:
  000c0	8b 45 f4	 mov	 eax, DWORD PTR __Start_count$1$[ebp]
  000c3	8b 55 f0	 mov	 edx, DWORD PTR __Start_count$2$[ebp]
  000c6	5e		 pop	 esi
$LN37@xsputn:

; 354  :             }
; 355  :         }
; 356  : 
; 357  :         return _Start_count - _Count;

  000c7	2b c7		 sub	 eax, edi
  000c9	5f		 pop	 edi
  000ca	1b d3		 sbb	 edx, ebx
  000cc	5b		 pop	 ebx

; 358  :     }

  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
__Start_count$2$ = -16					; size = 4
__Start_count$1$ = -12					; size = 4
tv240 = -8						; size = 4
_this$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
__Size$2$ = 16						; size = 4
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 306  :     virtual streamsize __CLR_OR_THIS_CALL xsgetn(_Elem* _Ptr, streamsize _Count) { // get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 307  :         const streamsize _Start_count = _Count;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Count$[ebp+4]
  0000a	8b d3		 mov	 edx, ebx
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	89 55 f0	 mov	 DWORD PTR __Start_count$2$[ebp], edx
  00012	57		 push	 edi
  00013	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00016	8b c7		 mov	 eax, edi
  00018	89 45 f4	 mov	 DWORD PTR __Start_count$1$[ebp], eax

; 308  : 
; 309  :         while (0 < _Count) {

  0001b	85 db		 test	 ebx, ebx
  0001d	0f 8c 9c 00 00
	00		 jl	 $LN36@xsgetn
  00023	7f 08		 jg	 SHORT $LN48@xsgetn
  00025	85 ff		 test	 edi, edi
  00027	0f 84 92 00 00
	00		 je	 $LN36@xsgetn
$LN48@xsgetn:
  0002d	56		 push	 esi
  0002e	66 90		 npad	 2
$LL2@xsgetn:

; 232  :         return *_IGnext ? *_IGcount : 0;

  00030	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	89 45 f8	 mov	 DWORD PTR tv240[ebp], eax
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN11@xsgetn
  0003c	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	eb 02		 jmp	 SHORT $LN12@xsgetn
$LN11@xsgetn:
  00043	33 c0		 xor	 eax, eax
$LN12@xsgetn:
  00045	99		 cdq

; 310  :             streamsize _Size = _Gnavail();

  00046	8b f0		 mov	 esi, eax
  00048	8b c2		 mov	 eax, edx
  0004a	89 45 10	 mov	 DWORD PTR __Size$2$[ebp], eax

; 311  :             if (0 < _Size) { // copy from read buffer

  0004d	85 c0		 test	 eax, eax
  0004f	7c 39		 jl	 SHORT $LN4@xsgetn
  00051	7f 04		 jg	 SHORT $LN34@xsgetn
  00053	85 f6		 test	 esi, esi
  00055	74 33		 je	 SHORT $LN4@xsgetn
$LN34@xsgetn:

; 312  :                 if (_Count < _Size) {

  00057	3b d8		 cmp	 ebx, eax
  00059	7f 0b		 jg	 SHORT $LN6@xsgetn
  0005b	7c 04		 jl	 SHORT $LN35@xsgetn
  0005d	3b fe		 cmp	 edi, esi
  0005f	73 05		 jae	 SHORT $LN6@xsgetn
$LN35@xsgetn:

; 313  :                     _Size = _Count;

  00061	8b f7		 mov	 esi, edi
  00063	89 5d 10	 mov	 DWORD PTR __Size$2$[ebp], ebx
$LN6@xsgetn:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00066	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00069	56		 push	 esi
  0006a	ff 75 f8	 push	 DWORD PTR tv240[ebp]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 201  :         *_IGcount -= _Off;

  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 318  :                 _Count -= _Size;

  00079	2b fe		 sub	 edi, esi
  0007b	1b 5d 10	 sbb	 ebx, DWORD PTR __Size$2$[ebp]

; 201  :         *_IGcount -= _Off;

  0007e	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00081	29 30		 sub	 DWORD PTR [eax], esi

; 202  :         *_IGnext += _Off;

  00083	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00086	01 30		 add	 DWORD PTR [eax], esi

; 319  :                 gbump(static_cast<int>(_Size));
; 320  :             } else {

  00088	eb 1d		 jmp	 SHORT $LN5@xsgetn
$LN4@xsgetn:

; 321  :                 const int_type _Meta = uflow();

  0008a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008c	ff 50 1c	 call	 DWORD PTR [eax+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  0008f	83 f8 ff	 cmp	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 322  :                 if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  00092	74 24		 je	 SHORT $LN37@xsgetn

; 323  :                     break; // end of file, quit
; 324  :                 }
; 325  : 
; 326  :                 // get a single character
; 327  :                 *_Ptr++ = _Traits::to_char_type(_Meta);

  00094	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 328  :                 --_Count;

  00097	83 c7 ff	 add	 edi, -1
  0009a	be 01 00 00 00	 mov	 esi, 1
  0009f	83 d3 ff	 adc	 ebx, -1
  000a2	88 01		 mov	 BYTE PTR [ecx], al
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN5@xsgetn:

; 308  : 
; 309  :         while (0 < _Count) {

  000a7	01 75 08	 add	 DWORD PTR __Ptr$[ebp], esi
  000aa	85 db		 test	 ebx, ebx
  000ac	7f 82		 jg	 SHORT $LL2@xsgetn
  000ae	7c 08		 jl	 SHORT $LN37@xsgetn
  000b0	85 ff		 test	 edi, edi
  000b2	0f 85 78 ff ff
	ff		 jne	 $LL2@xsgetn
$LN37@xsgetn:
  000b8	8b 45 f4	 mov	 eax, DWORD PTR __Start_count$1$[ebp]
  000bb	8b 55 f0	 mov	 edx, DWORD PTR __Start_count$2$[ebp]
  000be	5e		 pop	 esi
$LN36@xsgetn:

; 329  :             }
; 330  :         }
; 331  : 
; 332  :         return _Start_count - _Count;

  000bf	2b c7		 sub	 eax, edi
  000c1	5f		 pop	 edi
  000c2	1b d3		 sbb	 edx, ebx
  000c4	5b		 pop	 ebx

; 333  :     }

  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 302  :     virtual int_type __CLR_OR_THIS_CALL uflow() { // get a character from stream, point past it

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 303  :         return _Traits::eq_int_type(_Traits::eof(), underflow()) ? _Traits::eof() : _Traits::to_int_type(*_Gninc());

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 50 18	 call	 DWORD PTR [eax+24]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 496  :         return _Left == _Right;

  00008	83 f8 ff	 cmp	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 303  :         return _Traits::eq_int_type(_Traits::eof(), underflow()) ? _Traits::eof() : _Traits::to_int_type(*_Gninc());

  0000b	75 04		 jne	 SHORT $LN3@uflow
  0000d	0b c0		 or	 eax, eax
  0000f	5e		 pop	 esi

; 304  :     }

  00010	c3		 ret	 0
$LN3@uflow:

; 222  :         --*_IGcount;

  00011	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00014	ff 08		 dec	 DWORD PTR [eax]

; 223  :         return (*_IGnext)++;

  00016	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00019	5e		 pop	 esi
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0001f	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 492  :         return static_cast<unsigned char>(_Ch);

  00021	0f b6 02	 movzx	 eax, BYTE PTR [edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 304  :     }

  00024	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 299  :         return _Traits::eof();

  00000	83 c8 ff	 or	 eax, -1

; 300  :     }

  00003	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 295  :         return 0;

  00000	33 c0		 xor	 eax, eax
  00002	33 d2		 xor	 edx, edx

; 296  :     }

  00004	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 290  :         // put a character back to stream (always fail)
; 291  :         return _Traits::eof();

  00000	83 c8 ff	 or	 eax, -1

; 292  :     }

  00003	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 286  :         return _Traits::eof();

  00000	83 c8 ff	 or	 eax, -1

; 287  :     }

  00003	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 264  :     void __CLR_OR_THIS_CALL _Init() noexcept { // initialize buffer parameters for no buffers

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 265  :         _IGfirst = &_Gfirst;
; 266  :         _IPfirst = &_Pfirst;

  00005	8d 73 08	 lea	 esi, DWORD PTR [ebx+8]
  00008	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0000b	89 73 10	 mov	 DWORD PTR [ebx+16], esi
  0000e	89 43 0c	 mov	 DWORD PTR [ebx+12], eax

; 267  :         _IGnext  = &_Gnext;

  00011	8d 7b 14	 lea	 edi, DWORD PTR [ebx+20]
  00014	89 7b 1c	 mov	 DWORD PTR [ebx+28], edi

; 268  :         _IPnext  = &_Pnext;

  00017	8d 53 18	 lea	 edx, DWORD PTR [ebx+24]
  0001a	89 53 20	 mov	 DWORD PTR [ebx+32], edx

; 269  :         _IGcount = &_Gcount;

  0001d	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
  00020	89 4b 2c	 mov	 DWORD PTR [ebx+44], ecx

; 270  :         _IPcount = &_Pcount;

  00023	8d 43 28	 lea	 eax, DWORD PTR [ebx+40]
  00026	89 43 30	 mov	 DWORD PTR [ebx+48], eax

; 243  :         *_IPfirst = _First;

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 244  :         *_IPnext  = _First;

  0002f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 245  :         *_IPcount = static_cast<int>(_Last - _First);

  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 207  :         *_IGfirst = _First;

  0003b	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 208  :         *_IGnext  = _Next;

  00042	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 209  :         *_IGcount = static_cast<int>(_Last - _Next);

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00050	5b		 pop	 ebx

; 271  :         setp(nullptr, nullptr);
; 272  :         setg(nullptr, nullptr, nullptr);
; 273  :     }

  00051	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 176  :     virtual void __CLR_OR_THIS_CALL _Unlock() {} // clear the thread lock (overridden by basic_filebuf)

  00000	c2 00 00	 ret	 0
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 174  :     virtual void __CLR_OR_THIS_CALL _Lock() {} // set the thread lock (overridden by basic_filebuf)

  00000	c2 00 00	 ret	 0
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 67   :     virtual __CLR_OR_THIS_CALL ~basic_streambuf() noexcept {

  00000	56		 push	 esi

; 68   :         delete _Plocale;

  00001	8b 71 34	 mov	 esi, DWORD PTR [ecx+52]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  0000a	85 f6		 test	 esi, esi
  0000c	74 23		 je	 SHORT $LN7@basic_stre
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 352  :         if (_Ptr) {

  0000e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00011	85 c9		 test	 ecx, ecx
  00013	74 11		 je	 SHORT $LN13@basic_stre

; 353  :             delete _Ptr->_Decref();

  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	ff 50 08	 call	 DWORD PTR [eax+8]
  0001a	85 c0		 test	 eax, eax
  0001c	74 08		 je	 SHORT $LN13@basic_stre
  0001e	8b 10		 mov	 edx, DWORD PTR [eax]
  00020	8b c8		 mov	 ecx, eax
  00022	6a 01		 push	 1
  00024	ff 12		 call	 DWORD PTR [edx]
$LN13@basic_stre:
  00026	6a 08		 push	 8
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002e	83 c4 08	 add	 esp, 8
$LN7@basic_stre:
  00031	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 69   :     }

  00032	c3		 ret	 0
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
;	COMDAT ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 795  :     ~basic_ostringstream() noexcept override {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00006	8d 4e b4	 lea	 ecx, DWORD PTR [esi-76]
  00009	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000c	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00014	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	8d 42 b0	 lea	 eax, DWORD PTR [edx-80]
  0001d	89 44 32 ac	 mov	 DWORD PTR [edx+esi-84], eax
  00021	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 61   :     __CLR_OR_THIS_CALL ~basic_ostream() noexcept override {}

  00026	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00029	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002c	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00034	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00037	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003a	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0003d	89 44 31 ac	 mov	 DWORD PTR [ecx+esi-84], eax
  00041	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 795  :     ~basic_ostringstream() noexcept override {}

  00042	c3		 ret	 0
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 61   :     __CLR_OR_THIS_CALL ~basic_ostream() noexcept override {}

  00025	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00028	8d 72 f8	 lea	 esi, DWORD PTR [edx-8]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002e	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0003e	89 44 11 f4	 mov	 DWORD PTR [ecx+edx-12], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 368  :         _Ios_base_dtor(this);

  00042	52		 push	 edx
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ios_base@std@@6B@
  00050	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00055	83 c4 04	 add	 esp, 4
  00058	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0005c	74 0b		 je	 SHORT $LN21@scalar
  0005e	6a 50		 push	 80			; 00000050H
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00066	83 c4 08	 add	 esp, 8
$LN21@scalar:
  00069	8b c6		 mov	 eax, esi
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
  0007d	cc		 int	 3
  0007e	cc		 int	 3
  0007f	cc		 int	 3
  00080	cc		 int	 3
  00081	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
$T2 = -56						; size = 20
__Ok$3 = -36						; size = 8
$T4 = -28						; size = 8
__State$5 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 562  :     basic_ostream& __CLR_OR_THIS_CALL flush() { // flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 563  :         const auto _Rdbuf = _Myios::rdbuf();

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	8b 7c 30 38	 mov	 edi, DWORD PTR [eax+esi+56]

; 564  :         if (_Rdbuf) { // buffer exists, flush it

  00039	85 ff		 test	 edi, edi
  0003b	0f 84 b8 00 00
	00		 je	 $LN75@flush

; 565  :             const sentry _Ok(*this);

  00041	56		 push	 esi
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$3[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 566  : 
; 567  :             if (_Ok) {

  0004a	80 7d e0 00	 cmp	 BYTE PTR __Ok$3[ebp+4], 0
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00055	74 75		 je	 SHORT $LN58@flush
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 121  :         return sync();

  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 568  :                 ios_base::iostate _State = ios_base::goodbit;

  0005b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __State$5[ebp], 0

; 569  :                 _TRY_IO_BEGIN

  00062	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 121  :         return sync();

  00066	ff 50 34	 call	 DWORD PTR [eax+52]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 571  :                     _State |= ios_base::badbit; // sync failed

  00069	33 c9		 xor	 ecx, ecx
  0006b	ba 04 00 00 00	 mov	 edx, 4
  00070	83 f8 ff	 cmp	 eax, -1
  00073	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
  00076	8b fa		 mov	 edi, edx
  00078	0f 45 f9	 cmovne	 edi, ecx
  0007b	eb 2b		 jmp	 SHORT $LN10@flush
__catch$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0:

; 572  :                 }
; 573  :                 _CATCH_IO_END

  0007d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00080	6a 01		 push	 1
  00082	6a 04		 push	 4
  00084	8b 02		 mov	 eax, DWORD PTR [edx]
  00086	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00089	03 ca		 add	 ecx, edx
  0008b	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00090	b8 00 00 00 00	 mov	 eax, $LN11@flush
  00095	c3		 ret	 0
$LN11@flush:
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	ba 04 00 00 00	 mov	 edx, 4
  0009e	8b 7d e8	 mov	 edi, DWORD PTR __State$5[ebp]
  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN10@flush:

; 574  :                 _Myios::setstate(_State);

  000a8	8b 06		 mov	 eax, DWORD PTR [esi]
  000aa	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  000ad	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 574  :                 _Myios::setstate(_State);

  000b1	03 ce		 add	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  000b3	0b c7		 or	 eax, edi

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  000b5	33 ff		 xor	 edi, edi
  000b7	39 79 38	 cmp	 DWORD PTR [ecx+56], edi
  000ba	0f 45 d7	 cmovne	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 155  :         _State &= _Statmask;

  000bd	0b d0		 or	 edx, eax

; 156  :         _Mystate             = _State;
; 157  :         const auto _Filtered = _State & _Except;

  000bf	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000c2	83 e2 17	 and	 edx, 23			; 00000017H
  000c5	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  000c8	23 c2		 and	 eax, edx

; 158  :         if (_Filtered) {

  000ca	75 41		 jne	 SHORT $LN83@flush
$LN58@flush:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  000cc	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  000d1	84 c0		 test	 al, al

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  000d3	75 08		 jne	 SHORT $LN69@flush

; 117  :                 this->_Myostr._Osfx();

  000d5	8b 4d dc	 mov	 ecx, DWORD PTR __Ok$3[ebp]
  000d8	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN69@flush:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  000dd	8b 4d dc	 mov	 ecx, DWORD PTR __Ok$3[ebp]
  000e0	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  000e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ec	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  000f0	85 c9		 test	 ecx, ecx
  000f2	74 05		 je	 SHORT $LN75@flush

; 79   :                 _Rdbuf->_Unlock();

  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	ff 50 08	 call	 DWORD PTR [eax+8]
$LN75@flush:

; 575  :             }
; 576  :         }
; 577  :         return *this;

  000f9	8b c6		 mov	 eax, esi

; 578  :     }

  000fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00105	59		 pop	 ecx
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
$LN83@flush:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  0010d	a8 04		 test	 al, 4
  0010f	74 07		 je	 SHORT $LN60@flush

; 165  :                 _Msg = "ios_base::badbit set";

  00111	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00116	eb 0f		 jmp	 SHORT $LN62@flush
$LN60@flush:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00118	a8 02		 test	 al, 2
  0011a	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0011f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00124	0f 44 f0	 cmove	 esi, eax
$LN62@flush:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  00127	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  0012a	6a 01		 push	 1
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00132	83 c4 08	 add	 esp, 8
  00135	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  00138	50		 push	 eax
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  0013f	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00144	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN81@flush:
  0014d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$2:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T2 = -44						; size = 20
$T3 = -24						; size = 8
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 159  :     void __CLR_OR_THIS_CALL _Osfx() noexcept { // perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 160  :         _TRY_BEGIN

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 161  :         if (this->good() && this->flags() & ios_base::unitbuf) {

  0003e	75 38		 jne	 SHORT $LN21@Osfx
  00040	f6 44 30 14 02	 test	 BYTE PTR [eax+esi+20], 2
  00045	74 31		 je	 SHORT $LN21@Osfx

; 162  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00047	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 121  :         return sync();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 34	 call	 DWORD PTR [eax+52]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 162  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00050	83 f8 ff	 cmp	 eax, -1
  00053	75 23		 jne	 SHORT $LN21@Osfx

; 163  :                 _Myios::setstate(ios_base::badbit);

  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 155  :         _State &= _Statmask;

  0005a	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  0005e	83 e0 13	 and	 eax, 19			; 00000013H
  00061	83 c8 04	 or	 eax, 4

; 156  :         _Mystate             = _State;

  00064	89 44 31 0c	 mov	 DWORD PTR [ecx+esi+12], eax

; 157  :         const auto _Filtered = _State & _Except;

  00068	8b 4c 31 10	 mov	 ecx, DWORD PTR [ecx+esi+16]
  0006c	23 c8		 and	 ecx, eax

; 158  :         if (_Filtered) {

  0006e	75 1a		 jne	 SHORT $LN34@Osfx
  00070	eb 06		 jmp	 SHORT $LN21@Osfx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 167  :         _CATCH_END

  00072	b8 00 00 00 00	 mov	 eax, $LN21@Osfx
  00077	c3		 ret	 0
$LN21@Osfx:

; 168  :     }

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN34@Osfx:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  0008a	f6 c1 04	 test	 cl, 4
  0008d	74 07		 je	 SHORT $LN23@Osfx

; 165  :                 _Msg = "ios_base::badbit set";

  0008f	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00094	eb 10		 jmp	 SHORT $LN25@Osfx
$LN23@Osfx:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00096	f6 c1 02	 test	 cl, 2
  00099	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0009e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  000a3	0f 44 f0	 cmove	 esi, eax
$LN25@Osfx:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  000a6	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000a9	6a 01		 push	 1
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  000b1	83 c4 08	 add	 esp, 8
  000b4	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  000b7	50		 push	 eax
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  000be	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000c3	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN32@Osfx:
  000cc	cc		 int	 3
  000cd	cc		 int	 3
  000ce	cc		 int	 3
  000cf	cc		 int	 3
  000d0	cc		 int	 3
  000d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 61   :     __CLR_OR_THIS_CALL ~basic_ostream() noexcept override {}

  00000	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00003	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00006	c7 44 08 f8 00
	00 00 00	 mov	 DWORD PTR [eax+ecx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0000e	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00011	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00014	8d 42 f8	 lea	 eax, DWORD PTR [edx-8]
  00017	89 44 0a f4	 mov	 DWORD PTR [edx+ecx-12], eax
  0001b	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T2 = -48						; size = 20
$T3 = -28						; size = 8
$T4 = -28						; size = 8
_this$ = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
$T6 = 19						; size = 1
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 30   :     explicit __CLR_OR_THIS_CALL basic_ostream(basic_streambuf<_Elem, _Traits>* _Strbuf, bool _Isstd = false) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
  0002d	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00031	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00038	74 1c		 je	 SHORT $LN2@basic_ostr
  0003a	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  0003d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
  00043	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
$LN2@basic_ostr:
  00056	8b 07		 mov	 eax, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 388  :         _Ploc = new locale;

  00058	6a 08		 push	 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 30   :     explicit __CLR_OR_THIS_CALL basic_ostream(basic_streambuf<_Elem, _Traits>* _Strbuf, bool _Isstd = false) {

  0005a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005d	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00064	8b 07		 mov	 eax, DWORD PTR [edi]
  00066	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00069	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]
  0006c	89 44 39 fc	 mov	 DWORD PTR [ecx+edi-4], eax

; 31   :         _Myios::init(_Strbuf, _Isstd);

  00070	8b 07		 mov	 eax, DWORD PTR [edi]
  00072	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00075	03 f7		 add	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 379  :         _Ploc   = nullptr;

  00077	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 380  :         _Stdstr = 0;

  0007e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 381  :         _Except = goodbit;

  00085	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 382  :         _Fmtfl  = skipws | dec;

  0008c	c7 46 14 01 02
	00 00		 mov	 DWORD PTR [esi+20], 513	; 00000201H

; 383  :         _Prec   = 6;

  00093	c7 46 18 06 00
	00 00		 mov	 DWORD PTR [esi+24], 6
  0009a	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 384  :         _Wide   = 0;

  000a1	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  000a8	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 385  :         _Arr    = nullptr;

  000af	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 386  :         _Calls  = nullptr;

  000b6	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 156  :         _Mystate             = _State;

  000bd	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 388  :         _Ploc = new locale;

  000c4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c9	8b d8		 mov	 ebx, eax
  000cb	83 c4 04	 add	 esp, 4
  000ce	85 db		 test	 ebx, ebx
  000d0	74 16		 je	 SHORT $LN12@basic_ostr
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 270  :     locale() noexcept : _Ptr(_Init(true)) {}

  000d2	6a 01		 push	 1
  000d4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000db	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  000e0	83 c4 04	 add	 esp, 4
  000e3	89 43 04	 mov	 DWORD PTR [ebx+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 388  :         _Ploc = new locale;

  000e6	eb 02		 jmp	 SHORT $LN13@basic_ostr
$LN12@basic_ostr:
  000e8	33 db		 xor	 ebx, ebx
$LN13@basic_ostr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios

; 147  :         _Mystrbuf = _Strbuf;

  000ea	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 388  :         _Ploc = new locale;

  000ed	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios

; 147  :         _Mystrbuf = _Strbuf;

  000f0	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 148  :         _Tiestr   = nullptr;

  000f3	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 266  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  000fa	8b 5b 04	 mov	 ebx, DWORD PTR [ebx+4]

; 267  :         _Ptr->_Incref();

  000fd	8b cb		 mov	 ecx, ebx
  000ff	89 5d e8	 mov	 DWORD PTR $T3[ebp+4], ebx
  00102	8b 03		 mov	 eax, DWORD PTR [ebx]
  00104	ff 50 04	 call	 DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios

; 113  :         return _STD use_facet<_Ctype>(getloc()).widen(_Byte);

  00107	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  0010a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00117	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2752 :         return do_widen(_Byte);

  0011a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011c	6a 20		 push	 32			; 00000020H
  0011e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00121	8b c8		 mov	 ecx, eax
  00123	ff d2		 call	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios

; 113  :         return _STD use_facet<_Ctype>(getloc()).widen(_Byte);

  00125	88 45 13	 mov	 BYTE PTR $T6[ebp], al
  00128	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0012c	85 db		 test	 ebx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 352  :         if (_Ptr) {

  0012e	74 16		 je	 SHORT $LN48@basic_ostr

; 353  :             delete _Ptr->_Decref();

  00130	8b 13		 mov	 edx, DWORD PTR [ebx]
  00132	8b cb		 mov	 ecx, ebx
  00134	ff 52 08	 call	 DWORD PTR [edx+8]
  00137	85 c0		 test	 eax, eax
  00139	74 08		 je	 SHORT $LN67@basic_ostr
  0013b	8b 10		 mov	 edx, DWORD PTR [eax]
  0013d	8b c8		 mov	 ecx, eax
  0013f	6a 01		 push	 1
  00141	ff 12		 call	 DWORD PTR [edx]
$LN67@basic_ostr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios

; 149  :         _Fillch   = widen(' ');

  00143	8a 45 13	 mov	 al, BYTE PTR $T6[ebp]
$LN48@basic_ostr:

; 150  : 
; 151  :         if (!_Mystrbuf) {

  00146	83 7e 38 00	 cmp	 DWORD PTR [esi+56], 0
  0014a	88 46 40	 mov	 BYTE PTR [esi+64], al
  0014d	75 13		 jne	 SHORT $LN56@basic_ostr
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 155  :         _State &= _Statmask;

  0014f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 157  :         const auto _Filtered = _State & _Except;

  00152	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00155	83 e0 13	 and	 eax, 19			; 00000013H
  00158	83 c8 04	 or	 eax, 4
  0015b	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0015e	23 c8		 and	 ecx, eax

; 158  :         if (_Filtered) {

  00160	75 25		 jne	 SHORT $LN71@basic_ostr
$LN56@basic_ostr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios

; 155  :         if (_Isstd) {

  00162	80 7d 0c 00	 cmp	 BYTE PTR __Isstd$[ebp], 0
  00166	74 09		 je	 SHORT $LN8@basic_ostr

; 156  :             _Addstd(this); // special handling for standard streams

  00168	56		 push	 esi
  00169	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  0016e	83 c4 04	 add	 esp, 4
$LN8@basic_ostr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_ostream.hpp

; 32   :     }

  00171	8b c7		 mov	 eax, edi
  00173	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00176	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017d	59		 pop	 ecx
  0017e	5f		 pop	 edi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 0c 00	 ret	 12			; 0000000cH
$LN71@basic_ostr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  00187	f6 c1 04	 test	 cl, 4
  0018a	74 07		 je	 SHORT $LN58@basic_ostr

; 165  :                 _Msg = "ios_base::badbit set";

  0018c	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00191	eb 10		 jmp	 SHORT $LN60@basic_ostr
$LN58@basic_ostr:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00193	f6 c1 02	 test	 cl, 2
  00196	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0019b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  001a0	0f 44 f0	 cmove	 esi, eax
$LN60@basic_ostr:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  001a3	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  001a6	6a 01		 push	 1
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  001ae	83 c4 08	 add	 esp, 8
  001b1	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  001b4	50		 push	 eax
  001b5	56		 push	 esi
  001b6	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  001bb	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001c0	8d 45 d0	 lea	 eax, DWORD PTR $T2[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN69@basic_ostr:
  001c9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_ostr
  0000c	83 65 f0 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_ostr:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$2:
  0001c	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
  0001f	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
  00027	cc		 int	 3
  00028	cc		 int	 3
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  00029	90		 npad	 1
  0002a	90		 npad	 1
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 368  :         _Ios_base_dtor(this);

  00025	56		 push	 esi
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00033	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00038	83 c4 04	 add	 esp, 4
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN15@scalar
  00041	6a 48		 push	 72			; 00000048H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN15@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 160  :     __CLR_OR_THIS_CALL basic_ios() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b c1		 mov	 eax, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 373  :     size_t _Stdstr{0}; // if > 0 index of standard stream to suppress destruction

  00009	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 374  : 
; 375  : protected:
; 376  :     __CLR_OR_THIS_CALL ios_base() {}
; 377  : 
; 378  :     void __CLR_OR_THIS_CALL _Init() { // initialize a new ios_base
; 379  :         _Ploc   = nullptr;
; 380  :         _Stdstr = 0;
; 381  :         _Except = goodbit;
; 382  :         _Fmtfl  = skipws | dec;
; 383  :         _Prec   = 6;
; 384  :         _Wide   = 0;
; 385  :         _Arr    = nullptr;
; 386  :         _Calls  = nullptr;
; 387  :         clear(goodbit);
; 388  :         _Ploc = new locale;
; 389  :     }
; 390  : 
; 391  : private:
; 392  :     struct _Iosarray : _Crt_new_delete { // list element for open-ended sparse array of longs/pointers
; 393  :     public:
; 394  :         __CLR_OR_THIS_CALL _Iosarray(int _Idx, _Iosarray* _Link)
; 395  :             : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(nullptr) {} // construct node for index _Idx and link it in
; 396  : 
; 397  :         _Iosarray* _Next; // pointer to next node
; 398  :         int _Index; // index of this node
; 399  :         long _Lo; // stored long value
; 400  :         void* _Vp; // stored pointer value
; 401  :     };
; 402  : 
; 403  :     struct _Fnarray : _Crt_new_delete { // list element for open-ended sparse array of event handlers
; 404  :         __CLR_OR_THIS_CALL _Fnarray(int _Idx, event_callback _Pnew, _Fnarray* _Link)
; 405  :             : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) {} // construct node for index _Idx and link it in
; 406  : 
; 407  :         _Fnarray* _Next; // pointer to next node
; 408  :         int _Index; // index of this node
; 409  :         event_callback _Pfn; // pointer to event handler
; 410  :     };
; 411  : 
; 412  :     void __CLR_OR_THIS_CALL _Callfns(event _Ev) { // call all event handlers, reporting event
; 413  :         for (_Fnarray* _Pfa = _Calls; _Pfa; _Pfa = _Pfa->_Next) {
; 414  :             (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
; 415  :         }
; 416  :     }
; 417  : 
; 418  :     _Iosarray& __CLR_OR_THIS_CALL _Findarr(int _Idx) { // locate or make a variable array element
; 419  :         _Iosarray* _Ptr1;
; 420  :         _Iosarray* _Ptr2;
; 421  : 
; 422  :         for (_Ptr1 = _Arr, _Ptr2 = nullptr; _Ptr1; _Ptr1 = _Ptr1->_Next) {
; 423  :             if (_Ptr1->_Index == _Idx) {
; 424  :                 return *_Ptr1; // found element, return it
; 425  :             } else if (!_Ptr2 && _Ptr1->_Lo == 0 && !_Ptr1->_Vp) {
; 426  :                 _Ptr2 = _Ptr1; // found recycling candidate
; 427  :             }
; 428  :         }
; 429  : 
; 430  :         if (_Ptr2) { // recycle existing element
; 431  :             _Ptr2->_Index = _Idx;
; 432  :             return *_Ptr2;
; 433  :         }
; 434  : 
; 435  :         _Arr = new _Iosarray(_Idx, _Arr); // make a new element
; 436  :         return *_Arr;
; 437  :     }
; 438  : 
; 439  :     void __CLR_OR_THIS_CALL _Tidy() noexcept { // discard storage for an ios_base
; 440  :         _Callfns(erase_event);
; 441  :         _Iosarray* _Ptr1;
; 442  :         _Iosarray* _Ptr2;
; 443  : 
; 444  :         for (_Ptr1 = _Arr; _Ptr1; _Ptr1 = _Ptr2) { // delete array element
; 445  :             _Ptr2 = _Ptr1->_Next;
; 446  :             delete _Ptr1;
; 447  :         }
; 448  :         _Arr = nullptr;
; 449  : 
; 450  :         _Fnarray* _Pfa1;
; 451  :         _Fnarray* _Pfa2;
; 452  :         for (_Pfa1 = _Calls; _Pfa1; _Pfa1 = _Pfa2) { // delete callback element
; 453  :             _Pfa2 = _Pfa1->_Next;
; 454  :             delete _Pfa1;
; 455  :         }
; 456  :         _Calls = nullptr;
; 457  :     }
; 458  : 
; 459  :     iostate _Mystate{}; // stream state

  00010	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 460  :     iostate _Except{}; // exception mask

  00017	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 461  :     fmtflags _Fmtfl{}; // format flags

  0001e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 462  :     streamsize _Prec{}; // field precision

  00025	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0002c	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 463  :     streamsize _Wide{}; // field width

  00033	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  0003a	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 464  :     _Iosarray* _Arr{nullptr}; // pointer to first node of long/pointer array

  00041	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 465  :     _Fnarray* _Calls{nullptr}; // pointer to first node of call list

  00048	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 466  :     locale* _Ploc{nullptr}; // pointer to locale

  0004f	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios

; 160  :     __CLR_OR_THIS_CALL basic_ios() {}

  00056	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 161  : 
; 162  : private:
; 163  :     _Mysb* _Mystrbuf{}; // pointer to stream buffer

  0005c	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 164  :     _Myos* _Tiestr{}; // pointer to tied output stream

  00063	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 165  :     _Elem _Fillch{}; // the fill character

  0006a	c6 41 40 00	 mov	 BYTE PTR [ecx+64], 0

; 160  :     __CLR_OR_THIS_CALL basic_ios() {}

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 49   :     void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Reraise = false) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  00003	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	b8 04 00 00 00	 mov	 eax, 4
  0000d	39 51 38	 cmp	 DWORD PTR [ecx+56], edx
  00010	0f 45 c2	 cmovne	 eax, edx
  00013	0b 41 0c	 or	 eax, DWORD PTR [ecx+12]
  00016	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 50   :         // merge _State into state, possibly reraise exception
; 51   :         clear(rdstate() | _State, _Reraise);
; 52   :     }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 36   :     __CLR_OR_THIS_CALL ~basic_ios() noexcept override {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 368  :         _Ios_base_dtor(this);

  00022	51		 push	 ecx
  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00030	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00035	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\ios

; 36   :     __CLR_OR_THIS_CALL ~basic_ios() noexcept override {}

  00038	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00042	59		 pop	 ecx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp
;	COMDAT ?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z
_TEXT	SEGMENT
_timefmt$ = -488					; size = 152
_exceptionInfo$ = -336					; size = 12
_t$ = -324						; size = 8
_e$GSCopy$1$ = -316					; size = 4
$T2 = -312						; size = 1
$T3 = -312						; size = 1
$T4 = -312						; size = 1
$T5 = -312						; size = 1
_pMiniDumpWriteDump$1$ = -312				; size = 4
$T6 = -308						; size = 4
$T7 = -308						; size = 1
__Result$2$ = -308					; size = 4
$T8 = -304						; size = 24
$T9 = -280						; size = 24
$T10 = -256						; size = 24
$T11 = -232						; size = 24
$T12 = -208						; size = 24
$T13 = -184						; size = 24
$T14 = -160						; size = 24
$T15 = -136						; size = 24
$T16 = -112						; size = 24
$T17 = -100						; size = 12
_folder$ = -88						; size = 24
_filename$ = -64					; size = 24
$T18 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_e$ = 8							; size = 4
?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z PROC	; make_minidump, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 01 00
	00		 sub	 esp, 476		; 000001dcH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 08	 mov	 eax, DWORD PTR _e$[ebp]

; 17   : 	auto hDbgHelp = LoadLibraryA("dbghelp");

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_07MOMJMPG@dbghelp@
  00035	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _e$GSCopy$1$[ebp], eax
  0003b	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp], 0
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4

; 18   : 	if (hDbgHelp == nullptr)

  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 e1 05 00
	00		 je	 $LN575@make_minid

; 19   : 		return;
; 20   : 	auto pMiniDumpWriteDump = (decltype(&MiniDumpWriteDump))GetProcAddress(hDbgHelp, "MiniDumpWriteDump");

  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MNIKNFKD@MiniDumpWriteDump@
  00058	50		 push	 eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  0005f	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _pMiniDumpWriteDump$1$[ebp], eax

; 21   : 	if (pMiniDumpWriteDump == nullptr)

  00065	85 c0		 test	 eax, eax
  00067	0f 84 c7 05 00
	00		 je	 $LN575@make_minid
  0006d	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00070	c7 45 b8 04 00
	00 00		 mov	 DWORD PTR _folder$[ebp+16], 4

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00077	0f 11 45 a8	 movups	 XMMWORD PTR _folder$[ebp], xmm0

; 867  :             _My_data._Myres  = _Small_string_capacity;

  0007b	c7 45 bc 0f 00
	00 00		 mov	 DWORD PTR _folder$[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	c7 45 a8 6c 6f
	67 73		 mov	 DWORD PTR _folder$[ebp], 1936158572 ; 73676f6cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00089	c6 45 ac 00	 mov	 BYTE PTR _folder$[ebp+4], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 25   : 	CreateDirectoryA(folder.c_str(), nullptr);

  0008d	6a 00		 push	 0
  0008f	8d 45 a8	 lea	 eax, DWORD PTR _folder$[ebp]
  00092	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00099	50		 push	 eax
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h

; 552  :             return _time64(_Time);

  000a0	6a 00		 push	 0
  000a2	e8 00 00 00 00	 call	 __time64
  000a7	83 c4 04	 add	 esp, 4
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 27   : 	auto t = std::time(nullptr);

  000aa	89 85 bc fe ff
	ff		 mov	 DWORD PTR _t$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 742  :     basic_ostringstream() : _Mybase(_STD addressof(_Stringbuffer)), _Stringbuffer(ios_base::out) {}

  000b0	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp+80]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 27   : 	auto t = std::time(nullptr);

  000b6	89 95 c0 fe ff
	ff		 mov	 DWORD PTR _t$[ebp+4], edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 742  :     basic_ostringstream() : _Mybase(_STD addressof(_Stringbuffer)), _Stringbuffer(ios_base::out) {}

  000bc	c7 85 18 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp], OFFSET ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
  000c6	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  000cb	6a 00		 push	 0
  000cd	6a 00		 push	 0
  000cf	8d 85 1c fe ff
	ff		 lea	 eax, DWORD PTR _timefmt$[ebp+4]
  000d5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d9	50		 push	 eax
  000da	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp]
  000e0	c7 85 cc fe ff
	ff 01 00 00 00	 mov	 DWORD PTR $T6[ebp], 1
  000ea	e8 00 00 00 00	 call	 ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
  000ef	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _timefmt$[ebp]
  000f5	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 23   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  000f8	6a 08		 push	 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 742  :     basic_ostringstream() : _Mybase(_STD addressof(_Stringbuffer)), _Stringbuffer(ios_base::out) {}

  000fa	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00101	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00104	c7 84 05 18 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _timefmt$[ebp+eax], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0010f	8b 85 18 fe ff
	ff		 mov	 eax, DWORD PTR _timefmt$[ebp]
  00115	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00118	8d 41 b0	 lea	 eax, DWORD PTR [ecx-80]
  0011b	89 84 0d 14 fe
	ff ff		 mov	 DWORD PTR _timefmt$[ebp+ecx-4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 23   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  00122	c7 85 1c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+4], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@

; 25   :     }
; 26   : 
; 27   :     __CLR_OR_THIS_CALL basic_streambuf(_Uninitialized) noexcept {}
; 28   : 
; 29   :     __CLR_OR_THIS_CALL basic_streambuf(const basic_streambuf& _Right) : _Plocale(new locale{_Right.getloc()}) {
; 30   :         _Init();
; 31   :         setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
; 32   :         setg(_Right.eback(), _Right.gptr(), _Right.egptr());
; 33   :     }
; 34   : 
; 35   :     basic_streambuf& __CLR_OR_THIS_CALL operator=(const basic_streambuf& _Right) {
; 36   :         if (this != _STD addressof(_Right)) {
; 37   :             setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
; 38   :             setg(_Right.eback(), _Right.gptr(), _Right.egptr());
; 39   :             pubimbue(_Right.getloc());
; 40   :         }
; 41   :         return *this;
; 42   :     }
; 43   : 
; 44   :     void __CLR_OR_THIS_CALL swap(basic_streambuf& _Right) noexcept /* strengthened */ {
; 45   :         if (this != _STD addressof(_Right)) {
; 46   :             _Elem* _Pfirst0 = pbase();
; 47   :             _Elem* _Pnext0  = pptr();
; 48   :             _Elem* _Pend    = epptr();
; 49   :             _Elem* _Gfirst0 = eback();
; 50   :             _Elem* _Gnext0  = gptr();
; 51   :             _Elem* _Gend    = egptr();
; 52   : 
; 53   :             setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
; 54   :             _Right.setp(_Pfirst0, _Pnext0, _Pend);
; 55   : 
; 56   :             setg(_Right.eback(), _Right.gptr(), _Right.egptr());
; 57   :             _Right.setg(_Gfirst0, _Gnext0, _Gend);
; 58   : 
; 59   :             _STD swap(_Plocale, _Right._Plocale);
; 60   :         }
; 61   :     }
; 62   : 
; 63   : public:
; 64   :     using char_type   = _Elem;
; 65   :     using traits_type = _Traits;
; 66   : 
; 67   :     virtual __CLR_OR_THIS_CALL ~basic_streambuf() noexcept {
; 68   :         delete _Plocale;
; 69   :     }
; 70   : 
; 71   :     using int_type = typename _Traits::int_type;
; 72   :     using pos_type = typename _Traits::pos_type;
; 73   :     using off_type = typename _Traits::off_type;
; 74   : 
; 75   :     pos_type __CLR_OR_THIS_CALL pubseekoff(off_type _Off, ios_base::seekdir _Way,
; 76   :         ios_base::openmode _Mode = ios_base::in | ios_base::out) { // change position by _Off, according to _Way, _Mode
; 77   :         return seekoff(_Off, _Way, _Mode);
; 78   :     }
; 79   : 
; 80   : #if _HAS_OLD_IOSTREAMS_MEMBERS
; 81   :     pos_type __CLR_OR_THIS_CALL pubseekoff(off_type _Off, ios_base::seek_dir _Way,
; 82   :         ios_base::open_mode _Mode) { // change position by _Off, according to _Way, _Mode (old style)
; 83   :         return pubseekoff(_Off, static_cast<ios_base::seekdir>(_Way), static_cast<ios_base::openmode>(_Mode));
; 84   :     }
; 85   : #endif // _HAS_OLD_IOSTREAMS_MEMBERS
; 86   : 
; 87   :     pos_type __CLR_OR_THIS_CALL pubseekpos(pos_type _Pos,
; 88   :         ios_base::openmode _Mode = ios_base::in | ios_base::out) { // change position to _Pos, according to _Mode
; 89   :         return seekpos(_Pos, _Mode);
; 90   :     }
; 91   : 
; 92   : #if _HAS_OLD_IOSTREAMS_MEMBERS
; 93   :     pos_type __CLR_OR_THIS_CALL pubseekpos(pos_type _Pos,
; 94   :         ios_base::open_mode _Mode) { // change position to _Pos, according to _Mode (old style)
; 95   :         return seekpos(_Pos, static_cast<ios_base::openmode>(_Mode));
; 96   :     }
; 97   : #endif // _HAS_OLD_IOSTREAMS_MEMBERS
; 98   : 
; 99   :     basic_streambuf* __CLR_OR_THIS_CALL pubsetbuf(_Elem* _Buffer,
; 100  :         streamsize _Count) { // offer _Buffer to external agent
; 101  :         return setbuf(_Buffer, _Count);
; 102  :     }
; 103  : 
; 104  :     locale __CLR_OR_THIS_CALL pubimbue(const locale& _Newlocale) { // set locale to argument
; 105  :         locale _Oldlocale = *_Plocale;
; 106  :         imbue(_Newlocale);
; 107  :         *_Plocale = _Newlocale;
; 108  :         return _Oldlocale;
; 109  :     }
; 110  : 
; 111  :     locale __CLR_OR_THIS_CALL getloc() const noexcept /* strengthened */ { // get locale
; 112  :         return *_Plocale;
; 113  :     }
; 114  : 
; 115  :     streamsize __CLR_OR_THIS_CALL in_avail() {
; 116  :         streamsize _Res = _Gnavail();
; 117  :         return 0 < _Res ? _Res : showmanyc();
; 118  :     }
; 119  : 
; 120  :     int __CLR_OR_THIS_CALL pubsync() { // synchronize with external agent
; 121  :         return sync();
; 122  :     }
; 123  : 
; 124  :     int_type __CLR_OR_THIS_CALL sbumpc() { // get a character and point past it
; 125  :         return 0 < _Gnavail() ? _Traits::to_int_type(*_Gninc()) : uflow();
; 126  :     }
; 127  : 
; 128  :     int_type __CLR_OR_THIS_CALL sgetc() { // get a character and don't point past it
; 129  :         return 0 < _Gnavail() ? _Traits::to_int_type(*gptr()) : underflow();
; 130  :     }
; 131  : 
; 132  :     streamsize __CLR_OR_THIS_CALL sgetn(_Elem* _Ptr,
; 133  :         streamsize _Count) { // get up to _Count characters into array beginning at _Ptr
; 134  :         return xsgetn(_Ptr, _Count);
; 135  :     }
; 136  : 
; 137  :     int_type __CLR_OR_THIS_CALL snextc() { // point to next character and return it
; 138  :         return 1 < _Gnavail()                                 ? _Traits::to_int_type(*_Gnpreinc())
; 139  :              : _Traits::eq_int_type(_Traits::eof(), sbumpc()) ? _Traits::eof()
; 140  :                                                               : sgetc();
; 141  :     }
; 142  : 
; 143  :     int_type __CLR_OR_THIS_CALL sputbackc(_Elem _Ch) { // put back _Ch
; 144  :         if (gptr() && eback() < gptr() && _Traits::eq(_Ch, gptr()[-1])) {
; 145  :             return _Traits::to_int_type(*_Gndec());
; 146  :         }
; 147  : 
; 148  :         return pbackfail(_Traits::to_int_type(_Ch));
; 149  :     }
; 150  : 
; 151  : #if _HAS_OLD_IOSTREAMS_MEMBERS
; 152  :     void __CLR_OR_THIS_CALL stossc() { // point past a character
; 153  :         if (0 < _Gnavail()) {
; 154  :             _Gninc();
; 155  :         } else {
; 156  :             uflow();
; 157  :         }
; 158  :     }
; 159  : #endif // _HAS_OLD_IOSTREAMS_MEMBERS
; 160  : 
; 161  :     int_type __CLR_OR_THIS_CALL sungetc() { // back up one position
; 162  :         return gptr() && eback() < gptr() ? _Traits::to_int_type(*_Gndec()) : pbackfail();
; 163  :     }
; 164  : 
; 165  :     int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch) { // put a character
; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));
; 167  :     }
; 168  : 
; 169  :     streamsize __CLR_OR_THIS_CALL sputn(const _Elem* _Ptr,
; 170  :         streamsize _Count) { // put _Count characters from array beginning at _Ptr
; 171  :         return xsputn(_Ptr, _Count);
; 172  :     }
; 173  : 
; 174  :     virtual void __CLR_OR_THIS_CALL _Lock() {} // set the thread lock (overridden by basic_filebuf)
; 175  : 
; 176  :     virtual void __CLR_OR_THIS_CALL _Unlock() {} // clear the thread lock (overridden by basic_filebuf)
; 177  : 
; 178  : protected:
; 179  :     _Elem* __CLR_OR_THIS_CALL eback() const noexcept /* strengthened */ {
; 180  :         return *_IGfirst;
; 181  :     }
; 182  : 
; 183  :     _Elem* __CLR_OR_THIS_CALL gptr() const noexcept /* strengthened */ {
; 184  :         return *_IGnext;
; 185  :     }
; 186  : 
; 187  :     _Elem* __CLR_OR_THIS_CALL pbase() const noexcept /* strengthened */ {
; 188  :         return *_IPfirst;
; 189  :     }
; 190  : 
; 191  :     _Elem* __CLR_OR_THIS_CALL pptr() const noexcept /* strengthened */ {
; 192  :         return *_IPnext;
; 193  :     }
; 194  : 
; 195  :     _Elem* __CLR_OR_THIS_CALL egptr() const noexcept /* strengthened */ {
; 196  :         return *_IGnext + *_IGcount;
; 197  :     }
; 198  : 
; 199  :     void __CLR_OR_THIS_CALL gbump(int _Off) noexcept /* strengthened */ {
; 200  :         // alter current position in read buffer by _Off
; 201  :         *_IGcount -= _Off;
; 202  :         *_IGnext += _Off;
; 203  :     }
; 204  : 
; 205  :     void __CLR_OR_THIS_CALL setg(_Elem* _First, _Elem* _Next, _Elem* _Last) noexcept /* strengthened */ {
; 206  :         // set pointers for read buffer
; 207  :         *_IGfirst = _First;
; 208  :         *_IGnext  = _Next;
; 209  :         *_IGcount = static_cast<int>(_Last - _Next);
; 210  :     }
; 211  : 
; 212  :     _Elem* __CLR_OR_THIS_CALL epptr() const noexcept /* strengthened */ {
; 213  :         return *_IPnext + *_IPcount;
; 214  :     }
; 215  : 
; 216  :     _Elem* __CLR_OR_THIS_CALL _Gndec() noexcept { // decrement current position in read buffer
; 217  :         ++*_IGcount;
; 218  :         return --*_IGnext;
; 219  :     }
; 220  : 
; 221  :     _Elem* __CLR_OR_THIS_CALL _Gninc() noexcept { // increment current position in read buffer
; 222  :         --*_IGcount;
; 223  :         return (*_IGnext)++;
; 224  :     }
; 225  : 
; 226  :     _Elem* __CLR_OR_THIS_CALL _Gnpreinc() noexcept { // preincrement current position in read buffer
; 227  :         --*_IGcount;
; 228  :         return ++(*_IGnext);
; 229  :     }
; 230  : 
; 231  :     streamsize __CLR_OR_THIS_CALL _Gnavail() const noexcept { // count number of available elements in read buffer
; 232  :         return *_IGnext ? *_IGcount : 0;
; 233  :     }
; 234  : 
; 235  :     void __CLR_OR_THIS_CALL pbump(int _Off) noexcept /* strengthened */ {
; 236  :         // alter current position in write buffer by _Off
; 237  :         *_IPcount -= _Off;
; 238  :         *_IPnext += _Off;
; 239  :     }
; 240  : 
; 241  :     void __CLR_OR_THIS_CALL setp(_Elem* _First, _Elem* _Last) noexcept /* strengthened */ {
; 242  :         // set pointers for write buffer
; 243  :         *_IPfirst = _First;
; 244  :         *_IPnext  = _First;
; 245  :         *_IPcount = static_cast<int>(_Last - _First);
; 246  :     }
; 247  : 
; 248  :     void __CLR_OR_THIS_CALL setp(_Elem* _First, _Elem* _Next, _Elem* _Last) noexcept /* strengthened */ {
; 249  :         // set pointers for write buffer, extended version
; 250  :         *_IPfirst = _First;
; 251  :         *_IPnext  = _Next;
; 252  :         *_IPcount = static_cast<int>(_Last - _Next);
; 253  :     }
; 254  : 
; 255  :     _Elem* __CLR_OR_THIS_CALL _Pninc() noexcept { // increment current position in write buffer
; 256  :         --*_IPcount;
; 257  :         return (*_IPnext)++;
; 258  :     }
; 259  : 
; 260  :     streamsize __CLR_OR_THIS_CALL _Pnavail() const noexcept { // count number of available positions in write buffer
; 261  :         return *_IPnext ? *_IPcount : 0;
; 262  :     }
; 263  : 
; 264  :     void __CLR_OR_THIS_CALL _Init() noexcept { // initialize buffer parameters for no buffers
; 265  :         _IGfirst = &_Gfirst;
; 266  :         _IPfirst = &_Pfirst;
; 267  :         _IGnext  = &_Gnext;
; 268  :         _IPnext  = &_Pnext;
; 269  :         _IGcount = &_Gcount;
; 270  :         _IPcount = &_Pcount;
; 271  :         setp(nullptr, nullptr);
; 272  :         setg(nullptr, nullptr, nullptr);
; 273  :     }
; 274  : 
; 275  :     void __CLR_OR_THIS_CALL _Init(_Elem** _Gf, _Elem** _Gn, int* _Gc, _Elem** _Pf, _Elem** _Pn, int* _Pc) noexcept {
; 276  :         // initialize buffer parameters as specified
; 277  :         _IGfirst = _Gf;
; 278  :         _IPfirst = _Pf;
; 279  :         _IGnext  = _Gn;
; 280  :         _IPnext  = _Pn;
; 281  :         _IGcount = _Gc;
; 282  :         _IPcount = _Pc;
; 283  :     }
; 284  : 
; 285  :     virtual int_type __CLR_OR_THIS_CALL overflow(int_type = _Traits::eof()) { // put a character to stream (always fail)
; 286  :         return _Traits::eof();
; 287  :     }
; 288  : 
; 289  :     virtual int_type __CLR_OR_THIS_CALL pbackfail(int_type = _Traits::eof()) {
; 290  :         // put a character back to stream (always fail)
; 291  :         return _Traits::eof();
; 292  :     }
; 293  : 
; 294  :     virtual streamsize __CLR_OR_THIS_CALL showmanyc() {
; 295  :         return 0;
; 296  :     }
; 297  : 
; 298  :     virtual int_type __CLR_OR_THIS_CALL underflow() { // get a character from stream, but don't point past it
; 299  :         return _Traits::eof();
; 300  :     }
; 301  : 
; 302  :     virtual int_type __CLR_OR_THIS_CALL uflow() { // get a character from stream, point past it
; 303  :         return _Traits::eq_int_type(_Traits::eof(), underflow()) ? _Traits::eof() : _Traits::to_int_type(*_Gninc());
; 304  :     }
; 305  : 
; 306  :     virtual streamsize __CLR_OR_THIS_CALL xsgetn(_Elem* _Ptr, streamsize _Count) { // get _Count characters from stream
; 307  :         const streamsize _Start_count = _Count;
; 308  : 
; 309  :         while (0 < _Count) {
; 310  :             streamsize _Size = _Gnavail();
; 311  :             if (0 < _Size) { // copy from read buffer
; 312  :                 if (_Count < _Size) {
; 313  :                     _Size = _Count;
; 314  :                 }
; 315  : 
; 316  :                 _Traits::copy(_Ptr, gptr(), static_cast<size_t>(_Size));
; 317  :                 _Ptr += _Size;
; 318  :                 _Count -= _Size;
; 319  :                 gbump(static_cast<int>(_Size));
; 320  :             } else {
; 321  :                 const int_type _Meta = uflow();
; 322  :                 if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
; 323  :                     break; // end of file, quit
; 324  :                 }
; 325  : 
; 326  :                 // get a single character
; 327  :                 *_Ptr++ = _Traits::to_char_type(_Meta);
; 328  :                 --_Count;
; 329  :             }
; 330  :         }
; 331  : 
; 332  :         return _Start_count - _Count;
; 333  :     }
; 334  : 
; 335  :     virtual streamsize __CLR_OR_THIS_CALL xsputn(const _Elem* _Ptr, streamsize _Count) {
; 336  :         // put _Count characters to stream
; 337  :         const streamsize _Start_count = _Count;
; 338  :         while (0 < _Count) {
; 339  :             streamsize _Size = _Pnavail();
; 340  :             if (0 < _Size) { // copy to write buffer
; 341  :                 if (_Count < _Size) {
; 342  :                     _Size = _Count;
; 343  :                 }
; 344  : 
; 345  :                 _Traits::copy(pptr(), _Ptr, static_cast<size_t>(_Size));
; 346  :                 _Ptr += _Size;
; 347  :                 _Count -= _Size;
; 348  :                 pbump(static_cast<int>(_Size));
; 349  :             } else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {
; 350  :                 break; // single character put failed, quit
; 351  :             } else { // count character successfully put
; 352  :                 ++_Ptr;
; 353  :                 --_Count;
; 354  :             }
; 355  :         }
; 356  : 
; 357  :         return _Start_count - _Count;
; 358  :     }
; 359  : 
; 360  :     virtual pos_type __CLR_OR_THIS_CALL seekoff(
; 361  :         off_type, ios_base::seekdir, ios_base::openmode = ios_base::in | ios_base::out) {
; 362  :         // change position by offset, according to way and mode
; 363  :         return pos_type{off_type{-1}};
; 364  :     }
; 365  : 
; 366  :     virtual pos_type __CLR_OR_THIS_CALL seekpos(pos_type, ios_base::openmode = ios_base::in | ios_base::out) {
; 367  :         // change to specified position, according to mode
; 368  :         return pos_type{off_type{-1}};
; 369  :     }
; 370  : 
; 371  :     virtual basic_streambuf* __CLR_OR_THIS_CALL setbuf(_Elem*, streamsize) {
; 372  :         // offer buffer to external agent (do nothing)
; 373  :         return this;
; 374  :     }
; 375  : 
; 376  :     virtual int __CLR_OR_THIS_CALL sync() { // synchronize with external agent (do nothing)
; 377  :         return 0;
; 378  :     }
; 379  : 
; 380  :     virtual void __CLR_OR_THIS_CALL imbue(const locale&) {} // set locale to argument (do nothing)
; 381  : 
; 382  : private:
; 383  :     _Elem* _Gfirst{}; // beginning of read buffer

  0012c	0f 11 85 20 fe
	ff ff		 movups	 XMMWORD PTR _timefmt$[ebp+8], xmm0

; 384  :     _Elem* _Pfirst{}; // beginning of write buffer
; 385  :     _Elem** _IGfirst{}; // pointer to beginning of read buffer
; 386  :     _Elem** _IPfirst{}; // pointer to beginning of write buffer
; 387  :     _Elem* _Gnext{}; // current position in read buffer

  00133	0f 11 85 30 fe
	ff ff		 movups	 XMMWORD PTR _timefmt$[ebp+24], xmm0

; 388  :     _Elem* _Pnext{}; // current position in write buffer
; 389  :     _Elem** _IGnext{}; // pointer to current position in read buffer
; 390  :     _Elem** _IPnext{}; // pointer to current position in write buffer
; 391  : 
; 392  :     int _Gcount{}; // length of read buffer

  0013a	0f 11 85 40 fe
	ff ff		 movups	 XMMWORD PTR _timefmt$[ebp+40], xmm0
  00141	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00146	8b f0		 mov	 esi, eax
  00148	83 c4 04	 add	 esp, 4
  0014b	85 f6		 test	 esi, esi
  0014d	74 13		 je	 SHORT $LN94@make_minid
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 270  :     locale() noexcept : _Ptr(_Init(true)) {}

  0014f	6a 01		 push	 1
  00151	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00155	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  0015a	83 c4 04	 add	 esp, 4
  0015d	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\streambuf

; 23   :     __CLR_OR_THIS_CALL basic_streambuf() : _Plocale(new locale) {

  00160	eb 02		 jmp	 SHORT $LN95@make_minid
$LN94@make_minid:
  00162	33 f6		 xor	 esi, esi
$LN95@make_minid:

; 24   :         _Init();

  00164	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp+4]
  0016a	89 b5 50 fe ff
	ff		 mov	 DWORD PTR _timefmt$[ebp+56], esi
  00170	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 36   :     explicit basic_stringbuf(ios_base::openmode _Mode) : _Seekhigh(nullptr), _Mystate(_Getstate(_Mode)), _Al() {}

  00175	c7 85 1c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+4], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0017f	c7 85 54 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+60], 0
  00189	c7 85 58 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _timefmt$[ebp+64], 4
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h

; 529  :             return _localtime64(_Time);

  00193	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _t$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 28   : 	std::ostringstream timefmt;

  00199	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h

; 529  :             return _localtime64(_Time);

  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 __localtime64
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 29   : 	timefmt << std::put_time(std::localtime(&t), "%Y%m%d_%H%M%S");

  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GHHCBHKH@?$CFY?$CFm?$CFd_?$CFH?$CFM?$CFS@
  001a8	50		 push	 eax
  001a9	8d 45 9c	 lea	 eax, DWORD PTR $T17[ebp]
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 ??$put_time@D@std@@YA?AU?$_Timeobj@DPBUtm@@@0@PBUtm@@PBD@Z ; std::put_time<char>
  001b2	50		 push	 eax
  001b3	8d 85 18 fe ff
	ff		 lea	 eax, DWORD PTR _timefmt$[ebp]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABU?$_Timeobj@DPBUtm@@@0@@Z ; std::operator<<<char,std::char_traits<char> >
  001bf	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\sstream

; 807  :         return _Stringbuffer.str();

  001c2	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  001c8	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp+4]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  001d4	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  001d7	c7 45 88 01 00
	00 00		 mov	 DWORD PTR $T15[ebp+16], 1

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001de	0f 11 85 78 ff
	ff ff		 movups	 XMMWORD PTR $T15[ebp], xmm0

; 867  :             _My_data._Myres  = _Small_string_capacity;

  001e5	c7 45 8c 0f 00
	00 00		 mov	 DWORD PTR $T15[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001ec	66 c7 85 78 ff
	ff ff 5f 00	 mov	 WORD PTR $T15[ebp], 95	; 0000005fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string

; 472  :     return _Integral_to_string<char>(_Val);

  001f5	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  001fb	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string

; 472  :     return _Integral_to_string<char>(_Val);

  001ff	68 27 a0 00 00	 push	 40999			; 0000a027H
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 ??$_Integral_to_string@DH@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@H@Z ; std::_Integral_to_string<char,int>
  0020a	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0020d	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0O@BMPKPIOH@metin2client_@+8
  00212	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00215	0f 11 45 90	 movups	 XMMWORD PTR $T16[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00219	89 45 98	 mov	 DWORD PTR $T16[ebp+8], eax
  0021c	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0O@BMPKPIOH@metin2client_@
  00224	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0O@BMPKPIOH@metin2client_@+12
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00229	c7 45 a0 0d 00
	00 00		 mov	 DWORD PTR $T16[ebp+16], 13 ; 0000000dH

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00230	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR $T16[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00237	66 0f d6 45 90	 movq	 QWORD PTR $T16[ebp], xmm0
  0023c	88 45 9c	 mov	 BYTE PTR $T16[ebp+12], al
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0023f	c6 45 9d 00	 mov	 BYTE PTR $T16[ebp+13], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00243	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00246	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR $T18[ebp+16], 1

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0024d	0f 11 45 d8	 movups	 XMMWORD PTR $T18[ebp], xmm0

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00251	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T18[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00258	66 c7 45 d8 5c
	00		 mov	 WORD PTR $T18[ebp], 92	; 0000005cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0025e	83 7d bc 0f	 cmp	 DWORD PTR _folder$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00262	8d 4d a8	 lea	 ecx, DWORD PTR _folder$[ebp]

; 1677 :         return insert(_Off, _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00265	8b 7d b8	 mov	 edi, DWORD PTR _folder$[ebp+16]

; 426  :         if (_Large_mode_engaged()) {

  00268	0f 47 4d a8	 cmova	 ecx, DWORD PTR _folder$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  0026c	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00270	89 8d cc fe ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], ecx

; 1719 :         if (_Check_overlap) {

  00276	83 ff 0e	 cmp	 edi, 14			; 0000000eH
  00279	77 60		 ja	 SHORT $LN285@make_minid

; 1720 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1721 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  0027b	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0027e	89 45 e8	 mov	 DWORD PTR $T18[ebp+16], eax

; 1722 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 1723 :             _Elem* const _Insert_at = _Old_ptr + _Off;
; 1724 :             // the range [_Ptr, _Ptr + _Ptr_shifted_after) is left alone by moving the suffix out,
; 1725 :             // while the range [_Ptr + _Ptr_shifted_after, _Ptr + _Count) shifts down by _Count
; 1726 :             size_type _Ptr_shifted_after;
; 1727 :             if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size) {

  00281	8d 55 d8	 lea	 edx, DWORD PTR $T18[ebp]
  00284	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  00287	3b c2		 cmp	 eax, edx
  00289	76 18		 jbe	 SHORT $LN288@make_minid
  0028b	8d 45 d9	 lea	 eax, DWORD PTR $T18[ebp+1]
  0028e	3b c8		 cmp	 ecx, eax
  00290	77 11		 ja	 SHORT $LN288@make_minid

; 1730 :             } else if (_Insert_at <= _Ptr) { // all of [_Ptr, _Ptr + _Count) shifts

  00292	8b c2		 mov	 eax, edx
  00294	3b c1		 cmp	 eax, ecx
  00296	77 04		 ja	 SHORT $LN289@make_minid

; 1731 :                 _Ptr_shifted_after = 0;

  00298	33 f6		 xor	 esi, esi

; 1732 :             } else { // [_Ptr, _Ptr + _Count) contains _Insert_at, so only the part after _Insert_at shifts

  0029a	eb 09		 jmp	 SHORT $LN290@make_minid
$LN289@make_minid:

; 1733 :                 _Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);

  0029c	8d 75 d8	 lea	 esi, DWORD PTR $T18[ebp]
  0029f	2b f1		 sub	 esi, ecx
  002a1	eb 02		 jmp	 SHORT $LN290@make_minid
$LN288@make_minid:

; 1728 :                 // inserted content is before the shifted region, or does not alias
; 1729 :                 _Ptr_shifted_after = _Count; // none of _Ptr's data shifts

  002a3	8b f7		 mov	 esi, edi
$LN290@make_minid:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002a5	66 8b 45 d8	 mov	 ax, WORD PTR $T18[ebp]

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002a9	56		 push	 esi

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002aa	66 89 44 3d d8	 mov	 WORD PTR $T18[ebp+edi], ax

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002af	8d 45 d8	 lea	 eax, DWORD PTR $T18[ebp]
  002b2	51		 push	 ecx
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1738 :             _Traits::copy(

  002b9	8b c7		 mov	 eax, edi
  002bb	8d 4d d8	 lea	 ecx, DWORD PTR $T18[ebp]
  002be	2b c6		 sub	 eax, esi
  002c0	03 ce		 add	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002c2	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1738 :             _Traits::copy(

  002c3	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  002c6	03 85 cc fe ff
	ff		 add	 eax, DWORD PTR __Result$2$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002cc	50		 push	 eax
  002cd	51		 push	 ecx
  002ce	e8 00 00 00 00	 call	 _memcpy
  002d3	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1740 :             return *this;

  002d6	8d 45 d8	 lea	 eax, DWORD PTR $T18[ebp]
  002d9	eb 1a		 jmp	 SHORT $LN284@make_minid
$LN285@make_minid:

; 1741 :         }
; 1742 : 
; 1743 :         return _Reallocate_grow_by(

  002db	57		 push	 edi
  002dc	51		 push	 ecx
  002dd	6a 00		 push	 0
  002df	c6 85 cc fe ff
	ff 00		 mov	 BYTE PTR $T7[ebp], 0
  002e6	8d 4d d8	 lea	 ecx, DWORD PTR $T18[ebp]
  002e9	ff b5 cc fe ff
	ff		 push	 DWORD PTR $T7[ebp]
  002ef	57		 push	 edi
  002f0	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_4d79bb85f269e6e8002a4599002d832c>@@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_4d79bb85f269e6e8002a4599002d832c>,unsigned int,char const *,unsigned int>
$LN284@make_minid:

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  002f5	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002f8	0f 11 85 60 ff
	ff ff		 movups	 XMMWORD PTR $T14[ebp], xmm0
  002ff	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00304	66 0f d6 85 70
	ff ff ff	 movq	 QWORD PTR $T14[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  0030c	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  00313	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0031a	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  0031d	8d 45 90	 lea	 eax, DWORD PTR $T16[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00320	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00324	50		 push	 eax
  00325	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  0032b	50		 push	 eax
  0032c	ff b5 c8 fe ff
	ff		 push	 DWORD PTR $T2[ebp]
  00332	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00338	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0033d	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00343	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00347	50		 push	 eax
  00348	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  0034e	50		 push	 eax
  0034f	ff b5 c8 fe ff
	ff		 push	 DWORD PTR $T3[ebp]
  00355	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0035b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00360	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00366	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  0036a	50		 push	 eax
  0036b	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00371	50		 push	 eax
  00372	ff b5 c8 fe ff
	ff		 push	 DWORD PTR $T4[ebp]
  00378	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0037e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00383	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00389	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3192 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  0038d	50		 push	 eax
  0038e	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  00394	50		 push	 eax
  00395	ff b5 c8 fe ff
	ff		 push	 DWORD PTR $T5[ebp]
  0039b	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  003a1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003a6	6a 04		 push	 4
  003a8	68 00 00 00 00	 push	 OFFSET ??_C@_04JMFINIFG@?4dmp@
  003ad	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  003b3	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003b7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 498  :     size_type _Mysize = 0; // current length of string (size)

  003bc	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp+16], 0
  003c3	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003c6	0f 11 45 c0	 movups	 XMMWORD PTR _filename$[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  003ca	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp+20], 0

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  003d1	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  003d4	0f 11 45 c0	 movups	 XMMWORD PTR _filename$[ebp], xmm0
  003d8	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  003dd	66 0f d6 45 d0	 movq	 QWORD PTR _filename$[ebp+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  003e2	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  003e9	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  003f0	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  003f3	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  003f9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003fe	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00404	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00409	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0040f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00414	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0041a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0041f	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR $T14[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00425	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00429	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0042c	76 2f		 jbe	 SHORT $LN417@make_minid
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0042e	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR $T14[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00434	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00435	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00437	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0043d	72 14		 jb	 SHORT $LN428@make_minid

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0043f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00442	83 c1 23	 add	 ecx, 35			; 00000023H
  00445	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00447	83 c0 fc	 add	 eax, -4			; fffffffcH
  0044a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0044d	0f 87 fc 01 00
	00		 ja	 $LN536@make_minid
$LN428@make_minid:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00453	51		 push	 ecx
  00454	52		 push	 edx
  00455	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0045a	83 c4 08	 add	 esp, 8
$LN417@make_minid:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0045d	8b 4d ec	 mov	 ecx, DWORD PTR $T18[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00460	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00464	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00467	76 2c		 jbe	 SHORT $LN454@make_minid
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00469	8b 55 d8	 mov	 edx, DWORD PTR $T18[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0046c	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0046d	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0046f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00475	72 14		 jb	 SHORT $LN465@make_minid

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00477	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0047a	83 c1 23	 add	 ecx, 35			; 00000023H
  0047d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0047f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00482	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00485	0f 87 c4 01 00
	00		 ja	 $LN536@make_minid
$LN465@make_minid:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0048b	51		 push	 ecx
  0048c	52		 push	 edx
  0048d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00492	83 c4 08	 add	 esp, 8
$LN454@make_minid:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00495	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T18[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  0049c	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T18[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  004a3	c6 45 d8 00	 mov	 BYTE PTR $T18[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  004a7	8b 4d a4	 mov	 ecx, DWORD PTR $T16[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  004aa	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004ae	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004b1	76 2c		 jbe	 SHORT $LN491@make_minid
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004b3	8b 55 90	 mov	 edx, DWORD PTR $T16[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004b6	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004b7	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004b9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004bf	72 14		 jb	 SHORT $LN502@make_minid

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004c1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004c4	83 c1 23	 add	 ecx, 35			; 00000023H
  004c7	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004c9	83 c0 fc	 add	 eax, -4			; fffffffcH
  004cc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004cf	0f 87 7a 01 00
	00		 ja	 $LN536@make_minid
$LN502@make_minid:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004d5	51		 push	 ecx
  004d6	52		 push	 edx
  004d7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004dc	83 c4 08	 add	 esp, 8
$LN491@make_minid:
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  004df	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  004e5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004ea	8b 4d 8c	 mov	 ecx, DWORD PTR $T15[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  004ed	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004f1	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004f4	76 2f		 jbe	 SHORT $LN528@make_minid
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004f6	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR $T15[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004fc	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004fd	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004ff	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00505	72 14		 jb	 SHORT $LN539@make_minid

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00507	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0050a	83 c1 23	 add	 ecx, 35			; 00000023H
  0050d	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0050f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00512	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00515	0f 87 34 01 00
	00		 ja	 $LN536@make_minid
$LN539@make_minid:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0051b	51		 push	 ecx
  0051c	52		 push	 edx
  0051d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00522	83 c4 08	 add	 esp, 8
$LN528@make_minid:
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 31   : 	std::string filename = folder + "\\"s + "metin2client_"s + std::to_string(METIN2_GET_VERSION()) + "_"s + timefmt.str() + ".dmp";

  00525	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0052b	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  0052f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00534	83 7d d4 0f	 cmp	 DWORD PTR _filename$[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00538	8d 45 c0	 lea	 eax, DWORD PTR _filename$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 33   : 	auto hFile = CreateFileA(filename.c_str(), GENERIC_WRITE, FILE_SHARE_READ, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

  0053b	6a 00		 push	 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  0053d	0f 47 45 c0	 cmova	 eax, DWORD PTR _filename$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 33   : 	auto hFile = CreateFileA(filename.c_str(), GENERIC_WRITE, FILE_SHARE_READ, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0);

  00541	68 80 00 00 00	 push	 128			; 00000080H
  00546	6a 02		 push	 2
  00548	6a 00		 push	 0
  0054a	6a 01		 push	 1
  0054c	68 00 00 00 40	 push	 1073741824		; 40000000H
  00551	50		 push	 eax
  00552	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00558	8b f8		 mov	 edi, eax

; 34   : 	if (hFile == INVALID_HANDLE_VALUE)

  0055a	83 ff ff	 cmp	 edi, -1
  0055d	74 58		 je	 SHORT $LN19@make_minid

; 35   : 		return;
; 36   : 
; 37   : 	MINIDUMP_EXCEPTION_INFORMATION exceptionInfo;
; 38   : 	exceptionInfo.ThreadId = GetCurrentThreadId();

  0055f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentThreadId@0
  00565	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _exceptionInfo$[ebp], eax

; 39   : 	exceptionInfo.ExceptionPointers = e;

  0056b	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _e$GSCopy$1$[ebp]
  00571	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _exceptionInfo$[ebp+4], eax

; 40   : 	exceptionInfo.ClientPointers = FALSE;

  00577	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _exceptionInfo$[ebp+8], 0

; 41   : 
; 42   : 	auto dumped = pMiniDumpWriteDump(

  00581	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcessId@0
  00587	8b f0		 mov	 esi, eax
  00589	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  0058f	6a 00		 push	 0
  00591	33 d2		 xor	 edx, edx
  00593	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR _exceptionInfo$[ebp]
  00599	39 95 c4 fe ff
	ff		 cmp	 DWORD PTR _e$GSCopy$1$[ebp], edx
  0059f	6a 00		 push	 0
  005a1	0f 44 ca	 cmove	 ecx, edx
  005a4	51		 push	 ecx
  005a5	6a 50		 push	 80			; 00000050H
  005a7	57		 push	 edi
  005a8	56		 push	 esi
  005a9	50		 push	 eax
  005aa	ff 95 c8 fe ff
	ff		 call	 DWORD PTR _pMiniDumpWriteDump$1$[ebp]

; 43   : 		GetCurrentProcess(),
; 44   : 		GetCurrentProcessId(),
; 45   : 		hFile,
; 46   : 		MINIDUMP_TYPE(MiniDumpWithIndirectlyReferencedMemory | MiniDumpScanMemory),
; 47   : 		e ? &exceptionInfo : nullptr,
; 48   : 		nullptr,
; 49   : 		nullptr);
; 50   : 
; 51   : 	CloseHandle(hFile);

  005b0	57		 push	 edi
  005b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN19@make_minid:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  005b7	8b 4d d4	 mov	 ecx, DWORD PTR _filename$[ebp+20]
  005ba	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  005bd	76 28		 jbe	 SHORT $LN612@make_minid
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005bf	8b 55 c0	 mov	 edx, DWORD PTR _filename$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  005c2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005c3	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  005c5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  005cb	72 10		 jb	 SHORT $LN623@make_minid

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005cd	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  005d0	83 c1 23	 add	 ecx, 35			; 00000023H
  005d3	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005d5	83 c0 fc	 add	 eax, -4			; fffffffcH
  005d8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005db	77 77		 ja	 SHORT $LN583@make_minid
$LN623@make_minid:

; 289  :         ::operator delete(_Ptr, _Bytes);

  005dd	51		 push	 ecx
  005de	52		 push	 edx
  005df	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005e4	83 c4 08	 add	 esp, 8
$LN612@make_minid:
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 56   : 	return;

  005e7	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  005ed	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _filename$[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  005f4	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _filename$[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  005fb	c6 45 c0 00	 mov	 BYTE PTR _filename$[ebp], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 56   : 	return;

  005ff	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00604	8b 4d bc	 mov	 ecx, DWORD PTR _folder$[ebp+20]
  00607	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0060a	76 28		 jbe	 SHORT $LN575@make_minid
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0060c	8b 55 a8	 mov	 edx, DWORD PTR _folder$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0060f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00610	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00612	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00618	72 10		 jb	 SHORT $LN586@make_minid

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0061a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0061d	83 c1 23	 add	 ecx, 35			; 00000023H
  00620	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00622	83 c0 fc	 add	 eax, -4			; fffffffcH
  00625	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00628	77 2a		 ja	 SHORT $LN583@make_minid
$LN586@make_minid:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0062a	51		 push	 ecx
  0062b	52		 push	 edx
  0062c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00631	83 c4 08	 add	 esp, 8
$LN575@make_minid:
; File C:\Marty 5.5\Src-Client\Client\EterBase\error.cpp

; 57   : }

  00634	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00637	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0063e	59		 pop	 ecx
  0063f	5f		 pop	 edi
  00640	5e		 pop	 esi
  00641	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00644	33 cd		 xor	 ecx, ebp
  00646	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0064b	8b e5		 mov	 esp, ebp
  0064d	5d		 pop	 ebp
  0064e	c3		 ret	 0
$LN536@make_minid:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0064f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN583@make_minid:
  00654	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN661@make_minid:
  00659	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR _folder$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$15:
  00008	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  0000e	83 e0 01	 and	 eax, 1
  00011	0f 84 12 00 00
	00		 je	 $LN86@make_minid
  00017	83 a5 cc fe ff
	ff fe		 and	 DWORD PTR $T6[ebp], -2	; fffffffeH
  0001e	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp+80]
  00024	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN86@make_minid:
  00029	c3		 ret	 0
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$16:
  0002a	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp+8]
  00030	e9 00 00 00 00	 jmp	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$1:
  00035	8d 8d 18 fe ff
	ff		 lea	 ecx, DWORD PTR _timefmt$[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$2:
  00040	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00046	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$3:
  0004b	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00051	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$4:
  00056	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0005c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$5:
  00061	8d 4d 90	 lea	 ecx, DWORD PTR $T16[ebp]
  00064	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$6:
  00069	8d 4d d8	 lea	 ecx, DWORD PTR $T18[ebp]
  0006c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$7:
  00071	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00077	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$8:
  0007c	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00082	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$9:
  00087	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0008d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$10:
  00092	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00098	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$11:
  0009d	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  000a3	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z$12:
  000a8	8d 4d c0	 lea	 ecx, DWORD PTR _filename$[ebp]
  000ab	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b0	cc		 int	 3
  000b1	cc		 int	 3
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
__ehhandler$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z:
  000b5	90		 npad	 1
  000b6	90		 npad	 1
  000b7	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000bb	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000be	8b 8a 18 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-488]
  000c4	33 c8		 xor	 ecx, eax
  000c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cb	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000ce	33 c8		 xor	 ecx, eax
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z
  000da	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?make_minidump@@YAXPAU_EXCEPTION_POINTERS@@@Z ENDP	; make_minidump
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xloctime
;	COMDAT ?_Is_valid_strftime_tm_data@std@@YA_NDQBUtm@@@Z
_TEXT	SEGMENT
__Specifier$ = 8					; size = 1
__Pt$ = 12						; size = 4
?_Is_valid_strftime_tm_data@std@@YA_NDQBUtm@@@Z PROC	; std::_Is_valid_strftime_tm_data, COMDAT

; 709  : _NODISCARD constexpr bool _Is_valid_strftime_tm_data(const char _Specifier, const tm* const _Pt) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 710  :     if (!_Pt) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Pt$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	0f 84 0d 01 00
	00		 je	 $LN41@Is_valid_s

; 711  :         return false;
; 712  :     }
; 713  : 
; 714  :     switch (_Specifier) {

  0000e	0f be 45 08	 movsx	 eax, BYTE PTR __Specifier$[ebp]
  00012	83 c0 bf	 add	 eax, -65		; ffffffbfH
  00015	83 f8 39	 cmp	 eax, 57			; 00000039H
  00018	0f 87 fd 00 00
	00		 ja	 $LN41@Is_valid_s
  0001e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN217@Is_valid_s[eax]
  00025	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN218@Is_valid_s[eax*4]
$LN5@Is_valid_s:

; 715  :     case 'S':
; 716  :         return _Is_valid_strftime_tm_sec(_Pt);

  0002c	83 39 3c	 cmp	 DWORD PTR [ecx], 60	; 0000003cH
  0002f	0f 96 c0	 setbe	 al

; 758  :     case 'c':
; 759  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt)
; 760  :             && _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt)
; 761  :             && _Is_valid_strftime_tm_year(_Pt);
; 762  :     case 'V': // C23 7.29.3.5 "The strftime function"/3 says that %V depends on tm_year, tm_wday, and tm_yday.
; 763  :               // The UCRT uses them without validating them.
; 764  :         return true;
; 765  :     case 'z': // C23 7.29.3.5 "The strftime function"/3 says that %z and %Z depend on tm_isdst.
; 766  :     case 'Z': // The UCRT treats it as a boolean value, so there's no need for validation.
; 767  :         return true;
; 768  :     case 'n': // newline
; 769  :     case 't': // tab
; 770  :         return true;
; 771  :     default:
; 772  :         // We should have handled %% and called _Is_valid_strftime_specifier() before calling this function.
; 773  :         _STL_INTERNAL_CHECK(false);
; 774  :         return false;
; 775  :     }
; 776  : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN6@Is_valid_s:

; 717  :     case 'M':
; 718  :         return _Is_valid_strftime_tm_min(_Pt);

  00034	83 79 04 3b	 cmp	 DWORD PTR [ecx+4], 59	; 0000003bH
  00038	0f 96 c0	 setbe	 al

; 758  :     case 'c':
; 759  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt)
; 760  :             && _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt)
; 761  :             && _Is_valid_strftime_tm_year(_Pt);
; 762  :     case 'V': // C23 7.29.3.5 "The strftime function"/3 says that %V depends on tm_year, tm_wday, and tm_yday.
; 763  :               // The UCRT uses them without validating them.
; 764  :         return true;
; 765  :     case 'z': // C23 7.29.3.5 "The strftime function"/3 says that %z and %Z depend on tm_isdst.
; 766  :     case 'Z': // The UCRT treats it as a boolean value, so there's no need for validation.
; 767  :         return true;
; 768  :     case 'n': // newline
; 769  :     case 't': // tab
; 770  :         return true;
; 771  :     default:
; 772  :         // We should have handled %% and called _Is_valid_strftime_specifier() before calling this function.
; 773  :         _STL_INTERNAL_CHECK(false);
; 774  :         return false;
; 775  :     }
; 776  : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN7@Is_valid_s:

; 719  :     case 'H':
; 720  :     case 'I':
; 721  :     case 'p':
; 722  :         return _Is_valid_strftime_tm_hour(_Pt);

  0003d	83 79 08 17	 cmp	 DWORD PTR [ecx+8], 23	; 00000017H
  00041	0f 96 c0	 setbe	 al

; 758  :     case 'c':
; 759  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt)
; 760  :             && _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt)
; 761  :             && _Is_valid_strftime_tm_year(_Pt);
; 762  :     case 'V': // C23 7.29.3.5 "The strftime function"/3 says that %V depends on tm_year, tm_wday, and tm_yday.
; 763  :               // The UCRT uses them without validating them.
; 764  :         return true;
; 765  :     case 'z': // C23 7.29.3.5 "The strftime function"/3 says that %z and %Z depend on tm_isdst.
; 766  :     case 'Z': // The UCRT treats it as a boolean value, so there's no need for validation.
; 767  :         return true;
; 768  :     case 'n': // newline
; 769  :     case 't': // tab
; 770  :         return true;
; 771  :     default:
; 772  :         // We should have handled %% and called _Is_valid_strftime_specifier() before calling this function.
; 773  :         _STL_INTERNAL_CHECK(false);
; 774  :         return false;
; 775  :     }
; 776  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN10@Is_valid_s:

; 686  :     return _Pt->tm_mday >= 1 && _Pt->tm_mday <= 31;

  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	48		 dec	 eax

; 723  :     case 'd':
; 724  :     case 'e':
; 725  :         return _Is_valid_strftime_tm_mday(_Pt);

  0004a	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  0004d	0f 96 c0	 setbe	 al

; 758  :     case 'c':
; 759  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt)
; 760  :             && _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt)
; 761  :             && _Is_valid_strftime_tm_year(_Pt);
; 762  :     case 'V': // C23 7.29.3.5 "The strftime function"/3 says that %V depends on tm_year, tm_wday, and tm_yday.
; 763  :               // The UCRT uses them without validating them.
; 764  :         return true;
; 765  :     case 'z': // C23 7.29.3.5 "The strftime function"/3 says that %z and %Z depend on tm_isdst.
; 766  :     case 'Z': // The UCRT treats it as a boolean value, so there's no need for validation.
; 767  :         return true;
; 768  :     case 'n': // newline
; 769  :     case 't': // tab
; 770  :         return true;
; 771  :     default:
; 772  :         // We should have handled %% and called _Is_valid_strftime_specifier() before calling this function.
; 773  :         _STL_INTERNAL_CHECK(false);
; 774  :         return false;
; 775  :     }
; 776  : }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN12@Is_valid_s:

; 726  :     case 'b':
; 727  :     case 'B':
; 728  :     case 'm':
; 729  :     case 'h':
; 730  :         return _Is_valid_strftime_tm_mon(_Pt);

  00052	83 79 10 0b	 cmp	 DWORD PTR [ecx+16], 11	; 0000000bH
  00056	0f 96 c0	 setbe	 al

; 758  :     case 'c':
; 759  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt)
; 760  :             && _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt)
; 761  :             && _Is_valid_strftime_tm_year(_Pt);
; 762  :     case 'V': // C23 7.29.3.5 "The strftime function"/3 says that %V depends on tm_year, tm_wday, and tm_yday.
; 763  :               // The UCRT uses them without validating them.
; 764  :         return true;
; 765  :     case 'z': // C23 7.29.3.5 "The strftime function"/3 says that %z and %Z depend on tm_isdst.
; 766  :     case 'Z': // The UCRT treats it as a boolean value, so there's no need for validation.
; 767  :         return true;
; 768  :     case 'n': // newline
; 769  :     case 't': // tab
; 770  :         return true;
; 771  :     default:
; 772  :         // We should have handled %% and called _Is_valid_strftime_specifier() before calling this function.
; 773  :         _STL_INTERNAL_CHECK(false);
; 774  :         return false;
; 775  :     }
; 776  : }

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN16@Is_valid_s:

; 696  :     return _Pt->tm_year >= -1900 && _Pt->tm_year <= 8099;

  0005b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0005e	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH

; 731  :     case 'C':
; 732  :     case 'y':
; 733  :     case 'Y':
; 734  :         return _Is_valid_strftime_tm_year(_Pt);

  00063	3d 0f 27 00 00	 cmp	 eax, 9999		; 0000270fH
  00068	0f 96 c0	 setbe	 al

; 758  :     case 'c':
; 759  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt)
; 760  :             && _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt)
; 761  :             && _Is_valid_strftime_tm_year(_Pt);
; 762  :     case 'V': // C23 7.29.3.5 "The strftime function"/3 says that %V depends on tm_year, tm_wday, and tm_yday.
; 763  :               // The UCRT uses them without validating them.
; 764  :         return true;
; 765  :     case 'z': // C23 7.29.3.5 "The strftime function"/3 says that %z and %Z depend on tm_isdst.
; 766  :     case 'Z': // The UCRT treats it as a boolean value, so there's no need for validation.
; 767  :         return true;
; 768  :     case 'n': // newline
; 769  :     case 't': // tab
; 770  :         return true;
; 771  :     default:
; 772  :         // We should have handled %% and called _Is_valid_strftime_specifier() before calling this function.
; 773  :         _STL_INTERNAL_CHECK(false);
; 774  :         return false;
; 775  :     }
; 776  : }

  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
$LN19@Is_valid_s:

; 735  :     case 'j':
; 736  :         return _Is_valid_strftime_tm_yday(_Pt);

  0006d	81 79 1c 6d 01
	00 00		 cmp	 DWORD PTR [ecx+28], 365	; 0000016dH
  00074	0f 96 c0	 setbe	 al

; 758  :     case 'c':
; 759  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt)
; 760  :             && _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt)
; 761  :             && _Is_valid_strftime_tm_year(_Pt);
; 762  :     case 'V': // C23 7.29.3.5 "The strftime function"/3 says that %V depends on tm_year, tm_wday, and tm_yday.
; 763  :               // The UCRT uses them without validating them.
; 764  :         return true;
; 765  :     case 'z': // C23 7.29.3.5 "The strftime function"/3 says that %z and %Z depend on tm_isdst.
; 766  :     case 'Z': // The UCRT treats it as a boolean value, so there's no need for validation.
; 767  :         return true;
; 768  :     case 'n': // newline
; 769  :     case 't': // tab
; 770  :         return true;
; 771  :     default:
; 772  :         // We should have handled %% and called _Is_valid_strftime_specifier() before calling this function.
; 773  :         _STL_INTERNAL_CHECK(false);
; 774  :         return false;
; 775  :     }
; 776  : }

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN20@Is_valid_s:

; 737  :     case 'a':
; 738  :     case 'A':
; 739  :     case 'u':
; 740  :     case 'w':
; 741  :         return _Is_valid_strftime_tm_wday(_Pt);

  00079	83 79 18 06	 cmp	 DWORD PTR [ecx+24], 6
  0007d	0f 96 c0	 setbe	 al

; 758  :     case 'c':
; 759  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt)
; 760  :             && _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt)
; 761  :             && _Is_valid_strftime_tm_year(_Pt);
; 762  :     case 'V': // C23 7.29.3.5 "The strftime function"/3 says that %V depends on tm_year, tm_wday, and tm_yday.
; 763  :               // The UCRT uses them without validating them.
; 764  :         return true;
; 765  :     case 'z': // C23 7.29.3.5 "The strftime function"/3 says that %z and %Z depend on tm_isdst.
; 766  :     case 'Z': // The UCRT treats it as a boolean value, so there's no need for validation.
; 767  :         return true;
; 768  :     case 'n': // newline
; 769  :     case 't': // tab
; 770  :         return true;
; 771  :     default:
; 772  :         // We should have handled %% and called _Is_valid_strftime_specifier() before calling this function.
; 773  :         _STL_INTERNAL_CHECK(false);
; 774  :         return false;
; 775  :     }
; 776  : }

  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
$LN26@Is_valid_s:

; 681  :     return _Pt->tm_hour >= 0 && _Pt->tm_hour <= 23;

  00082	83 79 08 17	 cmp	 DWORD PTR [ecx+8], 23	; 00000017H
  00086	0f 87 8f 00 00
	00		 ja	 $LN41@Is_valid_s

; 676  :     return _Pt->tm_min >= 0 && _Pt->tm_min <= 59;

  0008c	83 79 04 3b	 cmp	 DWORD PTR [ecx+4], 59	; 0000003bH

; 742  :     case 'U': // C23 7.29.3.5 "The strftime function"/3 says that %U and %W depend on tm_year,
; 743  :     case 'W': // but the UCRT neither uses nor validates it.
; 744  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_yday(_Pt);
; 745  :     case 'R':
; 746  :         return _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt);

  00090	e9 80 00 00 00	 jmp	 $LN219@Is_valid_s
$LN27@Is_valid_s:

; 696  :     return _Pt->tm_year >= -1900 && _Pt->tm_year <= 8099;

  00095	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00098	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  0009d	3d 0f 27 00 00	 cmp	 eax, 9999		; 0000270fH
  000a2	77 77		 ja	 SHORT $LN41@Is_valid_s

; 691  :     return _Pt->tm_mon >= 0 && _Pt->tm_mon <= 11;

  000a4	83 79 10 0b	 cmp	 DWORD PTR [ecx+16], 11	; 0000000bH
  000a8	77 71		 ja	 SHORT $LN41@Is_valid_s

; 686  :     return _Pt->tm_mday >= 1 && _Pt->tm_mday <= 31;

  000aa	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000ad	48		 dec	 eax
  000ae	83 f8 1e	 cmp	 eax, 30			; 0000001eH

; 747  :     case 'D':
; 748  :     case 'x':
; 749  :     case 'F':
; 750  :         return _Is_valid_strftime_tm_year(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt);

  000b1	eb 62		 jmp	 SHORT $LN219@Is_valid_s
$LN30@Is_valid_s:

; 696  :     return _Pt->tm_year >= -1900 && _Pt->tm_year <= 8099;

  000b3	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  000b6	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  000bb	3d 0f 27 00 00	 cmp	 eax, 9999		; 0000270fH
  000c0	77 59		 ja	 SHORT $LN41@Is_valid_s
$LN24@Is_valid_s:

; 758  :     case 'c':
; 759  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt)
; 760  :             && _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt)
; 761  :             && _Is_valid_strftime_tm_year(_Pt);
; 762  :     case 'V': // C23 7.29.3.5 "The strftime function"/3 says that %V depends on tm_year, tm_wday, and tm_yday.
; 763  :               // The UCRT uses them without validating them.
; 764  :         return true;
; 765  :     case 'z': // C23 7.29.3.5 "The strftime function"/3 says that %z and %Z depend on tm_isdst.
; 766  :     case 'Z': // The UCRT treats it as a boolean value, so there's no need for validation.
; 767  :         return true;
; 768  :     case 'n': // newline
; 769  :     case 't': // tab
; 770  :         return true;
; 771  :     default:
; 772  :         // We should have handled %% and called _Is_valid_strftime_specifier() before calling this function.
; 773  :         _STL_INTERNAL_CHECK(false);
; 774  :         return false;
; 775  :     }
; 776  : }

  000c2	83 79 18 06	 cmp	 DWORD PTR [ecx+24], 6
  000c6	77 53		 ja	 SHORT $LN41@Is_valid_s
  000c8	81 79 1c 6d 01
	00 00		 cmp	 DWORD PTR [ecx+28], 365	; 0000016dH
  000cf	eb 44		 jmp	 SHORT $LN219@Is_valid_s
$LN32@Is_valid_s:

; 681  :     return _Pt->tm_hour >= 0 && _Pt->tm_hour <= 23;

  000d1	83 79 08 17	 cmp	 DWORD PTR [ecx+8], 23	; 00000017H
  000d5	77 44		 ja	 SHORT $LN41@Is_valid_s

; 676  :     return _Pt->tm_min >= 0 && _Pt->tm_min <= 59;

  000d7	83 79 04 3b	 cmp	 DWORD PTR [ecx+4], 59	; 0000003bH
  000db	77 3e		 ja	 SHORT $LN41@Is_valid_s

; 671  :     return _Pt->tm_sec >= 0 && _Pt->tm_sec <= 60;

  000dd	83 39 3c	 cmp	 DWORD PTR [ecx], 60	; 0000003cH

; 751  :     case 'g':
; 752  :     case 'G':
; 753  :         return _Is_valid_strftime_tm_year(_Pt) && _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_yday(_Pt);
; 754  :     case 'r':
; 755  :     case 'X':
; 756  :     case 'T':
; 757  :         return _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt);

  000e0	eb 33		 jmp	 SHORT $LN219@Is_valid_s
$LN35@Is_valid_s:

; 701  :     return _Pt->tm_wday >= 0 && _Pt->tm_wday <= 6;

  000e2	83 79 18 06	 cmp	 DWORD PTR [ecx+24], 6
  000e6	77 33		 ja	 SHORT $LN41@Is_valid_s

; 691  :     return _Pt->tm_mon >= 0 && _Pt->tm_mon <= 11;

  000e8	83 79 10 0b	 cmp	 DWORD PTR [ecx+16], 11	; 0000000bH
  000ec	77 2d		 ja	 SHORT $LN41@Is_valid_s

; 686  :     return _Pt->tm_mday >= 1 && _Pt->tm_mday <= 31;

  000ee	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000f1	48		 dec	 eax
  000f2	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  000f5	77 24		 ja	 SHORT $LN41@Is_valid_s

; 681  :     return _Pt->tm_hour >= 0 && _Pt->tm_hour <= 23;

  000f7	83 79 08 17	 cmp	 DWORD PTR [ecx+8], 23	; 00000017H
  000fb	77 1e		 ja	 SHORT $LN41@Is_valid_s

; 676  :     return _Pt->tm_min >= 0 && _Pt->tm_min <= 59;

  000fd	83 79 04 3b	 cmp	 DWORD PTR [ecx+4], 59	; 0000003bH
  00101	77 18		 ja	 SHORT $LN41@Is_valid_s

; 671  :     return _Pt->tm_sec >= 0 && _Pt->tm_sec <= 60;

  00103	83 39 3c	 cmp	 DWORD PTR [ecx], 60	; 0000003cH
  00106	77 13		 ja	 SHORT $LN41@Is_valid_s

; 696  :     return _Pt->tm_year >= -1900 && _Pt->tm_year <= 8099;

  00108	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0010b	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  00110	3d 0f 27 00 00	 cmp	 eax, 9999		; 0000270fH
$LN219@Is_valid_s:

; 758  :     case 'c':
; 759  :         return _Is_valid_strftime_tm_wday(_Pt) && _Is_valid_strftime_tm_mon(_Pt) && _Is_valid_strftime_tm_mday(_Pt)
; 760  :             && _Is_valid_strftime_tm_hour(_Pt) && _Is_valid_strftime_tm_min(_Pt) && _Is_valid_strftime_tm_sec(_Pt)
; 761  :             && _Is_valid_strftime_tm_year(_Pt);
; 762  :     case 'V': // C23 7.29.3.5 "The strftime function"/3 says that %V depends on tm_year, tm_wday, and tm_yday.
; 763  :               // The UCRT uses them without validating them.
; 764  :         return true;
; 765  :     case 'z': // C23 7.29.3.5 "The strftime function"/3 says that %z and %Z depend on tm_isdst.
; 766  :     case 'Z': // The UCRT treats it as a boolean value, so there's no need for validation.
; 767  :         return true;
; 768  :     case 'n': // newline
; 769  :     case 't': // tab
; 770  :         return true;
; 771  :     default:
; 772  :         // We should have handled %% and called _Is_valid_strftime_specifier() before calling this function.
; 773  :         _STL_INTERNAL_CHECK(false);
; 774  :         return false;
; 775  :     }
; 776  : }

  00115	77 04		 ja	 SHORT $LN41@Is_valid_s
$LN39@Is_valid_s:
  00117	b0 01		 mov	 al, 1
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
$LN41@Is_valid_s:
  0011b	32 c0		 xor	 al, al
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
  0011f	90		 npad	 1
$LN218@Is_valid_s:
  00120	00 00 00 00	 DD	 $LN20@Is_valid_s
  00124	00 00 00 00	 DD	 $LN12@Is_valid_s
  00128	00 00 00 00	 DD	 $LN16@Is_valid_s
  0012c	00 00 00 00	 DD	 $LN27@Is_valid_s
  00130	00 00 00 00	 DD	 $LN30@Is_valid_s
  00134	00 00 00 00	 DD	 $LN7@Is_valid_s
  00138	00 00 00 00	 DD	 $LN6@Is_valid_s
  0013c	00 00 00 00	 DD	 $LN26@Is_valid_s
  00140	00 00 00 00	 DD	 $LN5@Is_valid_s
  00144	00 00 00 00	 DD	 $LN32@Is_valid_s
  00148	00 00 00 00	 DD	 $LN24@Is_valid_s
  0014c	00 00 00 00	 DD	 $LN39@Is_valid_s
  00150	00 00 00 00	 DD	 $LN35@Is_valid_s
  00154	00 00 00 00	 DD	 $LN10@Is_valid_s
  00158	00 00 00 00	 DD	 $LN19@Is_valid_s
  0015c	00 00 00 00	 DD	 $LN41@Is_valid_s
$LN217@Is_valid_s:
  00160	00		 DB	 0
  00161	01		 DB	 1
  00162	02		 DB	 2
  00163	03		 DB	 3
  00164	0f		 DB	 15			; 0000000fH
  00165	03		 DB	 3
  00166	04		 DB	 4
  00167	05		 DB	 5
  00168	05		 DB	 5
  00169	0f		 DB	 15			; 0000000fH
  0016a	0f		 DB	 15			; 0000000fH
  0016b	0f		 DB	 15			; 0000000fH
  0016c	06		 DB	 6
  0016d	0f		 DB	 15			; 0000000fH
  0016e	0f		 DB	 15			; 0000000fH
  0016f	0f		 DB	 15			; 0000000fH
  00170	0f		 DB	 15			; 0000000fH
  00171	07		 DB	 7
  00172	08		 DB	 8
  00173	09		 DB	 9
  00174	0a		 DB	 10			; 0000000aH
  00175	0b		 DB	 11			; 0000000bH
  00176	0a		 DB	 10			; 0000000aH
  00177	09		 DB	 9
  00178	02		 DB	 2
  00179	0b		 DB	 11			; 0000000bH
  0017a	0f		 DB	 15			; 0000000fH
  0017b	0f		 DB	 15			; 0000000fH
  0017c	0f		 DB	 15			; 0000000fH
  0017d	0f		 DB	 15			; 0000000fH
  0017e	0f		 DB	 15			; 0000000fH
  0017f	0f		 DB	 15			; 0000000fH
  00180	00		 DB	 0
  00181	01		 DB	 1
  00182	0c		 DB	 12			; 0000000cH
  00183	0d		 DB	 13			; 0000000dH
  00184	0d		 DB	 13			; 0000000dH
  00185	0f		 DB	 15			; 0000000fH
  00186	04		 DB	 4
  00187	01		 DB	 1
  00188	0f		 DB	 15			; 0000000fH
  00189	0e		 DB	 14			; 0000000eH
  0018a	0f		 DB	 15			; 0000000fH
  0018b	0f		 DB	 15			; 0000000fH
  0018c	01		 DB	 1
  0018d	0b		 DB	 11			; 0000000bH
  0018e	0f		 DB	 15			; 0000000fH
  0018f	05		 DB	 5
  00190	0f		 DB	 15			; 0000000fH
  00191	09		 DB	 9
  00192	0f		 DB	 15			; 0000000fH
  00193	0b		 DB	 11			; 0000000bH
  00194	00		 DB	 0
  00195	0f		 DB	 15			; 0000000fH
  00196	00		 DB	 0
  00197	03		 DB	 3
  00198	02		 DB	 2
  00199	0b		 DB	 11			; 0000000bH
?_Is_valid_strftime_tm_data@std@@YA_NDQBUtm@@@Z ENDP	; std::_Is_valid_strftime_tm_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gios_base@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 368  :         _Ios_base_dtor(this);

  00025	56		 push	 esi
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ios_base@std@@6B@
  00033	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00038	83 c4 04	 add	 esp, 4
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN10@scalar
  00041	6a 38		 push	 56			; 00000038H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gios_base@std@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gios_base@std@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 367  :     virtual __CLR_OR_THIS_CALL ~ios_base() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ios_base@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 368  :         _Ios_base_dtor(this);

  00022	51		 push	 ecx
  00023	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ios_base@std@@6B@
  00029	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  0002e	83 c4 04	 add	 esp, 4

; 369  :     }

  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
  00040	cc		 int	 3
  00041	cc		 int	 3
  00042	cc		 int	 3
  00043	cc		 int	 3
  00044	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ios_base@std@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ios_base@std@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -28						; size = 20
$T2 = -8						; size = 8
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 154  :     void __CLR_OR_THIS_CALL clear(iostate _State, bool _Reraise) { // set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 155  :         _State &= _Statmask;

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	83 e0 17	 and	 eax, 23			; 00000017H

; 156  :         _Mystate             = _State;

  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 157  :         const auto _Filtered = _State & _Except;

  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00012	56		 push	 esi
  00013	23 c8		 and	 ecx, eax

; 158  :         if (_Filtered) {

  00015	74 08		 je	 SHORT $LN2@clear

; 159  :             if (_Reraise) {

  00017	80 7d 0c 00	 cmp	 BYTE PTR __Reraise$[ebp], 0
  0001b	74 12		 je	 SHORT $LN3@clear
  0001d	eb 07		 jmp	 SHORT $LN14@clear
$LN2@clear:

; 173  :         }
; 174  :     }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN14@clear:

; 160  :                 _RERAISE;

  00026	6a 00		 push	 0
  00028	6a 00		 push	 0
  0002a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@clear:

; 161  :             }
; 162  : 
; 163  :             const char* _Msg;
; 164  :             if (_Filtered & ios_base::badbit) {

  0002f	f6 c1 04	 test	 cl, 4
  00032	74 07		 je	 SHORT $LN4@clear

; 165  :                 _Msg = "ios_base::badbit set";

  00034	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00039	eb 10		 jmp	 SHORT $LN6@clear
$LN4@clear:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  0003b	f6 c1 02	 test	 cl, 2
  0003e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00043	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00048	0f 44 f0	 cmove	 esi, eax
$LN6@clear:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  0004b	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0004e	6a 01		 push	 1
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00056	83 c4 08	 add	 esp, 8
  00059	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0005c	50		 push	 eax
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00063	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00068	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN12@clear:
  00071	cc		 int	 3
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN28@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN28@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 72   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00036	8b c7		 mov	 eax, edi
  00038	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7failure@ios_base@std@@6B@
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
tv319 = -48						; size = 4
_this$ = -44						; size = 4
_this$GSCopy$ = -44					; size = 4
__Errcode$2$ = -44					; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 116  :         explicit failure(const char* _Message, const error_code& _Errcode = _STD make_error_code(io_errc::stream))

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  0002f	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
  00035	8b 55 08	 mov	 edx, DWORD PTR __Message$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00038	8b ca		 mov	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 116  :         explicit failure(const char* _Message, const error_code& _Errcode = _STD make_error_code(io_errc::stream))

  0003a	89 75 d4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003d	0f 11 45 d8	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 117  :             : system_error(_Errcode, _Message) {} // construct with message

  00041	8b 38		 mov	 edi, DWORD PTR [eax]
  00043	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00046	89 45 d4	 mov	 DWORD PTR __Errcode$2$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00049	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0004c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00053	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0005a	89 45 d0	 mov	 DWORD PTR tv319[ebp], eax
  0005d	0f 1f 00	 npad	 3
$LL65@failure:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL65@failure
  00067	2b 4d d0	 sub	 ecx, DWORD PTR tv319[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006a	51		 push	 ecx
  0006b	52		 push	 edx
  0006c	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error

; 490  :     system_error(error_code _Errcode, const char* _Message) : _Mybase(_Errcode, _Message) {}

  00074	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00077	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007e	50		 push	 eax
  0007f	ff 75 d4	 push	 DWORD PTR __Errcode$2$[ebp]
  00082	8b ce		 mov	 ecx, esi
  00084	57		 push	 edi
  00085	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
  0008d	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00090	76 28		 jbe	 SHORT $LN46@failure
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00092	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00095	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00096	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00098	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009e	72 10		 jb	 SHORT $LN57@failure

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a3	83 c1 23	 add	 ecx, 35			; 00000023H
  000a6	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ab	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ae	77 2f		 ja	 SHORT $LN69@failure
$LN57@failure:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b0	51		 push	 ecx
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b7	83 c4 08	 add	 esp, 8
$LN46@failure:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xiosbase

; 117  :             : system_error(_Errcode, _Message) {} // construct with message

  000ba	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  000c0	8b c6		 mov	 eax, esi
  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN69@failure:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN67@failure:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -96						; size = 52
$T3 = -44						; size = 16
__Lock$4 = -28						; size = 4
$T5 = -24						; size = 4
__Psave$1$ = -24					; size = 4
$T6 = -20						; size = 4
__Lock$7 = -16						; size = 4
$T8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
__Psave_guard$9 = 8					; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 432  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 433  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00027	6a 00		 push	 0
  00029	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0
  00033	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 89   :             if (_Id == 0) { // still zero, allocate stamp

  00038	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id

; 434  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	89 45 e8	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 89   :             if (_Id == 0) { // still zero, allocate stamp

  0004d	85 ff		 test	 edi, edi
  0004f	75 2f		 jne	 SHORT $LN11@use_facet

; 90   :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00051	57		 push	 edi
  00052	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00055	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 91   :                 if (_Id == 0) {

  0005a	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, edi ; std::ctype<char>::id
  00060	75 10		 jne	 SHORT $LN12@use_facet

; 92   :                     _Id = static_cast<size_t>(++_Id_cnt);

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00067	40		 inc	 eax
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006d	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN12@use_facet:

; 93   :                 }
; 94   :                 _END_LOCK()

  00072	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00075	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
$LN11@use_facet:

; 375  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00080	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00083	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  0008a	89 4d f0	 mov	 DWORD PTR $T8[ebp], ecx
  0008d	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00090	3b 7a 0c	 cmp	 edi, DWORD PTR [edx+12]
  00093	73 10		 jae	 SHORT $LN19@use_facet
  00095	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00098	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 376  :         if (_Facptr || !_Ptr->_Xparent) {

  0009b	85 f6		 test	 esi, esi
  0009d	0f 85 c7 00 00
	00		 jne	 $LN77@use_facet
  000a3	eb 05		 jmp	 SHORT $LN81@use_facet
$LN19@use_facet:

; 372  :     }
; 373  : 
; 374  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 375  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  000a5	33 f6		 xor	 esi, esi
  000a7	89 4d f0	 mov	 DWORD PTR $T8[ebp], ecx
$LN81@use_facet:

; 376  :         if (_Facptr || !_Ptr->_Xparent) {

  000aa	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000ae	74 13		 je	 SHORT $LN14@use_facet

; 377  :             return _Facptr; // found facet or not transparent
; 378  :         }
; 379  : 
; 380  :         // look in current locale
; 381  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000b0	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 382  :         if (_Id < _Ptr0->_Facetcount) {

  000b5	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000b8	73 11		 jae	 SHORT $LN82@use_facet

; 383  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000ba	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000bd	8b 75 f0	 mov	 esi, DWORD PTR $T8[ebp]
  000c0	8b 34 06	 mov	 esi, DWORD PTR [esi+eax]
$LN14@use_facet:

; 435  : 
; 436  :     const size_t _Id         = _Facet::id._Get_index();
; 437  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 438  : 
; 439  :     if (!_Pf) {

  000c3	85 f6		 test	 esi, esi
  000c5	0f 85 9f 00 00
	00		 jne	 $LN77@use_facet
$LN82@use_facet:

; 440  :         if (_Psave) {

  000cb	8b 45 e8	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000ce	85 c0		 test	 eax, eax
  000d0	74 07		 je	 SHORT $LN3@use_facet

; 441  :             _Pf = _Psave; // lazy facet already allocated

  000d2	8b f0		 mov	 esi, eax

; 442  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000d4	e9 91 00 00 00	 jmp	 $LN77@use_facet
$LN3@use_facet:

; 2794 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  000d9	6a 18		 push	 24			; 00000018H
  000db	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e0	8b f0		 mov	 esi, eax
  000e2	83 c4 04	 add	 esp, 4
  000e5	89 75 e8	 mov	 DWORD PTR $T5[ebp], esi
  000e8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ec	85 f6		 test	 esi, esi
  000ee	74 4d		 je	 SHORT $LN24@use_facet

; 371  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000f0	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000f3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f6	85 c9		 test	 ecx, ecx
  000f8	74 0c		 je	 SHORT $LN32@use_facet
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 190  :         return _Myptr ? _Myptr : &_Nul;

  000fa	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000fd	85 c0		 test	 eax, eax
  000ff	75 0a		 jne	 SHORT $LN33@use_facet
  00101	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 371  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  00104	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  00106	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:

; 2794 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  0010b	50		 push	 eax
  0010c	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  0010f	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 277  :         return ::_Getctype();

  00114	8d 45 d4	 lea	 eax, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2794 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  00117	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR $T6[ebp], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 277  :         return ::_Getctype();

  0011e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 141  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  0011f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2788 :     __CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0) : ctype_base(_Refs) {

  00126	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo

; 277  :         return ::_Getctype();

  0012c	e8 00 00 00 00	 call	 __Getctype
  00131	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 2816 :         _Ctype = _Lobj._Getctype();

  00134	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00137	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2794 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  0013b	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  0013d	33 f6		 xor	 esi, esi
$LN25@use_facet:
  0013f	f6 45 ec 01	 test	 BYTE PTR $T6[ebp], 1
  00143	74 08		 je	 SHORT $LN29@use_facet
  00145	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00148	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1527 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0014d	89 75 08	 mov	 DWORD PTR __Psave_guard$9[ebp], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale

; 455  :             _Facet_Register(_Pfmod);

  00150	56		 push	 esi
  00151	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00155	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 456  : #endif // ^^^ !defined(_M_CEE) ^^^
; 457  : 
; 458  :             _Pfmod->_Incref();

  0015a	8b 16		 mov	 edx, DWORD PTR [esi]
  0015c	83 c4 04	 add	 esp, 4
  0015f	8b ce		 mov	 ecx, esi
  00161	ff 52 04	 call	 DWORD PTR [edx+4]

; 459  :             _Facetptr<_Facet>::_Psave = _Psave;

  00164	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
$LN77@use_facet:

; 460  :             _Pf                       = _Psave;
; 461  : 
; 462  :             (void) _Psave_guard.release();
; 463  :         }
; 464  :     }
; 465  : 
; 466  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  0016a	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0016d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00172	8b c6		 mov	 eax, esi

; 467  :     _END_LOCK()
; 468  : } // end of use_facet body

  00174	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00177	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017e	59		 pop	 ecx
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$2:
  00008	6a 18		 push	 24			; 00000018H
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$9[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2811 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2820 :         if (0 < _Ctype._Delfl) {

  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2811 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2820 :         if (0 < _Ctype._Delfl) {

  0000f	85 c0		 test	 eax, eax
  00011	7e 0a		 jle	 SHORT $LN20@scalar

; 2821 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00013	ff 76 0c	 push	 DWORD PTR [esi+12]
  00016	e8 00 00 00 00	 call	 _free
  0001b	eb 0a		 jmp	 SHORT $LN21@scalar
$LN20@scalar:

; 2822 :         } else if (_Ctype._Delfl < 0) {

  0001d	79 0b		 jns	 SHORT $LN13@scalar

; 2823 :             delete[] _Ctype._Table;

  0001f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00022	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN21@scalar:

; 2824 :         }
; 2825 : 
; 2826 :         _CSTD free(_Ctype._LocaleName);

  00027	83 c4 04	 add	 esp, 4
$LN13@scalar:
  0002a	ff 76 14	 push	 DWORD PTR [esi+20]
  0002d	e8 00 00 00 00	 call	 _free
  00032	83 c4 04	 add	 esp, 4

; 2813 :     }

  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN16@scalar
  00041	6a 18		 push	 24			; 00000018H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN16@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2873 :         char* _Dest) const { // narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2874 :         _Adl_verify_range(_First, _Last);
; 2875 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 14	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2876 :         return _Last;

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2877 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2868 :     virtual _Elem __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char) const { // narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2869 :         return _Ch;

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2870 :     }

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2862 :         const char* _First, const char* _Last, _Elem* _Dest) const { // widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2863 :         _Adl_verify_range(_First, _Last);
; 2864 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2865 :         return _Last;

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2866 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2857 :     virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const { // widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2858 :         return _Byte;

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2859 :     }

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2848 :         const _Elem* _Last) const { // convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2849 :         _Adl_verify_range(_First, _Last);
; 2850 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN10@do_toupper
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_toupper:

; 2851 :             *_First = static_cast<_Elem>(_Toupper(static_cast<unsigned char>(*_First), &_Ctype));

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Toupper
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	83 c4 08	 add	 esp, 8
  00022	46		 inc	 esi
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL4@do_toupper

; 2849 :         _Adl_verify_range(_First, _Last);
; 2850 :         for (; _First != _Last; ++_First) {

  00027	5b		 pop	 ebx
$LN10@do_toupper:
  00028	5f		 pop	 edi

; 2852 :         }
; 2853 : 
; 2854 :         return _First;
; 2855 :     }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2843 :     virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const { // convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2844 :         return static_cast<_Elem>(_Toupper(static_cast<unsigned char>(_Ch), &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Toupper
  00011	83 c4 08	 add	 esp, 8

; 2845 :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2834 :         const _Elem* _Last) const { // convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2835 :         _Adl_verify_range(_First, _Last);
; 2836 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN10@do_tolower
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_tolower:

; 2837 :             *_First = static_cast<_Elem>(_Tolower(static_cast<unsigned char>(*_First), &_Ctype));

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Tolower
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	83 c4 08	 add	 esp, 8
  00022	46		 inc	 esi
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL4@do_tolower

; 2835 :         _Adl_verify_range(_First, _Last);
; 2836 :         for (; _First != _Last; ++_First) {

  00027	5b		 pop	 ebx
$LN10@do_tolower:
  00028	5f		 pop	 edi

; 2838 :         }
; 2839 : 
; 2840 :         return _First;
; 2841 :     }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2829 :     virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const { // convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2830 :         return static_cast<_Elem>(_Tolower(static_cast<unsigned char>(_Ch), &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Tolower
  00011	83 c4 08	 add	 esp, 8

; 2831 :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2811 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2820 :         if (0 < _Ctype._Delfl) {

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2811 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2820 :         if (0 < _Ctype._Delfl) {

  0000c	85 c0		 test	 eax, eax
  0000e	7e 0a		 jle	 SHORT $LN12@ctype

; 2821 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00010	ff 76 0c	 push	 DWORD PTR [esi+12]
  00013	e8 00 00 00 00	 call	 _free
  00018	eb 0a		 jmp	 SHORT $LN13@ctype
$LN12@ctype:

; 2822 :         } else if (_Ctype._Delfl < 0) {

  0001a	79 0b		 jns	 SHORT $LN7@ctype

; 2823 :             delete[] _Ctype._Table;

  0001c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN13@ctype:

; 2824 :         }
; 2825 : 
; 2826 :         _CSTD free(_Ctype._LocaleName);

  00024	83 c4 04	 add	 esp, 4
$LN7@ctype:
  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	e8 00 00 00 00	 call	 _free
  0002f	83 c4 04	 add	 esp, 4

; 2812 :         _Tidy();
; 2813 :     }

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2447 :     __CLR_OR_THIS_CALL ~ctype_base() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 352  :         if (_Ptr) {

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	74 11		 je	 SHORT $LN4@locale

; 353  :             delete _Ptr->_Decref();

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 08	 call	 DWORD PTR [eax+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 08		 je	 SHORT $LN4@locale
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	8b c8		 mov	 ecx, eax
  00014	6a 01		 push	 1
  00016	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 354  :         }
; 355  :     }

  00018	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 144  :         __CLR_OR_THIS_CALL ~facet() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 129  :             if (_MT_DECR(_Myrefs) == 0) {

  00000	83 c8 ff	 or	 eax, -1
  00003	f0 0f c1 41 04	 lock	  xadd	 DWORD PTR [ecx+4], eax
  00008	b8 00 00 00 00	 mov	 eax, 0
  0000d	0f 44 c1	 cmove	 eax, ecx

; 130  :                 return this;
; 131  :             }
; 132  : 
; 133  :             return nullptr;
; 134  :         }

  00010	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 125  :             _MT_INCR(_Myrefs);

  00000	f0 ff 41 04	 lock	  inc	 DWORD PTR [ecx+4]

; 126  :         }

  00004	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 181  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 203  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@Yarn

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN8@Yarn:

; 182  :         _Tidy();
; 183  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 181  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 203  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@Yarn

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN8@Yarn:

; 182  :         _Tidy();
; 183  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 256  :     __CLR_OR_THIS_CALL ~_Locinfo() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 257  :         _Locinfo_dtor(this);

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 203  :         if (_Myptr) {

  0002b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 257  :         _Locinfo_dtor(this);

  0002e	83 c4 04	 add	 esp, 4

; 203  :         if (_Myptr) {

  00031	85 c0		 test	 eax, eax
  00033	74 09		 je	 SHORT $LN8@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN8@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  0003e	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 203  :         if (_Myptr) {

  00045	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00048	85 c0		 test	 eax, eax
  0004a	74 09		 je	 SHORT $LN15@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _free
  00052	83 c4 04	 add	 esp, 4
$LN15@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  00055	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 203  :         if (_Myptr) {

  0005c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN22@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _free
  00069	83 c4 04	 add	 esp, 4
$LN22@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  0006c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 203  :         if (_Myptr) {

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	85 c0		 test	 eax, eax
  00078	74 09		 je	 SHORT $LN29@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _free
  00080	83 c4 04	 add	 esp, 4
$LN29@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  00083	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 203  :         if (_Myptr) {

  0008a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0008d	85 c0		 test	 eax, eax
  0008f	74 09		 je	 SHORT $LN36@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _free
  00097	83 c4 04	 add	 esp, 4
$LN36@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  0009a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 203  :         if (_Myptr) {

  000a1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a4	85 c0		 test	 eax, eax
  000a6	74 09		 je	 SHORT $LN43@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _free
  000ae	83 c4 04	 add	 esp, 4
$LN43@Locinfo:

; 258  :     }

  000b1	8b ce		 mov	 ecx, esi

; 211  :         _Myptr = nullptr;

  000b3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 258  :     }

  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5e		 pop	 esi
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
  000cf	cc		 int	 3
  000d0	cc		 int	 3
  000d1	cc		 int	 3
  000d2	cc		 int	 3
  000d3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 234  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 141  : 
; 142  :     __CLR_OR_THIS_CALL _Yarn(const _Yarn& _Right) noexcept : _Myptr(nullptr), _Nul(0) {
; 143  :         *this = _Right;
; 144  :     }
; 145  : 
; 146  :     __CLR_OR_THIS_CALL _Yarn(const _Elem* _Right) noexcept : _Myptr(nullptr), _Nul(0) {
; 147  :         *this = _Right;
; 148  :     }
; 149  : 
; 150  :     _Yarn& __CLR_OR_THIS_CALL operator=(const _Yarn& _Right) noexcept {
; 151  :         return *this = _Right._Myptr;
; 152  :     }
; 153  : 
; 154  :     _Yarn& __CLR_OR_THIS_CALL operator=(const _Elem* _Right) noexcept {
; 155  :         if (_Myptr != _Right) { // new value, discard old and copy new
; 156  :             _Tidy();
; 157  : 
; 158  :             if (_Right) { // new is not empty, copy it
; 159  :                 const _Elem* _Ptr = _Right;
; 160  :                 while (*_Ptr != _Elem{}) {
; 161  :                     ++_Ptr;
; 162  :                 }
; 163  : 
; 164  :                 const auto _Count = (++_Ptr - _Right) * sizeof(_Elem);
; 165  : 
; 166  : #ifdef _DEBUG
; 167  :                 _Myptr = static_cast<_Elem*>(_malloc_dbg(_Count, _CRT_BLOCK, __FILE__, __LINE__));
; 168  : #else
; 169  :                 _Myptr = static_cast<_Elem*>(_CSTD malloc(_Count));
; 170  : #endif
; 171  : 
; 172  :                 if (_Myptr) {
; 173  :                     _CSTD memcpy(_Myptr, _Right, _Count);
; 174  :                 }
; 175  :             }
; 176  :         }
; 177  : 
; 178  :         return *this;
; 179  :     }
; 180  : 
; 181  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {
; 182  :         _Tidy();
; 183  :     }
; 184  : 
; 185  :     _NODISCARD bool __CLR_OR_THIS_CALL empty() const noexcept {
; 186  :         return _Myptr == nullptr;
; 187  :     }
; 188  : 
; 189  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL c_str() const noexcept {
; 190  :         return _Myptr ? _Myptr : &_Nul;
; 191  :     }
; 192  : 
; 193  :     _NODISCARD bool __CLR_OR_THIS_CALL _Empty() const noexcept {
; 194  :         return _Myptr == nullptr;
; 195  :     }
; 196  : 
; 197  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL _C_str() const noexcept {
; 198  :         return _Myptr ? _Myptr : &_Nul;
; 199  :     }
; 200  : 
; 201  : private:
; 202  :     void __CLR_OR_THIS_CALL _Tidy() noexcept {
; 203  :         if (_Myptr) {
; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);
; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;
; 212  :     }
; 213  : 
; 214  :     _Elem* _Myptr; // pointer to allocated string
; 215  :     _Elem _Nul; // nul terminator for unallocated string
; 216  : };
; 217  : 
; 218  : extern "C++" class _CRTIMP2_PURE_IMPORT _Locinfo { // summary of all stuff specific to a locale used by standard facets
; 219  : public:
; 220  :     using _Collvec  = ::_Collvec;
; 221  :     using _Ctypevec = ::_Ctypevec;
; 222  :     using _Cvtvec   = ::_Cvtvec;
; 223  :     using _Timevec  = _STD _Timevec;
; 224  : 
; 225  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_ctor(_Locinfo*, const char*);
; 226  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_ctor(_Locinfo*, int, const char*);
; 227  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_dtor(_Locinfo*);
; 228  :     static _Locinfo& __CLRCALL_PURE_OR_CDECL _Locinfo_Addcats(_Locinfo*, int, const char*);
; 229  : 
; 230  :     __CLR_OR_THIS_CALL _Locinfo(const char* _Pch = "C")
; 231  : #ifndef _M_CEE_PURE
; 232  :         : _Lock(_LOCK_LOCALE)

  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 140  :     __CLR_OR_THIS_CALL _Yarn() noexcept : _Myptr(nullptr), _Nul(0) {}

  00037	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0003e	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  00042	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00049	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  0004d	33 c0		 xor	 eax, eax
  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00056	66 89 46 18	 mov	 WORD PTR [esi+24], ax
  0005a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0005d	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00061	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00064	88 46 28	 mov	 BYTE PTR [esi+40], al
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	88 46 30	 mov	 BYTE PTR [esi+48], al

; 235  :         if (_Pch) {

  0006d	8b 45 08	 mov	 eax, DWORD PTR __Pch$[ebp]
  00070	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00074	85 c0		 test	 eax, eax
  00076	74 1e		 je	 SHORT $LN2@Locinfo

; 236  :             _Locinfo_ctor(this, _Pch);

  00078	50		 push	 eax
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  0007f	83 c4 08	 add	 esp, 8

; 241  :     }

  00082	8b c6		 mov	 eax, esi
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN2@Locinfo:

; 237  :             return;
; 238  :         }
; 239  : 
; 240  :         _Xruntime_error("bad locale name");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
  0009b	e8 00 00 00 00	 call	 ?_Xruntime_error@std@@YAXPBD@Z ; std::_Xruntime_error
$LN30@Locinfo:
  000a0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004f	90		 npad	 1
  00050	90		 npad	 1
  00051	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00055	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00058	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0005b	33 c8		 xor	 ecx, eax
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00067	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Ogtp
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 25   :     virtual __CLR_OR_THIS_CALL ~_Facet_base() noexcept {} // ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_cast@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
;	COMDAT ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ
_TEXT	SEGMENT
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ PROC ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>, COMDAT

; 669  :     static _Constexpr_immortalize_impl<_Ty> _Static;
; 670  :     return _Static._Storage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static

; 671  : }

  00005	c3		 ret	 0
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ENDP ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Iostream_error_category2@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Iostream_error_category2@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 0b		 je	 SHORT $LN5@scalar
  0000c	6a 08		 push	 8
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 08	 add	 esp, 8
$LN5@scalar:
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??_G_Iostream_error_category2@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category2::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
;	COMDAT ?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category2::message, COMDAT
; _this$ = ecx

; 555  :     _NODISCARD string message(int _Errcode) const override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 556  :         if (_Errcode == static_cast<int>(io_errc::stream)) {

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00007	56		 push	 esi
  00008	83 f8 01	 cmp	 eax, 1
  0000b	75 5a		 jne	 SHORT $LN2@message
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000d	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00010	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00013	6a 20		 push	 32			; 00000020H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00015	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00018	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  00026	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0002b	89 06		 mov	 DWORD PTR [esi], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  0002d	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  00030	c7 46 10 15 00
	00 00		 mov	 DWORD PTR [esi+16], 21	; 00000015H

; 892  :         _My_data._Myres  = _New_capacity;

  00037	c7 46 14 1f 00
	00 00		 mov	 DWORD PTR [esi+20], 31	; 0000001fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003e	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB
  00045	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00048	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB+16
  0004e	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00051	8a 0d 14 00 00
	00		 mov	 cl, BYTE PTR ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB+20
  00057	88 48 14	 mov	 BYTE PTR [eax+20], cl
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0005a	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error

; 563  :     }

  0005e	8b c6		 mov	 eax, esi
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
$LN2@message:
  00067	57		 push	 edi

; 561  :             return _Syserror_map(_Errcode);

  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0006e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error

; 561  :             return _Syserror_map(_Errcode);

  00071	8b d0		 mov	 edx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00073	8b ca		 mov	 ecx, edx
  00075	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error

; 561  :             return _Syserror_map(_Errcode);

  00078	83 c4 04	 add	 esp, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0007b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0007e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00085	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00088	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0008f	90		 npad	 1
$LL72@message:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL72@message
  00097	2b cf		 sub	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00099	51		 push	 ecx
  0009a	52		 push	 edx
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error

; 561  :             return _Syserror_map(_Errcode);

  000a2	5f		 pop	 edi

; 563  :     }

  000a3	8b c6		 mov	 eax, esi
  000a5	5e		 pop	 esi
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category2::message
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
;	COMDAT ?name@_Iostream_error_category2@std@@UBEPBDXZ
_TEXT	SEGMENT
?name@_Iostream_error_category2@std@@UBEPBDXZ PROC	; std::_Iostream_error_category2::name, COMDAT
; _this$ = ecx

; 552  :         return "iostream";

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08LLGCOLLL@iostream@

; 553  :     }

  00005	c3		 ret	 0
?name@_Iostream_error_category2@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category2::name
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN23@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN23@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 72   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00036	8b c7		 mov	 eax, edi
  00038	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7system_error@std@@6B@
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_G_System_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_System_error@std@@UAEPAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_G_System_error@std@@UAEPAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0_System_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_System_error@std@@QAE@ABV01@@Z PROC			; std::_System_error::_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 72   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	83 c4 08	 add	 esp, 8
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00036	8b c7		 mov	 eax, edi
  00038	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0_System_error@std@@QAE@ABV01@@Z ENDP			; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\stdexcept
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
;	COMDAT ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T2 = -104						; size = 24
__Errcode$ = -80					; size = 8
__InitData$3 = -80					; size = 8
_this$ = -76						; size = 4
_this$GSCopy$ = -76					; size = 4
_this$GSCopy$1$ = -72					; size = 4
$T4 = -72						; size = 4
__Result$1$ = -68					; size = 4
__Errcode$1$ = -68					; size = 4
$T5 = -64						; size = 24
$T6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 475  :     _System_error(error_code _Errcode, const string& _Message)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  0002f	89 75 b4	 mov	 DWORD PTR _this$[ebp], esi
  00032	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	89 75 b4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0003b	89 45 bc	 mov	 DWORD PTR __Result$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003e	0f 11 45 98	 movups	 XMMWORD PTR $T2[ebp], xmm0

; 434  :         return _Myres > _Small_string_capacity;

  00042	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00046	8b 78 10	 mov	 edi, DWORD PTR [eax+16]

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00049	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00050	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0

; 426  :         if (_Large_mode_engaged()) {

  00057	76 05		 jbe	 SHORT $LN22@System_err

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00059	8b 00		 mov	 eax, DWORD PTR [eax]
  0005b	89 45 bc	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN22@System_err:

; 857  :         if (_Count > max_size()) {

  0005e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00064	0f 87 b5 01 00
	00		 ja	 $LN249@System_err

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0006a	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  0006d	77 13		 ja	 SHORT $LN30@System_err
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00072	89 7d a8	 mov	 DWORD PTR $T2[ebp+16], edi

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00075	c7 45 ac 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007c	0f 11 45 98	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 884  :             return;

  00080	eb 6a		 jmp	 SHORT $LN56@System_err
$LN30@System_err:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00082	8b f7		 mov	 esi, edi
  00084	83 ce 0f	 or	 esi, 15			; 0000000fH
  00087	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0008d	76 12		 jbe	 SHORT $LN36@System_err

; 2944 :             return _Max;

  0008f	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00094	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	eb 2a		 jmp	 SHORT $LN247@System_err
$LN36@System_err:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a1	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  000a6	3b f0		 cmp	 esi, eax
  000a8	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000ab	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000ae	85 c0		 test	 eax, eax
  000b0	75 04		 jne	 SHORT $LN50@System_err

; 228  :         return nullptr;

  000b2	33 c9		 xor	 ecx, ecx
  000b4	eb 1a		 jmp	 SHORT $LN49@System_err
$LN50@System_err:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000b6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bb	72 08		 jb	 SHORT $LN51@System_err

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c3	eb 06		 jmp	 SHORT $LN247@System_err
$LN51@System_err:

; 136  :         return ::operator new(_Bytes);

  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN247@System_err:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000cb	8b c8		 mov	 ecx, eax
  000cd	83 c4 04	 add	 esp, 4
$LN49@System_err:

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000d0	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  000d3	89 4d 98	 mov	 DWORD PTR $T2[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d6	50		 push	 eax
  000d7	ff 75 bc	 push	 DWORD PTR __Result$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 891  :         _My_data._Mysize = _Count;

  000da	89 7d a8	 mov	 DWORD PTR $T2[ebp+16], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000dd	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 892  :         _My_data._Myres  = _New_capacity;

  000de	89 75 ac	 mov	 DWORD PTR $T2[ebp+20], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e1	e8 00 00 00 00	 call	 _memcpy
  000e6	8b 75 b8	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN56@System_err:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error

; 476  :         : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) {}

  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp+4]
  000ef	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  000f2	89 45 bc	 mov	 DWORD PTR __Errcode$1$[ebp], eax
  000f5	89 4d b8	 mov	 DWORD PTR $T4[ebp], ecx
  000f8	89 4d b4	 mov	 DWORD PTR __Errcode$[ebp+4], ecx

; 463  :     static string _Makestr(error_code _Errcode, string _Message) { // compose error message

  000fb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2458 :         return _Mypair._Myval2._Mysize == 0;

  00102	85 ff		 test	 edi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error

; 464  :         if (!_Message.empty()) {

  00104	74 12		 je	 SHORT $LN61@System_err
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00106	6a 02		 push	 2
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  0010d	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00110	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00115	8b 4d b8	 mov	 ecx, DWORD PTR $T4[ebp]
$LN61@System_err:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error

; 207  :         return category().message(value());

  00118	ff 75 bc	 push	 DWORD PTR __Errcode$1$[ebp]
  0011b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011d	8d 55 d8	 lea	 edx, DWORD PTR $T6[ebp]
  00120	52		 push	 edx
  00121	ff 50 08	 call	 DWORD PTR [eax+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00124	83 7d ec 0f	 cmp	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  00128	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]

; 1459 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0012b	ff 75 e8	 push	 DWORD PTR $T6[ebp+16]

; 426  :         if (_Large_mode_engaged()) {

  0012e	0f 47 45 d8	 cmova	 eax, DWORD PTR $T6[ebp]

; 1459 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00132	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00135	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error

; 468  :         _Message.append(_Errcode.message());

  00136	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1459 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0013a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 434  :         return _Myres > _Small_string_capacity;

  0013f	8b 4d ec	 mov	 ecx, DWORD PTR $T6[ebp+20]
  00142	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00145	76 2c		 jbe	 SHORT $LN108@System_err
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00147	8b 55 d8	 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0014a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0014b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0014d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00153	72 14		 jb	 SHORT $LN119@System_err

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00155	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00158	83 c1 23	 add	 ecx, 35			; 00000023H
  0015b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0015d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00160	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00163	0f 87 bb 00 00
	00		 ja	 $LN250@System_err
$LN119@System_err:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00169	51		 push	 ecx
  0016a	52		 push	 edx
  0016b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00170	83 c4 08	 add	 esp, 8
$LN108@System_err:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00173	0f 10 4d 98	 movups	 xmm1, XMMWORD PTR $T2[ebp]

; 425  :         const value_type* _Result = _Bx._Buf;

  00177	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 60   :     {

  0017a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00180	f3 0f 7e 45 a8	 movq	 xmm0, QWORD PTR $T2[ebp+16]
  00185	66 0f d6 45 d0	 movq	 QWORD PTR $T5[ebp+16], xmm0
  0018a	0f 57 c0	 xorps	 xmm0, xmm0

; 434  :         return _Myres > _Small_string_capacity;

  0018d	83 7d d4 0f	 cmp	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00191	66 0f 7e c8	 movd	 eax, xmm1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 59   :         : _Data()

  00195	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0019a	0f 11 4d c0	 movups	 XMMWORD PTR $T5[ebp], xmm1

; 426  :         if (_Large_mode_engaged()) {

  0019e	0f 47 c8	 cmova	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 61   :         __std_exception_data _InitData = { _Message, true };

  001a1	c6 45 b4 01	 mov	 BYTE PTR __InitData$3[ebp+4], 1
  001a5	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  001a8	89 4d b0	 mov	 DWORD PTR __InitData$3[ebp], ecx

; 62   :         __std_exception_copy(&_InitData, &_Data);

  001ab	50		 push	 eax
  001ac	8d 45 b0	 lea	 eax, DWORD PTR __InitData$3[ebp]
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 ___std_exception_copy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001b5	8b 4d d4	 mov	 ecx, DWORD PTR $T5[ebp+20]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h

; 62   :         __std_exception_copy(&_InitData, &_Data);

  001b8	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\stdexcept

; 104  :     explicit runtime_error(const string& _Message) : _Mybase(_Message.c_str()) {}

  001bb	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001c1	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001c4	76 28		 jbe	 SHORT $LN227@System_err
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c6	8b 55 c0	 mov	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001c9	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ca	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001cc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001d2	72 10		 jb	 SHORT $LN238@System_err

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001d4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001d7	83 c1 23	 add	 ecx, 35			; 00000023H
  001da	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001dc	83 c0 fc	 add	 eax, -4			; fffffffcH
  001df	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001e2	77 45		 ja	 SHORT $LN251@System_err
$LN238@System_err:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001e4	51		 push	 ecx
  001e5	52		 push	 edx
  001e6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001eb	83 c4 08	 add	 esp, 8
$LN227@System_err:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error

; 476  :         : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) {}

  001ee	8b 4d 08	 mov	 ecx, DWORD PTR __Errcode$[ebp]
  001f1	8b c6		 mov	 eax, esi
  001f3	8b 55 0c	 mov	 edx, DWORD PTR __Errcode$[ebp+4]
  001f6	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_System_error@std@@6B@
  001fc	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  001ff	89 56 10	 mov	 DWORD PTR [esi+16], edx
  00202	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00205	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020c	59		 pop	 ecx
  0020d	5f		 pop	 edi
  0020e	5e		 pop	 esi
  0020f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00212	33 cd		 xor	 ecx, ebp
  00214	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00219	8b e5		 mov	 esp, ebp
  0021b	5d		 pop	 ebp
  0021c	c2 0c 00	 ret	 12			; 0000000cH
$LN249@System_err:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  0021f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN250@System_err:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00224	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN251@System_err:
  00229	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN246@System_err:
  0022e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$5:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$6:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ec$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 429  : _EXPORT_STD _NODISCARD inline error_code make_error_code(io_errc _Ec) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 171  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ec$[ebp]

; 429  : _EXPORT_STD _NODISCARD inline error_code make_error_code(io_errc _Ec) noexcept {

  00006	56		 push	 esi

; 171  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00007	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 0e		 mov	 DWORD PTR [esi], ecx

; 698  :     return _Immortalize_memcpy_image<_Iostream_error_category2>();

  0000c	e8 00 00 00 00	 call	 ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>

; 171  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00011	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 430  :     return error_code(static_cast<int>(_Ec), _STD iostream_category());

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi

; 431  : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 416  : _NODISCARD inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 103  :         return _Bit_cast<uintptr_t>(_Addr) == _Bit_cast<uintptr_t>(_Right._Addr);

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 416  : _NODISCARD inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept {

  00006	56		 push	 esi

; 103  :         return _Bit_cast<uintptr_t>(_Addr) == _Bit_cast<uintptr_t>(_Right._Addr);

  00007	8b 75 08	 mov	 esi, DWORD PTR __Code$[ebp]
  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000d	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]

; 417  :     return *this == _Code.category() && _Code.value() == _Errval;

  00010	75 0e		 jne	 SHORT $LN3@equivalent
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	3b 45 0c	 cmp	 eax, DWORD PTR __Errval$[ebp]
  00017	75 07		 jne	 SHORT $LN3@equivalent
  00019	b0 01		 mov	 al, 1
  0001b	5e		 pop	 esi

; 418  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
$LN3@equivalent:

; 417  :     return *this == _Code.category() && _Code.value() == _Errval;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 418  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 412  : _NODISCARD inline bool error_category::equivalent(int _Errval, const error_condition& _Cond) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 413  :     return default_error_condition(_Errval) == _Cond;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8d 55 f8	 lea	 edx, DWORD PTR $T1[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	56		 push	 esi
  0000c	ff 75 08	 push	 DWORD PTR __Errval$[ebp]
  0000f	52		 push	 edx
  00010	ff 50 0c	 call	 DWORD PTR [eax+12]

; 103  :         return _Bit_cast<uintptr_t>(_Addr) == _Bit_cast<uintptr_t>(_Right._Addr);

  00013	8b 75 0c	 mov	 esi, DWORD PTR __Cond$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001f	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]

; 305  :         return _Left.category() == _Right.category() && _Left.value() == _Right.value();

  00022	75 0f		 jne	 SHORT $LN6@equivalent
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	3b 06		 cmp	 eax, DWORD PTR [esi]
  00028	75 09		 jne	 SHORT $LN6@equivalent
  0002a	b0 01		 mov	 al, 1
  0002c	5e		 pop	 esi

; 414  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
$LN6@equivalent:

; 305  :         return _Left.category() == _Right.category() && _Left.value() == _Right.value();

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 414  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 407  : _NODISCARD inline error_condition error_category::default_error_condition(int _Errval) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     error_condition(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Errval$[ebp]
  00009	89 10		 mov	 DWORD PTR [eax], edx
  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 408  :     // make error_condition for error code
; 409  :     return error_condition(_Errval, *this);
; 410  : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 87   :     _CONSTEXPR20 virtual ~error_category() noexcept = default;

  00000	c2 00 00	 ret	 0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z
_TEXT	SEGMENT
__RNext$ = 8						; size = 4
__UVal$ = 12						; size = 4
??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z PROC		; std::_UIntegral_to_buff<char,unsigned int>, COMDAT

; 2717 : _NODISCARD _Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal) { // used by both to_string and thread::id output

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2718 :     // format _UVal into buffer *ending at* _RNext
; 2719 :     static_assert(is_unsigned_v<_UTy>, "_UTy must be unsigned");
; 2720 : 
; 2721 : #ifdef _WIN64
; 2722 :     auto _UVal_trunc = _UVal;
; 2723 : #else // ^^^ defined(_WIN64) / !defined(_WIN64) vvv
; 2724 : 
; 2725 :     constexpr bool _Big_uty = sizeof(_UTy) > 4;
; 2726 :     if constexpr (_Big_uty) { // For 64-bit numbers, work in chunks to avoid 64-bit divisions.
; 2727 :         while (_UVal > 0xFFFFFFFFU) {
; 2728 :             auto _UVal_chunk = static_cast<unsigned long>(_UVal % 1000000000);
; 2729 :             _UVal /= 1000000000;
; 2730 : 
; 2731 :             for (int _Idx = 0; _Idx != 9; ++_Idx) {
; 2732 :                 *--_RNext = static_cast<_Elem>('0' + _UVal_chunk % 10);
; 2733 :                 _UVal_chunk /= 10;
; 2734 :             }
; 2735 :         }
; 2736 :     }
; 2737 : 
; 2738 :     auto _UVal_trunc = static_cast<unsigned long>(_UVal);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __UVal$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __RNext$[ebp]
  0000a	53		 push	 ebx
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@UIntegral_:

; 2739 : #endif // ^^^ !defined(_WIN64) ^^^
; 2740 : 
; 2741 :     do {
; 2742 :         *--_RNext = static_cast<_Elem>('0' + _UVal_trunc % 10);

  00010	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  00015	4e		 dec	 esi
  00016	f7 e1		 mul	 ecx
  00018	c1 ea 03	 shr	 edx, 3
  0001b	8a c2		 mov	 al, dl
  0001d	c0 e0 02	 shl	 al, 2
  00020	8d 1c 10	 lea	 ebx, DWORD PTR [eax+edx]
  00023	02 db		 add	 bl, bl
  00025	2a cb		 sub	 cl, bl
  00027	80 c1 30	 add	 cl, 48			; 00000030H
  0002a	88 0e		 mov	 BYTE PTR [esi], cl

; 2743 :         _UVal_trunc /= 10;

  0002c	8b ca		 mov	 ecx, edx

; 2744 :     } while (_UVal_trunc != 0);

  0002e	85 c9		 test	 ecx, ecx
  00030	75 de		 jne	 SHORT $LL4@UIntegral_
  00032	5b		 pop	 ebx

; 2745 :     return _RNext;

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi

; 2746 : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z ENDP		; std::_UIntegral_to_buff<char,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string
;	COMDAT ??$_Integral_to_string@DH@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@H@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -36				; size = 4
__RNext$1$ = -36					; size = 4
$T1 = -32						; size = 4
__Buff$ = -28						; size = 21
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$_Integral_to_string@DH@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@H@Z PROC ; std::_Integral_to_string<char,int>, COMDAT

; 441  : _NODISCARD basic_string<_Elem> _Integral_to_string(const _Ty _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 442  :     // convert _Val to string
; 443  :     static_assert(is_integral_v<_Ty>, "_Ty must be integral");
; 444  :     using _UTy = make_unsigned_t<_Ty>;
; 445  :     _Elem _Buff[21]; // can hold -2^63 and 2^64 - 1, plus NUL
; 446  :     _Elem* const _Buff_end = _STD end(_Buff);
; 447  :     _Elem* _RNext          = _Buff_end;
; 448  :     const auto _UVal       = static_cast<_UTy>(_Val);
; 449  :     if (_Val < 0) {

  00010	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00018	89 75 dc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi
  0001b	85 c0		 test	 eax, eax
  0001d	79 18		 jns	 SHORT $LN2@Integral_t

; 450  :         _RNext    = _UIntegral_to_buff(_RNext, 0 - _UVal);

  0001f	f7 d8		 neg	 eax
  00021	50		 push	 eax
  00022	8d 45 f9	 lea	 eax, DWORD PTR __Buff$[ebp+21]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z ; std::_UIntegral_to_buff<char,unsigned int>

; 451  :         *--_RNext = '-';

  0002b	c6 40 ff 2d	 mov	 BYTE PTR [eax-1], 45	; 0000002dH
  0002f	8d 58 ff	 lea	 ebx, DWORD PTR [eax-1]
  00032	89 5d dc	 mov	 DWORD PTR __RNext$1$[ebp], ebx

; 452  :     } else {

  00035	eb 0f		 jmp	 SHORT $LN67@Integral_t
$LN2@Integral_t:

; 453  :         _RNext = _UIntegral_to_buff(_RNext, _UVal);

  00037	50		 push	 eax
  00038	8d 45 f9	 lea	 eax, DWORD PTR __Buff$[ebp+21]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$_UIntegral_to_buff@DI@std@@YAPADPADI@Z ; std::_UIntegral_to_buff<char,unsigned int>
  00041	8b d8		 mov	 ebx, eax
  00043	89 45 dc	 mov	 DWORD PTR __RNext$1$[ebp], eax
$LN67@Integral_t:
  00046	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 779  :         if (_UFirst == _ULast) {

  00049	8d 45 f9	 lea	 eax, DWORD PTR __Buff$[ebp+21]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0004c	83 c4 08	 add	 esp, 8
  0004f	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00052	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00059	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 779  :         if (_UFirst == _ULast) {

  00060	3b d8		 cmp	 ebx, eax
  00062	75 23		 jne	 SHORT $LN8@Integral_t

; 836  :         _My_data._Mysize = 0;

  00064	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string

; 456  :     return basic_string<_Elem>(_RNext, _Buff_end);

  0006b	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0006d	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00074	c6 06 00	 mov	 BYTE PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string

; 457  : }

  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007c	33 cd		 xor	 ecx, ebp
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
$LN8@Integral_t:
  00087	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 783  :                 _Construct<_Construct_strategy::_From_ptr>(

  00088	8d 7d f9	 lea	 edi, DWORD PTR __Buff$[ebp+21]
  0008b	2b fb		 sub	 edi, ebx

; 857  :         if (_Count > max_size()) {

  0008d	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00093	0f 87 97 00 00
	00		 ja	 $LN72@Integral_t

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00099	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  0009c	77 18		 ja	 SHORT $LN28@Integral_t
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009e	57		 push	 edi
  0009f	53		 push	 ebx
  000a0	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  000a1	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 867  :             _My_data._Myres  = _Small_string_capacity;

  000a4	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ab	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  000b0	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 875  :             } else { // _Strat == _Construct_strategy::_From_string
; 876  : #ifdef _INSERT_STRING_ANNOTATION
; 877  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 878  : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 879  :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 880  : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 881  :             }
; 882  : 
; 883  :             _Proxy._Release();
; 884  :             return;

  000b4	eb 64		 jmp	 SHORT $LN68@Integral_t
$LN28@Integral_t:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000b6	8b df		 mov	 ebx, edi
  000b8	83 cb 0f	 or	 ebx, 15			; 0000000fH
  000bb	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000c1	76 12		 jbe	 SHORT $LN34@Integral_t

; 2944 :             return _Max;

  000c3	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  000c8	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000d3	eb 26		 jmp	 SHORT $LN70@Integral_t
$LN34@Integral_t:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000d5	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  000da	3b d8		 cmp	 ebx, eax
  000dc	0f 42 d8	 cmovb	 ebx, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000df	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000e2	85 c0		 test	 eax, eax
  000e4	74 18		 je	 SHORT $LN69@Integral_t
$LN48@Integral_t:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000e6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000eb	72 08		 jb	 SHORT $LN49@Integral_t

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000f3	eb 06		 jmp	 SHORT $LN70@Integral_t
$LN49@Integral_t:

; 136  :         return ::operator new(_Bytes);

  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN70@Integral_t:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000fb	83 c4 04	 add	 esp, 4
$LN69@Integral_t:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	57		 push	 edi
  000ff	ff 75 dc	 push	 DWORD PTR __RNext$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00102	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00105	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00106	89 06		 mov	 DWORD PTR [esi], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  00108	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 892  :         _My_data._Myres  = _New_capacity;

  0010b	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00113	8b 45 e0	 mov	 eax, DWORD PTR $T1[ebp]
  00116	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN68@Integral_t:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string

; 457  : }

  0011a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\string

; 456  :     return basic_string<_Elem>(_RNext, _Buff_end);

  00120	8b c6		 mov	 eax, esi

; 457  : }

  00122	33 cd		 xor	 ecx, ebp
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c3		 ret	 0
$LN72@Integral_t:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  00130	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@Integral_t:
  00135	cc		 int	 3
??$_Integral_to_string@DH@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@H@Z ENDP ; std::_Integral_to_string<char,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv520 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
tv510 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv505 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv510[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv510[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv510[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR $T1[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv520[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv505[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv520[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv505[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__Left$ = 12						; size = 4
__New_size$1$ = 12					; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1056 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1063 :         const auto _Right_size = _Right_data._Mysize;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1057 :         auto& _My_data    = _Mypair._Myval2;
; 1058 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 1059 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1060 :         _Left_data._Orphan_all();
; 1061 :         _Right_data._Orphan_all();
; 1062 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 1063 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 1064 : 
; 1065 :         const auto _Left_capacity  = _Left_data._Myres;
; 1066 :         const auto _Right_capacity = _Right_data._Myres;
; 1067 :         // overflow is OK due to max_size() checks:
; 1068 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 1069 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 1070 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00041	77 5a		 ja	 SHORT $LN113@basic_stri
  00043	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00046	77 55		 ja	 SHORT $LN113@basic_stri

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0004b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0004e	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00053	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  00058	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  0005f	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  00066	c6 07 00	 mov	 BYTE PTR [edi], 0

; 416  :         value_type* _Result = _Bx._Buf;

  00069	8b fe		 mov	 edi, esi

; 434  :         return _Myres > _Small_string_capacity;

  0006b	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0006f	76 02		 jbe	 SHORT $LN71@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN71@basic_stri:

; 434  :         return _Myres > _Small_string_capacity;

  00073	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00077	76 02		 jbe	 SHORT $LN78@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN78@basic_stri:

; 1076 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1076 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	53		 push	 ebx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1077 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 1122 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00092	8b c6		 mov	 eax, esi
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN113@basic_stri:

; 1078 :             return;
; 1079 :         }
; 1080 : 
; 1081 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 1082 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN112@basic_stri

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 1097 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1262 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000ad	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  000b2	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 1263 : 
; 1264 :                 _Right_data._Mysize = 0;

  000b7	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 1265 :                 _Right_data._Myres  = _Small_string_capacity;

  000be	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 1266 :                 _Right_data._Activate_SSO_buffer();
; 1267 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000c5	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 1083 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 1084 :             // At this point, we have tested:
; 1085 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 1086 :             // therefore: (by De Morgan's Laws)
; 1087 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 1088 :             // therefore: (by the distributive property)
; 1089 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 1090 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 1091 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_mode_engaged()
; 1092 :             _STL_INTERNAL_CHECK(_Right_data._Large_mode_engaged());
; 1093 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 1094 :             _Take_contents(_Right);
; 1095 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 1e		 mov	 ebx, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1097 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000d7	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  000db	76 02		 jbe	 SHORT $LN102@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN102@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	57		 push	 edi
  000e4	53		 push	 ebx
  000e5	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1099 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 1122 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000f3	8b c6		 mov	 eax, esi
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN112@basic_stri:

; 1100 :             return;
; 1101 :         }
; 1102 : 
; 1103 :         // can't use either buffer, reallocate
; 1104 :         const auto _Max = max_size();
; 1105 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 a2 00 00
	00		 jb	 $LN132@basic_stri

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 14		 jbe	 SHORT $LN20@basic_stri

; 2944 :             return _Max;

  0011a	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  0011f	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR $T2[ebp], 2147483647 ; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00126	52		 push	 edx
  00127	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0012c	eb 2a		 jmp	 SHORT $LN130@basic_stri
$LN20@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0012e	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  00133	3b c2		 cmp	 eax, edx
  00135	0f 42 c2	 cmovb	 eax, edx
  00138	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0013b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0013e	85 d2		 test	 edx, edx
  00140	74 21		 je	 SHORT $LN129@basic_stri
$LN34@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00142	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00148	72 08		 jb	 SHORT $LN35@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00150	eb 06		 jmp	 SHORT $LN130@basic_stri
$LN35@basic_stri:

; 136  :         return ::operator new(_Bytes);

  00152	52		 push	 edx
  00153	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN130@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00158	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  0015b	8b d0		 mov	 edx, eax
  0015d	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00160	83 c4 04	 add	 esp, 4
$LN129@basic_stri:

; 1115 :         _My_data._Mysize = _New_size;

  00163	8b 5d 0c	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  00166	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 417  :         if (_Large_mode_engaged()) {

  00169	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016c	89 16		 mov	 DWORD PTR [esi], edx

; 1116 :         _My_data._Myres  = _New_capacity;

  0016e	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 434  :         return _Myres > _Small_string_capacity;

  00171	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 1114 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  00175	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx

; 417  :         if (_Large_mode_engaged()) {

  00178	76 02		 jbe	 SHORT $LN40@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0017a	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN40@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0017c	51		 push	 ecx
  0017d	57		 push	 edi
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 _memcpy
  00184	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00187	83 7b 14 0f	 cmp	 DWORD PTR [ebx+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0018b	76 02		 jbe	 SHORT $LN50@basic_stri

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0018d	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN50@basic_stri:

; 1119 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0018f	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  00192	40		 inc	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00193	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1119 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  00194	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  00197	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019a	53		 push	 ebx
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1122 :     }

  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	8b c6		 mov	 eax, esi
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 0c 00	 ret	 12			; 0000000cH
$LN132@basic_stri:

; 1106 :             _Xlen_string();

  001af	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN127@basic_stri:
  001b4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 978  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 979  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 980  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00009	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000f	72 12		 jb	 SHORT $LN17@deallocate

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00011	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00014	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	77 10		 ja	 SHORT $LN14@deallocate

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00021	8b c2		 mov	 eax, edx
$LN17@deallocate:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00023	51		 push	 ecx
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8

; 982  :     }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
$LN14@deallocate:

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
  00036	cc		 int	 3
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
