; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterBase\Distribute\FileDir.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CDir@@QAE@XZ					; CDir::CDir
PUBLIC	??1CDir@@UAE@XZ					; CDir::~CDir
PUBLIC	?Destroy@CDir@@QAEXXZ				; CDir::Destroy
PUBLIC	?Create@CDir@@QAE_NPBD0H@Z			; CDir::Create
PUBLIC	?IsFolder@CDir@@IAE_NXZ				; CDir::IsFolder
PUBLIC	?Initialize@CDir@@IAEXXZ			; CDir::Initialize
PUBLIC	??_GCDir@@UAEPAXI@Z				; CDir::`scalar deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_7CDir@@6B@					; CDir::`vftable'
PUBLIC	??_C@_03EMIMMIHL@?$CK?4?$CK@			; `string'
PUBLIC	??_R4CDir@@6B@					; CDir::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDir@@@8				; CDir `RTTI Type Descriptor'
PUBLIC	??_R3CDir@@8					; CDir::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDir@@8					; CDir::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDir@@8				; CDir::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_strchr:PROC
EXTRN	__stricmp:PROC
EXTRN	__imp__FindClose@4:PROC
EXTRN	__imp__FindFirstFileA@8:PROC
EXTRN	__imp__FindNextFileA@8:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	??_ECDir@@UAEPAXI@Z:PROC			; CDir::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memchr:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CDir@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDir@@8 DD FLAT:??_R0?AVCDir@@@8		; CDir::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDir@@8
rdata$r	ENDS
;	COMDAT ??_R2CDir@@8
rdata$r	SEGMENT
??_R2CDir@@8 DD	FLAT:??_R1A@?0A@EA@CDir@@8		; CDir::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDir@@8
rdata$r	SEGMENT
??_R3CDir@@8 DD	00H					; CDir::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDir@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDir@@@8
data$rs	SEGMENT
??_R0?AVCDir@@@8 DD FLAT:??_7type_info@@6B@		; CDir `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDir@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CDir@@6B@
rdata$r	SEGMENT
??_R4CDir@@6B@ DD 00H					; CDir::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDir@@@8
	DD	FLAT:??_R3CDir@@8
rdata$r	ENDS
;	COMDAT ??_C@_03EMIMMIHL@?$CK?4?$CK@
CONST	SEGMENT
??_C@_03EMIMMIHL@?$CK?4?$CK@ DB '*.*', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CDir@@6B@
CONST	SEGMENT
??_7CDir@@6B@ DD FLAT:??_R4CDir@@6B@			; CDir::`vftable'
	DD	FLAT:??_ECDir@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Create@CDir@@QAE_NPBD0H@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?Create@CDir@@QAE_NPBD0H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Create@CDir@@QAE_NPBD0H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$4
	DD	05H
	DD	FLAT:__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$5
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCDir@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDir@@UAEPAXI@Z PROC				; CDir::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CDir@@UAE@XZ		; CDir::~CDir
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 48 01 00 00	 push	 328			; 00000148H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCDir@@UAEPAXI@Z ENDP				; CDir::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
;	COMDAT ?Initialize@CDir@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CDir@@IAEXXZ PROC				; CDir::Initialize, COMDAT
; _this$ = ecx

; 99   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 100  : 	memset(&m_wfd, 0, sizeof(m_wfd));

  00003	68 40 01 00 00	 push	 320			; 00000140H
  00008	6a 00		 push	 0
  0000a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 101  : 	m_hFind = NULL;

  00016	c7 86 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+324], 0
  00020	5e		 pop	 esi

; 102  : }

  00021	c3		 ret	 0
?Initialize@CDir@@IAEXXZ ENDP				; CDir::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
;	COMDAT ?IsFolder@CDir@@IAE_NXZ
_TEXT	SEGMENT
?IsFolder@CDir@@IAE_NXZ PROC				; CDir::IsFolder, COMDAT
; _this$ = ecx

; 92   : 	if (m_wfd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c1 e8 04	 shr	 eax, 4
  00006	24 01		 and	 al, 1

; 93   : 		return true;
; 94   : 
; 95   : 	return false;
; 96   : }

  00008	c3		 ret	 0
?IsFolder@CDir@@IAE_NXZ ENDP				; CDir::IsFolder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\string.h
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
;	COMDAT ?Create@CDir@@QAE_NPBD0H@Z
_TEXT	SEGMENT
tv2478 = -184						; size = 4
_this$GSCopy$1$ = -180					; size = 4
_c_szExtension$1$ = -176				; size = 4
$T2 = -176						; size = 4
_c_szFilter$GSCopy$1$ = -172				; size = 4
tv2466 = -168						; size = 4
tv2470 = -168						; size = 4
$T3 = -168						; size = 4
$T4 = -161						; size = 1
_strFirstFilter$5 = -160				; size = 24
_strSecondFilter$6 = -136				; size = 24
_stQuery$ = -112					; size = 24
_strFilter$7 = -88					; size = 24
$T8 = -64						; size = 24
$T9 = -64						; size = 24
_stPath$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFilter$ = 8					; size = 4
_c_szPath$ = 12						; size = 4
_bCheckedExtension$ = 16				; size = 4
?Create@CDir@@QAE_NPBD0H@Z PROC				; CDir::Create, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Create@CDir@@QAE_NPBD0H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00033	8b 45 08	 mov	 eax, DWORD PTR _c_szFilter$[ebp]
  00036	8b 75 0c	 mov	 esi, DWORD PTR _c_szPath$[ebp]
  00039	89 85 54 ff ff
	ff		 mov	 DWORD PTR _c_szFilter$GSCopy$1$[ebp], eax

; 25   : 	Destroy();

  0003f	e8 00 00 00 00	 call	 ?Destroy@CDir@@QAEXXZ	; CDir::Destroy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00044	8b ce		 mov	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00046	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _stPath$[ebp+16], 0
  0004d	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00050	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _stPath$[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00057	0f 11 45 d8	 movups	 XMMWORD PTR _stPath$[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0005b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0005e	66 90		 npad	 2
$LL862@Create:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL862@Create
  00067	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00069	51		 push	 ecx
  0006a	56		 push	 esi
  0006b	8d 4d d8	 lea	 ecx, DWORD PTR _stPath$[ebp]
  0006e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 29   : 	if (stPath.length())

  00073	8b 75 e8	 mov	 esi, DWORD PTR _stPath$[ebp+16]
  00076	8b 7d ec	 mov	 edi, DWORD PTR _stPath$[ebp+20]
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00080	85 f6		 test	 esi, esi
  00082	0f 84 4a 01 00
	00		 je	 $LN254@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 417  :         if (_Large_mode_engaged()) {

  00088	8b 4d d8	 mov	 ecx, DWORD PTR _stPath$[ebp]
  0008b	8d 45 d8	 lea	 eax, DWORD PTR _stPath$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  0008e	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00091	0f 47 c1	 cmova	 eax, ecx
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 33   : 		if (end != '\\')

  00094	80 7c 06 ff 5c	 cmp	 BYTE PTR [esi+eax-1], 92 ; 0000005cH
  00099	0f 84 33 01 00
	00		 je	 $LN254@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2266 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0009f	3b f7		 cmp	 esi, edi

; 2267 :         if (_Old_size < _Mypair._Myval2._Myres) {

  000a1	73 1a		 jae	 SHORT $LN242@Create

; 2268 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + 1);
; 2269 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  000a3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]

; 434  :         return _Myres > _Small_string_capacity;

  000a6	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 2269 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  000a9	89 45 e8	 mov	 DWORD PTR _stPath$[ebp+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  000ac	8d 45 d8	 lea	 eax, DWORD PTR _stPath$[ebp]

; 417  :         if (_Large_mode_engaged()) {

  000af	0f 47 c1	 cmova	 eax, ecx

; 2271 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  000b2	66 c7 04 30 5c
	00		 mov	 WORD PTR [eax+esi], 92	; 0000005cH

; 2272 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());
; 2273 :             return;

  000b8	e9 0f 01 00 00	 jmp	 $LN876@Create
$LN242@Create:

; 2992 :         const size_type _Old_size = _My_data._Mysize;

  000bd	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  000c2	8b c2		 mov	 eax, edx
  000c4	2b c6		 sub	 eax, esi

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  000c6	83 f8 01	 cmp	 eax, 1
  000c9	0f 82 bc 06 00
	00		 jb	 $LN879@Create

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  000cf	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000d2	83 c9 0f	 or	 ecx, 15			; 0000000fH
  000d5	3b ca		 cmp	 ecx, edx

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000d7	76 15		 jbe	 SHORT $LN260@Create

; 2944 :             return _Max;

  000d9	8b c2		 mov	 eax, edx
  000db	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  000e1	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ec	eb 4f		 jmp	 SHORT $LN875@Create
$LN260@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  000ee	8b c7		 mov	 eax, edi
  000f0	d1 e8		 shr	 eax, 1
  000f2	2b d0		 sub	 edx, eax
  000f4	3b fa		 cmp	 edi, edx
  000f6	76 18		 jbe	 SHORT $LN261@Create

; 2948 :             return _Max;

  000f8	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000fd	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00103	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0010e	eb 2d		 jmp	 SHORT $LN875@Create
$LN261@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00110	03 c7		 add	 eax, edi
  00112	3b c8		 cmp	 ecx, eax
  00114	0f 42 c8	 cmovb	 ecx, eax
  00117	89 8d 58 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx

; 801  :         ++_Capacity; // Take null terminator into consideration

  0011d	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00120	85 c0		 test	 eax, eax
  00122	75 04		 jne	 SHORT $LN274@Create

; 228  :         return nullptr;

  00124	33 d2		 xor	 edx, edx
  00126	eb 20		 jmp	 SHORT $LN874@Create
$LN274@Create:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00128	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0012d	72 08		 jb	 SHORT $LN275@Create

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00135	eb 06		 jmp	 SHORT $LN875@Create
$LN275@Create:

; 136  :         return ::operator new(_Bytes);

  00137	50		 push	 eax
  00138	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN875@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  0013d	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00143	8b d0		 mov	 edx, eax
  00145	83 c4 04	 add	 esp, 4
$LN874@Create:
  00148	89 95 50 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0014e	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00151	89 45 e8	 mov	 DWORD PTR _stPath$[ebp+16], eax

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00154	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00157	89 4d ec	 mov	 DWORD PTR _stPath$[ebp+20], ecx
  0015a	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv2466[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  00160	56		 push	 esi
  00161	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  00164	76 45		 jbe	 SHORT $LN253@Create

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00166	8b 45 d8	 mov	 eax, DWORD PTR _stPath$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00169	8b f0		 mov	 esi, eax
  0016b	56		 push	 esi
  0016c	52		 push	 edx
  0016d	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  00172	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv2466[ebp]

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00178	47		 inc	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00179	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  0017c	66 c7 00 5c 00	 mov	 WORD PTR [eax], 92	; 0000005cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00181	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00187	72 16		 jb	 SHORT $LN303@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00189	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  0018c	83 c7 23	 add	 edi, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0018f	2b f1		 sub	 esi, ecx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00191	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00194	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00197	0f 87 f3 05 00
	00		 ja	 $LN88@Create

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0019d	8b f1		 mov	 esi, ecx
$LN303@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0019f	57		 push	 edi
  001a0	56		 push	 esi
  001a1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001a6	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3013 :         } else {

  001a9	eb 18		 jmp	 SHORT $LN877@Create
$LN253@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001ab	8d 45 d8	 lea	 eax, DWORD PTR _stPath$[ebp]
  001ae	50		 push	 eax
  001af	52		 push	 edx
  001b0	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  001b5	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv2466[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001bb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  001be	66 c7 00 5c 00	 mov	 WORD PTR [eax], 92	; 0000005cH
$LN877@Create:

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001c3	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  001c9	89 45 d8	 mov	 DWORD PTR _stPath$[ebp], eax
$LN876@Create:
  001cc	8b 7d ec	 mov	 edi, DWORD PTR _stPath$[ebp+20]
  001cf	8b 75 e8	 mov	 esi, DWORD PTR _stPath$[ebp+16]
$LN254@Create:
  001d2	0f 57 c0	 xorps	 xmm0, xmm0

; 836  :         _My_data._Mysize = 0;

  001d5	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _stQuery$[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001dc	0f 11 45 90	 movups	 XMMWORD PTR _stQuery$[ebp], xmm0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  001e0	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR _stQuery$[ebp+20], 15 ; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001e7	c6 45 90 00	 mov	 BYTE PTR _stQuery$[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  001eb	83 ff 0f	 cmp	 edi, 15			; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 37   : 	std::string stQuery;

  001ee	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  001f2	8d 45 d8	 lea	 eax, DWORD PTR _stPath$[ebp]

; 426  :         if (_Large_mode_engaged()) {

  001f5	0f 47 45 d8	 cmova	 eax, DWORD PTR _stPath$[ebp]

; 1459 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  001f9	8d 4d 90	 lea	 ecx, DWORD PTR _stQuery$[ebp]
  001fc	56		 push	 esi
  001fd	50		 push	 eax
  001fe	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1510 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00203	6a 03		 push	 3
  00205	68 00 00 00 00	 push	 OFFSET ??_C@_03EMIMMIHL@?$CK?4?$CK@
  0020a	8d 4d 90	 lea	 ecx, DWORD PTR _stQuery$[ebp]
  0020d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 41   : 	m_wfd.dwFileAttributes |= FILE_ATTRIBUTE_DIRECTORY;

  00212	8b b5 4c ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00218	8d 45 90	 lea	 eax, DWORD PTR _stQuery$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 41   : 	m_wfd.dwFileAttributes |= FILE_ATTRIBUTE_DIRECTORY;

  0021b	83 4e 04 10	 or	 DWORD PTR [esi+4], 16	; 00000010H
  0021f	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00222	83 7d a4 0f	 cmp	 DWORD PTR _stQuery$[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 42   : 	m_hFind = FindFirstFile(stQuery.c_str(), &m_wfd);

  00226	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  00227	0f 47 45 90	 cmova	 eax, DWORD PTR _stQuery$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 42   : 	m_hFind = FindFirstFile(stQuery.c_str(), &m_wfd);

  0022b	50		 push	 eax
  0022c	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv2478[ebp], ecx
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindFirstFileA@8
  00238	89 86 44 01 00
	00		 mov	 DWORD PTR [esi+324], eax

; 43   : 
; 44   : 	if (m_hFind == INVALID_HANDLE_VALUE)

  0023e	83 f8 ff	 cmp	 eax, -1
  00241	0f 84 5b 03 00
	00		 je	 $LN850@Create
  00247	8d 7e 30	 lea	 edi, DWORD PTR [esi+48]
  0024a	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _c_szFilter$GSCopy$1$[ebp]
  00250	89 bd 58 ff ff
	ff		 mov	 DWORD PTR tv2470[ebp], edi
$LL4@Create:

; 45   : 		return true;
; 46   : 
; 47   : 	do
; 48   : 	{
; 49   : 		if (*m_wfd.cFileName == '.')

  00256	80 3f 2e	 cmp	 BYTE PTR [edi], 46	; 0000002eH
  00259	0f 84 23 03 00
	00		 je	 $LN2@Create

; 50   : 			continue;
; 51   : 
; 52   : 		if (IsFolder())

  0025f	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00265	e8 00 00 00 00	 call	 ?IsFolder@CDir@@IAE_NXZ	; CDir::IsFolder
  0026a	84 c0		 test	 al, al
  0026c	74 2f		 je	 SHORT $LN9@Create

; 54   : 			if (!OnFolder(c_szFilter, stPath.c_str(), m_wfd.cFileName))

  0026e	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00274	83 7d ec 0f	 cmp	 DWORD PTR _stPath$[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 54   : 			if (!OnFolder(c_szFilter, stPath.c_str(), m_wfd.cFileName))

  00278	57		 push	 edi
  00279	8b 01		 mov	 eax, DWORD PTR [ecx]
  0027b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  0027e	8d 45 d8	 lea	 eax, DWORD PTR _stPath$[ebp]

; 426  :         if (_Large_mode_engaged()) {

  00281	0f 47 45 d8	 cmova	 eax, DWORD PTR _stPath$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 54   : 			if (!OnFolder(c_szFilter, stPath.c_str(), m_wfd.cFileName))

  00285	50		 push	 eax
  00286	56		 push	 esi
  00287	ff d2		 call	 edx
  00289	84 c0		 test	 al, al
  0028b	0f 85 f1 02 00
	00		 jne	 $LN2@Create
$LN853@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00291	c6 85 5f ff ff
	ff 00		 mov	 BYTE PTR $T4[ebp], 0
  00298	e9 0c 03 00 00	 jmp	 $LN29@Create
$LN9@Create:
; File D:\Windows Kits\10\Include\10.0.26100.0\ucrt\string.h

; 502  :         return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));

  0029d	6a 2e		 push	 46			; 0000002eH
  0029f	57		 push	 edi
  002a0	e8 00 00 00 00	 call	 _strchr
  002a5	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 59   : 			const char * c_szExtension = strchr(m_wfd.cFileName, '.');

  002a8	89 85 50 ff ff
	ff		 mov	 DWORD PTR _c_szExtension$1$[ebp], eax

; 60   : 			if (!c_szExtension)

  002ae	85 c0		 test	 eax, eax
  002b0	0f 84 cc 02 00
	00		 je	 $LN2@Create

; 61   : 				continue;
; 62   : 
; 63   : 			if (bCheckedExtension)

  002b6	83 7d 10 00	 cmp	 DWORD PTR _bCheckedExtension$[ebp], 0
  002ba	0f 84 1f 04 00
	00		 je	 $LN335@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  002c0	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _c_szFilter$GSCopy$1$[ebp]
  002c6	0f 57 c0	 xorps	 xmm0, xmm0
  002c9	8b ce		 mov	 ecx, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  002cb	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _strFilter$7[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  002d2	0f 11 45 a8	 movups	 XMMWORD PTR _strFilter$7[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  002d6	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _strFilter$7[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  002dd	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL863@Create:
  002e0	8a 01		 mov	 al, BYTE PTR [ecx]
  002e2	41		 inc	 ecx
  002e3	84 c0		 test	 al, al
  002e5	75 f9		 jne	 SHORT $LL863@Create
  002e7	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002e9	51		 push	 ecx
  002ea	56		 push	 esi
  002eb	8d 4d a8	 lea	 ecx, DWORD PTR _strFilter$7[ebp]
  002ee	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 434  :         return _Myres > _Small_string_capacity;

  002f3	83 7d bc 0f	 cmp	 DWORD PTR _strFilter$7[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  002f7	8d 7d a8	 lea	 edi, DWORD PTR _strFilter$7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 663  :     if (_Start_at < _Hay_size) {

  002fa	8b 45 b8	 mov	 eax, DWORD PTR _strFilter$7[ebp+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 426  :         if (_Large_mode_engaged()) {

  002fd	0f 47 7d a8	 cmova	 edi, DWORD PTR _strFilter$7[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 65   : 				std::string strFilter = c_szFilter;

  00301	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 663  :     if (_Start_at < _Hay_size) {

  00305	85 c0		 test	 eax, eax
  00307	74 16		 je	 SHORT $LN233@Create

; 451  :             return __builtin_char_memchr(_First, _Ch, _Count);

  00309	50		 push	 eax
  0030a	6a 3b		 push	 59			; 0000003bH
  0030c	57		 push	 edi
  0030d	e8 00 00 00 00	 call	 _memchr
  00312	8b f0		 mov	 esi, eax
  00314	83 c4 0c	 add	 esp, 12			; 0000000cH

; 665  :         if (_Found_at) {

  00317	85 f6		 test	 esi, esi
  00319	74 04		 je	 SHORT $LN233@Create

; 666  :             return static_cast<size_t>(_Found_at - _Haystack);

  0031b	2b f7		 sub	 esi, edi
  0031d	eb 03		 jmp	 SHORT $LN231@Create
$LN233@Create:

; 667  :         }
; 668  :     }
; 669  : 
; 670  :     return static_cast<size_t>(-1); // (npos) no match

  0031f	83 ce ff	 or	 esi, -1
$LN231@Create:
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 67   : 				if (iPos > 0)

  00322	85 f6		 test	 esi, esi
  00324	0f 8e dc 03 00
	00		 jle	 $LN14@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0032a	8b bd 54 ff ff
	ff		 mov	 edi, DWORD PTR _c_szFilter$GSCopy$1$[ebp]
  00330	0f 57 c0	 xorps	 xmm0, xmm0
  00333	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00335	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0033c	0f 11 45 c0	 movups	 XMMWORD PTR $T8[ebp], xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00340	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00347	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0034a	66 0f 1f 44 00
	00		 npad	 6
$LL864@Create:
  00350	8a 01		 mov	 al, BYTE PTR [ecx]
  00352	41		 inc	 ecx
  00353	84 c0		 test	 al, al
  00355	75 f9		 jne	 SHORT $LL864@Create
  00357	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00359	51		 push	 ecx
  0035a	57		 push	 edi
  0035b	8d 4d c0	 lea	 ecx, DWORD PTR $T8[ebp]
  0035e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  00363	39 75 d0	 cmp	 DWORD PTR $T8[ebp+16], esi

; 425  :         const value_type* _Result = _Bx._Buf;

  00366	8d 45 c0	 lea	 eax, DWORD PTR $T8[ebp]

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  00369	8b ce		 mov	 ecx, esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 69   : 					std::string strFirstFilter = std::string(c_szFilter).substr(0, iPos);

  0036b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  0036f	0f 42 4d d0	 cmovb	 ecx, DWORD PTR $T8[ebp+16]
  00373	0f 57 c0	 xorps	 xmm0, xmm0

; 434  :         return _Myres > _Small_string_capacity;

  00376	83 7d d4 0f	 cmp	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 713  :         _Construct<_Construct_strategy::_From_ptr>(

  0037a	51		 push	 ecx

; 426  :         if (_Large_mode_engaged()) {

  0037b	0f 47 45 c0	 cmova	 eax, DWORD PTR $T8[ebp]

; 713  :         _Construct<_Construct_strategy::_From_ptr>(

  0037f	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _strFirstFilter$5[ebp]
  00385	50		 push	 eax

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00386	0f 11 85 60 ff
	ff ff		 movups	 XMMWORD PTR _strFirstFilter$5[ebp], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  0038d	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _strFirstFilter$5[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00397	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _strFirstFilter$5[ebp+20], 0

; 713  :         _Construct<_Construct_strategy::_From_ptr>(

  003a1	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 434  :         return _Myres > _Small_string_capacity;

  003a6	8b 4d d4	 mov	 ecx, DWORD PTR $T8[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 69   : 					std::string strFirstFilter = std::string(c_szFilter).substr(0, iPos);

  003a9	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003ad	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  003b0	76 2c		 jbe	 SHORT $LN482@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003b2	8b 55 c0	 mov	 edx, DWORD PTR $T8[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  003b5	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003b6	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003b8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003be	72 14		 jb	 SHORT $LN493@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003c0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003c3	83 c1 23	 add	 ecx, 35			; 00000023H
  003c6	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003c8	83 c0 fc	 add	 eax, -4			; fffffffcH
  003cb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003ce	0f 87 bc 03 00
	00		 ja	 $LN88@Create
$LN493@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003d4	51		 push	 ecx
  003d5	52		 push	 edx
  003d6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003db	83 c4 08	 add	 esp, 8
$LN482@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  003de	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  003e0	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+16], 0
  003e7	0f 57 c0	 xorps	 xmm0, xmm0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  003ea	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T9[ebp+20], 0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003f1	0f 11 45 c0	 movups	 XMMWORD PTR $T9[ebp], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  003f5	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL865@Create:
  003f8	8a 01		 mov	 al, BYTE PTR [ecx]
  003fa	41		 inc	 ecx
  003fb	84 c0		 test	 al, al
  003fd	75 f9		 jne	 SHORT $LL865@Create
  003ff	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00401	51		 push	 ecx
  00402	57		 push	 edi
  00403	8d 4d c0	 lea	 ecx, DWORD PTR $T9[ebp]
  00406	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 70   : 					std::string strSecondFilter = std::string(c_szFilter).substr(iPos+1, strlen(c_szFilter));

  0040b	8b cf		 mov	 ecx, edi
  0040d	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00411	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL866@Create:
  00414	8a 01		 mov	 al, BYTE PTR [ecx]
  00416	41		 inc	 ecx
  00417	84 c0		 test	 al, al
  00419	75 f9		 jne	 SHORT $LL866@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 450  :         if (_Mysize < _Off) {

  0041b	8b 45 d0	 mov	 eax, DWORD PTR $T9[ebp+16]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 70   : 					std::string strSecondFilter = std::string(c_szFilter).substr(iPos+1, strlen(c_szFilter));

  0041e	46		 inc	 esi
  0041f	2b ca		 sub	 ecx, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00421	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _strSecondFilter$6[ebp+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00428	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _strSecondFilter$6[ebp+20], 0
  0042f	0f 57 c0	 xorps	 xmm0, xmm0

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00432	0f 11 85 78 ff
	ff ff		 movups	 XMMWORD PTR _strSecondFilter$6[ebp], xmm0

; 450  :         if (_Mysize < _Off) {

  00439	3b c6		 cmp	 eax, esi
  0043b	0f 82 54 03 00
	00		 jb	 $LN852@Create

; 468  :         return (_STD min)(_Size, _Mysize - _Off);

  00441	2b c6		 sub	 eax, esi
  00443	3b c1		 cmp	 eax, ecx
  00445	0f 42 c8	 cmovb	 ecx, eax

; 434  :         return _Myres > _Small_string_capacity;

  00448	83 7d d4 0f	 cmp	 DWORD PTR $T9[ebp+20], 15 ; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0044c	8d 45 c0	 lea	 eax, DWORD PTR $T9[ebp]

; 426  :         if (_Large_mode_engaged()) {

  0044f	0f 47 45 c0	 cmova	 eax, DWORD PTR $T9[ebp]

; 713  :         _Construct<_Construct_strategy::_From_ptr>(

  00453	51		 push	 ecx
  00454	03 c6		 add	 eax, esi
  00456	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _strSecondFilter$6[ebp]
  0045c	50		 push	 eax
  0045d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>

; 434  :         return _Myres > _Small_string_capacity;

  00462	8b 4d d4	 mov	 ecx, DWORD PTR $T9[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 70   : 					std::string strSecondFilter = std::string(c_szFilter).substr(iPos+1, strlen(c_szFilter));

  00465	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00469	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0046c	76 2c		 jbe	 SHORT $LN427@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0046e	8b 55 c0	 mov	 edx, DWORD PTR $T9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00471	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00472	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00474	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0047a	72 14		 jb	 SHORT $LN438@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0047c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0047f	83 c1 23	 add	 ecx, 35			; 00000023H
  00482	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00484	83 c0 fc	 add	 eax, -4			; fffffffcH
  00487	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0048a	0f 87 00 03 00
	00		 ja	 $LN88@Create
$LN438@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00490	51		 push	 ecx
  00491	52		 push	 edx
  00492	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00497	83 c4 08	 add	 esp, 8
$LN427@Create:
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 71   : 					if (0 != strFirstFilter.compare(c_szExtension+1) && 0 != strSecondFilter.compare(c_szExtension+1))

  0049a	8b b5 50 ff ff
	ff		 mov	 esi, DWORD PTR _c_szExtension$1$[ebp]
  004a0	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _strFirstFilter$5[ebp]
  004a6	46		 inc	 esi
  004a7	56		 push	 esi
  004a8	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  004ad	85 c0		 test	 eax, eax
  004af	0f 84 71 01 00
	00		 je	 $LN16@Create
  004b5	56		 push	 esi
  004b6	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _strSecondFilter$6[ebp]
  004bc	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  004c1	85 c0		 test	 eax, eax
  004c3	0f 84 5d 01 00
	00		 je	 $LN16@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004c9	8b 4d 8c	 mov	 ecx, DWORD PTR _strSecondFilter$6[ebp+20]
  004cc	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004cf	76 2f		 jbe	 SHORT $LN667@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004d1	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _strSecondFilter$6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004d7	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004d8	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004da	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004e0	72 14		 jb	 SHORT $LN678@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004e2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004e5	83 c1 23	 add	 ecx, 35			; 00000023H
  004e8	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004ea	83 c0 fc	 add	 eax, -4			; fffffffcH
  004ed	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004f0	0f 87 9a 02 00
	00		 ja	 $LN88@Create
$LN678@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004f6	51		 push	 ecx
  004f7	52		 push	 edx
  004f8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004fd	83 c4 08	 add	 esp, 8
$LN667@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00500	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _strFirstFilter$5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 72   : 						continue;

  00506	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0050a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0050d	76 2f		 jbe	 SHORT $LN704@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0050f	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _strFirstFilter$5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00515	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00516	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00518	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0051e	72 14		 jb	 SHORT $LN715@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00520	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00523	83 c1 23	 add	 ecx, 35			; 00000023H
  00526	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00528	83 c0 fc	 add	 eax, -4			; fffffffcH
  0052b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0052e	0f 87 5c 02 00
	00		 ja	 $LN88@Create
$LN715@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00534	51		 push	 ecx
  00535	52		 push	 edx
  00536	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0053b	83 c4 08	 add	 esp, 8
$LN704@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0053e	8b 4d bc	 mov	 ecx, DWORD PTR _strFilter$7[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 72   : 						continue;

  00541	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00545	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00548	76 2c		 jbe	 SHORT $LN868@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0054a	8b 55 a8	 mov	 edx, DWORD PTR _strFilter$7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0054d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0054e	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00550	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00556	72 14		 jb	 SHORT $LN752@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00558	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0055b	83 c1 23	 add	 ecx, 35			; 00000023H
  0055e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00560	83 c0 fc	 add	 eax, -4			; fffffffcH
  00563	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00566	0f 87 24 02 00
	00		 ja	 $LN88@Create
$LN752@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0056c	51		 push	 ecx
  0056d	52		 push	 edx
  0056e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00573	83 c4 08	 add	 esp, 8
$LN868@Create:
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 85   : 	while (FindNextFile(m_hFind, &m_wfd));

  00576	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _c_szFilter$GSCopy$1$[ebp]
$LN870@Create:
  0057c	8b bd 58 ff ff
	ff		 mov	 edi, DWORD PTR tv2470[ebp]
$LN2@Create:
  00582	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00588	ff b5 48 ff ff
	ff		 push	 DWORD PTR tv2478[ebp]
  0058e	ff b0 44 01 00
	00		 push	 DWORD PTR [eax+324]
  00594	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindNextFileA@8
  0059a	85 c0		 test	 eax, eax
  0059c	0f 85 b4 fc ff
	ff		 jne	 $LL4@Create
$LN850@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  005a2	c6 85 5f ff ff
	ff 01		 mov	 BYTE PTR $T4[ebp], 1
$LN29@Create:
  005a9	8b 4d a4	 mov	 ecx, DWORD PTR _stQuery$[ebp+20]
  005ac	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  005af	76 2c		 jbe	 SHORT $LN118@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005b1	8b 55 90	 mov	 edx, DWORD PTR _stQuery$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  005b4	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005b5	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  005b7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  005bd	72 14		 jb	 SHORT $LN129@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005bf	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  005c2	83 c1 23	 add	 ecx, 35			; 00000023H
  005c5	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005c7	83 c0 fc	 add	 eax, -4			; fffffffcH
  005ca	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005cd	0f 87 bd 01 00
	00		 ja	 $LN88@Create
$LN129@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  005d3	51		 push	 ecx
  005d4	52		 push	 edx
  005d5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005da	83 c4 08	 add	 esp, 8
$LN118@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  005dd	8b 4d ec	 mov	 ecx, DWORD PTR _stPath$[ebp+20]

; 3054 :         _My_data._Mysize = 0;

  005e0	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _stQuery$[ebp+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  005e7	c7 45 a4 0f 00
	00 00		 mov	 DWORD PTR _stQuery$[ebp+20], 15 ; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  005ee	c6 45 90 00	 mov	 BYTE PTR _stQuery$[ebp], 0

; 434  :         return _Myres > _Small_string_capacity;

  005f2	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  005f5	0f 86 6d 01 00
	00		 jbe	 $LN80@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005fb	8b 55 d8	 mov	 edx, DWORD PTR _stPath$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  005fe	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005ff	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00601	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00607	0f 82 51 01 00
	00		 jb	 $LN91@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0060d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00610	83 c1 23	 add	 ecx, 35			; 00000023H
  00613	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00615	83 c0 fc	 add	 eax, -4			; fffffffcH
  00618	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0061b	0f 87 6f 01 00
	00		 ja	 $LN88@Create
  00621	e9 38 01 00 00	 jmp	 $LN91@Create
$LN16@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00626	8b 4d 8c	 mov	 ecx, DWORD PTR _strSecondFilter$6[ebp+20]
  00629	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0062c	76 2f		 jbe	 SHORT $LN556@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0062e	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _strSecondFilter$6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00634	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00635	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00637	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0063d	72 14		 jb	 SHORT $LN567@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0063f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00642	83 c1 23	 add	 ecx, 35			; 00000023H
  00645	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00647	83 c0 fc	 add	 eax, -4			; fffffffcH
  0064a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0064d	0f 87 3d 01 00
	00		 ja	 $LN88@Create
$LN567@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00653	51		 push	 ecx
  00654	52		 push	 edx
  00655	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0065a	83 c4 08	 add	 esp, 8
$LN556@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0065d	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _strFirstFilter$5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 73   : 				}

  00663	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00667	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0066a	76 2f		 jbe	 SHORT $LN869@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0066c	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _strFirstFilter$5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00672	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00673	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00675	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0067b	72 14		 jb	 SHORT $LN604@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0067d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00680	83 c1 23	 add	 ecx, 35			; 00000023H
  00683	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00685	83 c0 fc	 add	 eax, -4			; fffffffcH
  00688	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0068b	0f 87 ff 00 00
	00		 ja	 $LN88@Create
$LN604@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00691	51		 push	 ecx
  00692	52		 push	 edx
  00693	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00698	83 c4 08	 add	 esp, 8
$LN869@Create:
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 79   : 			}

  0069b	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _c_szFilter$GSCopy$1$[ebp]
$LN17@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  006a1	8b 4d bc	 mov	 ecx, DWORD PTR _strFilter$7[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 79   : 			}

  006a4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  006a8	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  006ab	76 2c		 jbe	 SHORT $LN871@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006ad	8b 55 a8	 mov	 edx, DWORD PTR _strFilter$7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  006b0	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006b1	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  006b3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  006b9	72 14		 jb	 SHORT $LN346@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  006bb	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  006be	83 c1 23	 add	 ecx, 35			; 00000023H
  006c1	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  006c3	83 c0 fc	 add	 eax, -4			; fffffffcH
  006c6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  006c9	0f 87 c1 00 00
	00		 ja	 $LN88@Create
$LN346@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  006cf	51		 push	 ecx
  006d0	52		 push	 edx
  006d1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006d6	83 c4 08	 add	 esp, 8
$LN871@Create:
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 81   : 			if (!OnFile(stPath.c_str(), m_wfd.cFileName))

  006d9	8b bd 58 ff ff
	ff		 mov	 edi, DWORD PTR tv2470[ebp]
$LN335@Create:
  006df	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  006e5	83 7d ec 0f	 cmp	 DWORD PTR _stPath$[ebp+20], 15 ; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 81   : 			if (!OnFile(stPath.c_str(), m_wfd.cFileName))

  006e9	57		 push	 edi
  006ea	8b 01		 mov	 eax, DWORD PTR [ecx]
  006ec	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  006ef	8d 45 d8	 lea	 eax, DWORD PTR _stPath$[ebp]

; 426  :         if (_Large_mode_engaged()) {

  006f2	0f 47 45 d8	 cmova	 eax, DWORD PTR _stPath$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 81   : 			if (!OnFile(stPath.c_str(), m_wfd.cFileName))

  006f6	50		 push	 eax
  006f7	ff d2		 call	 edx
  006f9	84 c0		 test	 al, al
  006fb	0f 84 90 fb ff
	ff		 je	 $LN853@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00701	e9 7c fe ff ff	 jmp	 $LN2@Create
$LN14@Create:
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 76   : 					if (0 != stricmp(c_szExtension+1, c_szFilter))

  00706	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _c_szExtension$1$[ebp]
  0070c	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _c_szFilter$GSCopy$1$[ebp]
  00712	40		 inc	 eax
  00713	56		 push	 esi
  00714	50		 push	 eax
  00715	e8 00 00 00 00	 call	 __stricmp
  0071a	83 c4 08	 add	 esp, 8
  0071d	85 c0		 test	 eax, eax
  0071f	74 80		 je	 SHORT $LN17@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00721	8b 4d bc	 mov	 ecx, DWORD PTR _strFilter$7[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 77   : 						continue;

  00724	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00728	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0072b	0f 86 4b fe ff
	ff		 jbe	 $LN870@Create
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00731	8b 55 a8	 mov	 edx, DWORD PTR _strFilter$7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00734	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00735	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00737	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0073d	72 10		 jb	 SHORT $LN641@Create

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0073f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00742	83 c1 23	 add	 ecx, 35			; 00000023H
  00745	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00747	83 c0 fc	 add	 eax, -4			; fffffffcH
  0074a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0074d	77 41		 ja	 SHORT $LN88@Create
$LN641@Create:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0074f	51		 push	 ecx
  00750	52		 push	 edx
  00751	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00756	83 c4 08	 add	 esp, 8
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 77   : 						continue;

  00759	e9 1e fe ff ff	 jmp	 $LN870@Create
$LN91@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0075e	51		 push	 ecx
  0075f	52		 push	 edx
  00760	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00765	83 c4 08	 add	 esp, 8
$LN80@Create:
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 87   : 	return true;

  00768	8a 85 5f ff ff
	ff		 mov	 al, BYTE PTR $T4[ebp]

; 88   : }

  0076e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00771	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00778	59		 pop	 ecx
  00779	5f		 pop	 edi
  0077a	5e		 pop	 esi
  0077b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0077e	33 cd		 xor	 ecx, ebp
  00780	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00785	8b e5		 mov	 esp, ebp
  00787	5d		 pop	 ebp
  00788	c2 0c 00	 ret	 12			; 0000000cH
$LN879@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2994 :             _Xlen_string(); // result too long

  0078b	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN88@Create:
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp

; 88   : }

  00790	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN852@Create:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 451  :             _Xran();

  00795	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN873@Create:
  0079a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _stPath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$1:
  00008	8d 4d 90	 lea	 ecx, DWORD PTR _stQuery$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$2:
  00010	8d 4d a8	 lea	 ecx, DWORD PTR _strFilter$7[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR $T8[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$4:
  00020	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _strFirstFilter$5[ebp]
  00026	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@CDir@@QAE_NPBD0H@Z$5:
  0002b	8d 4d c0	 lea	 ecx, DWORD PTR $T9[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00033	cc		 int	 3
  00034	cc		 int	 3
  00035	cc		 int	 3
  00036	cc		 int	 3
  00037	cc		 int	 3
__ehhandler$?Create@CDir@@QAE_NPBD0H@Z:
  00038	90		 npad	 1
  00039	90		 npad	 1
  0003a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00041	8b 8a 48 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-184]
  00047	33 c8		 xor	 ecx, eax
  00049	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00051	33 c8		 xor	 ecx, eax
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Create@CDir@@QAE_NPBD0H@Z
  0005d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Create@CDir@@QAE_NPBD0H@Z ENDP				; CDir::Create
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
;	COMDAT ?Destroy@CDir@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CDir@@QAEXXZ PROC				; CDir::Destroy, COMDAT
; _this$ = ecx

; 16   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 17   : 	if (m_hFind)

  00003	8b 86 44 01 00
	00		 mov	 eax, DWORD PTR [esi+324]
  00009	85 c0		 test	 eax, eax
  0000b	74 07		 je	 SHORT $LN2@Destroy

; 18   : 		FindClose(m_hFind);

  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindClose@4
$LN2@Destroy:

; 19   : 
; 20   : 	Initialize();

  00014	8b ce		 mov	 ecx, esi
  00016	5e		 pop	 esi
  00017	e9 00 00 00 00	 jmp	 ?Initialize@CDir@@IAEXXZ ; CDir::Initialize
?Destroy@CDir@@QAEXXZ ENDP				; CDir::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
;	COMDAT ??1CDir@@UAE@XZ
_TEXT	SEGMENT
??1CDir@@UAE@XZ PROC					; CDir::~CDir, COMDAT
; _this$ = ecx

; 11   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CDir@@6B@

; 12   : 	Destroy();

  00006	e9 00 00 00 00	 jmp	 ?Destroy@CDir@@QAEXXZ	; CDir::Destroy
??1CDir@@UAE@XZ ENDP					; CDir::~CDir
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\FileDir.cpp
;	COMDAT ??0CDir@@QAE@XZ
_TEXT	SEGMENT
??0CDir@@QAE@XZ PROC					; CDir::CDir, COMDAT
; _this$ = ecx

; 6    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CDir@@6B@

; 7    : 	Initialize();

  00009	e8 00 00 00 00	 call	 ?Initialize@CDir@@IAEXXZ ; CDir::Initialize

; 8    : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CDir@@QAE@XZ ENDP					; CDir::CDir
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
$T1 = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 847  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 848  :         auto& _My_data = _Mypair._Myval2;
; 849  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 850  : 
; 851  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 852  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 853  :         } else {
; 854  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 855  :         }
; 856  : 
; 857  :         if (_Count > max_size()) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00010	0f 87 95 00 00
	00		 ja	 $LN40@Construct

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  00016	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  00019	77 21		 ja	 SHORT $LN3@Construct
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	56		 push	 esi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  0001f	89 73 10	 mov	 DWORD PTR [ebx+16], esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
  00036	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	57		 push	 edi

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003d	8b fe		 mov	 edi, esi
  0003f	83 cf 0f	 or	 edi, 15			; 0000000fH
  00042	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 12		 jbe	 SHORT $LN9@Construct

; 2944 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	eb 26		 jmp	 SHORT $LN38@Construct
$LN9@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00061	3b f8		 cmp	 edi, eax
  00063	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00069	85 c0		 test	 eax, eax
  0006b	74 18		 je	 SHORT $LN37@Construct
$LN23@Construct:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0006d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00072	72 08		 jb	 SHORT $LN24@Construct

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007a	eb 06		 jmp	 SHORT $LN38@Construct
$LN24@Construct:

; 136  :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN38@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	83 c4 04	 add	 esp, 4
$LN37@Construct:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	56		 push	 esi
  00086	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00089	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  0008f	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  00092	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00095	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009a	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a0	5f		 pop	 edi
  000a1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
  000a5	5e		 pop	 esi

; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 901  :         }
; 902  : 
; 903  :         _ASAN_STRING_CREATE(*this);
; 904  :         _Proxy._Release();
; 905  :     }

  000a6	5b		 pop	 ebx
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
$LN40@Construct:

; 858  :             _Xlen_string(); // result too long

  000ab	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b0	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 2874 :     _NODISCARD _CONSTEXPR20 int compare(_In_z_ const _Elem* const _Ptr) const noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00005	8b 75 08	 mov	 esi, DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2874 :     _NODISCARD _CONSTEXPR20 int compare(_In_z_ const _Elem* const _Ptr) const noexcept /* strengthened */ {

  00008	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00009	8b fe		 mov	 edi, esi
  0000b	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
  0000e	66 90		 npad	 2
$LL26@compare:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL26@compare
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2876 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00017	8b 59 10	 mov	 ebx, DWORD PTR [ecx+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0001a	2b fa		 sub	 edi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0001c	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00020	76 02		 jbe	 SHORT $LN8@compare

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN8@compare:

; 2876 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00024	3b fb		 cmp	 edi, ebx
  00026	8b d3		 mov	 edx, ebx
  00028	0f 42 d7	 cmovb	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 411  :         return __builtin_memcmp(_First1, _First2, _Count);

  0002b	83 ea 04	 sub	 edx, 4
  0002e	72 11		 jb	 SHORT $LN29@compare
$LL30@compare:
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	3b 06		 cmp	 eax, DWORD PTR [esi]
  00034	75 10		 jne	 SHORT $LN28@compare
  00036	83 c1 04	 add	 ecx, 4
  00039	83 c6 04	 add	 esi, 4
  0003c	83 ea 04	 sub	 edx, 4
  0003f	73 ef		 jae	 SHORT $LL30@compare
$LN29@compare:
  00041	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00044	74 34		 je	 SHORT $LN27@compare
$LN28@compare:
  00046	8a 01		 mov	 al, BYTE PTR [ecx]
  00048	3a 06		 cmp	 al, BYTE PTR [esi]
  0004a	75 27		 jne	 SHORT $LN31@compare
  0004c	83 fa fd	 cmp	 edx, -3			; fffffffdH
  0004f	74 29		 je	 SHORT $LN27@compare
  00051	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00054	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00057	75 1a		 jne	 SHORT $LN31@compare
  00059	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0005c	74 1c		 je	 SHORT $LN27@compare
  0005e	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00061	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00064	75 0d		 jne	 SHORT $LN31@compare
  00066	83 fa ff	 cmp	 edx, -1
  00069	74 0f		 je	 SHORT $LN27@compare
  0006b	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  0006e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00071	74 07		 je	 SHORT $LN27@compare
$LN31@compare:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
  00078	eb 02		 jmp	 SHORT $LN32@compare
$LN27@compare:
  0007a	33 c0		 xor	 eax, eax
$LN32@compare:

; 595  :     if (_Ans != 0) {

  0007c	85 c0		 test	 eax, eax
  0007e	75 12		 jne	 SHORT $LN17@compare

; 596  :         return _Ans;
; 597  :     }
; 598  : 
; 599  :     if (_Left_size < _Right_size) {

  00080	3b fb		 cmp	 edi, ebx
  00082	76 0a		 jbe	 SHORT $LN45@compare
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2877 :     }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	83 c8 ff	 or	 eax, -1
  00089	5b		 pop	 ebx
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
$LN45@compare:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 603  :     if (_Left_size > _Right_size) {

  0008e	1b c0		 sbb	 eax, eax
  00090	f7 d8		 neg	 eax
$LN17@compare:
  00092	5f		 pop	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2877 :     }

  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_size$1$ = -16					; size = 4
tv520 = -16						; size = 4
__Old_size$1$ = -12					; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
tv510 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv505 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1486 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1487 :         // append [_Ptr, _Ptr + _Count)
; 1488 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1489 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f4	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 1490 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1491 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 416  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 434  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1493 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1494 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1507 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 1d 01 00
	00		 jb	 $LN98@append

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00062	8b f0		 mov	 esi, eax

; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  00064	89 45 f0	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00067	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00070	76 12		 jbe	 SHORT $LN23@append

; 2944 :             return _Max;

  00072	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00077	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00082	eb 4b		 jmp	 SHORT $LN96@append
$LN23@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00084	8b c2		 mov	 eax, edx
  00086	d1 e8		 shr	 eax, 1
  00088	89 45 fc	 mov	 DWORD PTR tv510[ebp], eax
  0008b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00090	2b 45 fc	 sub	 eax, DWORD PTR tv510[ebp]
  00093	3b d0		 cmp	 edx, eax
  00095	76 12		 jbe	 SHORT $LN24@append

; 2948 :             return _Max;

  00097	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a7	eb 26		 jmp	 SHORT $LN96@append
$LN24@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv510[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b f0		 cmp	 esi, eax
  000b0	0f 42 f0	 cmovb	 esi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000b6	85 c0		 test	 eax, eax
  000b8	74 1e		 je	 SHORT $LN95@append
$LN37@append:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ba	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000bf	72 08		 jb	 SHORT $LN38@append

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c7	eb 06		 jmp	 SHORT $LN96@append
$LN38@append:

; 136  :         return ::operator new(_Bytes);

  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN96@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR $T1[ebp]
  000d2	83 c4 04	 add	 esp, 4
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
$LN95@append:
  000d8	8b 5d f0	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  000db	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 3006 :         _My_data._Myres       = _New_capacity;
; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000de	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  000e1	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000e4	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000e7	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000ea	89 75 f0	 mov	 DWORD PTR tv520[ebp], esi
  000ed	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  000f0	89 45 0c	 mov	 DWORD PTR tv505[ebp], eax

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000f3	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
  000f6	51		 push	 ecx
  000f7	83 fa 0f	 cmp	 edx, 15			; 0000000fH
  000fa	76 56		 jbe	 SHORT $LN16@append

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fc	8b 37		 mov	 esi, DWORD PTR [edi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _memcpy
  00105	53		 push	 ebx
  00106	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR tv520[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00111	8b 45 0c	 mov	 eax, DWORD PTR tv505[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00114	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00117	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0011a	41		 inc	 ecx

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011b	c6 00 00	 mov	 BYTE PTR [eax], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 12		 jb	 SHORT $LN69@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0012c	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 4b		 ja	 SHORT $LN66@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00136	8b f2		 mov	 esi, edx
$LN69@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00138	51		 push	 ecx
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  0013f	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1498 :         return _Reallocate_grow_by(

  00145	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00147	8b c7		 mov	 eax, edi
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN16@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00152	57		 push	 edi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 _memcpy
  00159	53		 push	 ebx
  0015a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0015d	56		 push	 esi
  0015e	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00163	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00166	83 c4 18	 add	 esp, 24			; 00000018H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1504 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00169	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1498 :         return _Reallocate_grow_by(

  0016c	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
  0016f	89 07		 mov	 DWORD PTR [edi], eax

; 1507 :     }

  00171	8b c7		 mov	 eax, edi
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	5b		 pop	 ebx
  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 08 00	 ret	 8
$LN98@append:

; 2994 :             _Xlen_string(); // result too long

  0017c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@append:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@append:
  00186	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 463  :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
