; Listing generated by Microsoft (R) Optimizing Compiler Version 19.43.34808.0 

	TITLE	C:\Marty 5.5\Src-Client\Client\EterBase\Distribute\Poly.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CPoly@@QAE@XZ				; CPoly::CPoly
PUBLIC	??1CPoly@@UAE@XZ				; CPoly::~CPoly
PUBLIC	?Analyze@CPoly@@QAEHPBD@Z			; CPoly::Analyze
PUBLIC	?Eval@CPoly@@QAEMXZ				; CPoly::Eval
PUBLIC	?SetRandom@CPoly@@QAEXH@Z			; CPoly::SetRandom
PUBLIC	?SetStr@CPoly@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPoly::SetStr
PUBLIC	?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; CPoly::SetVar
PUBLIC	?GetVarCount@CPoly@@QAEHXZ			; CPoly::GetVarCount
PUBLIC	?GetVarName@CPoly@@QAEPBDI@Z			; CPoly::GetVarName
PUBLIC	?Clear@CPoly@@QAEXXZ				; CPoly::Clear
PUBLIC	?my_irandom@CPoly@@IAEHNN@Z			; CPoly::my_irandom
PUBLIC	?my_frandom@CPoly@@IAENNN@Z			; CPoly::my_frandom
PUBLIC	?init@CPoly@@IAEXXZ				; CPoly::init
PUBLIC	?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
PUBLIC	?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPoly::find
PUBLIC	?emit@CPoly@@IAEXHH@Z				; CPoly::emit
PUBLIC	?match@CPoly@@IAEXH@Z				; CPoly::match
PUBLIC	?expo@CPoly@@IAEXXZ				; CPoly::expo
PUBLIC	?factor@CPoly@@IAEXXZ				; CPoly::factor
PUBLIC	?term@CPoly@@IAEXXZ				; CPoly::term
PUBLIC	?lexan@CPoly@@IAEHXZ				; CPoly::lexan
PUBLIC	?error@CPoly@@IAEXXZ				; CPoly::error
PUBLIC	?expr@CPoly@@IAEXXZ				; CPoly::expr
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AAEXQAHII@Z ; std::vector<int,std::allocator<int> >::_Change_array
PUBLIC	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
PUBLIC	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
PUBLIC	?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
PUBLIC	??1?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAE@XZ ; std::vector<CSymTable *,std::allocator<CSymTable *> >::~vector<CSymTable *,std::allocator<CSymTable *> >
PUBLIC	?_Change_array@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@AAEXQAPAVCSymTable@@II@Z ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@CAXXZ ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Xlength
PUBLIC	??_GCPoly@@UAEPAXI@Z				; CPoly::`scalar deleting destructor'
PUBLIC	?_random@@YANXZ					; _random
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@AAEPANQANABN@Z ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>
PUBLIC	??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAHABH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>
PUBLIC	??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z ; std::_Copy_memmove<CSymTable * *,CSymTable * *>
PUBLIC	??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_backward_memmove<int *,int *>
PUBLIC	??$_Copy_memmove_tail@PAPAVCSymTable@@@std@@YAPAPAVCSymTable@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CSymTable * *>
PUBLIC	??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z	; std::_Copy_memmove<double *,double *>
PUBLIC	??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z	; std::_Copy_memmove<int *,int *>
PUBLIC	??$_Copy_memmove_tail@PAN@std@@YAPANQBDQANII@Z	; std::_Copy_memmove_tail<double *>
PUBLIC	??$_Copy_memmove_tail@PAH@std@@YAPAHQBDQAHII@Z	; std::_Copy_memmove_tail<int *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_7CPoly@@6B@					; CPoly::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_03KLIPLJLL@min@				; `string'
PUBLIC	??_C@_03LJAEFNNE@max@				; `string'
PUBLIC	??_C@_06EBGNBFIA@number@			; `string'
PUBLIC	??_C@_07OMLILGHE@irandom@			; `string'
PUBLIC	??_C@_05CCJGGLIO@irand@				; `string'
PUBLIC	??_C@_07DFJIKENI@frandom@			; `string'
PUBLIC	??_C@_05NDMANJFL@frand@				; `string'
PUBLIC	??_C@_02BMJICGCB@rt@				; `string'
PUBLIC	??_C@_04EIAKFFMI@sqrt@				; `string'
PUBLIC	??_C@_03LALBNOCG@cos@				; `string'
PUBLIC	??_C@_03BLEJJJBH@sin@				; `string'
PUBLIC	??_C@_03IIINPABG@tan@				; `string'
PUBLIC	??_C@_03PPPAEIOB@cot@				; `string'
PUBLIC	??_C@_03OPEPJGGD@csc@				; `string'
PUBLIC	??_C@_05KCHJPNOJ@cosec@				; `string'
PUBLIC	??_C@_03KHPNBODO@sec@				; `string'
PUBLIC	??_C@_02OAHAJOFD@pi@				; `string'
PUBLIC	??_C@_01KGKMHCOC@e@				; `string'
PUBLIC	??_C@_03MGHMBJCF@log@				; `string'
PUBLIC	??_C@_02LKANFCIA@ln@				; `string'
PUBLIC	??_C@_05HGHHAHAP@log10@				; `string'
PUBLIC	??_C@_03BCGAIFPO@abs@				; `string'
PUBLIC	??_C@_03FFONCNID@mod@				; `string'
PUBLIC	??_C@_05PBJFFIGL@floor@				; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CPoly@@6B@					; CPoly::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPoly@@@8				; CPoly `RTTI Type Descriptor'
PUBLIC	??_R3CPoly@@8					; CPoly::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPoly@@8					; CPoly::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPoly@@8				; CPoly::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f00000000000000
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4005bf0a8b145769
PUBLIC	__real@400921fb54442d18
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_rand:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	??0CSymTable@@QAE@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CSymTable::CSymTable
EXTRN	??_ECPoly@@UAEPAXI@Z:PROC			; CPoly::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIfmod:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_log10_precise:PROC
EXTRN	__libm_sse2_log_precise:PROC
EXTRN	__libm_sse2_pow_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__libm_sse2_tan_precise:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@4005bf0a8b145769
CONST	SEGMENT
__real@4005bf0a8b145769 DQ 04005bf0a8b145769r	; 2.71828
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f00000000000000
CONST	SEGMENT
__real@3f00000000000000 DQ 03f00000000000000r	; 3.05176e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CPoly@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPoly@@8 DD FLAT:??_R0?AVCPoly@@@8	; CPoly::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPoly@@8
rdata$r	ENDS
;	COMDAT ??_R2CPoly@@8
rdata$r	SEGMENT
??_R2CPoly@@8 DD FLAT:??_R1A@?0A@EA@CPoly@@8		; CPoly::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CPoly@@8
rdata$r	SEGMENT
??_R3CPoly@@8 DD 00H					; CPoly::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CPoly@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPoly@@@8
data$rs	SEGMENT
??_R0?AVCPoly@@@8 DD FLAT:??_7type_info@@6B@		; CPoly `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPoly@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CPoly@@6B@
rdata$r	SEGMENT
??_R4CPoly@@6B@ DD 00H					; CPoly::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPoly@@@8
	DD	FLAT:??_R3CPoly@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PBJFFIGL@floor@
CONST	SEGMENT
??_C@_05PBJFFIGL@floor@ DB 'floor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FFONCNID@mod@
CONST	SEGMENT
??_C@_03FFONCNID@mod@ DB 'mod', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BCGAIFPO@abs@
CONST	SEGMENT
??_C@_03BCGAIFPO@abs@ DB 'abs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HGHHAHAP@log10@
CONST	SEGMENT
??_C@_05HGHHAHAP@log10@ DB 'log10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LKANFCIA@ln@
CONST	SEGMENT
??_C@_02LKANFCIA@ln@ DB 'ln', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHMBJCF@log@
CONST	SEGMENT
??_C@_03MGHMBJCF@log@ DB 'log', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KGKMHCOC@e@
CONST	SEGMENT
??_C@_01KGKMHCOC@e@ DB 'e', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAHAJOFD@pi@
CONST	SEGMENT
??_C@_02OAHAJOFD@pi@ DB 'pi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHPNBODO@sec@
CONST	SEGMENT
??_C@_03KHPNBODO@sec@ DB 'sec', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KCHJPNOJ@cosec@
CONST	SEGMENT
??_C@_05KCHJPNOJ@cosec@ DB 'cosec', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OPEPJGGD@csc@
CONST	SEGMENT
??_C@_03OPEPJGGD@csc@ DB 'csc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PPPAEIOB@cot@
CONST	SEGMENT
??_C@_03PPPAEIOB@cot@ DB 'cot', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IIINPABG@tan@
CONST	SEGMENT
??_C@_03IIINPABG@tan@ DB 'tan', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BLEJJJBH@sin@
CONST	SEGMENT
??_C@_03BLEJJJBH@sin@ DB 'sin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LALBNOCG@cos@
CONST	SEGMENT
??_C@_03LALBNOCG@cos@ DB 'cos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EIAKFFMI@sqrt@
CONST	SEGMENT
??_C@_04EIAKFFMI@sqrt@ DB 'sqrt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BMJICGCB@rt@
CONST	SEGMENT
??_C@_02BMJICGCB@rt@ DB 'rt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NDMANJFL@frand@
CONST	SEGMENT
??_C@_05NDMANJFL@frand@ DB 'frand', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFJIKENI@frandom@
CONST	SEGMENT
??_C@_07DFJIKENI@frandom@ DB 'frandom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCJGGLIO@irand@
CONST	SEGMENT
??_C@_05CCJGGLIO@irand@ DB 'irand', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OMLILGHE@irandom@
CONST	SEGMENT
??_C@_07OMLILGHE@irandom@ DB 'irandom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBGNBFIA@number@
CONST	SEGMENT
??_C@_06EBGNBFIA@number@ DB 'number', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LJAEFNNE@max@
CONST	SEGMENT
??_C@_03LJAEFNNE@max@ DB 'max', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KLIPLJLL@min@
CONST	SEGMENT
??_C@_03KLIPLJLL@min@ DB 'min', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CPoly@@6B@
CONST	SEGMENT
??_7CPoly@@6B@ DD FLAT:??_R4CPoly@@6B@			; CPoly::`vftable'
	DD	FLAT:??_ECPoly@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?lexan@CPoly@@IAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lexan@CPoly@@IAEHXZ$0
__ehfuncinfo$?lexan@CPoly@@IAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lexan@CPoly@@IAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0
__ehfuncinfo$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?init@CPoly@@IAEXXZ DD 019930522H
	DD	018H
	DD	FLAT:__unwindtable$?init@CPoly@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?init@CPoly@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$18
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$20
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$21
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$23
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$24
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?init@CPoly@@IAEXXZ$25
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Analyze@CPoly@@QAEHPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Analyze@CPoly@@QAEHPBD@Z$0
__ehfuncinfo$?Analyze@CPoly@@QAEHPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Analyze@CPoly@@QAEHPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CPoly@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CPoly@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CPoly@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPoly@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPoly@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CPoly@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CPoly@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CPoly@@QAE@XZ$4
xdata$x	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAH@std@@YAPAHQBDQAHII@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAH@std@@YAPAHQBDQAHII@Z PROC	; std::_Copy_memmove_tail<int *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAH@std@@YAPAHQBDQAHII@Z ENDP	; std::_Copy_memmove_tail<int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAN@std@@YAPANQBDQANII@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAN@std@@YAPANQBDQANII@Z PROC	; std::_Copy_memmove_tail<double *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAN@std@@YAPANQBDQANII@Z ENDP	; std::_Copy_memmove_tail<double *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z PROC		; std::_Copy_memmove<int *,int *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAH@std@@YAPAHQBDQAHII@Z ; std::_Copy_memmove_tail<int *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ENDP		; std::_Copy_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z PROC		; std::_Copy_memmove<double *,double *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 03	 sar	 eax, 3

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAN@std@@YAPANQBDQANII@Z ; std::_Copy_memmove_tail<double *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ENDP		; std::_Copy_memmove<double *,double *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove_tail@PAPAVCSymTable@@@std@@YAPAPAVCSymTable@@QBDQAPAV1@II@Z
_TEXT	SEGMENT
__First_ch$ = 8						; size = 4
__Dest$ = 12						; size = 4
__Byte_count$ = 16					; size = 4
__Object_count$ = 20					; size = 4
??$_Copy_memmove_tail@PAPAVCSymTable@@@std@@YAPAPAVCSymTable@@QBDQAPAV1@II@Z PROC ; std::_Copy_memmove_tail<CSymTable * *>, COMDAT

; 4763 :     const char* const _First_ch, const _OutCtgIt _Dest, const size_t _Byte_count, const size_t _Object_count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4764 :     _STL_INTERNAL_CHECK(_Byte_count == _Object_count * sizeof(*_Dest));
; 4765 :     const auto _Dest_ptr = _STD _To_address(_Dest);
; 4766 :     const auto _Dest_ch  = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 4767 :     _CSTD memmove(_Dest_ch, _First_ch, _Byte_count);

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR __Byte_count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 08	 push	 DWORD PTR __First_ch$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memmove
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4768 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4769 :         (void) _Object_count;
; 4770 :         // CodeQL [SM02986] This cast is correct: we're bypassing pointer arithmetic for performance.
; 4771 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Byte_count);

  00018	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 4772 :     } else {
; 4773 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Object_count);
; 4774 :     }
; 4775 : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$_Copy_memmove_tail@PAPAVCSymTable@@@std@@YAPAPAVCSymTable@@QBDQAPAV1@II@Z ENDP ; std::_Copy_memmove_tail<CSymTable * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z PROC	; std::_Copy_backward_memmove<int *,int *>, COMDAT

; 5099 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5100 :     // implement copy_backward-like function as memmove
; 5101 :     const auto _First_ptr = _STD _To_address(_First);
; 5102 :     const auto _Last_ptr  = _STD _To_address(_Last);
; 5103 :     const auto _Dest_ptr  = _STD _To_address(_Dest);
; 5104 :     const auto _First_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 5105 :     const auto _Last_ch   = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 5106 :     const auto _Dest_ch   = const_cast<char*>(reinterpret_cast<const volatile char*>(_Dest_ptr));
; 5107 :     const auto _Count     = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 5108 :     const auto _Result    = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5109 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 5110 :         return static_cast<_CtgIt2>(_Result);
; 5111 :     } else {
; 5112 :         return _Dest - static_cast<_Iter_diff_t<_CtgIt2>>(_Last_ptr - _First_ptr);
; 5113 :     }
; 5114 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z ENDP	; std::_Copy_backward_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CSymTable * *,CSymTable * *>, COMDAT

; 4778 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4779 :     _STL_INTERNAL_CHECK(_First <= _Last);
; 4780 :     const auto _First_ptr    = _STD _To_address(_First);
; 4781 :     const auto _Last_ptr     = _STD _To_address(_Last);
; 4782 :     const auto _Object_count = static_cast<size_t>(_Last_ptr - _First_ptr);

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	8b c1		 mov	 eax, ecx
  0000d	c1 f8 02	 sar	 eax, 2

; 4783 :     const auto _First_ch     = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First_ptr));
; 4784 :     const auto _Last_ch      = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last_ptr));
; 4785 :     const auto _Byte_count   = static_cast<size_t>(_Last_ch - _First_ch);
; 4786 :     return _STD _Copy_memmove_tail(_First_ch, _STD move(_Dest), _Byte_count, _Object_count);

  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ??$_Copy_memmove_tail@PAPAVCSymTable@@@std@@YAPAPAVCSymTable@@QBDQAPAV1@II@Z ; std::_Copy_memmove_tail<CSymTable * *>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H

; 4787 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CSymTable * *,CSymTable * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAHABH@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
__Whereoff$1$ = -4					; size = 4
tv557 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAHABH@Z PROC ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 c8 00 00
	00		 je	 $LN96@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00033	89 75 f8	 mov	 DWORD PTR __Newsize$1$[ebp], esi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 12		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	bf ff ff ff 3f	 mov	 edi, 1073741823		; 3fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	eb 3a		 jmp	 SHORT $LN94@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005d	8b fe		 mov	 edi, esi
  0005f	3b c6		 cmp	 eax, esi
  00061	0f 43 f8	 cmovae	 edi, eax
  00064	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  0006a	0f 87 88 00 00
	00		 ja	 $LN97@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00070	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]

; 227  :     if (_Bytes == 0) {

  00077	85 c0		 test	 eax, eax
  00079	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007b	33 f6		 xor	 esi, esi
  0007d	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0007f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00084	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008c	eb 06		 jmp	 SHORT $LN94@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN94@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00094	8b f0		 mov	 esi, eax
  00096	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
  00099	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  0009c	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]
  0009f	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a2	89 4d fc	 mov	 DWORD PTR tv557[ebp], ecx
  000a5	8b 00		 mov	 eax, DWORD PTR [eax]
  000a7	89 01		 mov	 DWORD PTR [ecx], eax

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a9	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000ac	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000af	8b 13		 mov	 edx, DWORD PTR [ebx]
  000b1	3b c1		 cmp	 eax, ecx
  000b3	75 04		 jne	 SHORT $LN3@Emplace_re
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b5	8b c6		 mov	 eax, esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000b7	eb 17		 jmp	 SHORT $LN52@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000b9	56		 push	 esi
  000ba	50		 push	 eax
  000bb	52		 push	 edx
  000bc	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_memmove<int *,int *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c1	8b 45 fc	 mov	 eax, DWORD PTR tv557[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c7	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ca	83 c0 04	 add	 eax, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cd	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 900  :         _Guard._New_begin = nullptr;

  000d0	50		 push	 eax
  000d1	51		 push	 ecx
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_memmove<int *,int *>
  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000db	8b cb		 mov	 ecx, ebx
  000dd	57		 push	 edi
  000de	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 ?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AAEXQAHII@Z ; std::vector<int,std::allocator<int> >::_Change_array

; 902  :         return _Newvec + _Whereoff;

  000e7	8b 45 fc	 mov	 eax, DWORD PTR tv557[ebp]

; 903  :     }

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 08 00	 ret	 8
$LN96@Emplace_re:

; 873  :             _Xlength();

  000f3	e8 00 00 00 00	 call	 ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
$LN97@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  000f8	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN93@Emplace_re:
  000fd	cc		 int	 3
??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAHABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@AAEPANQANABN@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv716 = -8						; size = 4
tv714 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@AAEPANQANABN@Z PROC ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>, COMDAT
; _this$ = ecx

; 860  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 861  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 862  :         _Alty& _Al        = _Getal();
; 863  :         auto& _My_data    = _Mypair._Myval2;
; 864  :         pointer& _Myfirst = _My_data._Myfirst;
; 865  :         pointer& _Mylast  = _My_data._Mylast;
; 866  : 
; 867  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 868  : 
; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 03	 sar	 ebx, 3
  0001a	c1 f8 03	 sar	 eax, 3

; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00022	0f 84 0d 01 00
	00		 je	 $LN131@Emplace_re

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 874  :         }
; 875  : 
; 876  :         const size_type _Newsize = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 03	 sar	 edx, 3

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 14		 jbe	 SHORT $LN8@Emplace_re

; 1997 :             return _Max; // geometric growth would overflow

  00045	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  0004a	c7 45 f8 f8 ff
	ff ff		 mov	 DWORD PTR tv716[ebp], -8 ; fffffff8H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00057	eb 3d		 jmp	 SHORT $LN129@Emplace_re
$LN8@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00059	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0005c	8b cf		 mov	 ecx, edi
  0005e	3b c7		 cmp	 eax, edi
  00060	0f 43 c8	 cmovae	 ecx, eax
  00063	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00069	0f 87 cb 00 00
	00		 ja	 $LN132@Emplace_re

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  0006f	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00076	89 45 f8	 mov	 DWORD PTR tv716[ebp], eax

; 227  :     if (_Bytes == 0) {

  00079	85 c0		 test	 eax, eax
  0007b	75 04		 jne	 SHORT $LN23@Emplace_re

; 228  :         return nullptr;

  0007d	33 ff		 xor	 edi, edi
  0007f	eb 1a		 jmp	 SHORT $LN22@Emplace_re
$LN23@Emplace_re:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00081	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00086	72 08		 jb	 SHORT $LN24@Emplace_re

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008e	eb 06		 jmp	 SHORT $LN129@Emplace_re
$LN24@Emplace_re:

; 136  :         return ::operator new(_Bytes);

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN129@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00096	8b f8		 mov	 edi, eax
  00098	83 c4 04	 add	 esp, 4
$LN22@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0009b	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009e	8d 0c df	 lea	 ecx, DWORD PTR [edi+ebx*8]

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a1	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000a4	89 4d fc	 mov	 DWORD PTR tv714[ebp], ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 732  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  000a7	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  000ab	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000af	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b4	3b d8		 cmp	 ebx, eax
  000b6	75 07		 jne	 SHORT $LN3@Emplace_re

; 894  :         } else { // provide basic guarantee

  000b8	8b 5d fc	 mov	 ebx, DWORD PTR tv714[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bb	8b d7		 mov	 edx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000bd	eb 16		 jmp	 SHORT $LN58@Emplace_re
$LN3@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000bf	57		 push	 edi
  000c0	53		 push	 ebx
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ; std::_Copy_memmove<double *,double *>
  000c7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ca	8b cb		 mov	 ecx, ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000cc	8b 5d fc	 mov	 ebx, DWORD PTR tv714[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d2	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
$LN58@Emplace_re:

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000d5	52		 push	 edx
  000d6	50		 push	 eax
  000d7	51		 push	 ecx
  000d8	e8 00 00 00 00	 call	 ??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ; std::_Copy_memmove<double *,double *>

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000dd	8b 06		 mov	 eax, DWORD PTR [esi]

; 898  :         }
; 899  : 
; 900  :         _Guard._New_begin = nullptr;

  000df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  000e2	85 c0		 test	 eax, eax
  000e4	74 2c		 je	 SHORT $LN80@Emplace_re

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e9	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000eb	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ee	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f4	72 12		 jb	 SHORT $LN91@Emplace_re

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f6	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f9	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fc	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fe	83 c0 fc	 add	 eax, -4			; fffffffcH
  00101	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00104	77 2a		 ja	 SHORT $LN88@Emplace_re

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00106	8b c2		 mov	 eax, edx
$LN91@Emplace_re:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00108	51		 push	 ecx
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010f	83 c4 08	 add	 esp, 8
$LN80@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  00112	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00115	89 3e		 mov	 DWORD PTR [esi], edi
  00117	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 902  :         return _Newvec + _Whereoff;

  0011a	8b c3		 mov	 eax, ebx

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0011c	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  0011f	8b 4d f8	 mov	 ecx, DWORD PTR tv716[ebp]
  00122	03 cf		 add	 ecx, edi

; 903  :     }

  00124	5f		 pop	 edi

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00125	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 903  :     }

  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 08 00	 ret	 8
$LN88@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00130	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN131@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  00135	e8 00 00 00 00	 call	 ?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
$LN132@Emplace_re:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0013a	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN128@Emplace_re:
  0013f	cc		 int	 3
??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@AAEPANQANABN@Z ENDP ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3271 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]

; 3271 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00006	53		 push	 ebx
  00007	57		 push	 edi

; 434  :         return _Myres > _Small_string_capacity;

  00008	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0000c	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]

; 426  :         if (_Large_mode_engaged()) {

  0000f	76 02		 jbe	 SHORT $LN8@operator

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN8@operator:

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00013	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 434  :         return _Myres > _Small_string_capacity;

  00016	83 7a 14 0f	 cmp	 DWORD PTR [edx+20], 15	; 0000000fH

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0001a	8b 5a 10	 mov	 ebx, DWORD PTR [edx+16]

; 426  :         if (_Large_mode_engaged()) {

  0001d	76 02		 jbe	 SHORT $LN15@operator

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0001f	8b 12		 mov	 edx, DWORD PTR [edx]
$LN15@operator:
  00021	56		 push	 esi

; 2854 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00022	3b fb		 cmp	 edi, ebx
  00024	8b f3		 mov	 esi, ebx
  00026	0f 42 f7	 cmovb	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 411  :         return __builtin_memcmp(_First1, _First2, _Count);

  00029	83 ee 04	 sub	 esi, 4
  0002c	72 13		 jb	 SHORT $LN35@operator
  0002e	66 90		 npad	 2
$LL36@operator:
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00034	75 10		 jne	 SHORT $LN34@operator
  00036	83 c2 04	 add	 edx, 4
  00039	83 c1 04	 add	 ecx, 4
  0003c	83 ee 04	 sub	 esi, 4
  0003f	73 ef		 jae	 SHORT $LL36@operator
$LN35@operator:
  00041	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00044	74 34		 je	 SHORT $LN33@operator
$LN34@operator:
  00046	8a 02		 mov	 al, BYTE PTR [edx]
  00048	3a 01		 cmp	 al, BYTE PTR [ecx]
  0004a	75 27		 jne	 SHORT $LN37@operator
  0004c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0004f	74 29		 je	 SHORT $LN33@operator
  00051	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00054	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00057	75 1a		 jne	 SHORT $LN37@operator
  00059	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005c	74 1c		 je	 SHORT $LN33@operator
  0005e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00061	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00064	75 0d		 jne	 SHORT $LN37@operator
  00066	83 fe ff	 cmp	 esi, -1
  00069	74 0f		 je	 SHORT $LN33@operator
  0006b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0006e	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00071	74 07		 je	 SHORT $LN33@operator
$LN37@operator:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
  00078	eb 02		 jmp	 SHORT $LN38@operator
$LN33@operator:
  0007a	33 c0		 xor	 eax, eax
$LN38@operator:
  0007c	5e		 pop	 esi

; 595  :     if (_Ans != 0) {

  0007d	85 c0		 test	 eax, eax
  0007f	75 12		 jne	 SHORT $LN24@operator

; 596  :         return _Ans;
; 597  :     }
; 598  : 
; 599  :     if (_Left_size < _Right_size) {

  00081	3b fb		 cmp	 edi, ebx
  00083	76 0a		 jbe	 SHORT $LN51@operator

; 600  :         return -1;

  00085	83 c8 ff	 or	 eax, -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3272 :     return _Left.compare(_Right) < 0;

  00088	5f		 pop	 edi
  00089	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008c	5b		 pop	 ebx

; 3273 : }

  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
$LN51@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 603  :     if (_Left_size > _Right_size) {

  0008f	1b c0		 sbb	 eax, eax
  00091	f7 d8		 neg	 eax
$LN24@operator:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3272 :     return _Left.compare(_Right) < 0;

  00093	5f		 pop	 edi
  00094	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00097	5b		 pop	 ebx

; 3273 : }

  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?_random@@YANXZ
_TEXT	SEGMENT
tv68 = -8						; size = 8
?_random@@YANXZ PROC					; _random, COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 14   :     return rand() / (RAND_MAX + 1.0);

  00006	e8 00 00 00 00	 call	 _rand
  0000b	66 0f 6e c0	 movd	 xmm0, eax
  0000f	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00013	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f00000000000000
  0001b	f2 0f 11 45 f8	 movsd	 QWORD PTR tv68[ebp], xmm0
  00020	dd 45 f8	 fld	 QWORD PTR tv68[ebp]

; 15   : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?_random@@YANXZ ENDP					; _random
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPoly@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPoly@@UAEPAXI@Z PROC				; CPoly::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPoly@@UAE@XZ	; CPoly::~CPoly
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN5@scalar
  00011	68 80 00 00 00	 push	 128			; 00000080H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCPoly@@UAEPAXI@Z ENDP				; CPoly::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@CAXXZ PROC ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@CAXXZ ENDP ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@AAEXQAPAVCSymTable@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@AAEXQAPAVCSymTable@@II@Z PROC ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2064 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@AAEXQAPAVCSymTable@@II@Z ENDP ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAE@XZ PROC ; std::vector<CSymTable *,std::allocator<CSymTable *> >::~vector<CSymTable *,std::allocator<CSymTable *> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 820  :     }

  0004a	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00050	cc		 int	 3
??1?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSymTable *,std::allocator<CSymTable *> >::~vector<CSymTable *,std::allocator<CSymTable *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ PROC ; std::vector<double,std::allocator<double> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ENDP ; std::vector<double,std::allocator<double> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ PROC	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 820  :     }

  0004a	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00050	cc		 int	 3
??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ENDP	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ PROC ; std::vector<int,std::allocator<int> >::_Xlength, COMDAT

; 2169 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ENDP ; std::vector<int,std::allocator<int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AAEXQAHII@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AAEXQAHII@Z PROC ; std::vector<int,std::allocator<int> >::_Change_array, COMDAT
; _this$ = ecx

; 2044 :         const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2045 :         // orphan all iterators, discard old array, acquire new array
; 2046 :         auto& _Al         = _Getal();
; 2047 :         auto& _My_data    = _Mypair._Myval2;
; 2048 :         pointer& _Myfirst = _My_data._Myfirst;
; 2049 :         pointer& _Mylast  = _My_data._Mylast;
; 2050 :         pointer& _Myend   = _My_data._Myend;
; 2051 : 
; 2052 :         _My_data._Orphan_all();
; 2053 : 
; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN10@Change_arr

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN21@Change_arr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN18@Change_arr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN21@Change_arr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN10@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2060 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2064 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN18@Change_arr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AAEXQAHII@Z ENDP ; std::vector<int,std::allocator<int> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv621 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
$T1 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 921  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 829  :         if (_Mylast != _My_data._Myend) {

  0000b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00011	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00014	3b ca		 cmp	 ecx, edx
  00016	74 14		 je	 SHORT $LN4@push_back

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00018	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  0001f	83 46 04 04	 add	 DWORD PTR [esi+4], 4

; 924  :     }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN4@push_back:

; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0002c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0002e	8b c1		 mov	 eax, ecx
  00030	2b c7		 sub	 eax, edi
  00032	c1 f8 02	 sar	 eax, 2
  00035	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  00038	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0003d	0f 84 c0 00 00
	00		 je	 $LN106@push_back

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00043	2b d7		 sub	 edx, edi

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00045	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	c1 fa 02	 sar	 edx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00050	8b fa		 mov	 edi, edx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00052	89 5d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00055	d1 ef		 shr	 edi, 1
  00057	2b c7		 sub	 eax, edi
  00059	3b d0		 cmp	 edx, eax
  0005b	76 12		 jbe	 SHORT $LN15@push_back

; 1997 :             return _Max; // geometric growth would overflow

  0005d	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00062	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006d	eb 38		 jmp	 SHORT $LN104@push_back
$LN15@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0006f	8d 04 17	 lea	 eax, DWORD PTR [edi+edx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00072	3b c3		 cmp	 eax, ebx
  00074	0f 43 d8	 cmovae	 ebx, eax
  00077	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0007d	0f 87 85 00 00
	00		 ja	 $LN107@push_back

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00083	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]

; 227  :     if (_Bytes == 0) {

  0008a	85 c0		 test	 eax, eax
  0008c	75 04		 jne	 SHORT $LN30@push_back

; 228  :         return nullptr;

  0008e	33 ff		 xor	 edi, edi
  00090	eb 1d		 jmp	 SHORT $LN29@push_back
$LN30@push_back:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 08		 jb	 SHORT $LN31@push_back

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	eb 06		 jmp	 SHORT $LN104@push_back
$LN31@push_back:

; 136  :         return ::operator new(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN104@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  000aa	8b f8		 mov	 edi, eax
  000ac	83 c4 04	 add	 esp, 4
$LN29@push_back:
  000af	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  000b2	8d 14 87	 lea	 edx, DWORD PTR [edi+eax*4]
  000b5	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000b8	89 55 f4	 mov	 DWORD PTR tv621[ebp], edx
  000bb	8b 00		 mov	 eax, DWORD PTR [eax]
  000bd	89 02		 mov	 DWORD PTR [edx], eax

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000bf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000c2	8b 16		 mov	 edx, DWORD PTR [esi]
  000c4	3b c8		 cmp	 ecx, eax
  000c6	75 04		 jne	 SHORT $LN10@push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000c8	8b cf		 mov	 ecx, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  000ca	eb 17		 jmp	 SHORT $LN59@push_back
$LN10@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000cc	57		 push	 edi
  000cd	51		 push	 ecx
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_memmove<int *,int *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8b 4d f4	 mov	 ecx, DWORD PTR tv621[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000dd	83 c1 04	 add	 ecx, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000e0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
$LN59@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 900  :         _Guard._New_begin = nullptr;

  000e3	51		 push	 ecx
  000e4	50		 push	 eax
  000e5	52		 push	 edx
  000e6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_memmove<int *,int *>
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000ee	8b ce		 mov	 ecx, esi
  000f0	53		 push	 ebx
  000f1	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000f4	57		 push	 edi
  000f5	e8 00 00 00 00	 call	 ?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AAEXQAHII@Z ; std::vector<int,std::allocator<int> >::_Change_array

; 924  :     }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
$LN106@push_back:

; 873  :             _Xlength();

  00103	e8 00 00 00 00	 call	 ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
$LN107@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00108	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN103@push_back:
  0010d	cc		 int	 3
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 917  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 829  :         if (_Mylast != _My_data._Myend) {

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00009	74 0f		 je	 SHORT $LN4@push_back

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  00012	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 918  :         _Emplace_one_at_back(_Val);
; 919  :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN4@push_back:

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0001a	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAHABH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>

; 918  :         _Emplace_one_at_back(_Val);
; 919  :     }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 814  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN5@vector

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN24@vector

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN21@vector

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN24@vector:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2082 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@vector:
  00049	5e		 pop	 esi

; 820  :     }

  0004a	c3		 ret	 0
$LN21@vector:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@vector:
  00050	cc		 int	 3
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?expr@CPoly@@IAEXXZ
_TEXT	SEGMENT
?expr@CPoly@@IAEXXZ PROC				; CPoly::expr, COMDAT
; _this$ = ecx

; 279  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 280  :     int t;
; 281  : 
; 282  :     switch (iLookAhead)

  00003	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00006	83 e8 2b	 sub	 eax, 43			; 0000002bH
  00009	74 05		 je	 SHORT $LN8@expr
  0000b	83 e8 02	 sub	 eax, 2
  0000e	75 19		 jne	 SHORT $LN2@expr
$LN8@expr:

; 283  :     {
; 284  : 	case '+':
; 285  : 	case '-':
; 286  : 	    uiLookPos--;

  00010	ff 4e 24	 dec	 DWORD PTR [esi+36]
  00013	0f 57 c0	 xorps	 xmm0, xmm0

; 287  : 	    iLookAhead = POLY_NUM;

  00016	c7 46 18 09 00
	00 00		 mov	 DWORD PTR [esi+24], 9

; 288  : 	    iNumToken = iToken = 0;

  0001d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00024	f2 0f 11 46 10	 movsd	 QWORD PTR [esi+16], xmm0
$LN2@expr:

; 289  : 
; 290  :     }
; 291  : 
; 292  :     term();

  00029	e8 00 00 00 00	 call	 ?term@CPoly@@IAEXXZ	; CPoly::term

; 293  : 
; 294  :     while (!ErrorOccur)

  0002e	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  00032	75 3a		 jne	 SHORT $LN5@expr
  00034	57		 push	 edi
$LL4@expr:

; 295  :     {
; 296  : 	switch (iLookAhead)

  00035	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00038	8d 47 f5	 lea	 eax, DWORD PTR [edi-11]
  0003b	83 f8 22	 cmp	 eax, 34			; 00000022H
  0003e	77 30		 ja	 SHORT $LN15@expr
  00040	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN21@expr[eax]
  00047	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN22@expr[eax*4]
$LN10@expr:

; 297  : 	{
; 298  : 	    case '+':
; 299  : 	    case '-':
; 300  : 		t=iLookAhead;
; 301  : 		match(t);

  0004e	57		 push	 edi
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match

; 302  : 		term();

  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?term@CPoly@@IAEXXZ	; CPoly::term

; 303  : 		emit(t,POLY_NONE);

  0005d	6a 00		 push	 0
  0005f	57		 push	 edi
  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  00067	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  0006b	74 c8		 je	 SHORT $LL4@expr
$LN26@expr:
  0006d	5f		 pop	 edi
$LN5@expr:
  0006e	5e		 pop	 esi

; 308  : 					  //THROW( new CParseException("Error Parsing"));
; 309  : 					  return;
; 310  : 	}
; 311  :     }
; 312  : }

  0006f	c3		 ret	 0
$LN15@expr:
  00070	5f		 pop	 edi

; 304  : 		continue;
; 305  : 	    case POLY_EOS: case ')': case ',': return;
; 306  : 	    default:
; 307  : 					  error();

  00071	8b ce		 mov	 ecx, esi
  00073	5e		 pop	 esi
  00074	e9 00 00 00 00	 jmp	 ?error@CPoly@@IAEXXZ	; CPoly::error
  00079	0f 1f 00	 npad	 3
$LN22@expr:

; 308  : 					  //THROW( new CParseException("Error Parsing"));
; 309  : 					  return;
; 310  : 	}
; 311  :     }
; 312  : }

  0007c	00 00 00 00	 DD	 $LN26@expr
  00080	00 00 00 00	 DD	 $LN10@expr
  00084	00 00 00 00	 DD	 $LN15@expr
$LN21@expr:
  00088	00		 DB	 0
  00089	02		 DB	 2
  0008a	02		 DB	 2
  0008b	02		 DB	 2
  0008c	02		 DB	 2
  0008d	02		 DB	 2
  0008e	02		 DB	 2
  0008f	02		 DB	 2
  00090	02		 DB	 2
  00091	02		 DB	 2
  00092	02		 DB	 2
  00093	02		 DB	 2
  00094	02		 DB	 2
  00095	02		 DB	 2
  00096	02		 DB	 2
  00097	02		 DB	 2
  00098	02		 DB	 2
  00099	02		 DB	 2
  0009a	02		 DB	 2
  0009b	02		 DB	 2
  0009c	02		 DB	 2
  0009d	02		 DB	 2
  0009e	02		 DB	 2
  0009f	02		 DB	 2
  000a0	02		 DB	 2
  000a1	02		 DB	 2
  000a2	02		 DB	 2
  000a3	02		 DB	 2
  000a4	02		 DB	 2
  000a5	02		 DB	 2
  000a6	00		 DB	 0
  000a7	02		 DB	 2
  000a8	01		 DB	 1
  000a9	00		 DB	 0
  000aa	01		 DB	 1
?expr@CPoly@@IAEXXZ ENDP				; CPoly::expr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?error@CPoly@@IAEXXZ
_TEXT	SEGMENT
?error@CPoly@@IAEXXZ PROC				; CPoly::error, COMDAT
; _this$ = ecx

; 316  :     iErrorPos=uiLookPos;

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 317  :     ErrorOccur=true;

  00006	c6 41 20 01	 mov	 BYTE PTR [ecx+32], 1

; 318  : }

  0000a	c3		 ret	 0
?error@CPoly@@IAEXXZ ENDP				; CPoly::error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?lexan@CPoly@@IAEHXZ
_TEXT	SEGMENT
_tt$1$ = -48						; size = 8
_localSymbol$2 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?lexan@CPoly@@IAEHXZ PROC				; CPoly::lexan, COMDAT
; _this$ = ecx

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?lexan@CPoly@@IAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx

; 322  :     int t;
; 323  :     double tt;
; 324  : 
; 325  :     while (uiLookPos < strData.size())

  0002d	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00030	8b 5e 70	 mov	 ebx, DWORD PTR [esi+112]
  00033	3b c3		 cmp	 eax, ebx
  00035	73 2d		 jae	 SHORT $LN160@lexan
$LL2@lexan:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00037	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]

; 416  :         value_type* _Result = _Bx._Buf;

  0003a	8d 56 60	 lea	 edx, DWORD PTR [esi+96]

; 434  :         return _Myres > _Small_string_capacity;

  0003d	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00040	76 03		 jbe	 SHORT $LN181@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00042	8b 56 60	 mov	 edx, DWORD PTR [esi+96]
$LN181@lexan:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 327  : 	if (strData[uiLookPos] == ' ' || strData[uiLookPos] == '\t')

  00045	80 3c 10 20	 cmp	 BYTE PTR [eax+edx], 32	; 00000020H
  00049	74 11		 je	 SHORT $LN14@lexan
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 416  :         value_type* _Result = _Bx._Buf;

  0004b	8d 56 60	 lea	 edx, DWORD PTR [esi+96]

; 434  :         return _Myres > _Small_string_capacity;

  0004e	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00051	76 03		 jbe	 SHORT $LN180@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00053	8b 56 60	 mov	 edx, DWORD PTR [esi+96]
$LN180@lexan:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 327  : 	if (strData[uiLookPos] == ' ' || strData[uiLookPos] == '\t')

  00056	80 3c 10 09	 cmp	 BYTE PTR [eax+edx], 9
  0005a	75 29		 jne	 SHORT $LN12@lexan
$LN14@lexan:

; 375  : 	}
; 376  : 	uiLookPos++;

  0005c	40		 inc	 eax
  0005d	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00060	3b c3		 cmp	 eax, ebx
  00062	72 d3		 jb	 SHORT $LL2@lexan
$LN160@lexan:

; 377  :     }
; 378  :     return POLY_EOS;

  00064	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
$LN1@lexan:

; 379  : }

  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007a	33 cd		 xor	 ecx, ebp
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
$LN12@lexan:

; 329  : 	else if (isdigit(strData[uiLookPos]))

  00085	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00088	83 ff 0f	 cmp	 edi, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0008b	76 02		 jbe	 SHORT $LN182@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0008d	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN182@lexan:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 329  : 	else if (isdigit(strData[uiLookPos]))

  0008f	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _isdigit
  00099	83 c4 04	 add	 esp, 4
  0009c	85 c0		 test	 eax, eax
  0009e	0f 84 0e 01 00
	00		 je	 $LN15@lexan

; 330  : 	{
; 331  : 	    t = 0;
; 332  : 	    for (;uiLookPos<strData.size();uiLookPos++)

  000a4	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  000a7	33 db		 xor	 ebx, ebx
  000a9	3b 56 70	 cmp	 edx, DWORD PTR [esi+112]
  000ac	73 44		 jae	 SHORT $LN191@lexan
  000ae	66 90		 npad	 2
$LL6@lexan:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b0	83 7e 74 0f	 cmp	 DWORD PTR [esi+116], 15	; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  000b4	8d 46 60	 lea	 eax, DWORD PTR [esi+96]

; 417  :         if (_Large_mode_engaged()) {

  000b7	76 03		 jbe	 SHORT $LN184@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000b9	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
$LN184@lexan:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 334  : 		if (isdigit(strData[uiLookPos]))

  000bc	0f be 04 02	 movsx	 eax, BYTE PTR [edx+eax]
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 _isdigit
  000c6	83 c4 04	 add	 esp, 4
  000c9	85 c0		 test	 eax, eax
  000cb	74 25		 je	 SHORT $LN191@lexan
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000cd	83 7e 74 0f	 cmp	 DWORD PTR [esi+116], 15	; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  000d1	8d 46 60	 lea	 eax, DWORD PTR [esi+96]

; 417  :         if (_Large_mode_engaged()) {

  000d4	76 03		 jbe	 SHORT $LN183@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  000d6	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
$LN183@lexan:

; 2247 :         return _Mypair._Myval2._Myptr()[_Off];

  000d9	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 335  : 		    t = t * 10 + strData[uiLookPos] - '0';

  000dc	8d 1c 9b	 lea	 ebx, DWORD PTR [ebx+ebx*4]
  000df	8d 5b e8	 lea	 ebx, DWORD PTR [ebx-24]
  000e2	0f be 0c 02	 movsx	 ecx, BYTE PTR [edx+eax]
  000e6	42		 inc	 edx
  000e7	89 56 24	 mov	 DWORD PTR [esi+36], edx
  000ea	8d 1c 59	 lea	 ebx, DWORD PTR [ecx+ebx*2]
  000ed	3b 56 70	 cmp	 edx, DWORD PTR [esi+112]
  000f0	72 be		 jb	 SHORT $LL6@lexan
$LN191@lexan:

; 336  : 		else
; 337  : 		    break;
; 338  : 	    }
; 339  : 	    iToken=t;
; 340  : 	    tt=0.1;

  000f2	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3fb999999999999a

; 342  : 	    if (uiLookPos<strData.size() && strData[uiLookPos]=='.')

  000fa	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  000fd	8b 56 70	 mov	 edx, DWORD PTR [esi+112]
  00100	f2 0f 11 45 d0	 movsd	 QWORD PTR _tt$1$[ebp], xmm0
  00105	0f 57 c0	 xorps	 xmm0, xmm0
  00108	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0010b	f2 0f 11 46 10	 movsd	 QWORD PTR [esi+16], xmm0
  00110	3b ca		 cmp	 ecx, edx
  00112	0f 83 7d 00 00
	00		 jae	 $LN192@lexan
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00118	83 7e 74 0f	 cmp	 DWORD PTR [esi+116], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 342  : 	    if (uiLookPos<strData.size() && strData[uiLookPos]=='.')

  0011c	8d 46 60	 lea	 eax, DWORD PTR [esi+96]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 417  :         if (_Large_mode_engaged()) {

  0011f	76 02		 jbe	 SHORT $LN185@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00121	8b 00		 mov	 eax, DWORD PTR [eax]
$LN185@lexan:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 342  : 	    if (uiLookPos<strData.size() && strData[uiLookPos]=='.')

  00123	80 3c 01 2e	 cmp	 BYTE PTR [ecx+eax], 46	; 0000002eH
  00127	75 6c		 jne	 SHORT $LN192@lexan

; 343  : 	    {
; 344  : 		uiLookPos++;

  00129	41		 inc	 ecx
  0012a	89 4e 24	 mov	 DWORD PTR [esi+36], ecx

; 345  : 		for (;uiLookPos<strData.size();uiLookPos++,tt*=0.1)

  0012d	3b ca		 cmp	 ecx, edx
  0012f	73 64		 jae	 SHORT $LN192@lexan
$LL9@lexan:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00131	83 7e 74 0f	 cmp	 DWORD PTR [esi+116], 15	; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00135	8d 46 60	 lea	 eax, DWORD PTR [esi+96]

; 417  :         if (_Large_mode_engaged()) {

  00138	76 03		 jbe	 SHORT $LN187@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0013a	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
$LN187@lexan:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 347  : 		    if (isdigit(strData[uiLookPos]))

  0013d	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00141	50		 push	 eax
  00142	e8 00 00 00 00	 call	 _isdigit
  00147	83 c4 04	 add	 esp, 4
  0014a	85 c0		 test	 eax, eax
  0014c	74 47		 je	 SHORT $LN192@lexan
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0014e	83 7e 74 0f	 cmp	 DWORD PTR [esi+116], 15	; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00152	8d 46 60	 lea	 eax, DWORD PTR [esi+96]

; 417  :         if (_Large_mode_engaged()) {

  00155	76 03		 jbe	 SHORT $LN186@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00157	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
$LN186@lexan:

; 2247 :         return _Mypair._Myval2._Myptr()[_Off];

  0015a	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 348  : 			iNumToken+=tt*(strData[uiLookPos]-'0');

  0015d	f2 0f 10 4d d0	 movsd	 xmm1, QWORD PTR _tt$1$[ebp]
  00162	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00166	41		 inc	 ecx
  00167	83 e8 30	 sub	 eax, 48			; 00000030H
  0016a	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
  0016d	66 0f 6e c0	 movd	 xmm0, eax
  00171	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00175	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00179	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fb999999999999a
  00181	f2 0f 58 46 10	 addsd	 xmm0, QWORD PTR [esi+16]
  00186	f2 0f 11 4d d0	 movsd	 QWORD PTR _tt$1$[ebp], xmm1
  0018b	f2 0f 11 46 10	 movsd	 QWORD PTR [esi+16], xmm0
  00190	3b 4e 70	 cmp	 ecx, DWORD PTR [esi+112]
  00193	72 9c		 jb	 SHORT $LL9@lexan
$LN192@lexan:
  00195	66 0f 6e 46 08	 movd	 xmm0, DWORD PTR [esi+8]

; 349  : 		    else
; 350  : 			break;
; 351  : 		}
; 352  : 	    }
; 353  : 	    iNumToken+=iToken;
; 354  : 	    return POLY_NUM;

  0019a	b8 09 00 00 00	 mov	 eax, 9
  0019f	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001a3	f2 0f 58 46 10	 addsd	 xmm0, QWORD PTR [esi+16]
  001a8	f2 0f 11 46 10	 movsd	 QWORD PTR [esi+16], xmm0
  001ad	e9 b7 fe ff ff	 jmp	 $LN1@lexan
$LN15@lexan:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001b2	83 7e 74 0f	 cmp	 DWORD PTR [esi+116], 15	; 0000000fH
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 356  : 	else if (isalpha(strData[uiLookPos]))

  001b6	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 417  :         if (_Large_mode_engaged()) {

  001b9	76 02		 jbe	 SHORT $LN188@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  001bb	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN188@lexan:

; 2247 :         return _Mypair._Myval2._Myptr()[_Off];

  001bd	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 356  : 	else if (isalpha(strData[uiLookPos]))

  001c0	0f be 04 08	 movsx	 eax, BYTE PTR [eax+ecx]
  001c4	50		 push	 eax
  001c5	e8 00 00 00 00	 call	 _isalpha
  001ca	83 c4 04	 add	 esp, 4
  001cd	85 c0		 test	 eax, eax
  001cf	0f 84 a0 00 00
	00		 je	 $LN22@lexan

; 357  : 	{
; 358  : 	    string localSymbol("");

  001d5	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  001da	8d 4d d8	 lea	 ecx, DWORD PTR _localSymbol$2[ebp]
  001dd	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 359  : 	    while (uiLookPos<strData.size() && isalpha(strData[uiLookPos]))

  001e2	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  001e5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001ec	3b 46 70	 cmp	 eax, DWORD PTR [esi+112]
  001ef	73 45		 jae	 SHORT $LN193@lexan
$LL10@lexan:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001f1	83 7e 74 0f	 cmp	 DWORD PTR [esi+116], 15	; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  001f5	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]

; 417  :         if (_Large_mode_engaged()) {

  001f8	76 03		 jbe	 SHORT $LN190@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  001fa	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
$LN190@lexan:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 359  : 	    while (uiLookPos<strData.size() && isalpha(strData[uiLookPos]))

  001fd	0f be 04 08	 movsx	 eax, BYTE PTR [eax+ecx]
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 _isalpha
  00207	83 c4 04	 add	 esp, 4
  0020a	85 c0		 test	 eax, eax
  0020c	74 28		 je	 SHORT $LN193@lexan
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0020e	83 7e 74 0f	 cmp	 DWORD PTR [esi+116], 15	; 0000000fH

; 416  :         value_type* _Result = _Bx._Buf;

  00212	8d 4e 60	 lea	 ecx, DWORD PTR [esi+96]

; 417  :         if (_Large_mode_engaged()) {

  00215	76 03		 jbe	 SHORT $LN189@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00217	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
$LN189@lexan:

; 1454 :         push_back(_Ch);

  0021a	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0021d	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  00221	8d 4d d8	 lea	 ecx, DWORD PTR _localSymbol$2[ebp]
  00224	50		 push	 eax
  00225	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 362  : 		uiLookPos++;

  0022a	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0022d	40		 inc	 eax
  0022e	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00231	3b 46 70	 cmp	 eax, DWORD PTR [esi+112]
  00234	72 bb		 jb	 SHORT $LL10@lexan
$LN193@lexan:

; 363  : 	    }
; 364  : 	    iToken= find(localSymbol);

  00236	8d 45 d8	 lea	 eax, DWORD PTR _localSymbol$2[ebp]
  00239	8b ce		 mov	 ecx, esi
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 ?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPoly::find
  00241	8b c8		 mov	 ecx, eax
  00243	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 365  : 	    if (iToken==-1)

  00246	83 f9 ff	 cmp	 ecx, -1
  00249	75 12		 jne	 SHORT $LN24@lexan

; 366  : 	    {
; 367  : 		iToken=insert(localSymbol,POLY_ID);

  0024b	6a 0a		 push	 10			; 0000000aH
  0024d	8d 45 d8	 lea	 eax, DWORD PTR _localSymbol$2[ebp]
  00250	8b ce		 mov	 ecx, esi
  00252	50		 push	 eax
  00253	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
  00258	8b c8		 mov	 ecx, eax
  0025a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
$LN24@lexan:

; 368  : 	    }
; 369  : 	    return lSymbol[(/*FindIndex*/(iToken))]->token;

  0025d	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00260	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00263	8d 4d d8	 lea	 ecx, DWORD PTR _localSymbol$2[ebp]
  00266	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  00269	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0026e	8b c6		 mov	 eax, esi
  00270	e9 f4 fd ff ff	 jmp	 $LN1@lexan
$LN22@lexan:

; 374  : 	    return strData[uiLookPos++];

  00275	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00278	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0027f	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00282	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00285	83 c6 60	 add	 esi, 96			; 00000060H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00288	83 7e 14 0f	 cmp	 DWORD PTR [esi+20], 15	; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  0028c	76 02		 jbe	 SHORT $LN146@lexan

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  0028e	8b 36		 mov	 esi, DWORD PTR [esi]
$LN146@lexan:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 374  : 	    return strData[uiLookPos++];

  00290	0f be 04 0e	 movsx	 eax, BYTE PTR [esi+ecx]
  00294	e9 d0 fd ff ff	 jmp	 $LN1@lexan
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lexan@CPoly@@IAEHXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _localSymbol$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?lexan@CPoly@@IAEHXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?lexan@CPoly@@IAEHXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?lexan@CPoly@@IAEHXZ ENDP				; CPoly::lexan
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?term@CPoly@@IAEXXZ
_TEXT	SEGMENT
?term@CPoly@@IAEXXZ PROC				; CPoly::term, COMDAT
; _this$ = ecx

; 382  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 383  :     int t;
; 384  :     factor();

  00003	e8 00 00 00 00	 call	 ?factor@CPoly@@IAEXXZ	; CPoly::factor

; 385  :     while (!ErrorOccur)

  00008	80 7f 20 00	 cmp	 BYTE PTR [edi+32], 0
  0000c	75 34		 jne	 SHORT $LN16@term
  0000e	56		 push	 esi
  0000f	90		 npad	 1
$LL2@term:

; 386  :     {
; 387  : 	switch (iLookAhead)

  00010	8b 77 18	 mov	 esi, DWORD PTR [edi+24]
  00013	83 fe 25	 cmp	 esi, 37			; 00000025H
  00016	74 0a		 je	 SHORT $LN6@term
  00018	83 fe 2a	 cmp	 esi, 42			; 0000002aH
  0001b	74 05		 je	 SHORT $LN6@term
  0001d	83 fe 2f	 cmp	 esi, 47			; 0000002fH
  00020	75 1f		 jne	 SHORT $LN20@term
$LN6@term:

; 388  : 	{
; 389  : 	    case '*':
; 390  : 	    case '/':
; 391  : 	    case '%':
; 392  : 		t=iLookAhead;
; 393  : 		match(t);

  00022	56		 push	 esi
  00023	8b cf		 mov	 ecx, edi
  00025	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match

; 394  : 		factor();

  0002a	8b cf		 mov	 ecx, edi
  0002c	e8 00 00 00 00	 call	 ?factor@CPoly@@IAEXXZ	; CPoly::factor

; 395  : 		emit(t,POLY_NONE);

  00031	6a 00		 push	 0
  00033	56		 push	 esi
  00034	8b cf		 mov	 ecx, edi
  00036	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  0003b	80 7f 20 00	 cmp	 BYTE PTR [edi+32], 0
  0003f	74 cf		 je	 SHORT $LL2@term
$LN20@term:
  00041	5e		 pop	 esi
$LN16@term:
  00042	5f		 pop	 edi

; 396  : 		continue;
; 397  : 	    default:
; 398  : 		return;
; 399  : 	}
; 400  :     }
; 401  : }

  00043	c3		 ret	 0
?term@CPoly@@IAEXXZ ENDP				; CPoly::term
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?factor@CPoly@@IAEXXZ
_TEXT	SEGMENT
?factor@CPoly@@IAEXXZ PROC				; CPoly::factor, COMDAT
; _this$ = ecx

; 404  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 405  :     int t;
; 406  :     expo();

  00003	e8 00 00 00 00	 call	 ?expo@CPoly@@IAEXXZ	; CPoly::expo

; 407  :     while (!ErrorOccur)

  00008	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  0000c	75 29		 jne	 SHORT $LN14@factor
  0000e	66 90		 npad	 2
$LL2@factor:

; 408  :     {
; 409  : 	switch (iLookAhead)

  00010	83 7e 18 5e	 cmp	 DWORD PTR [esi+24], 94	; 0000005eH
  00014	75 21		 jne	 SHORT $LN14@factor

; 410  : 	{
; 411  : 	    case '^':
; 412  : 		t=iLookAhead;
; 413  : 		match(t);

  00016	6a 5e		 push	 94			; 0000005eH
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match

; 414  : 		expo();

  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?expo@CPoly@@IAEXXZ	; CPoly::expo

; 415  : 		emit(t,POLY_NONE);

  00026	6a 00		 push	 0
  00028	6a 5e		 push	 94			; 0000005eH
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  00031	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  00035	74 d9		 je	 SHORT $LL2@factor
$LN14@factor:
  00037	5e		 pop	 esi

; 416  : 		continue;
; 417  : 	    default:
; 418  : 		return;
; 419  : 	}
; 420  :     }
; 421  : }

  00038	c3		 ret	 0
?factor@CPoly@@IAEXXZ ENDP				; CPoly::factor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?expo@CPoly@@IAEXXZ
_TEXT	SEGMENT
?expo@CPoly@@IAEXXZ PROC				; CPoly::expo, COMDAT
; _this$ = ecx

; 424  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 425  :     int t;
; 426  :     switch (iLookAhead)

  00004	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  00007	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0000a	83 f8 27	 cmp	 eax, 39			; 00000027H
  0000d	0f 87 9b 00 00
	00		 ja	 $LN25@expo
  00013	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN27@expo[eax]
  0001a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN28@expo[eax*4]
$LN4@expo:

; 427  :     {
; 428  : 	case '(':
; 429  : 	    match('('); expr(); match(')'); break;

  00021	6a 28		 push	 40			; 00000028H
  00023	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?expr@CPoly@@IAEXXZ	; CPoly::expr
  0002f	6a 29		 push	 41			; 00000029H

; 457  : 	case POLY_EOS:
; 458  : 	    break;
; 459  : 	default:
; 460  : 	    error();
; 461  : 	    //THROW( new CParseException("Error Parsing"));
; 462  :     }
; 463  : }

  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
$LN2@expo:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	c3		 ret	 0
$LN5@expo:

; 430  : 	case POLY_NUM:
; 431  : 	    emit(POLY_NUM, iToken); match(POLY_NUM); break;

  0003b	ff 76 08	 push	 DWORD PTR [esi+8]
  0003e	6a 09		 push	 9
  00040	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  00045	6a 09		 push	 9

; 457  : 	case POLY_EOS:
; 458  : 	    break;
; 459  : 	default:
; 460  : 	    error();
; 461  : 	    //THROW( new CParseException("Error Parsing"));
; 462  :     }
; 463  : }

  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	c3		 ret	 0
$LN6@expo:

; 432  : 	case POLY_ID:
; 433  : 	    emit(POLY_ID,(int)/*FindIndex*/(iToken)); match(POLY_ID); break;

  00051	ff 76 08	 push	 DWORD PTR [esi+8]
  00054	6a 0a		 push	 10			; 0000000aH
  00056	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  0005b	6a 0a		 push	 10			; 0000000aH

; 457  : 	case POLY_EOS:
; 458  : 	    break;
; 459  : 	default:
; 460  : 	    error();
; 461  : 	    //THROW( new CParseException("Error Parsing"));
; 462  :     }
; 463  : }

  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	c3		 ret	 0
$LN7@expo:

; 434  : 	case POLY_ROOT:
; 435  : 	case POLY_SIN:
; 436  : 	case POLY_COT:
; 437  : 	case POLY_TAN:
; 438  : 	case POLY_CSC:
; 439  : 	case POLY_SEC:
; 440  : 	case POLY_LN:
; 441  : 	case POLY_LOG10:
; 442  : 	case POLY_COS:
; 443  : 	case POLY_ABS:
; 444  : 	case POLY_FLOOR:
; 445  : 	    t=iLookAhead;
; 446  : 	    match(iLookAhead); match('('); expr(); match(')'); emit(t,iToken);

  00067	57		 push	 edi
  00068	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  0006d	6a 28		 push	 40			; 00000028H
$LN32@expo:

; 457  : 	case POLY_EOS:
; 458  : 	    break;
; 459  : 	default:
; 460  : 	    error();
; 461  : 	    //THROW( new CParseException("Error Parsing"));
; 462  :     }
; 463  : }

  0006f	8b ce		 mov	 ecx, esi
  00071	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ?expr@CPoly@@IAEXXZ	; CPoly::expr
  0007d	6a 29		 push	 41			; 00000029H
  0007f	8b ce		 mov	 ecx, esi
  00081	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  00086	ff 76 08	 push	 DWORD PTR [esi+8]
  00089	8b ce		 mov	 ecx, esi
  0008b	57		 push	 edi
  0008c	e8 00 00 00 00	 call	 ?emit@CPoly@@IAEXHH@Z	; CPoly::emit
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	c3		 ret	 0
$LN18@expo:

; 447  : 	    break;
; 448  : 	case POLY_LOG:
; 449  : 	case POLY_MINF:
; 450  : 	case POLY_MAXF:
; 451  : 	case POLY_IRAND:
; 452  : 	case POLY_FRAND:
; 453  : 	case POLY_MOD:
; 454  : 	    t=iLookAhead;
; 455  : 	    match(iLookAhead); match('('); expr(); match(','); expr(); match(')'); emit(t,iToken);

  00094	57		 push	 edi
  00095	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  0009a	6a 28		 push	 40			; 00000028H
  0009c	8b ce		 mov	 ecx, esi
  0009e	e8 00 00 00 00	 call	 ?match@CPoly@@IAEXH@Z	; CPoly::match
  000a3	8b ce		 mov	 ecx, esi
  000a5	e8 00 00 00 00	 call	 ?expr@CPoly@@IAEXXZ	; CPoly::expr
  000aa	6a 2c		 push	 44			; 0000002cH

; 456  : 	    break;

  000ac	eb c1		 jmp	 SHORT $LN32@expo
$LN25@expo:
  000ae	5f		 pop	 edi

; 457  : 	case POLY_EOS:
; 458  : 	    break;
; 459  : 	default:
; 460  : 	    error();
; 461  : 	    //THROW( new CParseException("Error Parsing"));
; 462  :     }
; 463  : }

  000af	5e		 pop	 esi
  000b0	e9 00 00 00 00	 jmp	 ?error@CPoly@@IAEXXZ	; CPoly::error
  000b5	0f 1f 00	 npad	 3
$LN28@expo:
  000b8	00 00 00 00	 DD	 $LN7@expo
  000bc	00 00 00 00	 DD	 $LN5@expo
  000c0	00 00 00 00	 DD	 $LN6@expo
  000c4	00 00 00 00	 DD	 $LN2@expo
  000c8	00 00 00 00	 DD	 $LN18@expo
  000cc	00 00 00 00	 DD	 $LN4@expo
  000d0	00 00 00 00	 DD	 $LN25@expo
$LN27@expo:
  000d4	00		 DB	 0
  000d5	06		 DB	 6
  000d6	06		 DB	 6
  000d7	06		 DB	 6
  000d8	06		 DB	 6
  000d9	06		 DB	 6
  000da	06		 DB	 6
  000db	06		 DB	 6
  000dc	01		 DB	 1
  000dd	02		 DB	 2
  000de	03		 DB	 3
  000df	00		 DB	 0
  000e0	00		 DB	 0
  000e1	00		 DB	 0
  000e2	00		 DB	 0
  000e3	00		 DB	 0
  000e4	00		 DB	 0
  000e5	04		 DB	 4
  000e6	00		 DB	 0
  000e7	00		 DB	 0
  000e8	00		 DB	 0
  000e9	04		 DB	 4
  000ea	04		 DB	 4
  000eb	04		 DB	 4
  000ec	04		 DB	 4
  000ed	04		 DB	 4
  000ee	00		 DB	 0
  000ef	06		 DB	 6
  000f0	06		 DB	 6
  000f1	06		 DB	 6
  000f2	06		 DB	 6
  000f3	06		 DB	 6
  000f4	06		 DB	 6
  000f5	06		 DB	 6
  000f6	06		 DB	 6
  000f7	06		 DB	 6
  000f8	06		 DB	 6
  000f9	06		 DB	 6
  000fa	06		 DB	 6
  000fb	05		 DB	 5
?expo@CPoly@@IAEXXZ ENDP				; CPoly::expo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?match@CPoly@@IAEXH@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
?match@CPoly@@IAEXH@Z PROC				; CPoly::match, COMDAT
; _this$ = ecx

; 466  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 467  :     if (iLookAhead==t) iLookAhead=lexan(); else error();

  00006	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00009	3b 45 08	 cmp	 eax, DWORD PTR _t$[ebp]
  0000c	75 0d		 jne	 SHORT $LN2@match
  0000e	e8 00 00 00 00	 call	 ?lexan@CPoly@@IAEHXZ	; CPoly::lexan
  00013	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00016	5e		 pop	 esi

; 468  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN2@match:

; 467  :     if (iLookAhead==t) iLookAhead=lexan(); else error();

  0001b	e8 00 00 00 00	 call	 ?error@CPoly@@IAEXXZ	; CPoly::error
  00020	5e		 pop	 esi

; 468  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?match@CPoly@@IAEXH@Z ENDP				; CPoly::match
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?emit@CPoly@@IAEXHH@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
$T1 = 8							; size = 4
$T2 = 8							; size = 4
$T3 = 8							; size = 4
$T4 = 8							; size = 4
$T5 = 8							; size = 4
$T6 = 8							; size = 4
_tval$ = 12						; size = 4
?emit@CPoly@@IAEXHH@Z PROC				; CPoly::emit, COMDAT
; _this$ = ecx

; 471  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 472  :     switch (t)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _t$[ebp]
  00009	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0000c	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  0000f	0f 87 1c 01 00
	00		 ja	 $LN29@emit
  00015	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN48@emit[eax]
  0001c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN49@emit[eax*4]
$LN4@emit:

; 473  :     {
; 474  : 	case '+':
; 475  : 	    tokenBase.push_back(POLY_PLU);

  00023	8d 45 08	 lea	 eax, DWORD PTR $T1[ebp]
  00026	c7 45 08 03 00
	00 00		 mov	 DWORD PTR $T1[ebp], 3
  0002d	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  00036	5e		 pop	 esi

; 524  : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
$LN5@emit:

; 476  : 	    break;
; 477  : 	case '-':
; 478  : 	    tokenBase.push_back(POLY_MIN);

  0003b	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  0003e	c7 45 08 05 00
	00 00		 mov	 DWORD PTR $T2[ebp], 5
  00045	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  0004e	5e		 pop	 esi

; 524  : }

  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
$LN6@emit:

; 479  : 	    break;
; 480  : 	case '*':
; 481  : 	    tokenBase.push_back(POLY_MUL);

  00053	8d 45 08	 lea	 eax, DWORD PTR $T3[ebp]
  00056	c7 45 08 02 00
	00 00		 mov	 DWORD PTR $T3[ebp], 2
  0005d	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  00066	5e		 pop	 esi

; 524  : }

  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN7@emit:

; 482  : 	    break;
; 483  : 	case '/':
; 484  : 	    tokenBase.push_back(POLY_DIV);

  0006b	8d 45 08	 lea	 eax, DWORD PTR $T4[ebp]
  0006e	c7 45 08 06 00
	00 00		 mov	 DWORD PTR $T4[ebp], 6
  00075	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  0007e	5e		 pop	 esi

; 524  : }

  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
$LN8@emit:

; 485  : 	    break;
; 486  : 	case '%':
; 487  : 	    tokenBase.push_back(POLY_MOD);

  00083	8d 45 08	 lea	 eax, DWORD PTR $T5[ebp]
  00086	c7 45 08 1a 00
	00 00		 mov	 DWORD PTR $T5[ebp], 26	; 0000001aH
  0008d	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  00096	5e		 pop	 esi

; 524  : }

  00097	5d		 pop	 ebp
  00098	c2 08 00	 ret	 8
$LN9@emit:

; 488  : 	    break;
; 489  : 	case '^':
; 490  : 	    tokenBase.push_back(POLY_POW);

  0009b	8d 45 08	 lea	 eax, DWORD PTR $T6[ebp]
  0009e	c7 45 08 04 00
	00 00		 mov	 DWORD PTR $T6[ebp], 4
  000a5	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector<int,std::allocator<int> >::push_back
  000ae	5e		 pop	 esi

; 524  : }

  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
$LN10@emit:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  000b3	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000b6	3b 46 30	 cmp	 eax, DWORD PTR [esi+48]
  000b9	74 0b		 je	 SHORT $LN34@emit

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000bb	89 08		 mov	 DWORD PTR [eax], ecx

; 854  :         ++_Mylast;

  000bd	83 46 2c 04	 add	 DWORD PTR [esi+44], 4
  000c1	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 524  : }

  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
$LN34@emit:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000c6	8d 4d 08	 lea	 ecx, DWORD PTR _t$[ebp]
  000c9	51		 push	 ecx
  000ca	50		 push	 eax
  000cb	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  000ce	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAHABH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>
  000d3	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 524  : }

  000d4	5d		 pop	 ebp
  000d5	c2 08 00	 ret	 8
$LN27@emit:

; 491  : 	    break;
; 492  : 	case POLY_ROOT:
; 493  : 	case POLY_SIN:
; 494  : 	case POLY_TAN:
; 495  : 	case POLY_COT:
; 496  : 	case POLY_COS:
; 497  : 	case POLY_CSC:
; 498  : 	case POLY_SEC:
; 499  : 	case POLY_LOG:
; 500  : 	case POLY_LN:
; 501  : 	case POLY_LOG10:
; 502  : 	case POLY_ABS:
; 503  : 	case POLY_MINF:
; 504  : 	case POLY_MAXF:
; 505  : 	case POLY_IRAND:
; 506  : 	case POLY_FRAND:
; 507  : 	case POLY_MOD:
; 508  : 	case POLY_FLOOR:
; 509  : 	    tokenBase.push_back(t);
; 510  : 	    break;
; 511  : 	case POLY_NUM:
; 512  : 	    tokenBase.push_back(t);

  000d8	8d 45 08	 lea	 eax, DWORD PTR _t$[ebp]
  000db	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  000e4	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 513  : 	    numBase.push_back(iNumToken);

  000e7	8d 56 34	 lea	 edx, DWORD PTR [esi+52]
  000ea	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  000ed	3b 46 3c	 cmp	 eax, DWORD PTR [esi+60]
  000f0	74 13		 je	 SHORT $LN41@emit
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 506  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  000f2	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  000f6	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 854  :         ++_Mylast;

  000fa	83 c0 08	 add	 eax, 8
  000fd	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00100	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 524  : }

  00101	5d		 pop	 ebp
  00102	c2 08 00	 ret	 8
$LN41@emit:
  00105	5e		 pop	 esi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00106	89 4d 0c	 mov	 DWORD PTR _tval$[ebp], ecx
  00109	89 45 08	 mov	 DWORD PTR _t$[ebp], eax
  0010c	8b ca		 mov	 ecx, edx
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 524  : }

  0010e	5d		 pop	 ebp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0010f	e9 00 00 00 00	 jmp	 ??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@AAEPANQANABN@Z ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>
$LN28@emit:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 516  : 	    tokenBase.push_back(t);

  00114	8d 45 08	 lea	 eax, DWORD PTR _t$[ebp]
  00117	50		 push	 eax
  00118	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  0011b	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back

; 517  : 	    tokenBase.push_back(tval); break;

  00120	8d 45 0c	 lea	 eax, DWORD PTR _tval$[ebp]
  00123	50		 push	 eax
  00124	8d 4e 28	 lea	 ecx, DWORD PTR [esi+40]
  00127	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
  0012c	5e		 pop	 esi

; 524  : }

  0012d	5d		 pop	 ebp
  0012e	c2 08 00	 ret	 8
$LN29@emit:

; 518  : 	default:
; 519  : 	    error();

  00131	8b ce		 mov	 ecx, esi
  00133	e8 00 00 00 00	 call	 ?error@CPoly@@IAEXXZ	; CPoly::error

; 520  : 	    Clear();

  00138	8b ce		 mov	 ecx, esi
  0013a	e8 00 00 00 00	 call	 ?Clear@CPoly@@QAEXXZ	; CPoly::Clear
  0013f	5e		 pop	 esi

; 524  : }

  00140	5d		 pop	 ebp
  00141	c2 08 00	 ret	 8
$LN49@emit:
  00144	00 00 00 00	 DD	 $LN10@emit
  00148	00 00 00 00	 DD	 $LN27@emit
  0014c	00 00 00 00	 DD	 $LN28@emit
  00150	00 00 00 00	 DD	 $LN8@emit
  00154	00 00 00 00	 DD	 $LN6@emit
  00158	00 00 00 00	 DD	 $LN4@emit
  0015c	00 00 00 00	 DD	 $LN5@emit
  00160	00 00 00 00	 DD	 $LN7@emit
  00164	00 00 00 00	 DD	 $LN9@emit
  00168	00 00 00 00	 DD	 $LN29@emit
$LN48@emit:
  0016c	00		 DB	 0
  0016d	09		 DB	 9
  0016e	09		 DB	 9
  0016f	09		 DB	 9
  00170	09		 DB	 9
  00171	09		 DB	 9
  00172	09		 DB	 9
  00173	09		 DB	 9
  00174	01		 DB	 1
  00175	02		 DB	 2
  00176	09		 DB	 9
  00177	00		 DB	 0
  00178	00		 DB	 0
  00179	00		 DB	 0
  0017a	00		 DB	 0
  0017b	00		 DB	 0
  0017c	00		 DB	 0
  0017d	00		 DB	 0
  0017e	00		 DB	 0
  0017f	00		 DB	 0
  00180	00		 DB	 0
  00181	00		 DB	 0
  00182	00		 DB	 0
  00183	00		 DB	 0
  00184	00		 DB	 0
  00185	00		 DB	 0
  00186	00		 DB	 0
  00187	09		 DB	 9
  00188	09		 DB	 9
  00189	09		 DB	 9
  0018a	09		 DB	 9
  0018b	09		 DB	 9
  0018c	09		 DB	 9
  0018d	09		 DB	 9
  0018e	09		 DB	 9
  0018f	09		 DB	 9
  00190	03		 DB	 3
  00191	09		 DB	 9
  00192	09		 DB	 9
  00193	09		 DB	 9
  00194	09		 DB	 9
  00195	04		 DB	 4
  00196	05		 DB	 5
  00197	09		 DB	 9
  00198	06		 DB	 6
  00199	09		 DB	 9
  0019a	07		 DB	 7
  0019b	09		 DB	 9
  0019c	09		 DB	 9
  0019d	09		 DB	 9
  0019e	09		 DB	 9
  0019f	09		 DB	 9
  001a0	09		 DB	 9
  001a1	09		 DB	 9
  001a2	09		 DB	 9
  001a3	09		 DB	 9
  001a4	09		 DB	 9
  001a5	09		 DB	 9
  001a6	09		 DB	 9
  001a7	09		 DB	 9
  001a8	09		 DB	 9
  001a9	09		 DB	 9
  001aa	09		 DB	 9
  001ab	09		 DB	 9
  001ac	09		 DB	 9
  001ad	09		 DB	 9
  001ae	09		 DB	 9
  001af	09		 DB	 9
  001b0	09		 DB	 9
  001b1	09		 DB	 9
  001b2	09		 DB	 9
  001b3	09		 DB	 9
  001b4	09		 DB	 9
  001b5	09		 DB	 9
  001b6	09		 DB	 9
  001b7	09		 DB	 9
  001b8	09		 DB	 9
  001b9	09		 DB	 9
  001ba	09		 DB	 9
  001bb	09		 DB	 9
  001bc	09		 DB	 9
  001bd	09		 DB	 9
  001be	09		 DB	 9
  001bf	09		 DB	 9
  001c0	09		 DB	 9
  001c1	09		 DB	 9
  001c2	09		 DB	 9
  001c3	09		 DB	 9
  001c4	09		 DB	 9
  001c5	09		 DB	 9
  001c6	09		 DB	 9
  001c7	09		 DB	 9
  001c8	09		 DB	 9
  001c9	08		 DB	 8
?emit@CPoly@@IAEXHH@Z ENDP				; CPoly::emit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv443 = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_m$1$ = -8						; size = 4
_l$1$ = -4						; size = 4
_s$ = 8							; size = 4
?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPoly::find, COMDAT
; _this$ = ecx

; 527  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 528  :     int l, m, r;
; 529  : 
; 530  :     l = 0;
; 531  :     r = STSize - 1;

  00007	8b 59 58	 mov	 ebx, DWORD PTR [ecx+88]
  0000a	33 c0		 xor	 eax, eax
  0000c	83 eb 01	 sub	 ebx, 1
  0000f	89 45 fc	 mov	 DWORD PTR _l$1$[ebp], eax
  00012	56		 push	 esi
  00013	57		 push	 edi

; 532  : 
; 533  :     while (l <= r)

  00014	0f 88 df 00 00
	00		 js	 $LN3@find
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  0001a	8b 71 40	 mov	 esi, DWORD PTR [ecx+64]
  0001d	8b 79 4c	 mov	 edi, DWORD PTR [ecx+76]
  00020	89 75 f4	 mov	 DWORD PTR $T2[ebp], esi
  00023	89 7d f0	 mov	 DWORD PTR $T1[ebp], edi
$LN80@find:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 535  : 	m = (l + r) >> 1;

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00029	03 c3		 add	 eax, ebx
  0002b	d1 f8		 sar	 eax, 1
  0002d	89 45 f8	 mov	 DWORD PTR _m$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00030	8b 04 87	 mov	 eax, DWORD PTR [edi+eax*4]
  00033	89 45 ec	 mov	 DWORD PTR tv443[ebp], eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 537  : 	if (lSymbol[SymbolIndex[m]]->strlex == s)

  00036	8b 3c 86	 mov	 edi, DWORD PTR [esi+eax*4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00039	8b f1		 mov	 esi, ecx
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 537  : 	if (lSymbol[SymbolIndex[m]]->strlex == s)

  0003b	83 c7 14	 add	 edi, 20			; 00000014H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0003e	83 79 14 0f	 cmp	 DWORD PTR [ecx+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00042	76 02		 jbe	 SHORT $LN22@find

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00044	8b 31		 mov	 esi, DWORD PTR [ecx]
$LN22@find:

; 434  :         return _Myres > _Small_string_capacity;

  00046	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 425  :         const value_type* _Result = _Bx._Buf;

  0004a	8b d7		 mov	 edx, edi

; 2812 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0004c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 426  :         if (_Large_mode_engaged()) {

  0004f	76 02		 jbe	 SHORT $LN29@find

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00051	8b 17		 mov	 edx, DWORD PTR [edi]
$LN29@find:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 578  :     if (_Left_size != _Right_size) {

  00053	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00056	75 65		 jne	 SHORT $LN56@find

; 579  :         return false;
; 580  :     }
; 581  : 
; 582  :     if (_Left_size == 0u) {

  00058	85 c0		 test	 eax, eax
  0005a	0f 84 8d 00 00
	00		 je	 $LN53@find

; 411  :         return __builtin_memcmp(_First1, _First2, _Count);

  00060	83 e8 04	 sub	 eax, 4
  00063	72 11		 jb	 SHORT $LN61@find
$LL62@find:
  00065	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00067	3b 0e		 cmp	 ecx, DWORD PTR [esi]
  00069	75 10		 jne	 SHORT $LN60@find
  0006b	83 c2 04	 add	 edx, 4
  0006e	83 c6 04	 add	 esi, 4
  00071	83 e8 04	 sub	 eax, 4
  00074	73 ef		 jae	 SHORT $LL62@find
$LN61@find:
  00076	83 f8 fc	 cmp	 eax, -4			; fffffffcH
  00079	74 34		 je	 SHORT $LN59@find
$LN60@find:
  0007b	8a 0a		 mov	 cl, BYTE PTR [edx]
  0007d	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0007f	75 27		 jne	 SHORT $LN63@find
  00081	83 f8 fd	 cmp	 eax, -3			; fffffffdH
  00084	74 29		 je	 SHORT $LN59@find
  00086	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  00089	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  0008c	75 1a		 jne	 SHORT $LN63@find
  0008e	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  00091	74 1c		 je	 SHORT $LN59@find
  00093	8a 4a 02	 mov	 cl, BYTE PTR [edx+2]
  00096	3a 4e 02	 cmp	 cl, BYTE PTR [esi+2]
  00099	75 0d		 jne	 SHORT $LN63@find
  0009b	83 f8 ff	 cmp	 eax, -1
  0009e	74 0f		 je	 SHORT $LN59@find
  000a0	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  000a3	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  000a6	74 07		 je	 SHORT $LN59@find
$LN63@find:
  000a8	1b c0		 sbb	 eax, eax
  000aa	83 c8 01	 or	 eax, 1
  000ad	eb 02		 jmp	 SHORT $LN64@find
$LN59@find:
  000af	33 c0		 xor	 eax, eax
$LN64@find:

; 586  :     return _Traits::compare(_Left, _Right, _Left_size) == 0;

  000b1	85 c0		 test	 eax, eax
  000b3	0f 94 c0	 sete	 al
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 537  : 	if (lSymbol[SymbolIndex[m]]->strlex == s)

  000b6	84 c0		 test	 al, al
  000b8	75 33		 jne	 SHORT $LN53@find
  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
$LN56@find:

; 539  : 	else if (lSymbol[SymbolIndex[m]]->strlex < s)

  000bd	51		 push	 ecx
  000be	57		 push	 edi
  000bf	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000c4	8b 55 f8	 mov	 edx, DWORD PTR _m$1$[ebp]
  000c7	8a c8		 mov	 cl, al
  000c9	83 c4 08	 add	 esp, 8
  000cc	84 c9		 test	 cl, cl
  000ce	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  000d1	0f 44 d8	 cmove	 ebx, eax
  000d4	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000d7	0f 44 45 fc	 cmove	 eax, DWORD PTR _l$1$[ebp]
  000db	89 45 fc	 mov	 DWORD PTR _l$1$[ebp], eax
  000de	3b c3		 cmp	 eax, ebx
  000e0	7f 17		 jg	 SHORT $LN3@find

; 532  : 
; 533  :     while (l <= r)

  000e2	8b 75 f4	 mov	 esi, DWORD PTR $T2[ebp]
  000e5	8b 7d f0	 mov	 edi, DWORD PTR $T1[ebp]
  000e8	e9 39 ff ff ff	 jmp	 $LN80@find
$LN53@find:

; 538  : 	    return SymbolIndex[m];

  000ed	8b 45 ec	 mov	 eax, DWORD PTR tv443[ebp]
  000f0	5f		 pop	 edi

; 540  : 	    l = m + 1;
; 541  : 	else
; 542  : 	    r = m - 1;
; 543  :     }
; 544  :     return -1;
; 545  : }

  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
$LN3@find:
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	83 c8 ff	 or	 eax, -1
  000fe	5b		 pop	 ebx
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPoly::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
_TEXT	SEGMENT
$T3 = -32						; size = 4
tv1417 = -32						; size = 4
tv1428 = -32						; size = 4
__Oldsize$1$ = -32					; size = 4
_this$1$ = -28						; size = 4
tv1412 = -24						; size = 4
$T4 = -24						; size = 4
__Result$1$ = -24					; size = 4
$T5 = -20						; size = 4
$T6 = -20						; size = 4
$T7 = -20						; size = 4
_this$1$ = -16						; size = 4
__Newsize$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
_tok$ = 12						; size = 4
$T8 = 12						; size = 4
__Obj$1$sroa$654$1$ = 12				; size = 4
?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC ; CPoly::insert, COMDAT
; _this$ = ecx

; 548  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	89 75 e4	 mov	 DWORD PTR _this$1$[ebp], esi

; 552  :     lSymbol.push_back(new CSymTable(tok,s));

  0002c	6a 30		 push	 48			; 00000030H
  0002e	8d 7e 40	 lea	 edi, DWORD PTR [esi+64]
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	85 c0		 test	 eax, eax
  00045	0f 84 d6 00 00
	00		 je	 $LN8@insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0004b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 552  :     lSymbol.push_back(new CSymTable(tok,s));

  0004e	83 ec 18	 sub	 esp, 24			; 00000018H
  00051	8b c4		 mov	 eax, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  00053	89 55 e8	 mov	 DWORD PTR __Result$1$[ebp], edx
  00056	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 552  :     lSymbol.push_back(new CSymTable(tok,s));

  00059	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 425  :         const value_type* _Result = _Bx._Buf;

  0005c	8b fa		 mov	 edi, edx

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0005e	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00061	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00068	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 434  :         return _Myres > _Small_string_capacity;

  0006f	83 7a 14 0f	 cmp	 DWORD PTR [edx+20], 15	; 0000000fH

; 694  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00073	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00076	89 4d ec	 mov	 DWORD PTR $T5[ebp], ecx

; 426  :         if (_Large_mode_engaged()) {

  00079	76 05		 jbe	 SHORT $LN28@insert

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0007b	8b 3a		 mov	 edi, DWORD PTR [edx]
  0007d	89 7d e8	 mov	 DWORD PTR __Result$1$[ebp], edi
$LN28@insert:

; 857  :         if (_Count > max_size()) {

  00080	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  00086	0f 87 7b 02 00
	00		 ja	 $LN239@insert

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0008c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  0008f	77 12		 ja	 SHORT $LN36@insert

; 866  :             _My_data._Mysize = _Count;

  00091	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00094	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009b	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0009e	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 884  :             return;

  000a1	eb 69		 jmp	 SHORT $LN62@insert
$LN36@insert:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  000a3	8b f9		 mov	 edi, ecx
  000a5	83 cf 0f	 or	 edi, 15			; 0000000fH
  000a8	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000ae	76 12		 jbe	 SHORT $LN42@insert

; 2944 :             return _Max;

  000b0	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  000b5	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ba	52		 push	 edx
  000bb	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c0	eb 27		 jmp	 SHORT $LN236@insert
$LN42@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000c2	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  000c7	3b fa		 cmp	 edi, edx
  000c9	0f 42 fa	 cmovb	 edi, edx

; 801  :         ++_Capacity; // Take null terminator into consideration

  000cc	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000cf	85 d2		 test	 edx, edx
  000d1	74 21		 je	 SHORT $LN55@insert
$LN56@insert:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000d3	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000d9	72 08		 jb	 SHORT $LN57@insert

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000db	52		 push	 edx
  000dc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000e1	eb 06		 jmp	 SHORT $LN236@insert
$LN57@insert:

; 136  :         return ::operator new(_Bytes);

  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN236@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000e9	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp]
  000ec	8b d0		 mov	 edx, eax
  000ee	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  000f1	83 c4 04	 add	 esp, 4
$LN55@insert:
  000f4	89 10		 mov	 DWORD PTR [eax], edx

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  000f6	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 892  :         _My_data._Myres  = _New_capacity;

  000f9	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 893  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 895  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 896  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 897  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 899  :         } else { // _Strat == _Construct_strategy::_From_string
; 900  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000fc	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ff	50		 push	 eax
  00100	ff 75 e8	 push	 DWORD PTR __Result$1$[ebp]
  00103	52		 push	 edx
  00104	e8 00 00 00 00	 call	 _memcpy
  00109	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN62@insert:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 552  :     lSymbol.push_back(new CSymTable(tok,s));

  0010c	ff 75 0c	 push	 DWORD PTR _tok$[ebp]
  0010f	8b 4d e0	 mov	 ecx, DWORD PTR $T3[ebp]
  00112	e8 00 00 00 00	 call	 ??0CSymTable@@QAE@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSymTable::CSymTable
  00117	8b d0		 mov	 edx, eax
  00119	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
  0011c	8d 7e 40	 lea	 edi, DWORD PTR [esi+64]
  0011f	eb 05		 jmp	 SHORT $LN9@insert
$LN8@insert:
  00121	33 d2		 xor	 edx, edx
  00123	89 55 e8	 mov	 DWORD PTR $T4[ebp], edx
$LN9@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00126	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00129	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 552  :     lSymbol.push_back(new CSymTable(tok,s));

  0012c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  00133	89 45 ec	 mov	 DWORD PTR $T7[ebp], eax
  00136	3b c1		 cmp	 eax, ecx
  00138	74 0b		 je	 SHORT $LN69@insert

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0013a	89 10		 mov	 DWORD PTR [eax], edx

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  0013c	83 46 44 04	 add	 DWORD PTR [esi+68], 4

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00140	e9 d8 00 00 00	 jmp	 $LN144@insert
$LN69@insert:

; 869  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00145	8b 17		 mov	 edx, DWORD PTR [edi]
  00147	2b c2		 sub	 eax, edx
  00149	c1 f8 02	 sar	 eax, 2
  0014c	89 45 e0	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 870  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);
; 871  : 
; 872  :         if (_Oldsize == max_size()) {

  0014f	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00154	0f 84 b2 01 00
	00		 je	 $LN240@insert

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0015a	2b ca		 sub	 ecx, edx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  0015c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0015f	c1 f9 02	 sar	 ecx, 2

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00162	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00167	8b d1		 mov	 edx, ecx

; 876  :         const size_type _Newsize = _Oldsize + 1;

  00169	89 7d f0	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1996 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0016c	d1 ea		 shr	 edx, 1
  0016e	2b c2		 sub	 eax, edx
  00170	3b c8		 cmp	 ecx, eax
  00172	76 14		 jbe	 SHORT $LN80@insert

; 1997 :             return _Max; // geometric growth would overflow

  00174	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00179	c7 45 0c ff ff
	ff 3f		 mov	 DWORD PTR $T8[ebp], 1073741823 ; 3fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00180	50		 push	 eax
  00181	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00186	eb 40		 jmp	 SHORT $LN237@insert
$LN80@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2000 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00188	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0018b	8b cf		 mov	 ecx, edi
  0018d	3b c7		 cmp	 eax, edi
  0018f	0f 43 c8	 cmovae	 ecx, eax
  00192	89 4d 0c	 mov	 DWORD PTR $T8[ebp], ecx
  00195	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0019b	0f 87 70 01 00
	00		 ja	 $LN241@insert

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  001a1	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 227  :     if (_Bytes == 0) {

  001a8	85 c0		 test	 eax, eax
  001aa	75 07		 jne	 SHORT $LN95@insert

; 228  :         return nullptr;

  001ac	33 ff		 xor	 edi, edi
  001ae	89 4d 0c	 mov	 DWORD PTR $T8[ebp], ecx
  001b1	eb 1a		 jmp	 SHORT $LN94@insert
$LN95@insert:

; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  001b3	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  001b8	72 08		 jb	 SHORT $LN96@insert

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001c0	eb 06		 jmp	 SHORT $LN237@insert
$LN96@insert:

; 136  :         return ::operator new(_Bytes);

  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN237@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 885  :         _Alty_traits::construct(_Al, _STD _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  001c8	8b f8		 mov	 edi, eax
  001ca	83 c4 04	 add	 esp, 4
$LN94@insert:
  001cd	8b 45 e0	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  001d0	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  001d3	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  001d6	89 01		 mov	 DWORD PTR [ecx], eax

; 886  :         _Constructed_first = _Newvec + _Whereoff;
; 887  : 
; 888  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  001d8	8b 45 ec	 mov	 eax, DWORD PTR $T7[ebp]
  001db	8b 56 40	 mov	 edx, DWORD PTR [esi+64]
  001de	89 4d e0	 mov	 DWORD PTR tv1417[ebp], ecx
  001e1	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001e4	3b c1		 cmp	 eax, ecx
  001e6	75 04		 jne	 SHORT $LN75@insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  001e8	8b c7		 mov	 eax, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 894  :         } else { // provide basic guarantee

  001ea	eb 17		 jmp	 SHORT $LN124@insert
$LN75@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  001ec	57		 push	 edi
  001ed	50		 push	 eax
  001ee	52		 push	 edx
  001ef	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z ; std::_Copy_memmove<CSymTable * *,CSymTable * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  001f4	8b 45 e0	 mov	 eax, DWORD PTR tv1417[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  001f7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fa	8b 55 ec	 mov	 edx, DWORD PTR $T7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 897  :             _STD _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  001fd	83 c0 04	 add	 eax, 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  00200	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
$LN124@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 900  :         _Guard._New_begin = nullptr;

  00203	50		 push	 eax
  00204	51		 push	 ecx
  00205	52		 push	 edx
  00206	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z ; std::_Copy_memmove<CSymTable * *,CSymTable * *>
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 901  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0020e	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00211	ff 75 0c	 push	 DWORD PTR $T8[ebp]
  00214	ff 75 f0	 push	 DWORD PTR __Newsize$1$[ebp]
  00217	57		 push	 edi
  00218	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@AAEXQAPAVCSymTable@@II@Z ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Change_array
$LN144@insert:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 553  :     for (i=0;i<STSize;i++)

  0021d	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
  00220	33 ff		 xor	 edi, edi
  00222	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
  00225	8b 00		 mov	 eax, DWORD PTR [eax]
  00227	89 45 0c	 mov	 DWORD PTR __Obj$1$sroa$654$1$[ebp], eax
  0022a	85 c0		 test	 eax, eax
  0022c	0f 8e 9c 00 00
	00		 jle	 $LN231@insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00232	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 555  : 	if (s<lSymbol[SymbolIndex[i]]->strlex)

  00235	83 c6 4c	 add	 esi, 76			; 0000004cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00238	89 4d e0	 mov	 DWORD PTR tv1428[ebp], ecx
  0023b	8b 06		 mov	 eax, DWORD PTR [esi]
  0023d	89 45 e8	 mov	 DWORD PTR tv1412[ebp], eax
$LL4@insert:
  00240	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 555  : 	if (s<lSymbol[SymbolIndex[i]]->strlex)

  00242	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00245	83 c0 14	 add	 eax, 20			; 00000014H
  00248	50		 push	 eax
  00249	ff 75 08	 push	 DWORD PTR _s$[ebp]
  0024c	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00251	83 c4 08	 add	 esp, 8
  00254	84 c0		 test	 al, al
  00256	75 1d		 jne	 SHORT $LN226@insert

; 553  :     for (i=0;i<STSize;i++)

  00258	8b 45 e8	 mov	 eax, DWORD PTR tv1412[ebp]
  0025b	47		 inc	 edi
  0025c	8b 4d e0	 mov	 ecx, DWORD PTR tv1428[ebp]
  0025f	83 c0 04	 add	 eax, 4
  00262	89 45 e8	 mov	 DWORD PTR tv1412[ebp], eax
  00265	3b 7d 0c	 cmp	 edi, DWORD PTR __Obj$1$sroa$654$1$[ebp]
  00268	7c d6		 jl	 SHORT $LL4@insert

; 555  : 	if (s<lSymbol[SymbolIndex[i]]->strlex)

  0026a	8b 7d e4	 mov	 edi, DWORD PTR _this$1$[ebp]
  0026d	8b 45 0c	 mov	 eax, DWORD PTR __Obj$1$sroa$654$1$[ebp]
  00270	83 c7 58	 add	 edi, 88			; 00000058H
  00273	eb 5f		 jmp	 SHORT $LN230@insert
$LN226@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 129  :         _Ptr += _Off;

  00275	8b 06		 mov	 eax, DWORD PTR [esi]

; 1015 :         const pointer _Oldlast  = _My_data._Mylast;

  00277	8b 56 04	 mov	 edx, DWORD PTR [esi+4]

; 129  :         _Ptr += _Off;

  0027a	8d 3c b8	 lea	 edi, DWORD PTR [eax+edi*4]

; 1022 :         if (_Oldlast != _My_data._Myend) {

  0027d	3b 56 08	 cmp	 edx, DWORD PTR [esi+8]
  00280	74 39		 je	 SHORT $LN188@insert

; 1023 :             if (_Whereptr == _Oldlast) { // at back, provide strong guarantee

  00282	3b fa		 cmp	 edi, edx
  00284	75 11		 jne	 SHORT $LN189@insert

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00286	8b 45 0c	 mov	 eax, DWORD PTR __Obj$1$sroa$654$1$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 562  :     if (!bAdded)

  00289	8b 7d e4	 mov	 edi, DWORD PTR _this$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0028c	89 02		 mov	 DWORD PTR [edx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  0028e	83 46 04 04	 add	 DWORD PTR [esi+4], 4
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 562  :     if (!bAdded)

  00292	83 c7 58	 add	 edi, 88			; 00000058H
  00295	eb 56		 jmp	 SHORT $LN220@insert
$LN189@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1031 :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));

  00297	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  0029a	8d 4a fc	 lea	 ecx, DWORD PTR [edx-4]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  0029d	52		 push	 edx
  0029e	51		 push	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1031 :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));

  0029f	89 02		 mov	 DWORD PTR [edx], eax

; 1032 :                 _ASAN_VECTOR_RELEASE_GUARD;
; 1033 :                 ++_My_data._Mylast;

  002a1	83 46 04 04	 add	 DWORD PTR [esi+4], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  002a5	57		 push	 edi
  002a6	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAHPAH@std@@YAPAHPAH00@Z ; std::_Copy_backward_memmove<int *,int *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1035 :                 *_Whereptr = _STD move(_Obj._Get_value());

  002ab	8b 45 0c	 mov	 eax, DWORD PTR __Obj$1$sroa$654$1$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xutility

; 5206 :             return _STD _Copy_backward_memmove(_First, _Last, _Dest);

  002ae	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1035 :                 *_Whereptr = _STD move(_Obj._Get_value());

  002b1	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 562  :     if (!bAdded)

  002b3	8b 7d e4	 mov	 edi, DWORD PTR _this$1$[ebp]
  002b6	83 c7 58	 add	 edi, 88			; 00000058H
  002b9	eb 32		 jmp	 SHORT $LN220@insert
$LN188@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1041 :         return _Make_iterator(_Emplace_reallocate(_Whereptr, _STD forward<_Valty>(_Val)...));

  002bb	ff 75 ec	 push	 DWORD PTR $T6[ebp]
  002be	8b ce		 mov	 ecx, esi
  002c0	57		 push	 edi
  002c1	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAHABH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 562  :     if (!bAdded)

  002c6	8b 7d e4	 mov	 edi, DWORD PTR _this$1$[ebp]
  002c9	83 c7 58	 add	 edi, 88			; 00000058H
  002cc	eb 1f		 jmp	 SHORT $LN220@insert
$LN231@insert:
  002ce	8b 7d ec	 mov	 edi, DWORD PTR $T6[ebp]
  002d1	83 c6 4c	 add	 esi, 76			; 0000004cH
$LN230@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 829  :         if (_Mylast != _My_data._Myend) {

  002d4	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  002d7	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  002da	74 08		 je	 SHORT $LN221@insert

; 845  :             _STD _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  002dc	89 01		 mov	 DWORD PTR [ecx], eax

; 846  :         } else {
; 847  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 848  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 849  :             _ASAN_VECTOR_RELEASE_GUARD;
; 850  :         }
; 851  : 
; 852  :         _Orphan_range(_Mylast, _Mylast);
; 853  :         _Ty& _Result = *_Mylast;
; 854  :         ++_Mylast;

  002de	83 46 04 04	 add	 DWORD PTR [esi+4], 4

; 830  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  002e2	eb 09		 jmp	 SHORT $LN220@insert
$LN221@insert:

; 831  :         }
; 832  : 
; 833  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  002e4	57		 push	 edi
  002e5	51		 push	 ecx
  002e6	8b ce		 mov	 ecx, esi
  002e8	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABH@?$vector@HV?$allocator@H@std@@@std@@AAEPAHQAHABH@Z ; std::vector<int,std::allocator<int> >::_Emplace_reallocate<int const &>
$LN220@insert:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 567  :     STSize++;

  002ed	8b 07		 mov	 eax, DWORD PTR [edi]
  002ef	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  002f2	89 0f		 mov	 DWORD PTR [edi], ecx

; 569  : }

  002f4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002f7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002fe	59		 pop	 ecx
  002ff	5f		 pop	 edi
  00300	5e		 pop	 esi
  00301	8b e5		 mov	 esp, ebp
  00303	5d		 pop	 ebp
  00304	c2 08 00	 ret	 8
$LN239@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 858  :             _Xlen_string(); // result too long

  00307	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN240@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 873  :             _Xlength();

  0030c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@CAXXZ ; std::vector<CSymTable *,std::allocator<CSymTable *> >::_Xlength
$LN241@insert:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00311	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN235@insert:
  00316	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0:
  00000	6a 30		 push	 48			; 00000030H
  00002	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; CPoly::insert
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?init@CPoly@@IAEXXZ
_TEXT	SEGMENT
$T2 = -40						; size = 24
$T3 = -40						; size = 24
$T4 = -40						; size = 24
$T5 = -40						; size = 24
$T6 = -40						; size = 24
$T7 = -40						; size = 24
$T8 = -40						; size = 24
$T9 = -40						; size = 24
$T10 = -40						; size = 24
$T11 = -40						; size = 24
$T12 = -40						; size = 24
$T13 = -40						; size = 24
$T14 = -40						; size = 24
$T15 = -40						; size = 24
$T16 = -40						; size = 24
$T17 = -40						; size = 24
$T18 = -40						; size = 24
$T19 = -40						; size = 24
$T20 = -40						; size = 24
$T21 = -40						; size = 24
$T22 = -40						; size = 24
$T23 = -40						; size = 24
$T24 = -40						; size = 24
$T25 = -40						; size = 24
$T26 = -40						; size = 24
$T27 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?init@CPoly@@IAEXXZ PROC				; CPoly::init, COMDAT
; _this$ = ecx

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?init@CPoly@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx

; 595  :     insert("min",POLY_MINF);

  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_03KLIPLJLL@min@
  00030	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00038	6a 16		 push	 22			; 00000016H
  0003a	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	50		 push	 eax
  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0004c	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 595  :     insert("min",POLY_MINF);

  0004f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00056	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00059	76 2c		 jbe	 SHORT $LN49@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005b	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0005e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005f	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00061	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00067	72 14		 jb	 SHORT $LN60@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00069	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006c	83 c1 23	 add	 ecx, 35			; 00000023H
  0006f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00071	83 c0 fc	 add	 eax, -4			; fffffffcH
  00074	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00077	0f 87 17 09 00
	00		 ja	 $LN983@init
$LN60@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007d	51		 push	 ecx
  0007e	52		 push	 edx
  0007f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00084	83 c4 08	 add	 esp, 8
$LN49@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 596  :     insert("max",POLY_MAXF);

  00087	68 00 00 00 00	 push	 OFFSET ??_C@_03LJAEFNNE@max@
  0008c	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0008f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00094	6a 17		 push	 23			; 00000017H
  00096	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00099	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000a0	50		 push	 eax
  000a1	8b ce		 mov	 ecx, esi
  000a3	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000a8	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 596  :     insert("max",POLY_MAXF);

  000ab	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  000b2	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  000b5	76 2c		 jbe	 SHORT $LN87@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b7	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000ba	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bb	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000bd	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c3	72 14		 jb	 SHORT $LN98@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000c5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000c8	83 c1 23	 add	 ecx, 35			; 00000023H
  000cb	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cd	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d3	0f 87 bb 08 00
	00		 ja	 $LN983@init
$LN98@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000d9	51		 push	 ecx
  000da	52		 push	 edx
  000db	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e0	83 c4 08	 add	 esp, 8
$LN87@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 597  :     insert("number", POLY_IRAND);

  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_06EBGNBFIA@number@
  000e8	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  000eb	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000f0	6a 18		 push	 24			; 00000018H
  000f2	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  000f5	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000fc	50		 push	 eax
  000fd	8b ce		 mov	 ecx, esi
  000ff	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00104	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 597  :     insert("number", POLY_IRAND);

  00107	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0010e	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00111	76 2c		 jbe	 SHORT $LN124@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00113	8b 55 d8	 mov	 edx, DWORD PTR $T4[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00116	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00117	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00119	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011f	72 14		 jb	 SHORT $LN135@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00121	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00124	83 c1 23	 add	 ecx, 35			; 00000023H
  00127	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00129	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012f	0f 87 5f 08 00
	00		 ja	 $LN983@init
$LN135@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00135	51		 push	 ecx
  00136	52		 push	 edx
  00137	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013c	83 c4 08	 add	 esp, 8
$LN124@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 598  :     insert("irandom", POLY_IRAND);

  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_07OMLILGHE@irandom@
  00144	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00147	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0014c	6a 18		 push	 24			; 00000018H
  0014e	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  00151	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00158	50		 push	 eax
  00159	8b ce		 mov	 ecx, esi
  0015b	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00160	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 598  :     insert("irandom", POLY_IRAND);

  00163	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0016a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0016d	76 2c		 jbe	 SHORT $LN161@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016f	8b 55 d8	 mov	 edx, DWORD PTR $T5[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00172	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00173	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00175	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0017b	72 14		 jb	 SHORT $LN172@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0017d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00180	83 c1 23	 add	 ecx, 35			; 00000023H
  00183	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00185	83 c0 fc	 add	 eax, -4			; fffffffcH
  00188	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0018b	0f 87 03 08 00
	00		 ja	 $LN983@init
$LN172@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00191	51		 push	 ecx
  00192	52		 push	 edx
  00193	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00198	83 c4 08	 add	 esp, 8
$LN161@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 599  :     insert("irand", POLY_IRAND);

  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_05CCJGGLIO@irand@
  001a0	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  001a3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001a8	6a 18		 push	 24			; 00000018H
  001aa	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  001ad	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  001b4	50		 push	 eax
  001b5	8b ce		 mov	 ecx, esi
  001b7	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001bc	8b 4d ec	 mov	 ecx, DWORD PTR $T6[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 599  :     insert("irand", POLY_IRAND);

  001bf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  001c6	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  001c9	76 2c		 jbe	 SHORT $LN198@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001cb	8b 55 d8	 mov	 edx, DWORD PTR $T6[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001ce	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001cf	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001d1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001d7	72 14		 jb	 SHORT $LN209@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001d9	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001dc	83 c1 23	 add	 ecx, 35			; 00000023H
  001df	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e1	83 c0 fc	 add	 eax, -4			; fffffffcH
  001e4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001e7	0f 87 a7 07 00
	00		 ja	 $LN983@init
$LN209@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ed	51		 push	 ecx
  001ee	52		 push	 edx
  001ef	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001f4	83 c4 08	 add	 esp, 8
$LN198@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 600  :     insert("frandom",POLY_FRAND);

  001f7	68 00 00 00 00	 push	 OFFSET ??_C@_07DFJIKENI@frandom@
  001fc	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]
  001ff	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00204	6a 19		 push	 25			; 00000019H
  00206	8d 45 d8	 lea	 eax, DWORD PTR $T7[ebp]
  00209	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  00210	50		 push	 eax
  00211	8b ce		 mov	 ecx, esi
  00213	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00218	8b 4d ec	 mov	 ecx, DWORD PTR $T7[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 600  :     insert("frandom",POLY_FRAND);

  0021b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00222	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00225	76 2c		 jbe	 SHORT $LN235@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00227	8b 55 d8	 mov	 edx, DWORD PTR $T7[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0022a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0022b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0022d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00233	72 14		 jb	 SHORT $LN246@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00235	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00238	83 c1 23	 add	 ecx, 35			; 00000023H
  0023b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0023d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00240	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00243	0f 87 4b 07 00
	00		 ja	 $LN983@init
$LN246@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00249	51		 push	 ecx
  0024a	52		 push	 edx
  0024b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00250	83 c4 08	 add	 esp, 8
$LN235@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 601  :     insert("frand",POLY_FRAND);

  00253	68 00 00 00 00	 push	 OFFSET ??_C@_05NDMANJFL@frand@
  00258	8d 4d d8	 lea	 ecx, DWORD PTR $T8[ebp]
  0025b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00260	6a 19		 push	 25			; 00000019H
  00262	8d 45 d8	 lea	 eax, DWORD PTR $T8[ebp]
  00265	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  0026c	50		 push	 eax
  0026d	8b ce		 mov	 ecx, esi
  0026f	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00274	8b 4d ec	 mov	 ecx, DWORD PTR $T8[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 601  :     insert("frand",POLY_FRAND);

  00277	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0027e	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00281	76 2c		 jbe	 SHORT $LN272@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00283	8b 55 d8	 mov	 edx, DWORD PTR $T8[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00286	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00287	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00289	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0028f	72 14		 jb	 SHORT $LN283@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00291	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00294	83 c1 23	 add	 ecx, 35			; 00000023H
  00297	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00299	83 c0 fc	 add	 eax, -4			; fffffffcH
  0029c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0029f	0f 87 ef 06 00
	00		 ja	 $LN983@init
$LN283@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  002a5	51		 push	 ecx
  002a6	52		 push	 edx
  002a7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002ac	83 c4 08	 add	 esp, 8
$LN272@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 602  :     insert("rt",POLY_ROOT);

  002af	68 00 00 00 00	 push	 OFFSET ??_C@_02BMJICGCB@rt@
  002b4	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]
  002b7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  002bc	6a 01		 push	 1
  002be	8d 45 d8	 lea	 eax, DWORD PTR $T9[ebp]
  002c1	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  002c8	50		 push	 eax
  002c9	8b ce		 mov	 ecx, esi
  002cb	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002d0	8b 4d ec	 mov	 ecx, DWORD PTR $T9[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 602  :     insert("rt",POLY_ROOT);

  002d3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  002da	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  002dd	76 2c		 jbe	 SHORT $LN309@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002df	8b 55 d8	 mov	 edx, DWORD PTR $T9[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  002e2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002e3	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002e5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002eb	72 14		 jb	 SHORT $LN320@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002ed	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002f0	83 c1 23	 add	 ecx, 35			; 00000023H
  002f3	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002f5	83 c0 fc	 add	 eax, -4			; fffffffcH
  002f8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002fb	0f 87 93 06 00
	00		 ja	 $LN983@init
$LN320@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00301	51		 push	 ecx
  00302	52		 push	 edx
  00303	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00308	83 c4 08	 add	 esp, 8
$LN309@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 603  :     insert("sqrt",POLY_ROOT);

  0030b	68 00 00 00 00	 push	 OFFSET ??_C@_04EIAKFFMI@sqrt@
  00310	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]
  00313	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00318	6a 01		 push	 1
  0031a	8d 45 d8	 lea	 eax, DWORD PTR $T10[ebp]
  0031d	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  00324	50		 push	 eax
  00325	8b ce		 mov	 ecx, esi
  00327	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0032c	8b 4d ec	 mov	 ecx, DWORD PTR $T10[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 603  :     insert("sqrt",POLY_ROOT);

  0032f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00336	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00339	76 2c		 jbe	 SHORT $LN346@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0033b	8b 55 d8	 mov	 edx, DWORD PTR $T10[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0033e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0033f	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00341	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00347	72 14		 jb	 SHORT $LN357@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00349	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0034c	83 c1 23	 add	 ecx, 35			; 00000023H
  0034f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00351	83 c0 fc	 add	 eax, -4			; fffffffcH
  00354	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00357	0f 87 37 06 00
	00		 ja	 $LN983@init
$LN357@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0035d	51		 push	 ecx
  0035e	52		 push	 edx
  0035f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00364	83 c4 08	 add	 esp, 8
$LN346@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 604  :     insert("cos",POLY_COS);

  00367	68 00 00 00 00	 push	 OFFSET ??_C@_03LALBNOCG@cos@
  0036c	8d 4d d8	 lea	 ecx, DWORD PTR $T11[ebp]
  0036f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00374	6a 0c		 push	 12			; 0000000cH
  00376	8d 45 d8	 lea	 eax, DWORD PTR $T11[ebp]
  00379	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  00380	50		 push	 eax
  00381	8b ce		 mov	 ecx, esi
  00383	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00388	8b 4d ec	 mov	 ecx, DWORD PTR $T11[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 604  :     insert("cos",POLY_COS);

  0038b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00392	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00395	76 2c		 jbe	 SHORT $LN383@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00397	8b 55 d8	 mov	 edx, DWORD PTR $T11[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0039a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0039b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0039d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003a3	72 14		 jb	 SHORT $LN394@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003a8	83 c1 23	 add	 ecx, 35			; 00000023H
  003ab	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  003b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003b3	0f 87 db 05 00
	00		 ja	 $LN983@init
$LN394@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003b9	51		 push	 ecx
  003ba	52		 push	 edx
  003bb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003c0	83 c4 08	 add	 esp, 8
$LN383@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 605  :     insert("sin",POLY_SIN);

  003c3	68 00 00 00 00	 push	 OFFSET ??_C@_03BLEJJJBH@sin@
  003c8	8d 4d d8	 lea	 ecx, DWORD PTR $T12[ebp]
  003cb	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  003d0	6a 0d		 push	 13			; 0000000dH
  003d2	8d 45 d8	 lea	 eax, DWORD PTR $T12[ebp]
  003d5	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  003dc	50		 push	 eax
  003dd	8b ce		 mov	 ecx, esi
  003df	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003e4	8b 4d ec	 mov	 ecx, DWORD PTR $T12[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 605  :     insert("sin",POLY_SIN);

  003e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  003ee	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  003f1	76 2c		 jbe	 SHORT $LN420@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003f3	8b 55 d8	 mov	 edx, DWORD PTR $T12[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  003f6	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003f7	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003f9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003ff	72 14		 jb	 SHORT $LN431@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00401	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00404	83 c1 23	 add	 ecx, 35			; 00000023H
  00407	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00409	83 c0 fc	 add	 eax, -4			; fffffffcH
  0040c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0040f	0f 87 7f 05 00
	00		 ja	 $LN983@init
$LN431@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00415	51		 push	 ecx
  00416	52		 push	 edx
  00417	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0041c	83 c4 08	 add	 esp, 8
$LN420@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 606  :     insert("tan",POLY_TAN);

  0041f	68 00 00 00 00	 push	 OFFSET ??_C@_03IIINPABG@tan@
  00424	8d 4d d8	 lea	 ecx, DWORD PTR $T13[ebp]
  00427	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0042c	6a 0e		 push	 14			; 0000000eH
  0042e	8d 45 d8	 lea	 eax, DWORD PTR $T13[ebp]
  00431	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00438	50		 push	 eax
  00439	8b ce		 mov	 ecx, esi
  0043b	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00440	8b 4d ec	 mov	 ecx, DWORD PTR $T13[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 606  :     insert("tan",POLY_TAN);

  00443	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0044a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0044d	76 2c		 jbe	 SHORT $LN457@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0044f	8b 55 d8	 mov	 edx, DWORD PTR $T13[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00452	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00453	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00455	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0045b	72 14		 jb	 SHORT $LN468@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0045d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00460	83 c1 23	 add	 ecx, 35			; 00000023H
  00463	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00465	83 c0 fc	 add	 eax, -4			; fffffffcH
  00468	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0046b	0f 87 23 05 00
	00		 ja	 $LN983@init
$LN468@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00471	51		 push	 ecx
  00472	52		 push	 edx
  00473	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00478	83 c4 08	 add	 esp, 8
$LN457@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 607  :     insert("cot",POLY_COT);

  0047b	68 00 00 00 00	 push	 OFFSET ??_C@_03PPPAEIOB@cot@
  00480	8d 4d d8	 lea	 ecx, DWORD PTR $T14[ebp]
  00483	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00488	6a 11		 push	 17			; 00000011H
  0048a	8d 45 d8	 lea	 eax, DWORD PTR $T14[ebp]
  0048d	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00494	50		 push	 eax
  00495	8b ce		 mov	 ecx, esi
  00497	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0049c	8b 4d ec	 mov	 ecx, DWORD PTR $T14[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 607  :     insert("cot",POLY_COT);

  0049f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004a6	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  004a9	76 2c		 jbe	 SHORT $LN494@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004ab	8b 55 d8	 mov	 edx, DWORD PTR $T14[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004ae	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004af	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004b1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004b7	72 14		 jb	 SHORT $LN505@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004b9	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004bc	83 c1 23	 add	 ecx, 35			; 00000023H
  004bf	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004c1	83 c0 fc	 add	 eax, -4			; fffffffcH
  004c4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004c7	0f 87 c7 04 00
	00		 ja	 $LN983@init
$LN505@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004cd	51		 push	 ecx
  004ce	52		 push	 edx
  004cf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004d4	83 c4 08	 add	 esp, 8
$LN494@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 608  :     insert("csc",POLY_CSC);

  004d7	68 00 00 00 00	 push	 OFFSET ??_C@_03OPEPJGGD@csc@
  004dc	8d 4d d8	 lea	 ecx, DWORD PTR $T15[ebp]
  004df	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  004e4	6a 0f		 push	 15			; 0000000fH
  004e6	8d 45 d8	 lea	 eax, DWORD PTR $T15[ebp]
  004e9	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  004f0	50		 push	 eax
  004f1	8b ce		 mov	 ecx, esi
  004f3	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  004f8	8b 4d ec	 mov	 ecx, DWORD PTR $T15[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 608  :     insert("csc",POLY_CSC);

  004fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00502	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00505	76 2c		 jbe	 SHORT $LN531@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00507	8b 55 d8	 mov	 edx, DWORD PTR $T15[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0050a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0050b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0050d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00513	72 14		 jb	 SHORT $LN542@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00515	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00518	83 c1 23	 add	 ecx, 35			; 00000023H
  0051b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0051d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00520	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00523	0f 87 6b 04 00
	00		 ja	 $LN983@init
$LN542@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00529	51		 push	 ecx
  0052a	52		 push	 edx
  0052b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00530	83 c4 08	 add	 esp, 8
$LN531@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 609  :     insert("cosec",POLY_COSEC);

  00533	68 00 00 00 00	 push	 OFFSET ??_C@_05KCHJPNOJ@cosec@
  00538	8d 4d d8	 lea	 ecx, DWORD PTR $T16[ebp]
  0053b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00540	6a 0f		 push	 15			; 0000000fH
  00542	8d 45 d8	 lea	 eax, DWORD PTR $T16[ebp]
  00545	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  0054c	50		 push	 eax
  0054d	8b ce		 mov	 ecx, esi
  0054f	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00554	8b 4d ec	 mov	 ecx, DWORD PTR $T16[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 609  :     insert("cosec",POLY_COSEC);

  00557	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0055e	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00561	76 2c		 jbe	 SHORT $LN568@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00563	8b 55 d8	 mov	 edx, DWORD PTR $T16[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00566	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00567	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00569	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0056f	72 14		 jb	 SHORT $LN579@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00571	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00574	83 c1 23	 add	 ecx, 35			; 00000023H
  00577	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00579	83 c0 fc	 add	 eax, -4			; fffffffcH
  0057c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0057f	0f 87 0f 04 00
	00		 ja	 $LN983@init
$LN579@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00585	51		 push	 ecx
  00586	52		 push	 edx
  00587	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0058c	83 c4 08	 add	 esp, 8
$LN568@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 610  :     insert("sec",POLY_SEC);

  0058f	68 00 00 00 00	 push	 OFFSET ??_C@_03KHPNBODO@sec@
  00594	8d 4d d8	 lea	 ecx, DWORD PTR $T17[ebp]
  00597	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0059c	6a 10		 push	 16			; 00000010H
  0059e	8d 45 d8	 lea	 eax, DWORD PTR $T17[ebp]
  005a1	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  005a8	50		 push	 eax
  005a9	8b ce		 mov	 ecx, esi
  005ab	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  005b0	8b 4d ec	 mov	 ecx, DWORD PTR $T17[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 610  :     insert("sec",POLY_SEC);

  005b3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  005ba	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  005bd	76 2c		 jbe	 SHORT $LN605@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005bf	8b 55 d8	 mov	 edx, DWORD PTR $T17[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  005c2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005c3	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  005c5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  005cb	72 14		 jb	 SHORT $LN616@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005cd	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  005d0	83 c1 23	 add	 ecx, 35			; 00000023H
  005d3	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005d5	83 c0 fc	 add	 eax, -4			; fffffffcH
  005d8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005db	0f 87 b3 03 00
	00		 ja	 $LN983@init
$LN616@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  005e1	51		 push	 ecx
  005e2	52		 push	 edx
  005e3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005e8	83 c4 08	 add	 esp, 8
$LN605@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 611  :     insert("pi",POLY_PI);

  005eb	68 00 00 00 00	 push	 OFFSET ??_C@_02OAHAJOFD@pi@
  005f0	8d 4d d8	 lea	 ecx, DWORD PTR $T18[ebp]
  005f3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  005f8	6a 0a		 push	 10			; 0000000aH
  005fa	8d 45 d8	 lea	 eax, DWORD PTR $T18[ebp]
  005fd	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 16 ; 00000010H
  00604	50		 push	 eax
  00605	8b ce		 mov	 ecx, esi
  00607	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0060c	8b 4d ec	 mov	 ecx, DWORD PTR $T18[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 611  :     insert("pi",POLY_PI);

  0060f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00616	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00619	76 2c		 jbe	 SHORT $LN642@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0061b	8b 55 d8	 mov	 edx, DWORD PTR $T18[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0061e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0061f	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00621	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00627	72 14		 jb	 SHORT $LN653@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00629	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0062c	83 c1 23	 add	 ecx, 35			; 00000023H
  0062f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00631	83 c0 fc	 add	 eax, -4			; fffffffcH
  00634	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00637	0f 87 57 03 00
	00		 ja	 $LN983@init
$LN653@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0063d	51		 push	 ecx
  0063e	52		 push	 edx
  0063f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00644	83 c4 08	 add	 esp, 8
$LN642@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 612  :     SetVar("pi",3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068);

  00647	68 00 00 00 00	 push	 OFFSET ??_C@_02OAHAJOFD@pi@
  0064c	8d 4d d8	 lea	 ecx, DWORD PTR $T19[ebp]
  0064f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00654	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@400921fb54442d18
  0065c	8d 45 d8	 lea	 eax, DWORD PTR $T19[ebp]
  0065f	83 ec 08	 sub	 esp, 8
  00662	8b ce		 mov	 ecx, esi
  00664	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00669	50		 push	 eax
  0066a	e8 00 00 00 00	 call	 ?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; CPoly::SetVar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0066f	8b 4d ec	 mov	 ecx, DWORD PTR $T19[ebp+20]
  00672	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00675	76 2c		 jbe	 SHORT $LN679@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00677	8b 55 d8	 mov	 edx, DWORD PTR $T19[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0067a	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0067b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0067d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00683	72 14		 jb	 SHORT $LN690@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00685	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00688	83 c1 23	 add	 ecx, 35			; 00000023H
  0068b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0068d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00690	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00693	0f 87 fb 02 00
	00		 ja	 $LN983@init
$LN690@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00699	51		 push	 ecx
  0069a	52		 push	 edx
  0069b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006a0	83 c4 08	 add	 esp, 8
$LN679@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 613  :     insert("e",POLY_EXP);

  006a3	68 00 00 00 00	 push	 OFFSET ??_C@_01KGKMHCOC@e@
  006a8	8d 4d d8	 lea	 ecx, DWORD PTR $T20[ebp]
  006ab	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  006b0	6a 0a		 push	 10			; 0000000aH
  006b2	8d 45 d8	 lea	 eax, DWORD PTR $T20[ebp]
  006b5	c7 45 fc 11 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 17 ; 00000011H
  006bc	50		 push	 eax
  006bd	8b ce		 mov	 ecx, esi
  006bf	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  006c4	8b 4d ec	 mov	 ecx, DWORD PTR $T20[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 613  :     insert("e",POLY_EXP);

  006c7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  006ce	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  006d1	76 2c		 jbe	 SHORT $LN716@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006d3	8b 55 d8	 mov	 edx, DWORD PTR $T20[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  006d6	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006d7	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  006d9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  006df	72 14		 jb	 SHORT $LN727@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  006e1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  006e4	83 c1 23	 add	 ecx, 35			; 00000023H
  006e7	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  006e9	83 c0 fc	 add	 eax, -4			; fffffffcH
  006ec	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  006ef	0f 87 9f 02 00
	00		 ja	 $LN983@init
$LN727@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  006f5	51		 push	 ecx
  006f6	52		 push	 edx
  006f7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  006fc	83 c4 08	 add	 esp, 8
$LN716@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 614  :     SetVar("e",2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427);

  006ff	68 00 00 00 00	 push	 OFFSET ??_C@_01KGKMHCOC@e@
  00704	8d 4d d8	 lea	 ecx, DWORD PTR $T21[ebp]
  00707	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0070c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4005bf0a8b145769
  00714	8d 45 d8	 lea	 eax, DWORD PTR $T21[ebp]
  00717	83 ec 08	 sub	 esp, 8
  0071a	8b ce		 mov	 ecx, esi
  0071c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00721	50		 push	 eax
  00722	e8 00 00 00 00	 call	 ?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ; CPoly::SetVar
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00727	8b 4d ec	 mov	 ecx, DWORD PTR $T21[ebp+20]
  0072a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0072d	76 2c		 jbe	 SHORT $LN753@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0072f	8b 55 d8	 mov	 edx, DWORD PTR $T21[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00732	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00733	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00735	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0073b	72 14		 jb	 SHORT $LN764@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0073d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00740	83 c1 23	 add	 ecx, 35			; 00000023H
  00743	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00745	83 c0 fc	 add	 eax, -4			; fffffffcH
  00748	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0074b	0f 87 43 02 00
	00		 ja	 $LN983@init
$LN764@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00751	51		 push	 ecx
  00752	52		 push	 edx
  00753	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00758	83 c4 08	 add	 esp, 8
$LN753@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 615  :     insert("log",POLY_LOG);

  0075b	68 00 00 00 00	 push	 OFFSET ??_C@_03MGHMBJCF@log@
  00760	8d 4d d8	 lea	 ecx, DWORD PTR $T22[ebp]
  00763	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00768	6a 12		 push	 18			; 00000012H
  0076a	8d 45 d8	 lea	 eax, DWORD PTR $T22[ebp]
  0076d	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00774	50		 push	 eax
  00775	8b ce		 mov	 ecx, esi
  00777	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0077c	8b 4d ec	 mov	 ecx, DWORD PTR $T22[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 615  :     insert("log",POLY_LOG);

  0077f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00786	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00789	76 2c		 jbe	 SHORT $LN790@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0078b	8b 55 d8	 mov	 edx, DWORD PTR $T22[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0078e	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0078f	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00791	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00797	72 14		 jb	 SHORT $LN801@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00799	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0079c	83 c1 23	 add	 ecx, 35			; 00000023H
  0079f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007a1	83 c0 fc	 add	 eax, -4			; fffffffcH
  007a4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  007a7	0f 87 e7 01 00
	00		 ja	 $LN983@init
$LN801@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  007ad	51		 push	 ecx
  007ae	52		 push	 edx
  007af	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  007b4	83 c4 08	 add	 esp, 8
$LN790@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 616  :     insert("ln",POLY_LN);

  007b7	68 00 00 00 00	 push	 OFFSET ??_C@_02LKANFCIA@ln@
  007bc	8d 4d d8	 lea	 ecx, DWORD PTR $T23[ebp]
  007bf	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007c4	6a 13		 push	 19			; 00000013H
  007c6	8d 45 d8	 lea	 eax, DWORD PTR $T23[ebp]
  007c9	c7 45 fc 13 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 19 ; 00000013H
  007d0	50		 push	 eax
  007d1	8b ce		 mov	 ecx, esi
  007d3	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  007d8	8b 4d ec	 mov	 ecx, DWORD PTR $T23[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 616  :     insert("ln",POLY_LN);

  007db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  007e2	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  007e5	76 2c		 jbe	 SHORT $LN827@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007e7	8b 55 d8	 mov	 edx, DWORD PTR $T23[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  007ea	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007eb	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  007ed	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  007f3	72 14		 jb	 SHORT $LN838@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  007f5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  007f8	83 c1 23	 add	 ecx, 35			; 00000023H
  007fb	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007fd	83 c0 fc	 add	 eax, -4			; fffffffcH
  00800	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00803	0f 87 8b 01 00
	00		 ja	 $LN983@init
$LN838@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00809	51		 push	 ecx
  0080a	52		 push	 edx
  0080b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00810	83 c4 08	 add	 esp, 8
$LN827@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 617  :     insert("log10",POLY_LOG10);

  00813	68 00 00 00 00	 push	 OFFSET ??_C@_05HGHHAHAP@log10@
  00818	8d 4d d8	 lea	 ecx, DWORD PTR $T24[ebp]
  0081b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00820	6a 14		 push	 20			; 00000014H
  00822	8d 45 d8	 lea	 eax, DWORD PTR $T24[ebp]
  00825	c7 45 fc 14 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 20 ; 00000014H
  0082c	50		 push	 eax
  0082d	8b ce		 mov	 ecx, esi
  0082f	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00834	8b 4d ec	 mov	 ecx, DWORD PTR $T24[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 617  :     insert("log10",POLY_LOG10);

  00837	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0083e	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00841	76 2c		 jbe	 SHORT $LN864@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00843	8b 55 d8	 mov	 edx, DWORD PTR $T24[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00846	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00847	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00849	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0084f	72 14		 jb	 SHORT $LN875@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00851	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00854	83 c1 23	 add	 ecx, 35			; 00000023H
  00857	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00859	83 c0 fc	 add	 eax, -4			; fffffffcH
  0085c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0085f	0f 87 2f 01 00
	00		 ja	 $LN983@init
$LN875@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00865	51		 push	 ecx
  00866	52		 push	 edx
  00867	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0086c	83 c4 08	 add	 esp, 8
$LN864@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 618  :     insert("abs",POLY_ABS);

  0086f	68 00 00 00 00	 push	 OFFSET ??_C@_03BCGAIFPO@abs@
  00874	8d 4d d8	 lea	 ecx, DWORD PTR $T25[ebp]
  00877	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0087c	6a 15		 push	 21			; 00000015H
  0087e	8d 45 d8	 lea	 eax, DWORD PTR $T25[ebp]
  00881	c7 45 fc 15 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 21 ; 00000015H
  00888	50		 push	 eax
  00889	8b ce		 mov	 ecx, esi
  0088b	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00890	8b 4d ec	 mov	 ecx, DWORD PTR $T25[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 618  :     insert("abs",POLY_ABS);

  00893	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0089a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0089d	76 2c		 jbe	 SHORT $LN901@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0089f	8b 55 d8	 mov	 edx, DWORD PTR $T25[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  008a2	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008a3	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  008a5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  008ab	72 14		 jb	 SHORT $LN912@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  008ad	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  008b0	83 c1 23	 add	 ecx, 35			; 00000023H
  008b3	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  008b5	83 c0 fc	 add	 eax, -4			; fffffffcH
  008b8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  008bb	0f 87 d3 00 00
	00		 ja	 $LN983@init
$LN912@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  008c1	51		 push	 ecx
  008c2	52		 push	 edx
  008c3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  008c8	83 c4 08	 add	 esp, 8
$LN901@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 619  :     insert("mod",POLY_MOD);

  008cb	68 00 00 00 00	 push	 OFFSET ??_C@_03FFONCNID@mod@
  008d0	8d 4d d8	 lea	 ecx, DWORD PTR $T26[ebp]
  008d3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  008d8	6a 1a		 push	 26			; 0000001aH
  008da	8d 45 d8	 lea	 eax, DWORD PTR $T26[ebp]
  008dd	c7 45 fc 16 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 22 ; 00000016H
  008e4	50		 push	 eax
  008e5	8b ce		 mov	 ecx, esi
  008e7	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  008ec	8b 4d ec	 mov	 ecx, DWORD PTR $T26[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 619  :     insert("mod",POLY_MOD);

  008ef	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  008f6	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  008f9	76 28		 jbe	 SHORT $LN938@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008fb	8b 55 d8	 mov	 edx, DWORD PTR $T26[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  008fe	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008ff	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00901	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00907	72 10		 jb	 SHORT $LN949@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00909	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0090c	83 c1 23	 add	 ecx, 35			; 00000023H
  0090f	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00911	83 c0 fc	 add	 eax, -4			; fffffffcH
  00914	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00917	77 7b		 ja	 SHORT $LN983@init
$LN949@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00919	51		 push	 ecx
  0091a	52		 push	 edx
  0091b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00920	83 c4 08	 add	 esp, 8
$LN938@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 620  :     insert("floor",POLY_FLOOR);

  00923	68 00 00 00 00	 push	 OFFSET ??_C@_05PBJFFIGL@floor@
  00928	8d 4d d8	 lea	 ecx, DWORD PTR $T27[ebp]
  0092b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00930	6a 1b		 push	 27			; 0000001bH
  00932	8d 45 d8	 lea	 eax, DWORD PTR $T27[ebp]
  00935	c7 45 fc 17 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 23 ; 00000017H
  0093c	50		 push	 eax
  0093d	8b ce		 mov	 ecx, esi
  0093f	e8 00 00 00 00	 call	 ?insert@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CPoly::insert
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00944	8b 4d ec	 mov	 ecx, DWORD PTR $T27[ebp+20]
  00947	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0094a	76 28		 jbe	 SHORT $LN975@init
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0094c	8b 55 d8	 mov	 edx, DWORD PTR $T27[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0094f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00950	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00952	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00958	72 10		 jb	 SHORT $LN986@init

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0095a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0095d	83 c1 23	 add	 ecx, 35			; 00000023H
  00960	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00962	83 c0 fc	 add	 eax, -4			; fffffffcH
  00965	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00968	77 2a		 ja	 SHORT $LN983@init
$LN986@init:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0096a	51		 push	 ecx
  0096b	52		 push	 edx
  0096c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00971	83 c4 08	 add	 esp, 8
$LN975@init:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 621  : 	MathSymbolCount = STSize;

  00974	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00977	89 46 5c	 mov	 DWORD PTR [esi+92], eax

; 622  : }

  0097a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0097d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00984	59		 pop	 ecx
  00985	5e		 pop	 esi
  00986	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00989	33 cd		 xor	 ecx, ebp
  0098b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00990	8b e5		 mov	 esp, ebp
  00992	5d		 pop	 ebp
  00993	c3		 ret	 0
$LN983@init:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00994	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN993@init:
  00999	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?init@CPoly@@IAEXXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$3:
  00018	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$4:
  00020	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$5:
  00028	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$6:
  00030	8d 4d d8	 lea	 ecx, DWORD PTR $T8[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$7:
  00038	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$8:
  00040	8d 4d d8	 lea	 ecx, DWORD PTR $T10[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$9:
  00048	8d 4d d8	 lea	 ecx, DWORD PTR $T11[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$10:
  00050	8d 4d d8	 lea	 ecx, DWORD PTR $T12[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$11:
  00058	8d 4d d8	 lea	 ecx, DWORD PTR $T13[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$12:
  00060	8d 4d d8	 lea	 ecx, DWORD PTR $T14[ebp]
  00063	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$13:
  00068	8d 4d d8	 lea	 ecx, DWORD PTR $T15[ebp]
  0006b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$14:
  00070	8d 4d d8	 lea	 ecx, DWORD PTR $T16[ebp]
  00073	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$15:
  00078	8d 4d d8	 lea	 ecx, DWORD PTR $T17[ebp]
  0007b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$16:
  00080	8d 4d d8	 lea	 ecx, DWORD PTR $T18[ebp]
  00083	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$18:
  00088	8d 4d d8	 lea	 ecx, DWORD PTR $T20[ebp]
  0008b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$20:
  00090	8d 4d d8	 lea	 ecx, DWORD PTR $T22[ebp]
  00093	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$21:
  00098	8d 4d d8	 lea	 ecx, DWORD PTR $T23[ebp]
  0009b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$22:
  000a0	8d 4d d8	 lea	 ecx, DWORD PTR $T24[ebp]
  000a3	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$23:
  000a8	8d 4d d8	 lea	 ecx, DWORD PTR $T25[ebp]
  000ab	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$24:
  000b0	8d 4d d8	 lea	 ecx, DWORD PTR $T26[ebp]
  000b3	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?init@CPoly@@IAEXXZ$25:
  000b8	8d 4d d8	 lea	 ecx, DWORD PTR $T27[ebp]
  000bb	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c0	cc		 int	 3
  000c1	cc		 int	 3
  000c2	cc		 int	 3
  000c3	cc		 int	 3
  000c4	cc		 int	 3
__ehhandler$?init@CPoly@@IAEXXZ:
  000c5	90		 npad	 1
  000c6	90		 npad	 1
  000c7	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000cb	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000ce	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  000d1	33 c8		 xor	 ecx, eax
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000db	33 c8		 xor	 ecx, eax
  000dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e2	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?init@CPoly@@IAEXXZ
  000e7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?init@CPoly@@IAEXXZ ENDP				; CPoly::init
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?my_frandom@CPoly@@IAENNN@Z
_TEXT	SEGMENT
_start$ = 8						; size = 8
_end$ = 16						; size = 8
?my_frandom@CPoly@@IAENNN@Z PROC			; CPoly::my_frandom, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   :     return _random() * (end - start) + start;

  00003	e8 00 00 00 00	 call	 ?_random@@YANXZ		; _random
  00008	dd 45 10	 fld	 QWORD PTR _end$[ebp]
  0000b	dd 45 08	 fld	 QWORD PTR _start$[ebp]
  0000e	dc e9		 fsub	 ST(1), ST(0)
  00010	d9 ca		 fxch	 ST(2)
  00012	de c9		 fmulp	 ST(1), ST(0)
  00014	de c1		 faddp	 ST(1), ST(0)

; 44   : }

  00016	5d		 pop	 ebp
  00017	c2 10 00	 ret	 16			; 00000010H
?my_frandom@CPoly@@IAENNN@Z ENDP			; CPoly::my_frandom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?my_irandom@CPoly@@IAEHNN@Z
_TEXT	SEGMENT
_start$ = 8						; size = 8
_end$ = 16						; size = 8
tv88 = 16						; size = 8
tv90 = 16						; size = 8
tv129 = 16						; size = 8
?my_irandom@CPoly@@IAEHNN@Z PROC			; CPoly::my_irandom, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 24   : 	switch (m_iRandomType)

  00003	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  00006	83 e8 01	 sub	 eax, 1
  00009	74 66		 je	 SHORT $LN4@my_irandom
  0000b	83 e8 01	 sub	 eax, 1
  0000e	74 58		 je	 SHORT $LN5@my_irandom

; 31   : 			break;
; 32   : 	}
; 33   : 
; 34   :     // Make range as inclusive-exclusive
; 35   :     int is = int(start + 0.5);
; 36   :     int ie = int(end - start + 0.5) + 1;
; 37   : 
; 38   :     return int(_random() * ie + is);

  00010	e8 00 00 00 00	 call	 ?_random@@YANXZ		; _random
  00015	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR _end$[ebp]
  0001a	f2 0f 10 55 08	 movsd	 xmm2, QWORD PTR _start$[ebp]
  0001f	f2 0f 5c c2	 subsd	 xmm0, xmm2
  00023	f2 0f 58 15 00
	00 00 00	 addsd	 xmm2, QWORD PTR __real@3fe0000000000000
  0002b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00033	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00037	40		 inc	 eax
  00038	66 0f 6e c0	 movd	 xmm0, eax
  0003c	f2 0f 2c c2	 cvttsd2si eax, xmm2
  00040	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00044	f2 0f 11 45 10	 movsd	 QWORD PTR tv129[ebp], xmm0
  00049	dc 4d 10	 fmul	 QWORD PTR tv129[ebp]
  0004c	66 0f 6e c0	 movd	 xmm0, eax
  00050	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00054	f2 0f 11 45 10	 movsd	 QWORD PTR tv90[ebp], xmm0
  00059	dc 45 10	 fadd	 QWORD PTR tv90[ebp]
  0005c	dd 5d 10	 fstp	 QWORD PTR tv88[ebp]
  0005f	f2 0f 2c 45 10	 cvttsd2si eax, QWORD PTR tv88[ebp]

; 39   : }

  00064	5d		 pop	 ebp
  00065	c2 10 00	 ret	 16			; 00000010H
$LN5@my_irandom:

; 28   : 			break;
; 29   : 		case RANDOM_TYPE_FORCE_MAX:
; 30   : 			return int(end);

  00068	f2 0f 2c 45 10	 cvttsd2si eax, QWORD PTR _end$[ebp]

; 39   : }

  0006d	5d		 pop	 ebp
  0006e	c2 10 00	 ret	 16			; 00000010H
$LN4@my_irandom:

; 25   : 	{
; 26   : 		case RANDOM_TYPE_FORCE_MIN:
; 27   : 			return int(start);

  00071	f2 0f 2c 45 08	 cvttsd2si eax, QWORD PTR _start$[ebp]

; 39   : }

  00076	5d		 pop	 ebp
  00077	c2 10 00	 ret	 16			; 00000010H
?my_irandom@CPoly@@IAEHNN@Z ENDP			; CPoly::my_irandom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?Clear@CPoly@@QAEXXZ
_TEXT	SEGMENT
?Clear@CPoly@@QAEXXZ PROC				; CPoly::Clear, COMDAT
; _this$ = ecx

; 259  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00003	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00006	3b 46 2c	 cmp	 eax, DWORD PTR [esi+44]
  00009	74 03		 je	 SHORT $LN9@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0000b	89 46 2c	 mov	 DWORD PTR [esi+44], eax
$LN9@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0000e	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00011	3b 46 38	 cmp	 eax, DWORD PTR [esi+56]
  00014	74 03		 je	 SHORT $LN13@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00016	89 46 38	 mov	 DWORD PTR [esi+56], eax
$LN13@Clear:
  00019	57		 push	 edi
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 266  :     for (i = 0;i < STSize; ++i)

  0001a	33 ff		 xor	 edi, edi
  0001c	39 7e 58	 cmp	 DWORD PTR [esi+88], edi
  0001f	7e 20		 jle	 SHORT $LN38@Clear
$LL4@Clear:

; 267  :     {
; 268  : 	if (lSymbol[i]) delete lSymbol[i];

  00021	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00024	8b 0c b8	 mov	 ecx, DWORD PTR [eax+edi*4]
  00027	85 c9		 test	 ecx, ecx
  00029	74 06		 je	 SHORT $LN7@Clear
  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	6a 01		 push	 1
  0002f	ff 10		 call	 DWORD PTR [eax]
$LN7@Clear:

; 269  : 	lSymbol[i]=NULL;

  00031	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00034	c7 04 b8 00 00
	00 00		 mov	 DWORD PTR [eax+edi*4], 0
  0003b	47		 inc	 edi
  0003c	3b 7e 58	 cmp	 edi, DWORD PTR [esi+88]
  0003f	7c e0		 jl	 SHORT $LL4@Clear
$LN38@Clear:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00041	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00044	5f		 pop	 edi
  00045	3b 46 44	 cmp	 eax, DWORD PTR [esi+68]
  00048	74 03		 je	 SHORT $LN26@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  0004a	89 46 44	 mov	 DWORD PTR [esi+68], eax
$LN26@Clear:

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0004d	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00050	3b 46 50	 cmp	 eax, DWORD PTR [esi+80]
  00053	74 03		 je	 SHORT $LN39@Clear

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  00055	89 46 50	 mov	 DWORD PTR [esi+80], eax
$LN39@Clear:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 276  : }

  00058	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
  0005f	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00066	5e		 pop	 esi
  00067	c3		 ret	 0
?Clear@CPoly@@QAEXXZ ENDP				; CPoly::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?GetVarName@CPoly@@QAEPBDI@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
?GetVarName@CPoly@@QAEPBDI@Z PROC			; CPoly::GetVarName, COMDAT
; _this$ = ecx

; 588  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00003	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  00006	03 55 08	 add	 edx, DWORD PTR _dwIndex$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2328 :         return _Mypair._Myval2._Myptr();

  00009	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  0000c	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0000f	83 c0 14	 add	 eax, 20			; 00000014H

; 434  :         return _Myres > _Small_string_capacity;

  00012	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 426  :         if (_Large_mode_engaged()) {

  00016	76 02		 jbe	 SHORT $LN10@GetVarName
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 590  : 	return lSymbol[dwIndex + MathSymbolCount]->strlex.c_str();

  00018	8b 00		 mov	 eax, DWORD PTR [eax]
$LN10@GetVarName:

; 591  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetVarName@CPoly@@QAEPBDI@Z ENDP			; CPoly::GetVarName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?GetVarCount@CPoly@@QAEHXZ
_TEXT	SEGMENT
?GetVarCount@CPoly@@QAEHXZ PROC				; CPoly::GetVarCount, COMDAT
; _this$ = ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1900 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
  00003	2b 41 40	 sub	 eax, DWORD PTR [ecx+64]
  00006	c1 f8 02	 sar	 eax, 2
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 584  : 	return lSymbol.size() - MathSymbolCount;

  00009	2b 41 5c	 sub	 eax, DWORD PTR [ecx+92]

; 585  : }

  0000c	c3		 ret	 0
?GetVarCount@CPoly@@QAEHXZ ENDP				; CPoly::GetVarCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z
_TEXT	SEGMENT
_strName$ = 8						; size = 4
_dVar$ = 12						; size = 8
?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z PROC ; CPoly::SetVar, COMDAT
; _this$ = ecx

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 573  : 
; 574  :     if (ErrorOccur) return false;

  00006	80 7e 20 00	 cmp	 BYTE PTR [esi+32], 0
  0000a	75 27		 jne	 SHORT $LN8@SetVar

; 575  :     int index=find(strName);

  0000c	ff 75 08	 push	 DWORD PTR _strName$[ebp]
  0000f	e8 00 00 00 00	 call	 ?find@CPoly@@IAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPoly::find

; 576  :     if (index==-1) return false;

  00014	83 f8 ff	 cmp	 eax, -1
  00017	74 1a		 je	 SHORT $LN8@SetVar

; 577  :     CSymTable* stVar = lSymbol[(/*FindIndex*/(index))];
; 578  :     stVar->dVal=dVar;

  00019	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0001c	f2 0f 10 45 0c	 movsd	 xmm0, QWORD PTR _dVar$[ebp]
  00021	5e		 pop	 esi
  00022	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00025	f2 0f 11 40 08	 movsd	 QWORD PTR [eax+8], xmm0

; 579  :     return true;

  0002a	b8 01 00 00 00	 mov	 eax, 1

; 580  : }

  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN8@SetVar:

; 576  :     if (index==-1) return false;

  00033	33 c0		 xor	 eax, eax
  00035	5e		 pop	 esi

; 580  : }

  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
?SetVar@CPoly@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@N@Z ENDP ; CPoly::SetVar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?SetStr@CPoly@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
_str$ = 8						; size = 4
?SetStr@CPoly@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPoly::SetStr, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 64   : {

  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi

; 65   :     strData = str;

  0000a	8d 71 60	 lea	 esi, DWORD PTR [ecx+96]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1371 :         if (this == _STD addressof(_Right)) {

  0000d	3b f0		 cmp	 esi, eax
  0000f	0f 84 02 01 00
	00		 je	 $LN29@SetStr

; 434  :         return _Myres > _Small_string_capacity;

  00015	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH
  00019	57		 push	 edi

; 1410 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0001a	8b 78 10	 mov	 edi, DWORD PTR [eax+16]

; 426  :         if (_Large_mode_engaged()) {

  0001d	76 05		 jbe	 SHORT $LN7@SetStr

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 45 08	 mov	 DWORD PTR _str$[ebp], eax
$LN7@SetStr:

; 1594 :         if (_Count <= _Mypair._Myval2._Myres) {

  00024	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00027	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  0002a	53		 push	 ebx
  0002b	3b f9		 cmp	 edi, ecx
  0002d	77 24		 ja	 SHORT $LN14@SetStr

; 416  :         value_type* _Result = _Bx._Buf;

  0002f	8b de		 mov	 ebx, esi

; 434  :         return _Myres > _Small_string_capacity;

  00031	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00034	76 02		 jbe	 SHORT $LN17@SetStr

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00036	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN17@SetStr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	57		 push	 edi
  00039	50		 push	 eax
  0003a	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1597 :             _Mypair._Myval2._Mysize = _Count;

  0003b	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 148  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0003e	e8 00 00 00 00	 call	 _memmove
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1599 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00046	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
  0004a	5b		 pop	 ebx
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 66   : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
$LN14@SetStr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2962 :         if (_New_size > max_size()) {

  00053	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00059	0f 87 c4 00 00
	00		 ja	 $LN104@SetStr

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0005f	8b df		 mov	 ebx, edi
  00061	83 cb 0f	 or	 ebx, 15			; 0000000fH
  00064	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006a	76 12		 jbe	 SHORT $LN35@SetStr

; 2944 :             return _Max;

  0006c	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00071	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007c	eb 45		 jmp	 SHORT $LN102@SetStr
$LN35@SetStr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0007e	8b d1		 mov	 edx, ecx
  00080	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00085	d1 ea		 shr	 edx, 1
  00087	2b c2		 sub	 eax, edx
  00089	3b c8		 cmp	 ecx, eax
  0008b	76 12		 jbe	 SHORT $LN36@SetStr

; 2948 :             return _Max;

  0008d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00092	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009d	eb 24		 jmp	 SHORT $LN102@SetStr
$LN36@SetStr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0009f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  000a2	3b d8		 cmp	 ebx, eax
  000a4	0f 42 d8	 cmovb	 ebx, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  000a7	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  000aa	85 c0		 test	 eax, eax
  000ac	74 18		 je	 SHORT $LN101@SetStr
$LN49@SetStr:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  000ae	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b3	72 08		 jb	 SHORT $LN50@SetStr

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000bb	eb 06		 jmp	 SHORT $LN102@SetStr
$LN50@SetStr:

; 136  :         return ::operator new(_Bytes);

  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN102@SetStr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000c3	83 c4 04	 add	 esp, 4
$LN101@SetStr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c6	57		 push	 edi
  000c7	ff 75 08	 push	 DWORD PTR _str$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2974 :         _Mypair._Myval2._Myres  = _New_capacity;

  000ca	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cd	8b d8		 mov	 ebx, eax
  000cf	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2973 :         _Mypair._Myval2._Mysize = _New_size;

  000d0	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000d3	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d6	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000db	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000de	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 1608 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000e1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 2976 :         if (_Old_capacity > _Small_string_capacity) {

  000e5	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  000e8	76 29		 jbe	 SHORT $LN28@SetStr

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000ea	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	8b 06		 mov	 eax, DWORD PTR [esi]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000ef	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f5	72 12		 jb	 SHORT $LN78@SetStr

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fa	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fd	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ff	83 c0 fc	 add	 eax, -4			; fffffffcH
  00102	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00105	77 17		 ja	 SHORT $LN75@SetStr

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00107	8b c2		 mov	 eax, edx
$LN78@SetStr:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00109	51		 push	 ecx
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00110	83 c4 08	 add	 esp, 8
$LN28@SetStr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2980 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00113	89 1e		 mov	 DWORD PTR [esi], ebx
  00115	5b		 pop	 ebx
  00116	5f		 pop	 edi
$LN29@SetStr:
  00117	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 66   : }

  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 04 00	 ret	 4
$LN75@SetStr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN104@SetStr:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2963 :             _Xlen_string(); // result too long

  00123	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN100@SetStr:
  00128	cc		 int	 3
?SetStr@CPoly@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPoly::SetStr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?SetRandom@CPoly@@QAEXH@Z
_TEXT	SEGMENT
_iRandomType$ = 8					; size = 4
?SetRandom@CPoly@@QAEXH@Z PROC				; CPoly::SetRandom, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 19   : 	m_iRandomType = iRandomType;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iRandomType$[ebp]
  00006	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 20   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetRandom@CPoly@@QAEXH@Z ENDP				; CPoly::SetRandom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?Eval@CPoly@@QAEMXZ
_TEXT	SEGMENT
_iSp$1$ = -828						; size = 4
tv1313 = -824						; size = 4
_this$1$ = -820						; size = 4
tv1353 = -820						; size = 4
tv1219 = -816						; size = 8
tv1287 = -816						; size = 8
_t$3$ = -816						; size = 8
_save$ = -808						; size = 800
__$ArrayPad$ = -4					; size = 4
?Eval@CPoly@@QAEMXZ PROC				; CPoly::Eval, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 40 03 00
	00		 sub	 esp, 832		; 00000340H
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	33 c4		 xor	 eax, esp
  00013	89 84 24 3c 03
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+832], eax
  0001a	8b c1		 mov	 eax, ecx

; 70   :     int stNow;
; 71   :     double save[POLY_MAXSTACK],t;
; 72   :     int iSp=0;

  0001c	33 d2		 xor	 edx, edx
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	89 44 24 14	 mov	 DWORD PTR _this$1$[esp+840], eax
  00024	89 54 24 0c	 mov	 DWORD PTR _iSp$1$[esp+840], edx

; 73   :     if (ErrorOccur)

  00028	38 50 20	 cmp	 BYTE PTR [eax+32], dl
  0002b	0f 85 90 04 00
	00		 jne	 $LN43@Eval
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00031	8b 70 28	 mov	 esi, DWORD PTR [eax+40]
  00034	8b 78 34	 mov	 edi, DWORD PTR [eax+52]
  00037	3b 70 2c	 cmp	 esi, DWORD PTR [eax+44]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 84   :     while (pos != tokenBase.end())

  0003a	0f 84 61 04 00
	00		 je	 $LN3@Eval
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1827 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00040	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  00048	8d 4c 24 20	 lea	 ecx, DWORD PTR _save$[esp+840]
  0004c	83 e9 10	 sub	 ecx, 16			; 00000010H
  0004f	89 4c 24 10	 mov	 DWORD PTR tv1313[esp+840], ecx
$LL2@Eval:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 87   : 	stNow=*pos;

  00053	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  00055	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 89   : 	switch (stNow)

  00058	48		 dec	 eax
  00059	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  0005c	0f 87 5f 04 00
	00		 ja	 $LN43@Eval
  00062	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN119@Eval[eax*4]
$LN7@Eval:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 292  :         _Vector_iterator _Tmp = *this;

  00069	8b c7		 mov	 eax, edi

; 82   :         ++_Ptr;

  0006b	83 c7 08	 add	 edi, 8
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 92   : 		save[iSp++]=*posn++; break;

  0006e	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00072	f2 0f 11 44 d4
	20		 movsd	 QWORD PTR _save$[esp+edx*8+840], xmm0
  00078	42		 inc	 edx
  00079	83 c1 08	 add	 ecx, 8
  0007c	e9 0b 04 00 00	 jmp	 $LN122@Eval
$LN8@Eval:

; 94   : 		save[iSp++]=

  00081	8b 44 24 14	 mov	 eax, DWORD PTR _this$1$[esp+840]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1919 :         return _My_data._Myfirst[_Pos];

  00085	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 94   : 		save[iSp++]=

  00087	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0008a	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0008d	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]
  00091	83 c1 08	 add	 ecx, 8
  00094	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [eax+8]
  00099	f2 0f 11 44 d4
	20		 movsd	 QWORD PTR _save$[esp+edx*8+840], xmm0
  0009f	42		 inc	 edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 82   :         ++_Ptr;

  000a0	83 c6 04	 add	 esi, 4
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 97   : 		break;

  000a3	e9 e4 03 00 00	 jmp	 $LN122@Eval
$LN9@Eval:

; 98   : 		//case '+':
; 99   : 	    case POLY_PLU:
; 100  : 		iSp--;
; 101  : 		save[iSp-1]+=save[iSp]; break;

  000a8	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  000ae	4a		 dec	 edx
  000af	f2 0f 58 44 d4
	18		 addsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  000b5	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  000bb	e9 c9 03 00 00	 jmp	 $LN123@Eval
$LN10@Eval:

; 102  : 		//case '-':
; 103  : 	    case POLY_MIN:
; 104  : 		iSp--;
; 105  : 		save[iSp-1]-=save[iSp]; break;

  000c0	f2 0f 10 44 d4
	10		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+824]
  000c6	4a		 dec	 edx
  000c7	f2 0f 5c 44 d4
	20		 subsd	 xmm0, QWORD PTR _save$[esp+edx*8+840]
  000cd	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  000d3	e9 b1 03 00 00	 jmp	 $LN123@Eval
$LN11@Eval:

; 106  : 		//case '*':
; 107  : 	    case POLY_MUL:
; 108  : 		iSp--;
; 109  : 		save[iSp-1]*=save[iSp]; break;

  000d8	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  000de	4a		 dec	 edx
  000df	f2 0f 59 44 d4
	18		 mulsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  000e5	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  000eb	e9 99 03 00 00	 jmp	 $LN123@Eval
$LN12@Eval:

; 110  : 		//case '%':
; 111  : 	    case POLY_MOD:
; 112  : 		iSp--;
; 113  : 		if (save[iSp]==0)

  000f0	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  000f6	4a		 dec	 edx
  000f7	83 e9 08	 sub	 ecx, 8
  000fa	89 54 24 0c	 mov	 DWORD PTR _iSp$1$[esp+840], edx
  000fe	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00106	89 4c 24 10	 mov	 DWORD PTR tv1313[esp+840], ecx
  0010a	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv1219[esp+840], xmm0
  00110	9f		 lahf
  00111	f6 c4 44	 test	 ah, 68			; 00000044H
  00114	0f 8b a7 03 00
	00		 jnp	 $LN43@Eval

; 114  : 		{
; 115  : 		    //THROW(new CEvalException("Divide by 0"));
; 116  : 		    return 0;
; 117  : 		}
; 118  : 		save[iSp-1]=fmod(save[iSp-1],save[iSp]); break;

  0011a	dd 44 d4 18	 fld	 QWORD PTR _save$[esp+edx*8+832]
  0011e	dd 44 24 18	 fld	 QWORD PTR tv1219[esp+840]
  00122	e8 00 00 00 00	 call	 __CIfmod
$LN126@Eval:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00127	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  0012b	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  00133	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]
  00137	dd 5c d4 18	 fstp	 QWORD PTR _save$[esp+edx*8+832]
  0013b	e9 54 03 00 00	 jmp	 $LN4@Eval
$LN14@Eval:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 122  : 		if (save[iSp]==0)

  00140	f2 0f 10 4c d4
	18		 movsd	 xmm1, QWORD PTR _save$[esp+edx*8+832]
  00146	4a		 dec	 edx
  00147	83 e9 08	 sub	 ecx, 8
  0014a	89 54 24 0c	 mov	 DWORD PTR _iSp$1$[esp+840], edx
  0014e	66 0f 2e 0d 00
	00 00 00	 ucomisd xmm1, QWORD PTR __real@0000000000000000
  00156	89 4c 24 10	 mov	 DWORD PTR tv1313[esp+840], ecx
  0015a	9f		 lahf
  0015b	f6 c4 44	 test	 ah, 68			; 00000044H
  0015e	0f 8b 5d 03 00
	00		 jnp	 $LN43@Eval

; 123  : 		{
; 124  : 		    //THROW(new CEvalException("Divide by 0"));
; 125  : 		    return 0;
; 126  : 		}
; 127  : 		save[iSp-1]/=save[iSp]; break;

  00164	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  0016a	f2 0f 5e c1	 divsd	 xmm0, xmm1
  0016e	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  00174	e9 1b 03 00 00	 jmp	 $LN4@Eval
$LN16@Eval:

; 128  : 		//case '^':
; 129  : 	    case POLY_POW:
; 130  : 		iSp--;
; 131  : 		save[iSp-1]=pow(save[iSp-1],save[iSp]); break;

  00179	f2 0f 10 44 d4
	10		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+824]
  0017f	4a		 dec	 edx
  00180	83 e9 08	 sub	 ecx, 8
  00183	89 54 24 0c	 mov	 DWORD PTR _iSp$1$[esp+840], edx
  00187	89 4c 24 10	 mov	 DWORD PTR tv1313[esp+840], ecx
  0018b	f2 0f 10 4c d4
	20		 movsd	 xmm1, QWORD PTR _save$[esp+edx*8+840]
  00191	e8 00 00 00 00	 call	 __libm_sse2_pow_precise
  00196	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  0019a	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  001a2	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]
  001a6	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  001ac	e9 e3 02 00 00	 jmp	 $LN4@Eval
$LN17@Eval:

; 132  : 	    case POLY_ROOT:
; 133  : 		if (save[iSp-1]<0)

  001b1	f2 0f 10 54 d4
	18		 movsd	 xmm2, QWORD PTR _save$[esp+edx*8+832]
  001b7	0f 57 c0	 xorps	 xmm0, xmm0
  001ba	66 0f 2f c2	 comisd	 xmm0, xmm2
  001be	0f 87 fd 02 00
	00		 ja	 $LN43@Eval

; 134  : 		{
; 135  : 		    //THROW(new CEvalException("Negative in root"));
; 136  : 		    return 0;
; 137  : 		}
; 138  : 		save[iSp-1]=sqrt(save[iSp-1]); break;

  001c4	0f 57 c9	 xorps	 xmm1, xmm1
  001c7	0f 28 c2	 movaps	 xmm0, xmm2
  001ca	66 0f 2e c8	 ucomisd xmm1, xmm0
  001ce	77 06		 ja	 SHORT $LN120@Eval
  001d0	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  001d4	eb 05		 jmp	 SHORT $LN121@Eval
$LN120@Eval:
  001d6	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN121@Eval:
  001db	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  001df	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  001e7	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]
  001eb	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  001f1	e9 9e 02 00 00	 jmp	 $LN4@Eval
$LN19@Eval:

; 139  : 	    case POLY_COS:
; 140  : 		save[iSp-1]=cos(save[iSp-1]); break;

  001f6	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  001fc	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00201	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  00205	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  0020d	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]
  00211	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  00217	e9 78 02 00 00	 jmp	 $LN4@Eval
$LN20@Eval:

; 141  : 	    case POLY_SIN:
; 142  : 		save[iSp-1]=sin(save[iSp-1]); break;

  0021c	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  00222	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00227	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  0022b	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  00233	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]
  00237	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  0023d	e9 52 02 00 00	 jmp	 $LN4@Eval
$LN21@Eval:

; 143  : 	    case POLY_TAN:
; 144  : 		if (!(t=cos(save[iSp-1])))

  00242	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  00248	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0024d	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00255	9f		 lahf
  00256	f6 c4 44	 test	 ah, 68			; 00000044H
  00259	0f 8b 62 02 00
	00		 jnp	 $LN43@Eval

; 145  : 		{
; 146  : 		    //THROW (new CEvalException("Divide by 0"));
; 147  : 		    return 0;
; 148  : 		}
; 149  : 		save[iSp-1]=tan(save[iSp-1]); break;

  0025f	8b 44 24 0c	 mov	 eax, DWORD PTR _iSp$1$[esp+840]
  00263	f2 0f 10 44 c4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+eax*8+832]
  00269	e8 00 00 00 00	 call	 __libm_sse2_tan_precise
  0026e	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  00272	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  0027a	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]
  0027e	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  00284	e9 0b 02 00 00	 jmp	 $LN4@Eval
$LN23@Eval:

; 150  : 	    case POLY_CSC:
; 151  : 		if (!(t=sin(save[iSp-1])))

  00289	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  0028f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
$LN127@Eval:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00294	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0029c	9f		 lahf
  0029d	f6 c4 44	 test	 ah, 68			; 00000044H
  002a0	0f 8b 1b 02 00
	00		 jnp	 $LN43@Eval
  002a6	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  002ae	0f 28 cb	 movaps	 xmm1, xmm3
  002b1	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  002b5	f2 0f 5e c8	 divsd	 xmm1, xmm0
  002b9	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]
  002bd	f2 0f 11 4c d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm1
  002c3	e9 cc 01 00 00	 jmp	 $LN4@Eval
$LN25@Eval:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 158  : 		if (!(t=cos(save[iSp-1])))

  002c8	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  002ce	e8 00 00 00 00	 call	 __libm_sse2_cos_precise

; 159  : 		{
; 160  : 		    //THROW(new CEvalException("Divide by 0"));
; 161  : 		    return 0;
; 162  : 		}
; 163  : 		save[iSp-1]=1/t; break;

  002d3	eb bf		 jmp	 SHORT $LN127@Eval
$LN27@Eval:

; 164  : 	    case POLY_COT:
; 165  : 		if (!(t=sin(save[iSp-1])))

  002d5	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  002db	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  002e0	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  002e8	f2 0f 11 44 24
	18		 movsd	 QWORD PTR _t$3$[esp+840], xmm0
  002ee	9f		 lahf
  002ef	f6 c4 44	 test	 ah, 68			; 00000044H
  002f2	0f 8b c9 01 00
	00		 jnp	 $LN43@Eval

; 166  : 		{
; 167  : 		    //THROW(new CEvalException("Divide by 0"));
; 168  : 		    return 0;
; 169  : 		}
; 170  : 		save[iSp-1]=cos(save[iSp-1])/t; break;

  002f8	8b 44 24 0c	 mov	 eax, DWORD PTR _iSp$1$[esp+840]
  002fc	f2 0f 10 44 c4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+eax*8+832]
  00302	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00307	f2 0f 5e 44 24
	18		 divsd	 xmm0, QWORD PTR _t$3$[esp+840]
$LN129@Eval:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0030d	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]
  00311	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  00319	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]
  0031d	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0
  00323	e9 6c 01 00 00	 jmp	 $LN4@Eval
$LN29@Eval:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 172  : 		if (save[iSp-1]<=0)

  00328	f2 0f 10 4c d4
	18		 movsd	 xmm1, QWORD PTR _save$[esp+edx*8+832]
  0032e	0f 57 c0	 xorps	 xmm0, xmm0
  00331	66 0f 2f c1	 comisd	 xmm0, xmm1
  00335	0f 83 86 01 00
	00		 jae	 $LN43@Eval

; 173  : 		{
; 174  : 		    //THROW( new CEvalException("Call Log with minus number"));
; 175  : 		    return 0;
; 176  : 		}
; 177  : 		save[iSp-1]=log(save[iSp-1]); break;

  0033b	0f 28 c1	 movaps	 xmm0, xmm1
  0033e	e8 00 00 00 00	 call	 __libm_sse2_log_precise
  00343	eb c8		 jmp	 SHORT $LN129@Eval
$LN31@Eval:

; 178  : 	    case POLY_LOG10:
; 179  : 		if (save[iSp-1]<=0)

  00345	f2 0f 10 4c d4
	18		 movsd	 xmm1, QWORD PTR _save$[esp+edx*8+832]
  0034b	0f 57 c0	 xorps	 xmm0, xmm0
  0034e	66 0f 2f c1	 comisd	 xmm0, xmm1
  00352	0f 83 69 01 00
	00		 jae	 $LN43@Eval

; 180  : 		{
; 181  : 		    //THROW( new CEvalException("Call Log with minus number"));
; 182  : 		    return 0;
; 183  : 		}
; 184  : 		save[iSp-1]=log10(save[iSp-1]); break;

  00358	0f 28 c1	 movaps	 xmm0, xmm1
  0035b	e8 00 00 00 00	 call	 __libm_sse2_log10_precise
  00360	eb ab		 jmp	 SHORT $LN129@Eval
$LN33@Eval:

; 185  : 	    case POLY_LOG:
; 186  : 		if (save[iSp-1]<=0)

  00362	f2 0f 10 54 d4
	18		 movsd	 xmm2, QWORD PTR _save$[esp+edx*8+832]
  00368	0f 57 c0	 xorps	 xmm0, xmm0
  0036b	66 0f 2f c2	 comisd	 xmm0, xmm2
  0036f	0f 83 4c 01 00
	00		 jae	 $LN43@Eval

; 187  : 		{
; 188  : 		    //THROW( new CEvalException("Call Log with minus number"));
; 189  : 		    return 0;
; 190  : 		}
; 191  : 		if (save[iSp-2]<=0 || save[iSp-2]==1)

  00375	f2 0f 10 09	 movsd	 xmm1, QWORD PTR [ecx]
  00379	66 0f 2f c1	 comisd	 xmm0, xmm1
  0037d	0f 83 3e 01 00
	00		 jae	 $LN43@Eval
  00383	66 0f 2e cb	 ucomisd xmm1, xmm3
  00387	9f		 lahf
  00388	f6 c4 44	 test	 ah, 68			; 00000044H
  0038b	0f 8b 30 01 00
	00		 jnp	 $LN43@Eval

; 192  : 		{
; 193  : 		    //THROW( new CEvalException("Call Log with minus number"));
; 194  : 		    return 0;
; 195  : 		}
; 196  : 
; 197  : 		save[iSp-2]=log(save[iSp-1])/log(save[iSp-2]);

  00391	0f 28 c2	 movaps	 xmm0, xmm2
  00394	e8 00 00 00 00	 call	 __libm_sse2_log_precise
  00399	8b 44 24 10	 mov	 eax, DWORD PTR tv1313[esp+840]
  0039d	f2 0f 11 44 24
	18		 movsd	 QWORD PTR tv1287[esp+840], xmm0
  003a3	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  003a7	e8 00 00 00 00	 call	 __libm_sse2_log_precise
  003ac	f2 0f 10 4c 24
	18		 movsd	 xmm1, QWORD PTR tv1287[esp+840]
  003b2	f2 0f 5e c8	 divsd	 xmm1, xmm0
  003b6	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]

; 198  : 		iSp--;

  003ba	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]

; 199  : 		break;

  003be	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  003c6	f2 0f 11 09	 movsd	 QWORD PTR [ecx], xmm1
  003ca	e9 b9 00 00 00	 jmp	 $LN124@Eval
$LN37@Eval:

; 200  : 	    case POLY_ABS:
; 201  : 		save[iSp-1]=fabs(save[iSp-1]);

  003cf	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  003d5	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  003dc	f2 0f 11 44 d4
	18		 movsd	 QWORD PTR _save$[esp+edx*8+832], xmm0

; 202  : 		break;

  003e2	e9 ad 00 00 00	 jmp	 $LN4@Eval
$LN38@Eval:

; 203  : 		case POLY_FLOOR:
; 204  : 		save[iSp-1]=floor(save[iSp-1]);

  003e7	dd 44 d4 18	 fld	 QWORD PTR _save$[esp+edx*8+832]
  003eb	83 ec 08	 sub	 esp, 8
  003ee	dd 1c 24	 fstp	 QWORD PTR [esp]
  003f1	e8 00 00 00 00	 call	 _floor
  003f6	83 c4 08	 add	 esp, 8

; 205  : 		break;

  003f9	e9 29 fd ff ff	 jmp	 $LN126@Eval
$LN39@Eval:

; 206  : 	    case POLY_IRAND:
; 207  : 		save[iSp-2]=my_irandom(save[iSp-2],save[iSp-1]);

  003fe	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  00404	83 ec 10	 sub	 esp, 16			; 00000010H
  00407	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  0040d	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00411	8b 4c 24 24	 mov	 ecx, DWORD PTR _this$1$[esp+856]
  00415	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0041a	e8 00 00 00 00	 call	 ?my_irandom@CPoly@@IAEHNN@Z ; CPoly::my_irandom
  0041f	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]

; 208  : 		iSp--;

  00423	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]

; 209  : 		break;

  00427	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  0042f	66 0f 6e c0	 movd	 xmm0, eax
  00433	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00437	eb 4b		 jmp	 SHORT $LN125@Eval
$LN40@Eval:

; 210  : 	    case POLY_FRAND:
; 211  : 		save[iSp-2]=my_frandom(save[iSp-2],save[iSp-1]);

  00439	f2 0f 10 44 d4
	18		 movsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
  0043f	83 ec 10	 sub	 esp, 16			; 00000010H
  00442	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  00448	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0044c	8b 4c 24 24	 mov	 ecx, DWORD PTR _this$1$[esp+856]
  00450	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00455	e8 00 00 00 00	 call	 ?my_frandom@CPoly@@IAENNN@Z ; CPoly::my_frandom
  0045a	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1313[esp+840]

; 212  : 		iSp--;

  0045e	8b 54 24 0c	 mov	 edx, DWORD PTR _iSp$1$[esp+840]

; 213  : 		break;

  00462	f2 0f 10 1d 00
	00 00 00	 movsd	 xmm3, QWORD PTR __real@3ff0000000000000
  0046a	dd 19		 fstp	 QWORD PTR [ecx]
  0046c	eb 1a		 jmp	 SHORT $LN124@Eval
$LN41@Eval:

; 214  : 	    case POLY_MINF:
; 215  : 		save[iSp-2]=(save[iSp-2]<save[iSp-1])?save[iSp-2]:save[iSp-1];

  0046e	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00472	f2 0f 5d 44 d4
	18		 minsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]

; 216  : 		iSp--;
; 217  : 		break;

  00478	eb 0a		 jmp	 SHORT $LN125@Eval
$LN42@Eval:

; 218  : 	    case POLY_MAXF:
; 219  : 		save[iSp-2]=(save[iSp-2]>save[iSp-1])?save[iSp-2]:save[iSp-1];

  0047a	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  0047e	f2 0f 5f 44 d4
	18		 maxsd	 xmm0, QWORD PTR _save$[esp+edx*8+832]
$LN125@Eval:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 46   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00484	f2 0f 11 01	 movsd	 QWORD PTR [ecx], xmm0
$LN124@Eval:
  00488	4a		 dec	 edx
$LN123@Eval:
  00489	83 e9 08	 sub	 ecx, 8
$LN122@Eval:
  0048c	89 4c 24 10	 mov	 DWORD PTR tv1313[esp+840], ecx
  00490	89 54 24 0c	 mov	 DWORD PTR _iSp$1$[esp+840], edx
$LN4@Eval:
  00494	8b 44 24 14	 mov	 eax, DWORD PTR _this$1$[esp+840]
  00498	3b 70 2c	 cmp	 esi, DWORD PTR [eax+44]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 84   :     while (pos != tokenBase.end())

  0049b	0f 85 b2 fb ff
	ff		 jne	 $LL2@Eval
$LN3@Eval:

; 220  : 		iSp--;
; 221  : 		break;
; 222  : 		/*case POLY_MOD:
; 223  : 		  save[iSp-2]=fmod(save[iSp-2],save[iSp-1]);
; 224  : 		  iSp--;
; 225  : 		  break;*/
; 226  : 	    default:
; 227  : 		return 0;
; 228  : 		//THROW(new CEvalException("Token Error"));
; 229  : 	}
; 230  :     }
; 231  :     return float(save[iSp-1]);

  004a1	dd 44 d4 18	 fld	 QWORD PTR _save$[esp+edx*8+832]
  004a5	d9 5c 24 14	 fstp	 DWORD PTR tv1353[esp+840]
  004a9	d9 44 24 14	 fld	 DWORD PTR tv1353[esp+840]

; 232  : }

  004ad	5f		 pop	 edi
  004ae	5e		 pop	 esi
  004af	8b 8c 24 3c 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+832]
  004b6	33 cc		 xor	 ecx, esp
  004b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004bd	8b e5		 mov	 esp, ebp
  004bf	5d		 pop	 ebp
  004c0	c3		 ret	 0
$LN43@Eval:
  004c1	8b 8c 24 44 03
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+840]
  004c8	d9 ee		 fldz
  004ca	5f		 pop	 edi
  004cb	5e		 pop	 esi
  004cc	33 cc		 xor	 ecx, esp
  004ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004d3	8b e5		 mov	 esp, ebp
  004d5	5d		 pop	 ebp
  004d6	c3		 ret	 0
  004d7	90		 npad	 1
$LN119@Eval:
  004d8	00 00 00 00	 DD	 $LN17@Eval
  004dc	00 00 00 00	 DD	 $LN11@Eval
  004e0	00 00 00 00	 DD	 $LN9@Eval
  004e4	00 00 00 00	 DD	 $LN16@Eval
  004e8	00 00 00 00	 DD	 $LN10@Eval
  004ec	00 00 00 00	 DD	 $LN14@Eval
  004f0	00 00 00 00	 DD	 $LN43@Eval
  004f4	00 00 00 00	 DD	 $LN43@Eval
  004f8	00 00 00 00	 DD	 $LN7@Eval
  004fc	00 00 00 00	 DD	 $LN8@Eval
  00500	00 00 00 00	 DD	 $LN43@Eval
  00504	00 00 00 00	 DD	 $LN19@Eval
  00508	00 00 00 00	 DD	 $LN20@Eval
  0050c	00 00 00 00	 DD	 $LN21@Eval
  00510	00 00 00 00	 DD	 $LN23@Eval
  00514	00 00 00 00	 DD	 $LN25@Eval
  00518	00 00 00 00	 DD	 $LN27@Eval
  0051c	00 00 00 00	 DD	 $LN33@Eval
  00520	00 00 00 00	 DD	 $LN29@Eval
  00524	00 00 00 00	 DD	 $LN31@Eval
  00528	00 00 00 00	 DD	 $LN37@Eval
  0052c	00 00 00 00	 DD	 $LN41@Eval
  00530	00 00 00 00	 DD	 $LN42@Eval
  00534	00 00 00 00	 DD	 $LN39@Eval
  00538	00 00 00 00	 DD	 $LN40@Eval
  0053c	00 00 00 00	 DD	 $LN12@Eval
  00540	00 00 00 00	 DD	 $LN38@Eval
?Eval@CPoly@@QAEMXZ ENDP				; CPoly::Eval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ?Analyze@CPoly@@QAEHPBD@Z
_TEXT	SEGMENT
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszStr$ = 8						; size = 4
?Analyze@CPoly@@QAEHPBD@Z PROC				; CPoly::Analyze, COMDAT
; _this$ = ecx

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Analyze@CPoly@@QAEHPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _pszStr$[ebp]

; 236  :     if (pszStr)

  0002e	85 c0		 test	 eax, eax
  00030	74 52		 je	 SHORT $LN27@Analyze

; 237  : 	SetStr(pszStr);

  00032	50		 push	 eax
  00033	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00036	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003b	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	50		 push	 eax
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?SetStr@CPoly@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPoly::SetStr
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0004d	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 237  : 	SetStr(pszStr);

  00050	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  00057	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  0005a	76 28		 jbe	 SHORT $LN27@Analyze
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005c	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0005f	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00060	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00062	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00068	72 10		 jb	 SHORT $LN38@Analyze

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0006a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006d	83 c1 23	 add	 ecx, 35			; 00000023H
  00070	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00072	83 c0 fc	 add	 eax, -4			; fffffffcH
  00075	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00078	77 63		 ja	 SHORT $LN51@Analyze
$LN38@Analyze:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	52		 push	 edx
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00081	83 c4 08	 add	 esp, 8
$LN27@Analyze:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 239  :     if (0 == strData.length())

  00084	83 7e 70 00	 cmp	 DWORD PTR [esi+112], 0
  00088	75 07		 jne	 SHORT $LN3@Analyze

; 240  : 	return true;

  0008a	b8 01 00 00 00	 mov	 eax, 1
  0008f	eb 30		 jmp	 SHORT $LN1@Analyze
$LN3@Analyze:

; 241  : 
; 242  :     //DisposeList();
; 243  :     ErrorOccur = false;
; 244  :     uiLookPos = 0;
; 245  :     iLookAhead = lexan();

  00091	8b ce		 mov	 ecx, esi
  00093	c6 46 20 00	 mov	 BYTE PTR [esi+32], 0
  00097	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  0009e	e8 00 00 00 00	 call	 ?lexan@CPoly@@IAEHXZ	; CPoly::lexan

; 246  : 
; 247  :     expr();

  000a3	8b ce		 mov	 ecx, esi
  000a5	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000a8	e8 00 00 00 00	 call	 ?expr@CPoly@@IAEXXZ	; CPoly::expr
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1895 :         return _My_data._Myfirst == _My_data._Mylast;

  000ad	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  000b0	3b 46 2c	 cmp	 eax, DWORD PTR [esi+44]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 249  :     if (tokenBase.empty())

  000b3	75 04		 jne	 SHORT $LN4@Analyze

; 250  :     {
; 251  : 	//THROW(new CParseException("No Data"));
; 252  : 	return false;

  000b5	33 c0		 xor	 eax, eax
  000b7	eb 08		 jmp	 SHORT $LN1@Analyze
$LN4@Analyze:

; 253  :     }
; 254  : 
; 255  :     return !ErrorOccur;

  000b9	33 c0		 xor	 eax, eax
  000bb	38 46 20	 cmp	 BYTE PTR [esi+32], al
  000be	0f 94 c0	 sete	 al
$LN1@Analyze:

; 256  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5e		 pop	 esi
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 04 00	 ret	 4
$LN51@Analyze:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000dd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN49@Analyze:
  000e2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Analyze@CPoly@@QAEHPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Analyze@CPoly@@QAEHPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Analyze@CPoly@@QAEHPBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Analyze@CPoly@@QAEHPBD@Z ENDP				; CPoly::Analyze
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ??1CPoly@@UAE@XZ
_TEXT	SEGMENT
??1CPoly@@UAE@XZ PROC					; CPoly::~CPoly, COMDAT
; _this$ = ecx

; 59   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPoly@@6B@

; 60   :     Clear();

  00009	e8 00 00 00 00	 call	 ?Clear@CPoly@@QAEXXZ	; CPoly::Clear
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 434  :         return _Myres > _Small_string_capacity;

  0000e	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00011	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00014	76 2c		 jbe	 SHORT $LN24@CPoly
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00016	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00019	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 16		 jb	 SHORT $LN35@CPoly

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00022	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00025	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00028	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00030	0f 87 48 01 00
	00		 ja	 $LN146@CPoly

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	8b c2		 mov	 eax, edx
$LN35@CPoly:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00038	51		 push	 ecx
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003f	83 c4 08	 add	 esp, 8
$LN24@CPoly:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00042	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00049	c7 46 74 0f 00
	00 00		 mov	 DWORD PTR [esi+116], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00050	c6 46 60 00	 mov	 BYTE PTR [esi+96], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00054	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00057	85 c0		 test	 eax, eax
  00059	74 45		 je	 SHORT $LN46@CPoly

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0005b	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0005e	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00060	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00063	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00069	72 16		 jb	 SHORT $LN65@CPoly

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0006b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00071	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00073	83 c0 fc	 add	 eax, -4			; fffffffcH
  00076	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00079	0f 87 ff 00 00
	00		 ja	 $LN146@CPoly

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0007f	8b c2		 mov	 eax, edx
$LN65@CPoly:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00081	51		 push	 ecx
  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00088	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0008f	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00092	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 2082 :             _Myend   = nullptr;

  00099	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
$LN46@CPoly:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  000a0	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  000a3	85 c0		 test	 eax, eax
  000a5	74 45		 je	 SHORT $LN74@CPoly

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000a7	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000aa	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ac	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000af	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b5	72 16		 jb	 SHORT $LN93@CPoly

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000b7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ba	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000bd	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000bf	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c5	0f 87 b3 00 00
	00		 ja	 $LN146@CPoly

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000cb	8b c2		 mov	 eax, edx
$LN93@CPoly:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000cd	51		 push	 ecx
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  000d4	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  000db	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  000de	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 2082 :             _Myend   = nullptr;

  000e5	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
$LN74@CPoly:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  000ec	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  000ef	85 c0		 test	 eax, eax
  000f1	74 41		 je	 SHORT $LN102@CPoly

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000f3	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  000f6	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f8	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000fb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00101	72 12		 jb	 SHORT $LN121@CPoly

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00103	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00106	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00109	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0010e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00111	77 6b		 ja	 SHORT $LN146@CPoly

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00113	8b c2		 mov	 eax, edx
$LN121@CPoly:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00115	51		 push	 ecx
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  0011c	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00123	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  00126	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 2082 :             _Myend   = nullptr;

  0012d	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN102@CPoly:

; 2075 :         if (_Myfirst) { // destroy and deallocate old array

  00134	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00137	85 c0		 test	 eax, eax
  00139	74 41		 je	 SHORT $LN130@CPoly

; 2076 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2077 :             _ASAN_VECTOR_REMOVE;
; 2078 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0013b	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0013e	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00140	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00143	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00149	72 12		 jb	 SHORT $LN149@CPoly

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0014b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0014e	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00151	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00153	83 c0 fc	 add	 eax, -4			; fffffffcH
  00156	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00159	77 23		 ja	 SHORT $LN146@CPoly

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0015b	8b c2		 mov	 eax, edx
$LN149@CPoly:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0015d	51		 push	 ecx
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2080 :             _Myfirst = nullptr;

  00164	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0016b	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2081 :             _Mylast  = nullptr;

  0016e	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 2082 :             _Myend   = nullptr;

  00175	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN130@CPoly:
  0017c	5e		 pop	 esi
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 61   : }

  0017d	c3		 ret	 0
$LN146@CPoly:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN169@CPoly:
  00183	cc		 int	 3
??1CPoly@@UAE@XZ ENDP					; CPoly::~CPoly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp
;	COMDAT ??0CPoly@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Size$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPoly@@QAE@XZ PROC					; CPoly::CPoly, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPoly@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPoly@@6B@
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00032	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00039	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  00040	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 47   : {

  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0004e	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00055	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0005c	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00063	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  0006a	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  00071	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  00078	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  0007f	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  00086	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 47   : {

  0008d	0f 57 c0	 xorps	 xmm0, xmm0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00090	0f 11 46 60	 movups	 XMMWORD PTR [esi+96], xmm0

; 836  :         _My_data._Mysize = 0;

  00094	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0

; 837  :         _My_data._Myres  = _Small_string_capacity;

  0009b	c7 46 74 0f 00
	00 00		 mov	 DWORD PTR [esi+116], 15	; 0000000fH

; 838  :         _My_data._Activate_SSO_buffer();
; 839  : 
; 840  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 841  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000a2	c6 46 60 00	 mov	 BYTE PTR [esi+96], 0
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 48   : 	m_iRandomType = RANDOM_TYPE_FREELY;

  000a6	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0

; 49   :     uiLookPos = 0;

  000ad	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 50   :     ErrorOccur = true;

  000b4	c6 46 20 01	 mov	 BYTE PTR [esi+32], 1
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000b8	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 47   : {

  000bb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1797 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000bf	3b 46 44	 cmp	 eax, DWORD PTR [esi+68]
  000c2	74 03		 je	 SHORT $LN64@CPoly

; 1798 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1799 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1800 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1801 :             return;
; 1802 :         }
; 1803 : 
; 1804 :         _My_data._Orphan_all();
; 1805 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1806 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1807 :         _Mylast = _Myfirst;

  000c4	89 46 44	 mov	 DWORD PTR [esi+68], eax
$LN64@CPoly:

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000c7	8b c8		 mov	 ecx, eax
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 52   :     STSize = 0;

  000c9	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 53   : 	MathSymbolCount = 0;

  000d0	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1909 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000d7	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000da	2b c1		 sub	 eax, ecx
  000dc	c1 f8 02	 sar	 eax, 2

; 1710 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  000df	83 f8 32	 cmp	 eax, 50			; 00000032H
  000e2	73 6e		 jae	 SHORT $LN138@CPoly

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  000e4	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000e7	2b c1		 sub	 eax, ecx
  000e9	c1 f8 02	 sar	 eax, 2
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000ec	68 c8 00 00 00	 push	 200			; 000000c8H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 1634 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  000f1	89 45 f0	 mov	 DWORD PTR __Size$1$[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 136  :         return ::operator new(_Bytes);

  000f4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 256  :         return _Traits::_Allocate(_Bytes);

  000f9	8b f8		 mov	 edi, eax

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  000fb	57		 push	 edi
  000fc	ff 76 44	 push	 DWORD PTR [esi+68]
  000ff	ff 76 40	 push	 DWORD PTR [esi+64]
  00102	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSymTable@@PAPAV1@@std@@YAPAPAVCSymTable@@PAPAV1@00@Z ; std::_Copy_memmove<CSymTable * *,CSymTable * *>
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  00107	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 1955 :             _STD _Copy_memmove(_UFirst, _ULast, _STD _Unfancy(_Dest));

  0010a	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2054 :         if (_Myfirst) { // destroy and deallocate old array

  0010d	85 c0		 test	 eax, eax
  0010f	74 2c		 je	 SHORT $LN114@CPoly

; 2055 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);
; 2056 :             _ASAN_VECTOR_REMOVE;
; 2057 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00111	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00114	2b c8		 sub	 ecx, eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00116	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00119	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011f	72 12		 jb	 SHORT $LN125@CPoly

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00121	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00124	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00127	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00129	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012f	77 3b		 ja	 SHORT $LN122@CPoly

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00131	8b c2		 mov	 eax, edx
$LN125@CPoly:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00133	51		 push	 ecx
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013a	83 c4 08	 add	 esp, 8
$LN114@CPoly:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vector

; 2061 :         _Mylast  = _Newvec + _Newsize;

  0013d	8b 45 f0	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00140	89 7e 40	 mov	 DWORD PTR [esi+64], edi
  00143	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00146	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 2062 :         _Myend   = _Newvec + _Newcapacity;

  00149	8d 87 c8 00 00
	00		 lea	 eax, DWORD PTR [edi+200]
  0014f	89 46 48	 mov	 DWORD PTR [esi+72], eax
$LN138@CPoly:
; File C:\Marty 5.5\Src-Client\Client\EterBase\poly\Poly.cpp

; 55   :     init();

  00152	8b ce		 mov	 ecx, esi
  00154	e8 00 00 00 00	 call	 ?init@CPoly@@IAEXXZ	; CPoly::init

; 56   : }

  00159	8b c6		 mov	 eax, esi
  0015b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00165	59		 pop	 ecx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c3		 ret	 0
$LN122@CPoly:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN156@CPoly:
  00171	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPoly@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 28	 add	 ecx, 40			; 00000028H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0CPoly@@QAE@XZ$1:
  0000b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 34	 add	 ecx, 52			; 00000034H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
__unwindfunclet$??0CPoly@@QAE@XZ$2:
  00016	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 40	 add	 ecx, 64			; 00000040H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCSymTable@@V?$allocator@PAVCSymTable@@@std@@@std@@QAE@XZ ; std::vector<CSymTable *,std::allocator<CSymTable *> >::~vector<CSymTable *,std::allocator<CSymTable *> >
__unwindfunclet$??0CPoly@@QAE@XZ$3:
  00021	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 4c	 add	 ecx, 76			; 0000004cH
  00027	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0CPoly@@QAE@XZ$4:
  0002c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 60	 add	 ecx, 96			; 00000060H
  00032	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
__ehhandler$??0CPoly@@QAE@XZ:
  0003c	90		 npad	 1
  0003d	90		 npad	 1
  0003e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00042	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00045	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00048	33 c8		 xor	 ecx, eax
  0004a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPoly@@QAE@XZ
  00054	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPoly@@QAE@XZ ENDP					; CPoly::CPoly
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
tv515 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 2265 :     _CONSTEXPR20 void push_back(const _Elem _Ch) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 2266 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 2267 :         if (_Old_size < _Mypair._Myval2._Myres) {

  0000a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000d	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00010	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00013	3b d9		 cmp	 ebx, ecx
  00015	73 20		 jae	 SHORT $LN2@push_back

; 2268 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + 1);
; 2269 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00017	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 434  :         return _Myres > _Small_string_capacity;

  0001d	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 417  :         if (_Large_mode_engaged()) {

  00020	76 02		 jbe	 SHORT $LN5@push_back

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00022	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@push_back:

; 2270 :             _Elem* const _Ptr       = _Mypair._Myval2._Myptr();
; 2271 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  00024	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00027	88 04 1e	 mov	 BYTE PTR [esi+ebx], al

; 2272 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0002a	c6 44 1e 01 00	 mov	 BYTE PTR [esi+ebx+1], 0
  0002f	5e		 pop	 esi

; 2285 :     }

  00030	5b		 pop	 ebx
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN2@push_back:

; 2993 :         if (max_size() - _Old_size < _Size_increase) {

  00037	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  0003c	8b c2		 mov	 eax, edx
  0003e	2b c3		 sub	 eax, ebx
  00040	83 f8 01	 cmp	 eax, 1
  00043	0f 82 e6 00 00
	00		 jb	 $LN90@push_back
  00049	57		 push	 edi

; 2995 :         }
; 2996 : 
; 2997 :         const size_type _New_size     = _Old_size + _Size_increase;

  0004a	8d 7b 01	 lea	 edi, DWORD PTR [ebx+1]

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  0004d	83 cf 0f	 or	 edi, 15			; 0000000fH
  00050	3b fa		 cmp	 edi, edx

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00052	76 0f		 jbe	 SHORT $LN20@push_back

; 2944 :             return _Max;

  00054	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00059	8b fa		 mov	 edi, edx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	eb 3f		 jmp	 SHORT $LN87@push_back
$LN20@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2947 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00063	8b c1		 mov	 eax, ecx
  00065	d1 e8		 shr	 eax, 1
  00067	2b d0		 sub	 edx, eax
  00069	3b ca		 cmp	 ecx, edx
  0006b	76 12		 jbe	 SHORT $LN21@push_back

; 2948 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	eb 23		 jmp	 SHORT $LN87@push_back
$LN21@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0007f	03 c1		 add	 eax, ecx
  00081	3b f8		 cmp	 edi, eax
  00083	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  00086	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  00089	85 c0		 test	 eax, eax
  0008b	74 1b		 je	 SHORT $LN86@push_back
$LN34@push_back:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0008d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00092	72 08		 jb	 SHORT $LN35@push_back

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009a	eb 06		 jmp	 SHORT $LN87@push_back
$LN35@push_back:

; 136  :         return ::operator new(_Bytes);

  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN87@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3005 :         _My_data._Mysize      = _New_size;

  000a2	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  000a5	83 c4 04	 add	 esp, 4
$LN86@push_back:

; 3006 :         _My_data._Myres       = _New_capacity;

  000a8	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  000ab	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  000ae	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax

; 3007 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b1	8d 3c 18	 lea	 edi, DWORD PTR [eax+ebx]
  000b4	89 56 10	 mov	 DWORD PTR [esi+16], edx
  000b7	89 7d f4	 mov	 DWORD PTR tv515[ebp], edi

; 3008 :         if (_Old_capacity > _Small_string_capacity) {

  000ba	53		 push	 ebx
  000bb	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  000be	76 4e		 jbe	 SHORT $LN13@push_back

; 3009 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c0	8b 3e		 mov	 edi, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c2	57		 push	 edi
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR tv515[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  000cf	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  000d2	88 01		 mov	 BYTE PTR [ecx], al

; 2282 :                     _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  000d4	c6 41 01 00	 mov	 BYTE PTR [ecx+1], 0

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000d8	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  000db	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000dc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e2	72 12		 jb	 SHORT $LN63@push_back

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000e4	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000e7	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000ea	2b fa		 sub	 edi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ec	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000ef	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f2	77 40		 ja	 SHORT $LN60@push_back

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f4	8b fa		 mov	 edi, edx
$LN63@push_back:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000f6	51		 push	 ecx
  000f7	57		 push	 edi
  000f8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000fd	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00100	83 c4 08	 add	 esp, 8
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00103	89 06		 mov	 DWORD PTR [esi], eax
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi

; 2285 :     }

  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 04 00	 ret	 4
$LN13@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0010e	56		 push	 esi
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  00115	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00118	83 c4 0c	 add	 esp, 12			; 0000000cH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2281 :                     _Traits::assign(_New_ptr[_Old_size], _Ch);

  0011b	88 07		 mov	 BYTE PTR [edi], al

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]

; 2282 :                     _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00120	c6 47 01 00	 mov	 BYTE PTR [edi+1], 0
  00124	5f		 pop	 edi

; 3015 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00125	89 06		 mov	 DWORD PTR [esi], eax
  00127	5e		 pop	 esi

; 2285 :     }

  00128	5b		 pop	 ebx
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 04 00	 ret	 4
$LN90@push_back:

; 2994 :             _Xlen_string(); // result too long

  0012f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN60@push_back:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00134	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@push_back:
  00139	cc		 int	 3
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1358 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3047 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN19@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 981  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 828  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN30@basic_stri

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN27@basic_stri

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN30@basic_stri:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN19@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 3054 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3055 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3056 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3057 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 1366 :     }

  00044	c3		 ret	 0
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 744  :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 498  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 430  :             return __builtin_strlen(_First);

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL51@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL51@basic_stri
  0002c	2b f1		 sub	 esi, ecx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 857  :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 9b 00 00
	00		 ja	 $LN62@basic_stri

; 859  :         }
; 860  : 
; 861  :         auto& _Al       = _Getal();
; 862  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 863  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 864  : 
; 865  :         if (_Count <= _Small_string_capacity) {

  0003a	83 fe 0f	 cmp	 esi, 15			; 0000000fH
  0003d	77 24		 ja	 SHORT $LN21@basic_stri
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003f	56		 push	 esi
  00040	57		 push	 edi
  00041	53		 push	 ebx
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 866  :             _My_data._Mysize = _Count;

  00042	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 867  :             _My_data._Myres  = _Small_string_capacity;

  00045	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 874  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00051	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN21@basic_stri:

; 2942 :         const size_type _Masked = _Requested | _Alloc_mask;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 2943 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 12		 jbe	 SHORT $LN27@basic_stri

; 2944 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	eb 26		 jmp	 SHORT $LN60@basic_stri
$LN27@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 2951 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00082	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00087	3b f8		 cmp	 edi, eax
  00089	0f 42 f8	 cmovb	 edi, eax

; 801  :         ++_Capacity; // Take null terminator into consideration

  0008c	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory

; 227  :     if (_Bytes == 0) {

  0008f	85 c0		 test	 eax, eax
  00091	74 18		 je	 SHORT $LN59@basic_stri
$LN41@basic_stri:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  00093	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00098	72 08		 jb	 SHORT $LN42@basic_stri

; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	eb 06		 jmp	 SHORT $LN60@basic_stri
$LN42@basic_stri:

; 136  :         return ::operator new(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
$LN60@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000a8	83 c4 04	 add	 esp, 4
$LN59@basic_stri:
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ab	56		 push	 esi
  000ac	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000af	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b2	50		 push	 eax
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 889  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b3	89 03		 mov	 DWORD PTR [ebx], eax

; 890  : 
; 891  :         _My_data._Mysize = _Count;

  000b5	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 892  :         _My_data._Myres  = _New_capacity;

  000b8	89 7b 14	 mov	 DWORD PTR [ebx+20], edi
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\__msvc_string_view.hpp

; 95   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bb	e8 00 00 00 00	 call	 _memcpy
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c0	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	5f		 pop	 edi

; 898  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c7	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 745  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 746  :     }

  000cb	8b c3		 mov	 eax, ebx
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 04 00	 ret	 4
$LN62@basic_stri:

; 858  :             _Xlen_string(); // result too long

  000d5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN57@basic_stri:
  000da	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 512  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
